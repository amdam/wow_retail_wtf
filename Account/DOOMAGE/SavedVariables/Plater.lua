
PlaterDB = {
["captured_spells"] = {
[107029] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Mutated Corruption",
["isChanneled"] = false,
["encounterID"] = 1299,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56471,
},
[108601] = {
["encounterName"] = "Madness of Deathwing",
["type"] = "DEBUFF",
["source"] = "Deathwing",
["encounterID"] = 1299,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 56173,
},
[106834] = {
["encounterName"] = "Madness of Deathwing",
["type"] = "BUFF",
["source"] = "Deathwing",
["encounterID"] = 1299,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 57962,
},
[106548] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Wing Tentacle",
["isChanneled"] = false,
["encounterID"] = 1299,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56168,
},
[108649] = {
["encounterName"] = "Madness of Deathwing",
["type"] = "DEBUFF",
["source"] = "Deathwing",
["encounterID"] = 1299,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 56173,
},
[106400] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Mutated Corruption",
["isChanneled"] = true,
["encounterID"] = 1299,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56471,
},
[106444] = {
["encounterName"] = "Madness of Deathwing",
["type"] = "DEBUFF",
["source"] = "Mutated Corruption",
["encounterID"] = 1299,
["event"] = "SPELL_AURA_APPLIED",
["npcID"] = 56471,
},
[107018] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Deathwing",
["isChanneled"] = false,
["encounterID"] = 1299,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56173,
},
},
["profileKeys"] = {
["Allevin - Turalyon"] = "Default",
["Asaam - Turalyon"] = "Default",
["Amdam - Turalyon"] = "Quazii TWW 11.2 Plater",
["Caldo - Turalyon"] = "Default",
["Aduum - Turalyon"] = "Quazii TWW 11.1 Plater",
["Kaydan - Turalyon"] = "Quazii TWW 11.2 Plater",
["Christoff - Turalyon"] = "Quazii TWW 11.1 Plater",
["Dreg - Turalyon"] = "Quazii TWW 11.1 Plater",
["Amdamn - Bloodscalp"] = "Default",
["Abel - Turalyon"] = "Quazii TWW 11.2 Plater",
["Adamancy - Turalyon"] = "Quazii TWW 11.2 Plater",
["Furrys - Turalyon"] = "Default",
["Adomic - Turalyon"] = "Default",
["Adonis - Turalyon"] = "Quazii TWW 11.1 Plater",
["Adreya - Bloodscalp"] = "Default",
["Adrid - Turalyon"] = "Quazii TWW 11.2 Plater",
["Adamian - Turalyon"] = "Quazii TWW 11.1 Plater",
["Broddah - Doomhammer"] = "Default",
["Badam - Turalyon"] = "Quazii TWW 11.1 Plater",
["Adamn - Turalyon"] = "Quazii TWW 11.1 Plater",
["Kayne - Turalyon"] = "Quazii TWW 11.1 Plater",
["Drunkan - Turalyon"] = "Quazii TWW 11.2 Plater",
["Shado - Turalyon"] = "Default",
},
["captured_casts"] = {
[36807] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[329172] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 165737,
["encounterID"] = 2381,
},
[413131] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[361938] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of War",
["npcID"] = 181549,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2544,
},
[327127] = {
["source"] = "Flesh Crafter",
["event"] = "SPELL_CAST_START",
["npcID"] = 165872,
},
[1218152] = {
["source"] = "Gallagio Garbage",
["event"] = "SPELL_CAST_START",
["npcID"] = 234621,
},
[331223] = {
["npcID"] = 162763,
},
[288221] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Unexploded Ordnance",
["encounterID"] = 2281,
["event"] = "SPELL_CAST_START",
["npcID"] = 148631,
},
[339415] = {
["encounterName"] = "Xav the Unfallen",
["source"] = "Xav the Unfallen",
["encounterID"] = 2366,
["event"] = "SPELL_CAST_START",
["npcID"] = 162329,
},
[1218158] = {
["isChanneled"] = true,
["source"] = "Gallagio Garbage",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234621,
},
[427469] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[314843] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158041,
},
[456138] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimlurk",
["npcID"] = 223091,
},
[327130] = {
["npcID"] = 165872,
},
[409041] = {
["event"] = "SPELL_CAST_START",
["source"] = "Failed Prototype",
["npcID"] = 203927,
},
[271842] = {
["npcID"] = 134328,
},
[456140] = {
["source"] = "Grimslice",
["event"] = "SPELL_CAST_START",
["npcID"] = 221551,
},
[1218173] = {
["source"] = "Gallagio Garbage",
["event"] = "SPELL_CAST_START",
["npcID"] = 234621,
},
[1218177] = {
["source"] = "Gallagio Garbage",
["event"] = "SPELL_CAST_START",
["npcID"] = 234621,
},
[320991] = {
["npcID"] = 162038,
},
[260852] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[355805] = {
["isChanneled"] = true,
["source"] = "Stellar Mote",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 185313,
},
[392665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Thunderhide",
["npcID"] = 187258,
},
[456146] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lytfang the Lost",
["npcID"] = 221534,
},
[119684] = {
["encounterName"] = "Xin the Weaponmaster",
["source"] = "Xin the Weaponmaster",
["encounterID"] = 1441,
["event"] = "SPELL_CAST_START",
["npcID"] = 61398,
},
[456147] = {
["source"] = "Bandtail Kestrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 220300,
},
[1218202] = {
["event"] = "SPELL_CAST_START",
["source"] = "M.A.G.N.O.",
["npcID"] = 234480,
},
[445910] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[46024] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["npcID"] = 24556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[413147] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[31717] = {
["encounterName"] = "The Black Stalker",
["source"] = "The Black Stalker",
["npcID"] = 17882,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1948,
},
[320999] = {
["npcID"] = 164852,
},
[437721] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[257784] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Brinescale",
["npcID"] = 129600,
},
[259832] = {
["source"] = "Stormbound Conqueror",
["event"] = "SPELL_CAST_START",
["npcID"] = 223917,
},
[427484] = {
["source"] = "Fanatical Conjuror",
["event"] = "SPELL_CAST_START",
["npcID"] = 206698,
},
[347623] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[1218227] = {
["event"] = "SPELL_CAST_START",
["source"] = "M.A.G.N.O.",
["npcID"] = 234480,
},
[267763] = {
["encounterName"] = "Mchimba the Embalmer",
["source"] = "Half-Finished Mummy",
["encounterID"] = 2142,
["event"] = "SPELL_CAST_START",
["npcID"] = 136264,
},
[310766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eye of the Depths",
["npcID"] = 159510,
},
[282098] = {
["encounterName"] = "Conclave of the Chosen",
["source"] = "Pa'ku's Aspect",
["npcID"] = 144747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2268,
},
[396774] = {
["npcID"] = 191105,
},
[456159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Falconer",
["npcID"] = 17994,
},
[80780] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrieking Banshee",
["npcID"] = 10463,
},
[1242824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Voidcaster",
["npcID"] = 231709,
},
[255741] = {
["source"] = "Scaled Krolusk Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 134629,
},
[390633] = {
["npcID"] = 189954,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[472544] = {
["source"] = "Darkfuse Watcherbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 232172,
},
[366062] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Duty",
["npcID"] = 181551,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[470498] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Sapper Bot",
["npcID"] = 228053,
},
[333299] = {
["npcID"] = 169893,
},
[298488] = {
["source"] = "Aqir Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 153531,
},
[22887] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Spearman",
["npcID"] = 17729,
},
[429545] = {
["source"] = "Turned Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 214350,
},
[427498] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Life Warden Gola",
["npcID"] = 83892,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[323064] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[355830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Skulker",
["npcID"] = 179893,
},
[353783] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[456171] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimlurk",
["npcID"] = 223091,
},
[390644] = {
["npcID"] = 189954,
},
[76688] = {
["isChanneled"] = true,
["source"] = "Twilight Obsidian Borer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 40019,
},
[271880] = {
["npcID"] = 134328,
},
[1218322] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voltstrike the Charged",
["npcID"] = 233472,
},
[310788] = {
["encounterName"] = "Il'gynoth, Corruption Reborn",
["source"] = "Organ of Corruption",
["encounterID"] = 2345,
["event"] = "SPELL_CAST_START",
["npcID"] = 158343,
},
[427510] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Dulhu",
["npcID"] = 83894,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1757,
},
[298502] = {
["source"] = "Aqir Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 153531,
},
[372222] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[372223] = {
["npcID"] = 189265,
},
[1218335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voltstrike the Charged",
["npcID"] = 233472,
},
[265741] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[11829] = {
["encounterName"] = "Rhahk'Zor",
["source"] = "Defias Evoker",
["npcID"] = 1729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2967,
},
[372225] = {
["npcID"] = 189467,
},
[166675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Gunner",
["npcID"] = 80937,
},
[314889] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Exposed Synapse",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 159578,
},
[114062] = {
["encounterName"] = "Jandice Barov",
["source"] = "Jandice Barov",
["npcID"] = 59184,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1427,
},
[431612] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sazh'kel",
["npcID"] = 221166,
},
[361989] = {
["encounterName"] = "Anduin Wrynn",
["source"] = "Anduin Wrynn",
["npcID"] = 181954,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2546,
},
[1218353] = {
["source"] = "Melbo the Magnificent",
["event"] = "SPELL_CAST_START",
["npcID"] = 229434,
},
[275984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Keeneye Bowman",
["npcID"] = 166936,
},
[433662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reinforced Drone",
["npcID"] = 216856,
},
[331275] = {
["npcID"] = 167533,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[321038] = {
["npcID"] = 162039,
},
[409093] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[366091] = {
["source"] = "Ancient Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 181011,
},
[448002] = {
["source"] = "Charged Storm Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 217735,
},
[384524] = {
["encounterName"] = "Watcher Irideus",
["encounterID"] = 2615,
["npcID"] = 189719,
},
[252687] = {
["source"] = "Shadowblade Stalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 122970,
},
[396812] = {
["npcID"] = 196576,
},
[316951] = {
["source"] = "Corrosive Digester",
["event"] = "SPELL_CAST_START",
["npcID"] = 162828,
},
[347668] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["npcID"] = 175611,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2423,
},
[265759] = {
["source"] = "Matron Bryndle",
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[468487] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[265760] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Matron Bryndle",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 135329,
},
[345623] = {
["npcID"] = 165824,
},
[1218418] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[366102] = {
["source"] = "Ancient Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 181011,
},
[80279] = {
["source"] = "Stonecore Rift Conjurer",
["event"] = "SPELL_CAST_START",
["npcID"] = 42691,
},
[359960] = {
["encounterName"] = "Lords of Dread",
["source"] = "Mal'Ganis",
["encounterID"] = 2543,
["event"] = "SPELL_CAST_START",
["npcID"] = 181398,
},
[298528] = {
["source"] = "Aqir Swarmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 153526,
},
[316959] = {
["source"] = "Corrosive Digester",
["event"] = "SPELL_CAST_START",
["npcID"] = 162828,
},
[464399] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[351773] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Mawsworn Agonizer",
["npcID"] = 177594,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2434,
},
[378394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rising Kelp",
["npcID"] = 221062,
},
[390681] = {
["npcID"] = 189954,
},
[405016] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[419351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Saboteur",
["npcID"] = 208438,
},
[267818] = {
["encounterName"] = "Tidesage Council",
["source"] = "Galecaller Faye",
["npcID"] = 134058,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2131,
},
[378397] = {
["npcID"] = 191095,
},
[306726] = {
["encounterName"] = "Vez'okk the Lightless",
["source"] = "Vez'okk the Lightless",
["encounterID"] = 3089,
["event"] = "SPELL_CAST_START",
["npcID"] = 234037,
},
[431639] = {
["source"] = "Faithful of Zirix",
["event"] = "SPELL_CAST_START",
["npcID"] = 216938,
},
[158499] = {
["npcID"] = 73805,
},
[392733] = {
["source"] = "Cascadia Fickleshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 191404,
},
[265773] = {
["encounterName"] = "The Golden Serpent",
["source"] = "The Golden Serpent",
["encounterID"] = 2139,
["event"] = "SPELL_CAST_START",
["npcID"] = 135322,
},
[39121] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Greenkeeper",
["npcID"] = 18419,
},
[407069] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[405022] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[253721] = {
["isChanneled"] = true,
["source"] = "Shieldbearer of Zul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 127879,
},
[296492] = {
["source"] = "Void Globule",
["event"] = "SPELL_CAST_START",
["npcID"] = 152669,
},
[316970] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Titanic Countermeasure",
["npcID"] = 162882,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2344,
},
[431645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Overspinner Antourix",
["npcID"] = 225263,
},
[359975] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["encounterID"] = 2542,
["event"] = "SPELL_CAST_START",
["npcID"] = 181395,
},
[448030] = {
["source"] = "Agile Pursuer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223181,
},
[62415] = {
["npcID"] = 32882,
},
[100761] = {
["encounterName"] = "Alysrazor",
["source"] = "Herald of the Burning End",
["npcID"] = 53375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1206,
},
[364073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Degeneration Automa",
["npcID"] = 184735,
},
[351787] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Mawsworn Agonizer",
["npcID"] = 177594,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2434,
},
[353835] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[445984] = {
["source"] = "Seeping Jawcrawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 224536,
},
[359979] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["encounterID"] = 2542,
["event"] = "SPELL_CAST_START",
["npcID"] = 181395,
},
[353836] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176565,
["encounterID"] = 2440,
},
[310834] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Demented Knife-Twister",
["encounterID"] = 2328,
["event"] = "SPELL_CAST_START",
["npcID"] = 159417,
},
[233248] = {
["isChanneled"] = true,
["source"] = "Corrupting Shadows",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 116839,
},
[355887] = {
["npcID"] = 181346,
},
[378413] = {
["source"] = "Frenzied Tidecore",
["event"] = "SPELL_CAST_START",
["npcID"] = 213699,
},
[355888] = {
["npcID"] = 177807,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[331316] = {
["npcID"] = 167538,
},
[1218527] = {
["source"] = "Darkfuse Precipitant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231310,
},
[226083] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Forged Stallion",
["npcID"] = 238079,
},
[402989] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[466470] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[468518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siris the Sea Scorpion",
["npcID"] = 229853,
},
[431659] = {
["event"] = "SPELL_CAST_START",
["source"] = "Direweb Ritualist",
["npcID"] = 221300,
},
[310842] = {
["source"] = "Occult Shadowmender",
["event"] = "SPELL_CAST_START",
["npcID"] = 159425,
},
[41171] = {
["source"] = "Illidari Heartseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 23339,
},
[468520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siris the Sea Scorpion",
["npcID"] = 229853,
},
[445995] = {
["isChanneled"] = false,
["source"] = "Deeps Larva",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215733,
},
[296510] = {
["source"] = "Crawling Corruption",
["event"] = "SPELL_CAST_START",
["npcID"] = 152704,
},
[242468] = {
["source"] = "Bile Spitter",
["event"] = "SPELL_CAST_START",
["npcID"] = 121460,
},
[405042] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[154415] = {
["encounterName"] = "Soulbinder Nyami",
["source"] = "Soulbinder Nyami",
["npcID"] = 76177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1685,
},
["358320"] = {
["npcID"] = 180162,
},
[306752] = {
["encounterName"] = "Vez'okk the Lightless",
["source"] = "Vez'okk the Lightless",
["npcID"] = 234037,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3089,
},
[446000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deeps Larva",
["npcID"] = 215733,
},
[308801] = {
["source"] = "Zardeth of the Black Claw",
["event"] = "SPELL_CAST_START",
["npcID"] = 158371,
},
[454192] = {
["source"] = "Stormlord Kao'dor",
["event"] = "SPELL_CAST_START",
["npcID"] = 222733,
},
[396856] = {
["npcID"] = 191401,
},
[423479] = {
["source"] = "Royal Wicklighter",
["event"] = "SPELL_CAST_START",
["npcID"] = 210812,
},
[396859] = {
["npcID"] = 191105,
},
[366143] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subjugator Zeltoth",
["npcID"] = 184651,
},
[273995] = {
["source"] = "Crazed Incubator",
["event"] = "SPELL_CAST_START",
["npcID"] = 139425,
},
[472627] = {
["source"] = "S.A.L.",
["event"] = "SPELL_CAST_START",
["npcID"] = 230979,
},
[46036] = {
["source"] = "Sunblade Magister",
["event"] = "SPELL_CAST_START",
["npcID"] = 24685,
},
[323143] = {
["isChanneled"] = true,
["source"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterName"] = "Lord Chamberlain",
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2381,
},
[431674] = {
["source"] = "Pet Stagshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 223458,
},
[88481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foe Reaper 5000",
["npcID"] = 43778,
},
[470582] = {
["encounterName"] = "Bogpiper",
["source"] = "Bogpiper",
["npcID"] = 220314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2960,
},
[327240] = {
["npcID"] = 165911,
},
[41173] = {
["isChanneled"] = true,
["source"] = "Illidari Boneslicer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 23339,
},
[454201] = {
["encounterName"] = "Bogpiper",
["source"] = "Bogpiper",
["npcID"] = 220314,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2960,
},
[12471] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Shadowcaster",
["npcID"] = 5648,
},
[75683] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[454202] = {
["source"] = "Stormlord Kao'dor",
["event"] = "SPELL_CAST_START",
["npcID"] = 222733,
},
[360006] = {
["encounterName"] = "Lords of Dread",
["source"] = "Mal'Ganis",
["npcID"] = 181398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[165685] = {
["npcID"] = 79585,
},
[427583] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[347721] = {
["npcID"] = 176396,
},
[425536] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[362056] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Guardian Sphere",
["encounterID"] = 2529,
["event"] = "SPELL_CAST_START",
["npcID"] = 181447,
},
[470587] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[470588] = {
["source"] = "Kobyss Witherer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214251,
},
[260907] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[70053] = {
["npcID"] = 37126,
},
[306770] = {
["source"] = "Enthralled Weaponsmith",
["event"] = "SPELL_CAST_START",
["npcID"] = 156641,
},
[1218635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vynnie Samophlangus",
["npcID"] = 235072,
},
[470591] = {
["source"] = "Nightfall Hopestealer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217517,
},
[470592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightfall Shadeguard",
["npcID"] = 217519,
},
[162617] = {
["encounterName"] = "Rocketspark and Borka",
["source"] = "Borka the Brute",
["npcID"] = 77816,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1715,
},
[470593] = {
["encounterName"] = "Reformed Fury",
["source"] = "Reformed Fury",
["encounterID"] = 2998,
["event"] = "SPELL_CAST_START",
["npcID"] = 218034,
},
[286296] = {
["isChanneled"] = true,
["source"] = "Inanis",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 145052,
},
[366159] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Necrotic Ritualist",
["npcID"] = 182045,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2544,
},
[351825] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Deathseeker Eye",
["npcID"] = 176531,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2433,
},
[454213] = {
["encounterName"] = "Bogpiper",
["source"] = "Bogpiper",
["npcID"] = 220314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2960,
},
[325205] = {
["source"] = "Keeneye Bowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 166936,
},
[376399] = {
["npcID"] = 46914,
},
[296537] = {
["source"] = "Cultist Tormenter",
["event"] = "SPELL_CAST_START",
["npcID"] = 158690,
},
[263775] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Aspix",
["npcID"] = 133944,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2124,
},
[396879] = {
["source"] = "Geothermus",
["event"] = "SPELL_CAST_START",
["npcID"] = 217416,
},
[370259] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Earth Elemental",
["npcID"] = 187322,
},
[423501] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[44503] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wretched Husk",
["npcID"] = 24690,
},
[384597] = {
["npcID"] = 193293,
},
[378454] = {
["source"] = "Primal Stonekin",
["event"] = "SPELL_CAST_START",
["npcID"] = 194291,
},
[372311] = {
["npcID"] = 189266,
},
[208697] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Deathglare Tentacle",
["npcID"] = 105322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1873,
},
[427601] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[323166] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[431697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Hierophant",
["npcID"] = 214398,
},
[466509] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["encounterID"] = 2565,
["npcID"] = 190609,
},
[450128] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[347741] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[409174] = {
["source"] = "Incarnation of Entropy",
["event"] = "SPELL_CAST_START",
["npcID"] = 203811,
},
[462416] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Flare",
["npcID"] = 229603,
},
[269928] = {
["isChanneled"] = true,
["source"] = "Shadow-Borne Champion",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 134158,
},
[355934] = {
["npcID"] = 177817,
},
[222010] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["npcID"] = 109038,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1886,
},
[409177] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[44504] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wretched Husk",
["npcID"] = 24690,
},
[472658] = {
["isChanneled"] = true,
["source"] = "Darkfuse Spy-copter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234102,
},
[269931] = {
["source"] = "Shadow-Borne Warrior",
["event"] = "SPELL_CAST_START",
["npcID"] = 134157,
},
[472659] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 233474,
},
[100263] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fire Turtle Hatchling",
["npcID"] = 53096,
},
[427609] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[470612] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["encounterID"] = 3001,
["event"] = "SPELL_CAST_START",
["npcID"] = 220008,
},
[1226917] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dissenter Oathland",
["npcID"] = 241228,
},
[466518] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[466519] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[82858] = {
["source"] = "High Priestess Azil",
["event"] = "SPELL_CAST_START",
["npcID"] = 42333,
},
[458329] = {
["source"] = "Kordac",
["event"] = "SPELL_CAST_START",
["npcID"] = 221084,
},
[252730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Siphoner",
["npcID"] = 121671,
},
[366182] = {
["source"] = "Illicit Collector",
["event"] = "SPELL_CAST_START",
["npcID"] = 183498,
},
[386660] = {
["encounterName"] = "Leymor",
["npcID"] = 186644,
["encounterID"] = 2582,
},
[44505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wretched Skulker",
["npcID"] = 24688,
},
[366183] = {
["source"] = "Illicit Collector",
["event"] = "SPELL_CAST_START",
["npcID"] = 183498,
},
[427616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[450142] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[1226943] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whisperer Batalsworn",
["npcID"] = 241234,
},
[1226946] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whisperer Bravefort",
["npcID"] = 241236,
},
[1226947] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dissenter Oathland",
["npcID"] = 241228,
},
[1226948] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dissenter Oathland",
["npcID"] = 241228,
},
[1226949] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whisperer Bravefort",
["npcID"] = 241236,
},
[366187] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 183499,
},
[376426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Condensing Sprite",
["npcID"] = 215362,
},
[162633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunderlord Beast-Tender",
["npcID"] = 80423,
},
[366190] = {
["source"] = "Twisted Worldeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 183495,
},
[242496] = {
["source"] = "Fel Surge Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 121499,
},
[331379] = {
["npcID"] = 167965,
},
[267899] = {
["encounterName"] = "Tidesage Council",
["source"] = "Brother Ironhull",
["npcID"] = 134063,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2131,
},
[314998] = {
["source"] = "Aqir Shadowcrafter",
["event"] = "SPELL_CAST_START",
["npcID"] = 161416,
},
[323190] = {
["npcID"] = 163121,
},
[267901] = {
["encounterName"] = "Tidesage Council",
["source"] = "Brother Ironhull",
["npcID"] = 134063,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2131,
},
[222020] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 109041,
},
[339573] = {
["encounterName"] = "Mordretha",
["source"] = "Mordretha, the Endless Empress",
["encounterID"] = 2404,
["event"] = "SPELL_CAST_START",
["npcID"] = 165946,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["encounterID"] = 1048,
["event"] = "SPELL_CAST_START",
["npcID"] = 40320,
},
[450153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherthorn",
["npcID"] = 214790,
},
[16496] = {
["npcID"] = 32883,
},
[472679] = {
["source"] = "Slimesby",
["event"] = "SPELL_CAST_START",
["npcID"] = 230947,
},
[460393] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["npcID"] = 228424,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[76719] = {
["source"] = "Incendiary Spark",
["event"] = "SPELL_CAST_START",
["npcID"] = 40021,
},
[366197] = {
["source"] = "Thieving Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 183500,
},
[403057] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[423536] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[452205] = {
["source"] = "Aggregation of Horrors",
["event"] = "SPELL_CAST_START",
["npcID"] = 220999,
},
[423538] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[446064] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Slamming Tentacle",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220741,
},
[88495] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foe Reaper 5000",
["npcID"] = 43778,
},
[306819] = {
["encounterName"] = "Ra-den the Despoiled",
["source"] = "Ra-den",
["encounterID"] = 2331,
["event"] = "SPELL_CAST_START",
["npcID"] = 156866,
},
[5213] = {
["encounterName"] = "Gilnid",
["source"] = "Gilnid",
["npcID"] = 1763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2969,
},
[347775] = {
["npcID"] = 176395,
},
[472688] = {
["source"] = "Slimesby",
["event"] = "SPELL_CAST_START",
["npcID"] = 230947,
},
[466545] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[298630] = {
["source"] = "Voidbound Shieldbearer",
["event"] = "SPELL_CAST_START",
["npcID"] = 156146,
},
[431734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadesworn Crusher",
["npcID"] = 218527,
},
[257862] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["npcID"] = 128651,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2099,
},
[46044] = {
["source"] = "Sunblade Imp",
["event"] = "SPELL_CAST_START",
["npcID"] = 24815,
},
[325254] = {
["encounterName"] = "Grand Proctor Beryllia",
["npcID"] = 162102,
["encounterID"] = 2362,
},
[433785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reinforced Drone",
["npcID"] = 216363,
},
[331398] = {
["npcID"] = 170147,
},
[401022] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[317066] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Thought Harvester",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 162933,
},
[306828] = {
["encounterName"] = "Thrall the Corrupted",
["source"] = "Thrall",
["encounterID"] = 3086,
["event"] = "SPELL_CAST_START",
["npcID"] = 234034,
},
[325258] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[409216] = {
["source"] = "Sundered Manaweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 198872,
},
[165717] = {
["npcID"] = 82002,
},
[358023] = {
["source"] = "Soul Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 180474,
},
[409217] = {
["source"] = "Sundered Manaweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 198872,
},
[308878] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zardeth of the Black Claw",
["npcID"] = 158371,
},
[6685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Taskmaster",
["npcID"] = 4417,
},
[265876] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[269972] = {
["source"] = "Shadow-Borne Witch Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 134174,
},
[446079] = {
["encounterName"] = "Leviathan Caller",
["source"] = "Leviathan Caller",
["encounterID"] = 3002,
["event"] = "SPELL_CAST_START",
["npcID"] = 220738,
},
[472700] = {
["source"] = "V.V. Goosworth",
["event"] = "SPELL_CAST_START",
["npcID"] = 230946,
},
[269973] = {
["source"] = "Shadow-Borne Witch Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 134174,
},
[355979] = {
["source"] = "Ebon Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 185313,
},
[360075] = {
["npcID"] = 182210,
},
[360076] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subjugated Colossus",
["npcID"] = 184767,
},
[265880] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[337552] = {
["source"] = "Unbreakable Urtz",
["event"] = "SPELL_CAST_START",
["npcID"] = 162853,
},
[265881] = {
["source"] = "Matron Alma",
["event"] = "SPELL_CAST_START",
["npcID"] = 135365,
},
[101810] = {
["encounterName"] = "Echo of Jaina",
["source"] = "Echo of Jaina",
["encounterID"] = 1883,
["event"] = "SPELL_CAST_START",
["npcID"] = 54445,
},
[116] = {
["npcID"] = 188027,
},
[256846] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[450180] = {
["source"] = "Kronolith, Might of the Mountain",
["event"] = "SPELL_CAST_START",
["npcID"] = 219270,
},
[331412] = {
["source"] = "Starving Corpsehound",
["event"] = "SPELL_CAST_START",
["npcID"] = 177130,
},
[450182] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Mudspawn",
["npcID"] = 219897,
},
[337556] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unbreakable Urtz",
["npcID"] = 162853,
},
[31600] = {
["npcID"] = 25227,
},
[319127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Forged Stallion",
["npcID"] = 238079,
},
[372369] = {
["source"] = "Gutter Cramhunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 217716,
},
[464518] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3011,
},
[366227] = {
["event"] = "SPELL_CAST_START",
["source"] = "Foul Gorger",
["npcID"] = 183496,
},
[256849] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[409231] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[321178] = {
["npcID"] = 162047,
},
[450188] = {
["source"] = "Feral Hardhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 225938,
},
[472714] = {
["encounterName"] = "Rik Reverb",
["source"] = "Amplifier",
["npcID"] = 230197,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[286370] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Living Bomb",
["encounterID"] = 2285,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 146107,
},
[392854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Scythid Queen",
["npcID"] = 184853,
},
[360092] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["encounterID"] = 2542,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 181395,
},
[41184] = {
["source"] = "Ashtongue Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 22846,
},
[41440] = {
["npcID"] = 25801,
},
[34785] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest-Forge Peacekeeper",
["npcID"] = 18405,
},
[427670] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["npcID"] = 40765,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1044,
},
[450196] = {
["source"] = "Feral Hardhead",
["event"] = "SPELL_CAST_START",
["npcID"] = 225938,
},
[323236] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterID"] = 2381,
},
[450197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[156515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whirling Dervish",
["npcID"] = 79469,
},
[356001] = {
["npcID"] = 177808,
},
[472723] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ephemeral Agent Lathyd",
["npcID"] = 230746,
},
[444055] = {
["source"] = "Threadling Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 221131,
},
[333477] = {
["npcID"] = 163621,
},
[181089] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["encounterID"] = 2836,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207207,
},
[11898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Blood Drinker",
["npcID"] = 5649,
},
[11962] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Spellbinder",
["npcID"] = 18312,
},
[272046] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Sharkbait",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126841,
},
[1235368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Sentinel",
["npcID"] = 242631,
},
[468631] = {
["source"] = "Venture Co. Diver",
["event"] = "SPELL_CAST_START",
["npcID"] = 231496,
},
[347814] = {
["npcID"] = 176396,
},
[407199] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[407200] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[270003] = {
["source"] = "Animated Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 133935,
},
[356010] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Shackler",
["npcID"] = 178041,
},
[345772] = {
["npcID"] = 175579,
},
[265910] = {
["encounterName"] = "The Golden Serpent",
["source"] = "The Golden Serpent",
["encounterID"] = 2139,
["event"] = "SPELL_CAST_START",
["npcID"] = 135322,
},
[258908] = {
["source"] = "Shrouded Fang",
["event"] = "SPELL_CAST_START",
["npcID"] = 134602,
},
[265911] = {
["source"] = "Agitated Nimbus",
["event"] = "SPELL_CAST_START",
["npcID"] = 136076,
},
[448161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[181094] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Demolisher",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 91103,
},
[265912] = {
["source"] = "Agitated Nimbus",
["event"] = "SPELL_CAST_START",
["npcID"] = 136076,
},
[448162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enormous Kelp-Snaggler",
["npcID"] = 221061,
},
[228193] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114329,
["encounterID"] = 1957,
},
[353969] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[31602] = {
["encounterName"] = "Nerub'enkan",
["source"] = "Nerub'enkan",
["npcID"] = 10437,
["event"] = "SPELL_CAST_START",
["encounterID"] = 480,
},
[256864] = {
["source"] = "Dinomancer Kish'o",
["event"] = "SPELL_CAST_START",
["npcID"] = 129553,
},
[396975] = {
["npcID"] = 191401,
},
[41187] = {
["source"] = "Ashtongue Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 22847,
},
[190313] = {
["encounterName"] = "Archimonde",
["source"] = "Archimonde",
["encounterID"] = 1799,
["event"] = "SPELL_CAST_START",
["npcID"] = 91331,
},
[415406] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[17140] = {
["npcID"] = 82009,
},
[252770] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidgorged Stalker",
["npcID"] = 121673,
},
[265923] = {
["encounterName"] = "The Golden Serpent",
["source"] = "The Golden Serpent",
["encounterID"] = 2139,
["event"] = "SPELL_CAST_START",
["npcID"] = 135322,
},
[276162] = {
["source"] = "Toatana",
["event"] = "SPELL_CAST_START",
["npcID"] = 147493,
},
[106428] = {
["source"] = "Shado-Pan Novice",
["event"] = "SPELL_CAST_START",
["npcID"] = 56395,
},
[462508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Emissary",
["npcID"] = 229537,
},
[116155] = {
["source"] = "Yeasty Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 66413,
},
[175981] = {
["isChanneled"] = true,
["source"] = "Iron Slag-Shaper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 87521,
},
[100797] = {
["isChanneled"] = true,
["source"] = "Flame Archon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54161,
},
[470700] = {
["source"] = "Marina Zapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 227645,
},
[267973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Attendant",
["npcID"] = 134137,
},
[433841] = {
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216364,
},
[454319] = {
["isChanneled"] = true,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[298691] = {
["encounterName"] = "Slavemaster Ul'rok",
["source"] = "Slavemaster Ul'rok",
["encounterID"] = 3083,
["event"] = "SPELL_CAST_START",
["npcID"] = 233685,
},
[472750] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swigs Farsight",
["npcID"] = 231288,
},
[386745] = {
["npcID"] = 189206,
},
[409271] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[169840] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infested Icecaller",
["npcID"] = 84989,
},
[448179] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[433845] = {
["source"] = "Blood Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 216364,
},
[356031] = {
["npcID"] = 177816,
},
[135029] = {
["npcID"] = 78116,
},
[1219096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trashmaster Blazedump",
["npcID"] = 238011,
},
[470706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Machinist",
["npcID"] = 229272,
},
[180080] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Artillery",
["npcID"] = 90485,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[106942] = {
["isChanneled"] = true,
["source"] = "Destroying Sha",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56765,
},
[366272] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Taskmaster Xy'pro",
["npcID"] = 185032,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2553,
},
[267981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrine Templar",
["npcID"] = 134139,
},
[351939] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawforged Summoner",
["npcID"] = 177891,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[11899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Witch Doctor",
["npcID"] = 5650,
},
[458423] = {
["source"] = "Kordac",
["event"] = "SPELL_CAST_START",
["npcID"] = 221084,
},
[460472] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[388801] = {
["npcID"] = 195855,
},
[427710] = {
["encounterName"] = "Bogpiper",
["source"] = "Sporbit",
["npcID"] = 225708,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2960,
},
[263891] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Heartsbane Vinetwister",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[362184] = {
["encounterName"] = "Rygelon",
["source"] = "Rygelon",
["npcID"] = 182777,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2549,
},
[298704] = {
["encounterName"] = "Alleria Windrunner",
["source"] = "Alleria Windrunner",
["encounterID"] = 3081,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233675,
},
[257899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Ravager",
["npcID"] = 130012,
},
[313039] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[472764] = {
["event"] = "SPELL_CAST_START",
["source"] = "Consuming Voidstone",
["npcID"] = 212739,
},
[165751] = {
["npcID"] = 82187,
},
[308945] = {
["isChanneled"] = true,
["source"] = "Mindtwist Tendril",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 158452,
},
[1227334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Defense Matrix",
["npcID"] = 239445,
},
[313041] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 157439,
},
[252781] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[364236] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Renewal",
["npcID"] = 181546,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2544,
},
[468672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bombshell Crab",
["npcID"] = 231497,
},
[437956] = {
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 218671,
},
[1227345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Defensive Construct",
["npcID"] = 239412,
},
[34791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest-Forge Peacekeeper",
["npcID"] = 18405,
},
[270042] = {
["encounterName"] = "Rixxa Fluxfume",
["source"] = "Rixxa Fluxflame",
["encounterID"] = 2107,
["event"] = "SPELL_CAST_START",
["npcID"] = 129231,
},
[44518] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunblade Warlock",
["npcID"] = 24686,
},
[1219163] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candy Stickemup",
["npcID"] = 231012,
},
[61924] = {
["encounterName"] = "Hodir",
["npcID"] = 32900,
["encounterID"] = 1135,
},
[15547] = {
["npcID"] = 31414,
},
[360145] = {
["encounterName"] = "Lords of Dread",
["source"] = "Kin'tessa",
["npcID"] = 181399,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[364241] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Renewal",
["npcID"] = 181546,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[267997] = {
["npcID"] = 135816,
},
[308953] = {
["encounterName"] = "Drest'agath",
["source"] = "Eye of Drest'agath",
["encounterID"] = 2343,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 157612,
},
[257904] = {
["source"] = "Ludwig Von Tortollan",
["event"] = "SPELL_CAST_START",
["npcID"] = 129699,
},
[315097] = {
["encounterName"] = "Il'gynoth, Corruption Reborn",
["source"] = "Il'gynoth",
["encounterID"] = 2345,
["event"] = "SPELL_CAST_START",
["npcID"] = 158328,
},
[470727] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wrakin the Colossus",
["npcID"] = 235800,
},
[116162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fizzy Brew Alemental",
["npcID"] = 59520,
},
[296669] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alx'kov the Infested",
["npcID"] = 152809,
},
[69576] = {
["npcID"] = 36805,
},
[256882] = {
["source"] = "Monzumi",
["event"] = "SPELL_CAST_START",
["npcID"] = 129552,
},
[286432] = {
["source"] = "Pa'kura Priestess",
["event"] = "SPELL_CAST_START",
["npcID"] = 147571,
},
[272098] = {
["source"] = "Blacktooth Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 129121,
},
[44519] = {
["source"] = "Sunblade Warlock",
["event"] = "SPELL_CAST_START",
["npcID"] = 24686,
},
[99781] = {
["isChanneled"] = true,
["source"] = "Inferno Hawk",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 53648,
},
[9532] = {
["npcID"] = 2718,
},
[321247] = {
["encounterName"] = "Amarth, The Harvester",
["npcID"] = 163157,
["encounterID"] = 2388,
},
[257908] = {
["source"] = "Irontide Officer",
["event"] = "SPELL_CAST_START",
["npcID"] = 127106,
},
[454352] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[472782] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 233474,
},
[263912] = {
["encounterName"] = "Merektha",
["source"] = "Merektha",
["encounterID"] = 2125,
["event"] = "SPELL_CAST_START",
["npcID"] = 133384,
},
[115652] = {
["source"] = "Stout Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59519,
},
[268008] = {
["source"] = "Plague Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 139949,
},
[327393] = {
["npcID"] = 163618,
},
[263914] = {
["encounterName"] = "Merektha",
["source"] = "Merektha",
["encounterID"] = 2125,
["event"] = "SPELL_CAST_START",
["npcID"] = 133384,
},
[351969] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["source"] = "Fatescribe Roh-Kalo",
["npcID"] = 175730,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2431,
},
[181120] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Iron Dragoon",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 90114,
},
[308967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Taskmaster",
["npcID"] = 158437,
},
[409307] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[360162] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Vigilant Guardian",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 180773,
},
[265966] = {
["source"] = "Sandfury Stonefist",
["event"] = "SPELL_CAST_START",
["npcID"] = 134991,
},
[468694] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[106439] = {
["source"] = "Shado-Pan Novice",
["event"] = "SPELL_CAST_START",
["npcID"] = 56395,
},
[265968] = {
["source"] = "Charged Dust Devil",
["event"] = "SPELL_CAST_START",
["npcID"] = 134990,
},
[311019] = {
["source"] = "Monstrous Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 159303,
},
[444123] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[284399] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Living Bomb",
["encounterID"] = 2285,
["event"] = "SPELL_CAST_START",
["npcID"] = 146105,
},
[317164] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Mycelial Cyst",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157461,
},
[409313] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[317165] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Mycelial Cyst",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157461,
},
[276212] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Mogul Razdunk",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 129232,
},
[382696] = {
["npcID"] = 184131,
},
[325360] = {
["encounterName"] = "Grand Proctor Beryllia",
["npcID"] = 162102,
["encounterID"] = 2362,
},
[115656] = {
["isChanneled"] = true,
["source"] = "Fragmented Crawler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229994,
},
[349934] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[222082] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Amalgamation",
["npcID"] = 111398,
},
[15228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[268027] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Current",
["npcID"] = 134144,
},
[360176] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Point Defense Drone",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 181856,
},
[268028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Current",
["npcID"] = 134144,
},
[211845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Avatar of Bloodshed",
["npcID"] = 150805,
},
[331510] = {
["npcID"] = 170838,
},
[268030] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidesage Spiritualist",
["npcID"] = 136186,
},
[153485] = {
["source"] = "Shadow-Chasm Worm",
["event"] = "SPELL_CAST_START",
["npcID"] = 217962,
},
[40683] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["encounterID"] = 609,
["event"] = "SPELL_CAST_START",
["npcID"] = 22917,
},
[466665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ikir the Flotsurge",
["npcID"] = 227545,
},
[382708] = {
["npcID"] = 193293,
},
[356088] = {
["source"] = "Mawchained Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 177813,
},
[423664] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[270084] = {
["source"] = "Guard Captain Atu",
["event"] = "SPELL_CAST_START",
["npcID"] = 137473,
},
[356090] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["npcID"] = 175731,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[366329] = {
["isChanneled"] = true,
["source"] = "Foul Controller",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 185537,
},
[1219333] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[407285] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Skullcrusher",
["npcID"] = 202258,
},
[311041] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Umbral Seer",
["encounterID"] = 2328,
["event"] = "SPELL_CAST_START",
["npcID"] = 159219,
},
[444145] = {
["source"] = "Frenzied Siege Artillery",
["event"] = "SPELL_CAST_START",
["npcID"] = 224521,
},
[470766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Agitated Kaja'mental",
["npcID"] = 228558,
},
[347903] = {
["npcID"] = 176395,
},
[311045] = {
["source"] = "Void Initiate",
["event"] = "SPELL_CAST_START",
["npcID"] = 160182,
},
[308998] = {
["source"] = "Fallen Taskmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 158437,
},
[368383] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["npcID"] = 180990,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2537,
},
[349954] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[392957] = {
["source"] = "Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198789,
},
[470772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Agitated Kaja'crawler",
["npcID"] = 228556,
},
[440056] = {
["source"] = "Nerubian Slasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 208243,
},
[448248] = {
["source"] = "Bloodstained Webmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 223253,
},
[468726] = {
["source"] = "Venture Co. Diver",
["event"] = "SPELL_CAST_START",
["npcID"] = 231496,
},
[448249] = {
["source"] = "Colossal Titan Orb",
["event"] = "SPELL_CAST_START",
["npcID"] = 221730,
},
[106447] = {
["source"] = "Shado-Pan Novice",
["event"] = "SPELL_CAST_START",
["npcID"] = 56395,
},
[195473] = {
["source"] = "Gritslime Snail",
["event"] = "SPELL_CAST_START",
["npcID"] = 91786,
},
[311052] = {
["source"] = "Maddened Conscript",
["event"] = "SPELL_CAST_START",
["npcID"] = 159305,
},
[296718] = {
["source"] = "Faceless Willbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 152987,
},
[268050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidesage Spiritualist",
["npcID"] = 136186,
},
[1219384] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Scrapmaster",
["npcID"] = 231839,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3012,
},
[403203] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[341771] = {
["npcID"] = 170882,
},
[46317] = {
["npcID"] = 25743,
},
[263958] = {
["encounterName"] = "Merektha",
["source"] = "Faithless Tender",
["encounterID"] = 2125,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 134388,
},
[415492] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[468734] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gravesludge",
["npcID"] = 228201,
},
[154521] = {
["npcID"] = 76438,
},
[1219407] = {
["source"] = "Gallagio Security",
["event"] = "SPELL_CAST_START",
["npcID"] = 229439,
},
[263961] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[409352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazing Dreadsquall",
["npcID"] = 202262,
},
[472833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bomb Bot",
["npcID"] = 231928,
},
[456453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skardyn Husk",
["npcID"] = 213566,
},
[466692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ikir the Flotsurge",
["npcID"] = 227545,
},
[390926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waterworks Dynamo",
["npcID"] = 223918,
},
[438025] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[354068] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[306971] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[1219438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Shredder",
["npcID"] = 227904,
},
[296733] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Faceless Willbreaker",
["npcID"] = 152987,
},
[390930] = {
["npcID"] = 185784,
},
[78807] = {
["encounterName"] = "Ozruk",
["source"] = "Ozruk",
["encounterID"] = 1058,
["event"] = "SPELL_CAST_START",
["npcID"] = 42188,
},
[1219448] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkfuse Shredder",
["npcID"] = 227904,
},
[154527] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulbinder",
["npcID"] = 77812,
},
[222103] = {
["isChanneled"] = false,
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111398,
},
[331548] = {
["npcID"] = 167964,
},
[274212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drowned Depthbringer",
["npcID"] = 134418,
},
[1219458] = {
["source"] = "Cuisine Competitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 226984,
},
[222104] = {
["isChanneled"] = false,
["source"] = "Nightmare Amalgamation",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 111398,
},
[464655] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechadrone Sniper",
["npcID"] = 229069,
},
[272167] = {
["encounterName"] = "Bromach",
["npcID"] = 136404,
["encounterID"] = 2556,
},
[176031] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grom'kar Cinderseer",
["npcID"] = 88163,
},
[282408] = {
["encounterName"] = "Mekkatorque",
["source"] = "Spark Bot",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144942,
},
[333602] = {
["npcID"] = 163126,
},
[176032] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Cinderseer",
["npcID"] = 88163,
},
[354080] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["encounterID"] = 2423,
["event"] = "SPELL_CAST_START",
["npcID"] = 175611,
},
[97239] = {
["source"] = "Gurubashi Shadow Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 52327,
},
[456468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skardyn Husk",
["npcID"] = 213566,
},
[446230] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["encounterID"] = 2895,
["event"] = "SPELL_CAST_START",
["npcID"] = 214348,
},
[431896] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Thirsty Patron",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 215819,
},
[349987] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176555,
["encounterID"] = 2441,
},
[31865] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seductress",
["npcID"] = 17399,
},
[390943] = {
["npcID"] = 185784,
},
[362275] = {
["encounterName"] = "Rygelon",
["source"] = "Rygelon",
["npcID"] = 182777,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2549,
},
[114646] = {
["source"] = "Haunting Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 59555,
},
[388897] = {
["source"] = "Deepwater Snapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214550,
},
[472855] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarbo Wardensuit",
["npcID"] = 235301,
},
[12542] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Darkcaster",
["npcID"] = 17694,
},
[306988] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[311084] = {
["source"] = "Maddened Conscript",
["event"] = "SPELL_CAST_START",
["npcID"] = 159305,
},
[222110] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Pounder",
["npcID"] = 111405,
},
[366374] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["npcID"] = 180990,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2537,
},
[266035] = {
["source"] = "Thistle Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[421665] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210149,
},
[67037] = {
["encounterName"] = "Prince Tortheldrin",
["source"] = "Prince Tortheldrin",
["npcID"] = 11486,
["event"] = "SPELL_CAST_START",
["encounterID"] = 361,
},
[466716] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ikir the Flotsurge",
["npcID"] = 227545,
},
[317231] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[196515] = {
["source"] = "Binder Ashioi",
["event"] = "SPELL_CAST_START",
["npcID"] = 100250,
},
[468765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gravesludge",
["npcID"] = 228201,
},
[356139] = {
["source"] = "Mawsworn Lancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 178043,
},
[1219526] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crawler Mine",
["npcID"] = 227956,
},
[160680] = {
["encounterName"] = "Nitrogg Thundertower",
["source"] = "Assault Cannon",
["npcID"] = 79548,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1732,
},
[366379] = {
["encounterName"] = "Rygelon",
["source"] = "Rygelon",
["npcID"] = 182777,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2549,
},
[196516] = {
["source"] = "Ritualist Lesha",
["event"] = "SPELL_CAST_START",
["npcID"] = 100248,
},
[160681] = {
["encounterName"] = "Nitrogg Thundertower",
["source"] = "Assault Cannon",
["npcID"] = 79548,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1732,
},
[163753] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Man-at-Arms",
["npcID"] = 78832,
},
[234401] = {
["source"] = "Inquisitor Variss",
["event"] = "SPELL_CAST_START",
["npcID"] = 117933,
},
[22651] = {
["encounterName"] = "Zevrim Thornhoof",
["source"] = "Zevrim Thornhoof",
["npcID"] = 11490,
["event"] = "SPELL_CAST_START",
["encounterID"] = 343,
},
[472867] = {
["source"] = "Nikki the Fixer",
["event"] = "SPELL_CAST_START",
["npcID"] = 233434,
},
[460582] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228463,
},
[388911] = {
["npcID"] = 196577,
},
[411437] = {
["source"] = "Sundered Siegemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 198874,
},
[290621] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 2281,
["event"] = "SPELL_CAST_START",
["npcID"] = 146409,
},
[411439] = {
["source"] = "Sundered Siegemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 198874,
},
[460587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vindictive Technician",
["npcID"] = 220472,
},
[470826] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alatear",
["npcID"] = 235801,
},
[397109] = {
["npcID"] = 190008,
},
[276292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironhull Apprentice",
["npcID"] = 139799,
},
[1219588] = {
["source"] = "Bombshell Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 233453,
},
[397110] = {
["npcID"] = 190008,
},
[219049] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Naturalist Tel'arn",
["encounterID"] = 1886,
["event"] = "SPELL_CAST_START",
["npcID"] = 109041,
},
[397112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[358205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Screamspike",
["npcID"] = 178862,
},
[335680] = {
["source"] = "Mawsworn Converter",
["event"] = "SPELL_CAST_START",
["npcID"] = 181782,
},
[154546] = {
["npcID"] = 76438,
},
[276297] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepsea Ritualist",
["npcID"] = 134417,
},
[460595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thirsty Salvager",
["npcID"] = 220756,
},
[446261] = {
["source"] = "Vanishing Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 224922,
},
[153524] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plagued Bat",
["npcID"] = 75459,
},
[158644] = {
["event"] = "SPELL_CAST_START",
["source"] = "Solar Magnifier",
["npcID"] = 77559,
},
[466742] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Scrapmaster",
["npcID"] = 231839,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[274254] = {
["npcID"] = 122454,
},
[1219630] = {
["source"] = "Maddened Eyestalk",
["event"] = "SPELL_CAST_START",
["npcID"] = 234382,
},
[417598] = {
["source"] = "Drest'Agath the Corrupted",
["event"] = "SPELL_CAST_START",
["npcID"] = 207925,
},
[307020] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["encounterID"] = 2336,
["event"] = "SPELL_CAST_START",
["npcID"] = 157354,
},
[276304] = {
["source"] = "Rowdy Reveler",
["event"] = "SPELL_CAST_START",
["npcID"] = 136005,
},
[70116] = {
["npcID"] = 37230,
},
[358215] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawforged Goliath",
["npcID"] = 177892,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[1219639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Eyestalk",
["npcID"] = 234382,
},
[460603] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[431935] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burkhalt",
["npcID"] = 228671,
},
[466748] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Junkyard Hyena",
["npcID"] = 231935,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[304976] = {
["encounterName"] = "Inquisitor Gnshal",
["source"] = "Inquisitor Gnshal",
["encounterID"] = 3087,
["event"] = "SPELL_CAST_START",
["npcID"] = 234035,
},
[147385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironfur Great Bull",
["npcID"] = 72844,
},
[470845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alatear",
["npcID"] = 235801,
},
[39670] = {
["source"] = "Illidari Defiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 22853,
},
[466751] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[264024] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[472895] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candy Stickemup",
["npcID"] = 231012,
},
[403272] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[472896] = {
["source"] = "Emboldened Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 230774,
},
[210868] = {
["isChanneled"] = true,
["source"] = "Suramar Skyhunter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 114929,
},
[440134] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[468803] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gravesludge",
["npcID"] = 228201,
},
[440137] = {
["source"] = "Feral Sharpclaw",
["event"] = "SPELL_CAST_START",
["npcID"] = 221470,
},
[388944] = {
["npcID"] = 190904,
},
[114658] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[460618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overworked Cook",
["npcID"] = 220744,
},
[347992] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[472906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Candy Stickemup",
["npcID"] = 231012,
},
[1227900] = {
["encounterName"] = "Taah'bat and A'wazj",
["source"] = "A'wazj",
["encounterID"] = 3108,
["event"] = "SPELL_CAST_START",
["npcID"] = 241375,
},
[325469] = {
["source"] = "Decrepit Bilespawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 166928,
},
[466765] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[468813] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[39416] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Coilfang Sorceress",
["npcID"] = 17722,
},
[87527] = {
["npcID"] = 46695,
},
[234423] = {
["source"] = "Inquisitor Variss",
["event"] = "SPELL_CAST_START",
["npcID"] = 117933,
},
[360284] = {
["encounterName"] = "Lords of Dread",
["source"] = "Kin'tessa",
["npcID"] = 181399,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[354142] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[34809] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Mender",
["npcID"] = 19633,
},
[59638] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 31216,
["encounterID"] = 2425,
},
[234425] = {
["isChanneled"] = true,
["source"] = "Tormenting Eye",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 118032,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[448341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Thwacker",
["npcID"] = 203877,
},
[354147] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[409437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[178114] = {
["encounterName"] = "Blast Furnace",
["source"] = "Bellows Operator",
["npcID"] = 76811,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1690,
},
[32637] = {
["npcID"] = 167749,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[264050] = {
["source"] = "Coven Thornshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 131666,
},
[446300] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["encounterID"] = 2895,
["event"] = "SPELL_CAST_START",
["npcID"] = 214348,
},
[317292] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 162480,
},
[384868] = {
["npcID"] = 192789,
},
[18431] = {
["encounterName"] = "Onyxia",
["source"] = "Onyxia",
["encounterID"] = 1084,
["event"] = "SPELL_CAST_START",
["npcID"] = 10184,
},
[106984] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["encounterID"] = 1303,
["event"] = "SPELL_CAST_START",
["npcID"] = 56747,
},
[323437] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterID"] = 2381,
},
[153544] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diving Chakram Spinner",
["npcID"] = 76116,
},
[448351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wicktwister Kobold",
["npcID"] = 221066,
},
[450399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Livid Enforcer",
["npcID"] = 227354,
},
[298866] = {
["encounterName"] = "Slavemaster Ul'rok",
["source"] = "Lashing Tendril",
["encounterID"] = 3083,
["event"] = "SPELL_CAST_START",
["npcID"] = 153887,
},
[409445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[440162] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungarian Creepcap",
["npcID"] = 218665,
},
[360300] = {
["encounterName"] = "Lords of Dread",
["source"] = "Mal'Ganis",
["encounterID"] = 2543,
["event"] = "SPELL_CAST_START",
["npcID"] = 181398,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[468832] = {
["source"] = "Stalagnarok",
["event"] = "SPELL_CAST_START",
["npcID"] = 229992,
},
[462690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkened Husk",
["npcID"] = 220164,
},
[417640] = {
["source"] = "Fel-Touched Shu'halo",
["event"] = "SPELL_CAST_START",
["npcID"] = 206182,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Gnarled Ancient",
["npcID"] = 84400,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[417641] = {
["source"] = "Felbolg",
["event"] = "SPELL_CAST_START",
["npcID"] = 206189,
},
[30846] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[256959] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[307064] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[388976] = {
["npcID"] = 196671,
},
[468841] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[307071] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Mycelial Cyst",
["encounterID"] = 2337,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 157475,
},
[102381] = {
["encounterName"] = "Murozond",
["source"] = "Murozond",
["encounterID"] = 1271,
["event"] = "SPELL_CAST_START",
["npcID"] = 54432,
},
[468846] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[290694] = {
["encounterName"] = "Stormwall Blockade",
["source"] = "Spawn of Laminaria",
["encounterID"] = 2280,
["event"] = "SPELL_CAST_START",
["npcID"] = 148633,
},
[427894] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[51963] = {
["npcID"] = 27829,
},
[446325] = {
["source"] = "Island Proudfeather",
["event"] = "SPELL_CAST_START",
["npcID"] = 227198,
},
[427897] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[446328] = {
["source"] = "Vanishing Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 224922,
},
[450424] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxy Blob",
["npcID"] = 229818,
},
[403326] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[470902] = {
["source"] = "Ethereal Warpblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 225684,
},
[391040] = {
["npcID"] = 185784,
},
[180178] = {
["source"] = "Salivating Bloodthirster",
["event"] = "SPELL_CAST_START",
["npcID"] = 92038,
},
[470903] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowguard Phaseblade",
["npcID"] = 231708,
},
[350086] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176705,
["encounterID"] = 2441,
},
[466808] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[34302] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unstable Voidwraith",
["npcID"] = 18869,
},
[268177] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windspeaker Heldis",
["npcID"] = 136214,
},
[391043] = {
["npcID"] = 185784,
},
[409473] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voracious Magma Worm",
["npcID"] = 203825,
},
[454524] = {
["source"] = "Tortollan Visitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 223857,
},
[372615] = {
["npcID"] = 189247,
},
[196563] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Warlord Parjesh",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 91784,
},
[70645] = {
["npcID"] = 37663,
},
[448384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wicktwister Kobold",
["npcID"] = 221066,
},
[113136] = {
["encounterName"] = "Darkmaster Gandling",
["source"] = "Darkmaster Gandling",
["npcID"] = 59080,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1430,
},
[470910] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 233474,
},
[341902] = {
["npcID"] = 174197,
},
[352141] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Soul Reaver",
["npcID"] = 176974,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[268184] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windspeaker Heldis",
["npcID"] = 136214,
},
[162777] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Marksman",
["npcID"] = 80422,
},
[450435] = {
["source"] = "Y'tekhi",
["event"] = "SPELL_CAST_START",
["npcID"] = 215660,
},
[325523] = {
["npcID"] = 165515,
},
[22273] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ethereal Sorcerer",
["npcID"] = 18313,
},
[268187] = {
["event"] = "SPELL_CAST_START",
["source"] = "Windspeaker Heldis",
["npcID"] = 136214,
},
[372623] = {
["encounterName"] = "Sentinel Talondras",
["encounterID"] = 2557,
["npcID"] = 184124,
},
[83445] = {
["encounterName"] = "General Husam",
["source"] = "General Husam",
["encounterID"] = 1052,
["event"] = "SPELL_CAST_START",
["npcID"] = 44577,
},
[444296] = {
["source"] = "Arathi Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 206696,
},
[255952] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[350101] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176705,
["encounterID"] = 2441,
},
[346006] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[41471] = {
["encounterName"] = "The Illidari Council",
["source"] = "Lady Malande",
["npcID"] = 22951,
["event"] = "SPELL_CAST_START",
["encounterID"] = 608,
},
[464776] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[362390] = {
["encounterName"] = "Rygelon",
["source"] = "Rygelon",
["encounterID"] = 2549,
["event"] = "SPELL_CAST_START",
["npcID"] = 182777,
},
[79351] = {
["encounterName"] = "High Priestess Azil",
["source"] = "High Priestess Azil",
["encounterID"] = 1057,
["event"] = "SPELL_CAST_START",
["npcID"] = 42333,
},
[256979] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Eudora",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126848,
},
[264101] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqu'sirr",
["npcID"] = 134056,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[448399] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[325535] = {
["npcID"] = 164562,
},
[470926] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Mind-Scraper",
["npcID"] = 233391,
},
[352158] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulrender Dormazain",
["npcID"] = 175727,
},
[333729] = {
["npcID"] = 168949,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 135552,
},
[466834] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Sharpshot Sentry",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231978,
},
[313253] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["encounterID"] = 2329,
["event"] = "SPELL_CAST_START",
["npcID"] = 156818,
},
[364447] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Vigilant Custodian",
["npcID"] = 184522,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2512,
},
[472980] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrapbeak",
["npcID"] = 230931,
},
[278444] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[198623] = {
["npcID"] = 108765,
},
[323496] = {
["npcID"] = 165872,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["npcID"] = 216649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[417694] = {
["source"] = "Eye Stalk",
["event"] = "SPELL_CAST_START",
["npcID"] = 208519,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[25602] = {
["npcID"] = 81995,
},
[432030] = {
["source"] = "Discordant Swarmite",
["event"] = "SPELL_CAST_START",
["npcID"] = 223117,
},
[440222] = {
["source"] = "Dark-Crazed Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 206067,
},
[18435] = {
["encounterName"] = "Onyxia",
["source"] = "Onyxia",
["encounterID"] = 1084,
["event"] = "SPELL_CAST_START",
["npcID"] = 10184,
},
[401316] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[446368] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[268214] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runecarver Sorn",
["npcID"] = 134150,
},
[79868] = {
["npcID"] = 82002,
},
[64767] = {
["npcID"] = 32865,
},
[221153] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pulsauron",
["npcID"] = 111072,
},
[274359] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Stormsong",
["npcID"] = 139737,
},
[41986] = {
["source"] = "Angered Soul Fragment",
["event"] = "SPELL_CAST_START",
["npcID"] = 23398,
},
[413607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[464801] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[444324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[417704] = {
["source"] = "Drest'Agath the Corrupted",
["event"] = "SPELL_CAST_START",
["npcID"] = 207925,
},
[288696] = {
["encounterName"] = "Stormwall Blockade",
["source"] = "Laminaria",
["encounterID"] = 2280,
["event"] = "SPELL_CAST_START",
["npcID"] = 146256,
},
[464804] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[15618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Furious Hyjal Warden",
["npcID"] = 43427,
},
[470948] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Mind-Scraper",
["npcID"] = 233391,
},
[401325] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[386991] = {
["source"] = "Primal Proto-Drake",
["event"] = "SPELL_CAST_START",
["npcID"] = 184869,
},
[464806] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[395184] = {
["npcID"] = 185883,
},
[360373] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["encounterID"] = 2537,
["event"] = "SPELL_CAST_START",
["npcID"] = 180990,
},
[464809] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[427950] = {
["source"] = "Forge Master Damian",
["event"] = "SPELL_CAST_START",
["npcID"] = 212831,
},
[323515] = {
["encounterName"] = "Gorechop",
["npcID"] = 162317,
["encounterID"] = 2365,
},
[464810] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[448429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Mystic",
["npcID"] = 203878,
},
[83455] = {
["encounterName"] = "Siamat",
["source"] = "Minion of Siamat",
["encounterID"] = 1055,
["event"] = "SPELL_CAST_START",
["npcID"] = 44704,
},
[466860] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3013,
},
[266181] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[348094] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[468912] = {
["source"] = "Stalagnarok",
["event"] = "SPELL_CAST_START",
["npcID"] = 229992,
},
[464817] = {
["source"] = "Docile Flamingo",
["event"] = "SPELL_CAST_START",
["npcID"] = 240070,
},
[34821] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bloodwarder Steward",
["npcID"] = 18404,
},
[405433] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[466866] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[462771] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Surveyor",
["npcID"] = 229686,
},
[30851] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[421817] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[270284] = {
["source"] = "Purification Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 134739,
},
[405437] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[65026] = {
["encounterName"] = "Mimiron",
["npcID"] = 34071,
["encounterID"] = 1138,
},
[432059] = {
["source"] = "Candlelit Hexthrower",
["event"] = "SPELL_CAST_START",
["npcID"] = 213685,
},
[264144] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqu'sirr",
["npcID"] = 134056,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[274383] = {
["source"] = "Vermin Trapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 130404,
},
[12675] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[12739] = {
["encounterName"] = "Witch Doctor Zum'rah",
["source"] = "Witch Doctor Zum'rah",
["npcID"] = 7271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 597,
},
[288719] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 2281,
["event"] = "SPELL_CAST_START",
["npcID"] = 146409,
},
[6466] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Woodcarver",
["npcID"] = 641,
},
[448444] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[296911] = {
["source"] = "Boundless Corruption",
["event"] = "SPELL_CAST_START",
["npcID"] = 152939,
},
[458685] = {
["source"] = "Moth'ethk",
["event"] = "SPELL_CAST_START",
["npcID"] = 206203,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[264150] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Thornguard",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131858,
},
[462782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Malfunctioning Defense Turret",
["npcID"] = 229678,
},
[272342] = {
["npcID"] = 133406,
},
[272343] = {
["npcID"] = 134178,
},
[432068] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rabaan",
["npcID"] = 228343,
},
[264153] = {
["source"] = "Devouring Maggot",
["event"] = "SPELL_CAST_START",
["npcID"] = 134024,
},
[470976] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seafury Spiker",
["npcID"] = 227625,
},
[407496] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[341969] = {
["source"] = "Blighted Sludge-Spewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 174210,
},
[446405] = {
["encounterName"] = "Undersea Abomination",
["source"] = "Undersea Abomination",
["encounterID"] = 2895,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214348,
},
[417737] = {
["source"] = "Aqir Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 207893,
},
[22661] = {
["encounterName"] = "Alzzin the Wildshaper",
["source"] = "Alzzin the Wildshaper",
["npcID"] = 11492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 346,
},
[356306] = {
["npcID"] = 182214,
},
[391118] = {
["npcID"] = 191739,
},
[470981] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guk Boomdog",
["npcID"] = 229284,
},
[446409] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[440266] = {
["source"] = "Learned Mongrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 225445,
},
[156669] = {
["encounterName"] = "The Iron Maidens",
["source"] = "Admiral Gar'an",
["npcID"] = 77557,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1695,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["encounterID"] = 2584,
["npcID"] = 186738,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[401361] = {
["source"] = "Aqir Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207912,
},
[341977] = {
["npcID"] = 170690,
},
[154623] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Spirit-Tender",
["npcID"] = 77131,
},
[450509] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[354265] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["source"] = "Fatescribe Roh-Kalo",
["npcID"] = 175730,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2431,
},
[456653] = {
["source"] = "Rabaan",
["event"] = "SPELL_CAST_START",
["npcID"] = 228343,
},
[327646] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[446416] = {
["source"] = "Honey-Fused Droplet",
["event"] = "SPELL_CAST_START",
["npcID"] = 213697,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[323552] = {
["encounterName"] = "High Adjudicator Aleez",
["npcID"] = 165410,
["encounterID"] = 2403,
},
[456656] = {
["source"] = "Rabaan",
["event"] = "SPELL_CAST_START",
["npcID"] = 228343,
},
[450513] = {
["encounterName"] = "Rhahk'Zor",
["source"] = "Rhahk'Zor",
["npcID"] = 644,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2967,
},
[430036] = {
["isChanneled"] = false,
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214338,
},
[311267] = {
["source"] = "Cultist Shadowblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 159632,
},
[436180] = {
["source"] = "Rampant Air Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 215048,
},
[430037] = {
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214338,
},
[417751] = {
["source"] = "Klaxxi Blade Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 207922,
},
[372701] = {
["encounterName"] = "Sentinel Talondras",
["encounterID"] = 2557,
["npcID"] = 184124,
},
[366559] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overthrown Protector",
["npcID"] = 185155,
},
[22662] = {
["encounterName"] = "Alzzin the Wildshaper",
["source"] = "Alzzin the Wildshaper",
["npcID"] = 11492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 346,
},
[454614] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Heaps Crusher",
["npcID"] = 225790,
},
[452567] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oath-Eater",
["npcID"] = 206844,
},
[454615] = {
["source"] = "Emboldened Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 230774,
},
[444377] = {
["source"] = "Highland Bear",
["event"] = "SPELL_CAST_START",
["npcID"] = 226179,
},
[268271] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 131545,
},
[378850] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Fragment",
["npcID"] = 223798,
},
[266225] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[268273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidesage Enforcer",
["npcID"] = 134338,
},
[329706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Interceptor",
["npcID"] = 178661,
},
[252923] = {
["source"] = "Zanchuli Witch-Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 122969,
},
[446430] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 215702,
},
[176133] = {
["encounterName"] = "Blast Furnace",
["source"] = "Slag Elemental",
["npcID"] = 76829,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[268278] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[226304] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[266231] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Kula the Butcher",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135475,
},
[473054] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tarbo Wardensuit",
["npcID"] = 235301,
},
[401383] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[76813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[102410] = {
["source"] = "Time-Twisted Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 54693,
},
[1228504] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Titanic Storm Crystal",
["npcID"] = 242054,
},
[448485] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[385005] = {
["source"] = "Walking Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 206627,
},
[362480] = {
["npcID"] = 182322,
},
[372719] = {
["encounterName"] = "Sentinel Talondras",
["encounterID"] = 2557,
["npcID"] = 184124,
},
[1228511] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Titanic Storm Crystal",
["npcID"] = 242054,
},
[266237] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Aka'ali the Conqueror",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135470,
},
[102411] = {
["source"] = "Time-Twisted Rifleman",
["event"] = "SPELL_CAST_START",
["npcID"] = 54693,
},
[409581] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[41483] = {
["encounterName"] = "The Illidari Council",
["source"] = "High Nethermancer Zerevor",
["encounterID"] = 608,
["event"] = "SPELL_CAST_START",
["npcID"] = 22950,
},
[468969] = {
["source"] = "Stalagnarok",
["event"] = "SPELL_CAST_START",
["npcID"] = 229992,
},
[462826] = {
["source"] = "Explosive Bomberbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229706,
},
[448492] = {
["source"] = "Guard Captain Suleyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212826,
},
[354297] = {
["npcID"] = 177817,
},
[350202] = {
["encounterName"] = "The Nine",
["source"] = "Kyra",
["npcID"] = 177095,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[450542] = {
["encounterName"] = "Gilnid",
["source"] = "Gilnid",
["npcID"] = 1763,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2969,
},
[272388] = {
["source"] = "Shadow of Zul",
["event"] = "SPELL_CAST_START",
["npcID"] = 138489,
},
[405492] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[432113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord",
["npcID"] = 228575,
},
[70161] = {
["encounterName"] = "Icecrown Gunship Battle",
["npcID"] = 36968,
["encounterID"] = 1099,
},
[274437] = {
["event"] = "SPELL_CAST_START",
["source"] = "Galecaller Apprentice",
["npcID"] = 139800,
},
[432114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Forgecaster",
["npcID"] = 212884,
},
[440306] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Seeping Fleshmite",
["npcID"] = 219810,
},
[473071] = {
["source"] = "Nitro",
["event"] = "SPELL_CAST_START",
["npcID"] = 230995,
},
[450546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Captain",
["npcID"] = 216584,
},
[288774] = {
["isChanneled"] = true,
["source"] = "Malfunctioning Pylon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229739,
},
[432117] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["npcID"] = 215407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2901,
},
[425974] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[454643] = {
["source"] = "Emboldened Browbeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 235496,
},
[333827] = {
["npcID"] = 167533,
},
[372735] = {
["npcID"] = 187969,
},
[473075] = {
["isChanneled"] = true,
["source"] = "Heaps Crusher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225790,
},
[450550] = {
["encounterName"] = "Mr. Smite",
["source"] = "Mr. Smite",
["npcID"] = 646,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2970,
},
[444408] = {
["encounterName"] = "Reformed Fury",
["source"] = "Speaker Davenruth",
["encounterID"] = 2998,
["event"] = "SPELL_CAST_START",
["npcID"] = 218022,
},
[360451] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["encounterID"] = 2542,
["event"] = "SPELL_CAST_START",
["npcID"] = 181395,
},
[1220398] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[432125] = {
["source"] = "Pet Stagshell",
["event"] = "SPELL_CAST_START",
["npcID"] = 223458,
},
[307213] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["encounterID"] = 2333,
["event"] = "SPELL_CAST_START",
["npcID"] = 157254,
},
[268306] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131545,
},
[432127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadesworn Crusher",
["npcID"] = 218527,
},
[403459] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[268309] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepsea Ritualist",
["npcID"] = 134417,
},
[164887] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Mender",
["npcID"] = 81820,
},
[432130] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[333839] = {
["npcID"] = 167534,
},
[313362] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[448515] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 211290,
},
[352271] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[387083] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Briarback",
["npcID"] = 187264,
},
[266266] = {
["encounterName"] = "Gorak Tul",
["source"] = "Gorak Tul",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 131864,
},
[241680] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Lord Stormsong",
["npcID"] = 139737,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[432135] = {
["source"] = "Waterworks Opportunist",
["event"] = "SPELL_CAST_START",
["npcID"] = 222867,
},
[61964] = {
["npcID"] = 32886,
},
[333845] = {
["npcID"] = 167534,
},
[409612] = {
["source"] = "Whisper in the Dark",
["event"] = "SPELL_CAST_START",
["npcID"] = 203806,
},
[280604] = {
["source"] = "Refreshment Vendor",
["event"] = "SPELL_CAST_START",
["npcID"] = 136470,
},
[231443] = {
["isChanneled"] = true,
["source"] = "Archmage Xylem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 115244,
},
[462855] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[462856] = {
["source"] = "Nullbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229729,
},
[469001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Mouthpiece",
["npcID"] = 229365,
},
[432142] = {
["source"] = "Nerubian Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 216247,
},
[1220472] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Bot",
["npcID"] = 236838,
},
[446477] = {
["event"] = "SPELL_CAST_START",
["source"] = "Congealed Kul Tiran",
["npcID"] = 231439,
},
[61965] = {
["npcID"] = 32886,
},
[301088] = {
["source"] = "Bomb Tonk",
["event"] = "SPELL_CAST_START",
["npcID"] = 151657,
},
[430097] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[9734] = {
["npcID"] = 82009,
},
[448528] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Fusetender",
["npcID"] = 211777,
},
[466958] = {
["encounterName"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["source"] = "Chrome King Gallywix",
["npcID"] = 231075,
},
[259092] = {
["source"] = "Irontide Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 126919,
},
[252949] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Ethereal",
["npcID"] = 119750,
},
[107029] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Mutated Corruption",
["npcID"] = 56471,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1299,
},
[241687] = {
["source"] = "Jormog the Behemoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 117484,
},
[264233] = {
["encounterName"] = "Merektha",
["source"] = "Egg",
["encounterID"] = 2125,
["event"] = "SPELL_CAST_START",
["npcID"] = 134516,
},
[446483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Congealed Kul Tiran",
["npcID"] = 231439,
},
[466961] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3011,
},
[444438] = {
["encounterName"] = "Reformed Fury",
["source"] = "Speaker Davenruth",
["npcID"] = 218022,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2998,
},
[333861] = {
["npcID"] = 167536,
},
[264239] = {
["encounterName"] = "Merektha",
["source"] = "Egg",
["encounterID"] = 2125,
["event"] = "SPELL_CAST_START",
["npcID"] = 134517,
},
[352293] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[432156] = {
["source"] = "Waxtail Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 213095,
},
[419870] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[430109] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Thunderer",
["npcID"] = 207198,
},
[236572] = {
["source"] = "Highlord Kruul",
["event"] = "SPELL_CAST_START",
["npcID"] = 117198,
},
[299055] = {
["event"] = "SPELL_CAST_START",
["source"] = "Annihilator Lak'hal",
["npcID"] = 153942,
},
[473114] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[428066] = {
["source"] = "Rank Overseer",
["event"] = "SPELL_CAST_START",
["npcID"] = 211121,
},
[444449] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[471070] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guk Boomdog",
["npcID"] = 229284,
},
[464928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Aggressor",
["npcID"] = 229851,
},
[288822] = {
["source"] = "Rastari Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 147829,
},
[268347] = {
["encounterName"] = "Lord Stormsong",
["source"] = "Lord Stormsong",
["npcID"] = 134060,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2132,
},
[466979] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[407596] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[313400] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Corruptor Tentacle",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158375,
},
[16006] = {
["npcID"] = 78996,
},
[423979] = {
["source"] = "Void-Cursed Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214419,
},
[64528] = {
["encounterName"] = "Hodir",
["npcID"] = 33327,
["encounterID"] = 1135,
},
[288828] = {
["source"] = "Rastari Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 147829,
},
[356404] = {
["npcID"] = 180091,
},
[106523] = {
["source"] = "Deathwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 56173,
},
[456745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Deathweaver",
["npcID"] = 222692,
},
[430125] = {
["isChanneled"] = true,
["source"] = "Quartermaster Koratite",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209801,
},
[456746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Earwax",
["npcID"] = 213195,
},
[452651] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oath-Eater",
["npcID"] = 206844,
},
[356407] = {
["npcID"] = 180091,
},
[79903] = {
["npcID"] = 81996,
},
[456748] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crimson Deathweaver",
["npcID"] = 222692,
},
[462892] = {
["source"] = "Malfunctioning Pylon",
["event"] = "SPELL_CAST_START",
["npcID"] = 229739,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["npcID"] = 189478,
},
[460847] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 232599,
},
[432179] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[442418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burkhalt",
["npcID"] = 228671,
},
[440372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undercrawler",
["npcID"] = 214962,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[156722] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Exhumer",
["npcID"] = 77700,
},
[325700] = {
["npcID"] = 165529,
},
[106526] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[274507] = {
["source"] = "Bilge Rat Swabby",
["event"] = "SPELL_CAST_START",
["npcID"] = 129526,
},
[325701] = {
["npcID"] = 165529,
},
[428089] = {
["source"] = "Lowly Moleherd",
["event"] = "SPELL_CAST_START",
["npcID"] = 210818,
},
[446519] = {
["source"] = "Wary Shalehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 221474,
},
[440376] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow-Blind Matriarch",
["npcID"] = 206078,
},
[331846] = {
["npcID"] = 167964,
},
[12039] = {
["encounterName"] = "Nekrum Gutchewer",
["source"] = "Shadowpriest Sezz'ziz",
["npcID"] = 7275,
["event"] = "SPELL_CAST_START",
["encounterID"] = 598,
},
[362565] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[362566] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[350280] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["npcID"] = 175611,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2423,
},
[208944] = {
["encounterName"] = "Grand Magistrix Elisande",
["source"] = "Elisande",
["npcID"] = 106643,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1872,
},
[1220665] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Bot",
["npcID"] = 236838,
},
[362568] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[444479] = {
["encounterName"] = "Reformed Fury",
["source"] = "Reformed Fury",
["encounterID"] = 2998,
["event"] = "SPELL_CAST_START",
["npcID"] = 218034,
},
[350283] = {
["encounterName"] = "The Nine",
["source"] = "Signe",
["npcID"] = 177094,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[473149] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thwack",
["npcID"] = 230951,
},
[397383] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[268375] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abyssal Cultist",
["npcID"] = 134514,
},
[350286] = {
["encounterName"] = "The Nine",
["source"] = "Signe",
["encounterID"] = 2429,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 177094,
},
[370764] = {
["npcID"] = 187160,
},
[356430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mor'geth",
["npcID"] = 178958,
},
[397386] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Magma Mystic",
["npcID"] = 199703,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[450628] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[428103] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Frost Witch",
["npcID"] = 44404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[446533] = {
["source"] = "Alert Shalehorn",
["event"] = "SPELL_CAST_START",
["npcID"] = 222618,
},
[456772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Workmaster Nast",
["npcID"] = 213200,
},
[338003] = {
["npcID"] = 165414,
},
[338005] = {
["npcID"] = 165415,
},
[464966] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Oracle",
["npcID"] = 227656,
},
[96804] = {
["source"] = "Gurubashi Cauldron-Mixer",
["event"] = "SPELL_CAST_START",
["npcID"] = 52076,
},
[434252] = {
["source"] = "Nerubian Hauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 217039,
},
[35096] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Mender",
["npcID"] = 19633,
},
[366678] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["encounterID"] = 2537,
["event"] = "SPELL_CAST_START",
["npcID"] = 180990,
},
[454732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tka'ktath",
["npcID"] = 216046,
},
[456780] = {
["source"] = "King Splash",
["event"] = "SPELL_CAST_START",
["npcID"] = 220275,
},
[450637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Lord",
["npcID"] = 218103,
},
[411730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Molten Hound",
["npcID"] = 205611,
},
[325725] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[227383] = {
["source"] = "Faceless Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 102015,
},
[9672] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Squallshaper",
["npcID"] = 1732,
},
[346204] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[198715] = {
["npcID"] = 100876,
},
[473165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thwack",
["npcID"] = 230951,
},
[65301] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33134,
["encounterID"] = 1143,
},
[193597] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["encounterID"] = 1811,
["event"] = "SPELL_CAST_START",
["npcID"] = 91789,
},
[473168] = {
["source"] = "Azerite Extractor",
["event"] = "SPELL_CAST_START",
["npcID"] = 136643,
},
[346208] = {
["source"] = "Mawsworn Outrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 177899,
},
[323683] = {
["encounterName"] = "Mordretha",
["npcID"] = 165946,
["encounterID"] = 2404,
},
[11016] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Soul Eater",
["npcID"] = 7247,
},
[456788] = {
["isChanneled"] = true,
["source"] = "King Splash",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220275,
},
[411738] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rashok",
["npcID"] = 201320,
},
[166978] = {
["npcID"] = 79537,
},
[401500] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[84521] = {
["encounterName"] = "Siamat",
["source"] = "Servant of Siamat",
["encounterID"] = 1055,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 45269,
},
[413787] = {
["source"] = "Entropic Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 203809,
},
[366689] = {
["source"] = "Ebonsteel Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 186127,
},
[352355] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Remnant of Kel'Thuzad",
["npcID"] = 176929,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[448600] = {
["isChanneled"] = false,
["source"] = "Spitfire Fusetender",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 211777,
},
[430171] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[462936] = {
["source"] = "Medbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229769,
},
[200768] = {
["source"] = "Crazed Razorbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 95766,
},
[264305] = {
["source"] = "Treasure Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 145199,
},
[268403] = {
["encounterName"] = "King Dazar",
["source"] = "King Dazar",
["encounterID"] = 2143,
["event"] = "SPELL_CAST_START",
["npcID"] = 136160,
},
[411747] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Elementium",
["npcID"] = 205628,
},
[70189] = {
["npcID"] = 37544,
},
[256060] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 126832,
},
[464990] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Conqueror",
["npcID"] = 227655,
},
[436322] = {
["source"] = "Atik",
["event"] = "SPELL_CAST_START",
["npcID"] = 217533,
},
[430179] = {
["source"] = "Corrupted Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 214439,
},
[432227] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Ki'katal the Harvester",
["encounterID"] = 2901,
["event"] = "SPELL_CAST_START",
["npcID"] = 215407,
},
[417893] = {
["source"] = "Walking Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 206627,
},
[364652] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Lihuvim",
["npcID"] = 182169,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2539,
},
[458849] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["encounterID"] = 2949,
["event"] = "SPELL_CAST_START",
["npcID"] = 220577,
},
[432229] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[249919] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[295032] = {
["event"] = "SPELL_CAST_START",
["source"] = "Livid Enforcer",
["npcID"] = 227355,
},
[411754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[458853] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["encounterID"] = 2949,
["event"] = "SPELL_CAST_START",
["npcID"] = 220577,
},
[411755] = {
["event"] = "SPELL_CAST_START",
["source"] = "Conduit Guardian",
["npcID"] = 205478,
},
[69679] = {
["encounterName"] = "Icecrown Gunship Battle",
["npcID"] = 36982,
["encounterID"] = 1099,
},
[374898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Chieftain",
["npcID"] = 187266,
},
[255041] = {
["source"] = "Feasting Skyscreamer",
["event"] = "SPELL_CAST_START",
["npcID"] = 128434,
},
[1220846] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Giga Controls",
["npcID"] = 233050,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3016,
},
[454762] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 219996,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[309373] = {
["encounterName"] = "Magister Umbric",
["source"] = "Magister Umbric",
["encounterID"] = 3085,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233681,
},
[473194] = {
["source"] = "Thwack",
["event"] = "SPELL_CAST_START",
["npcID"] = 230951,
},
[454765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tka'ktath",
["npcID"] = 216046,
},
[342139] = {
["npcID"] = 167538,
},
[362617] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["encounterID"] = 2537,
["event"] = "SPELL_CAST_START",
["npcID"] = 180990,
},
[153680] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["npcID"] = 75452,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1679,
},
[352379] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Remnant of Kel'Thuzad",
["npcID"] = 176929,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[1220869] = {
["source"] = "Underpin's Bodyguard's Intern",
["event"] = "SPELL_CAST_START",
["npcID"] = 234904,
},
[465006] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Punisher",
["npcID"] = 227653,
},
[385145] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Raptor",
["npcID"] = 187256,
},
[465009] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Premium Dynamite Booty",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 231027,
},
[458866] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["encounterID"] = 2949,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 220577,
},
[428150] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Priest Aemya",
["npcID"] = 212827,
},
[409721] = {
["source"] = "Winglord Dezran",
["event"] = "SPELL_CAST_START",
["npcID"] = 202610,
},
[372862] = {
["source"] = "Primal Waterspout",
["event"] = "SPELL_CAST_START",
["npcID"] = 194219,
},
[465012] = {
["source"] = "Hulking Bloodguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 216338,
},
[350339] = {
["encounterName"] = "The Nine",
["source"] = "Formless Mass",
["encounterID"] = 2429,
["event"] = "SPELL_CAST_START",
["npcID"] = 177407,
},
[409724] = {
["source"] = "Neltharion",
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[389247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Bandit",
["npcID"] = 230199,
},
[448632] = {
["encounterName"] = "Under-Lord Vik'tis",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 220158,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2989,
},
[186449] = {
["source"] = "Iron Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 90284,
},
[448634] = {
["encounterName"] = "Under-Lord Vik'tis",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 220158,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2989,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[458874] = {
["encounterName"] = "Cult Leaders",
["source"] = "Shadeguard Speaker",
["encounterID"] = 3050,
["event"] = "SPELL_CAST_START",
["npcID"] = 229855,
},
[70196] = {
["npcID"] = 37126,
},
[473209] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thwack",
["npcID"] = 230951,
},
[270482] = {
["source"] = "Spectral Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 135167,
},
[235597] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Fallen Avatar",
["npcID"] = 116939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2038,
},
[387205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Scarred Gryphon",
["npcID"] = 237991,
},
[448640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[270487] = {
["source"] = "Spectral Berserker",
["event"] = "SPELL_CAST_START",
["npcID"] = 135167,
},
[444546] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[268440] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[249934] = {
["encounterName"] = "The Defense of Eonar",
["source"] = "The Paraxis",
["npcID"] = 124445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2075,
},
[389258] = {
["source"] = "Disturbed Trashpicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234568,
},
[405641] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[448644] = {
["encounterName"] = "Under-Lord Vik'tis",
["source"] = "Under-Lord Vik'tis",
["npcID"] = 220158,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2989,
},
[360591] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Unmade Steward",
["npcID"] = 182045,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2544,
},
[15305] = {
["npcID"] = 78553,
},
[106546] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloated Brew Alemental",
["npcID"] = 59518,
},
[270492] = {
["source"] = "Spectral Hex Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 135204,
},
[379023] = {
["source"] = "Lost Lynx",
["event"] = "SPELL_CAST_START",
["npcID"] = 225022,
},
[473220] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[270493] = {
["source"] = "Spectral Hex Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 135204,
},
[331927] = {
["npcID"] = 167962,
},
[450697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cinderbee Worker",
["npcID"] = 215023,
},
[98868] = {
["encounterName"] = "Alysrazor",
["source"] = "Blazing Talon Initiate",
["npcID"] = 53369,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1206,
},
[233556] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Containment Pylon",
["npcID"] = 117279,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2038,
},
[471176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sewer Slinker",
["npcID"] = 233827,
},
[465033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Punisher",
["npcID"] = 227653,
},
[288927] = {
["source"] = "Screeching Phantasm",
["event"] = "SPELL_CAST_START",
["npcID"] = 148199,
},
[78903] = {
["encounterName"] = "Ozruk",
["source"] = "Ozruk",
["encounterID"] = 1058,
["event"] = "SPELL_CAST_START",
["npcID"] = 42188,
},
[348313] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["encounterID"] = 2423,
["event"] = "SPELL_CAST_START",
["npcID"] = 175611,
},
[189531] = {
["source"] = "Mystic Aaran",
["event"] = "SPELL_CAST_START",
["npcID"] = 95603,
},
[389269] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187123,
},
[389270] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187123,
},
[311456] = {
["source"] = "Armsmaster Terenson",
["event"] = "SPELL_CAST_START",
["npcID"] = 156949,
},
[189532] = {
["source"] = "Binder Hallaani",
["event"] = "SPELL_CAST_START",
["npcID"] = 95613,
},
[111668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raigonn",
["npcID"] = 56877,
},
[467086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Acid Slime",
["npcID"] = 227930,
},
[379033] = {
["source"] = "Heckler",
["event"] = "SPELL_CAST_START",
["npcID"] = 225726,
},
[411798] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oozing Sludge",
["npcID"] = 205644,
},
[206939] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["npcID"] = 104154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[319650] = {
["encounterName"] = "Kryxis the Voracious",
["npcID"] = 162100,
["encounterID"] = 2360,
},
[389274] = {
["npcID"] = 190070,
},
[270505] = {
["source"] = "Fallen Heartpiercer",
["event"] = "SPELL_CAST_START",
["npcID"] = 158092,
},
[157794] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Magus",
["npcID"] = 76263,
},
[270506] = {
["source"] = "Spectral Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 135235,
},
[317605] = {
["npcID"] = 167534,
},
[270507] = {
["source"] = "Spectral Beastmaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 135235,
},
[297128] = {
["source"] = "Defense Bot Mk III",
["event"] = "SPELL_CAST_START",
["npcID"] = 144298,
},
[448663] = {
["encounterName"] = "The Puppetmaster",
["source"] = "The Puppetmaster?",
["encounterID"] = 3006,
["event"] = "SPELL_CAST_START",
["npcID"] = 220510,
},
[409756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[189536] = {
["isChanneled"] = false,
["source"] = "Mystic Velruun",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95602,
},
[409757] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[157797] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Arbiter",
["npcID"] = 77080,
},
[473239] = {
["source"] = "Tally Doublespeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 230940,
},
[450714] = {
["encounterName"] = "The Puppetmaster",
["source"] = "The Puppetmaster?",
["encounterID"] = 3006,
["event"] = "SPELL_CAST_START",
["npcID"] = 220510,
},
[325802] = {
["source"] = "Keeneye Bowman",
["event"] = "SPELL_CAST_START",
["npcID"] = 166936,
},
[430238] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[442525] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[282801] = {
["encounterName"] = "Tussle Tonks",
["source"] = "The Platinum Pummeler",
["encounterID"] = 2257,
["event"] = "SPELL_CAST_START",
["npcID"] = 144244,
},
[473242] = {
["source"] = "Tally Doublespeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 230940,
},
[450718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[411811] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Slime",
["npcID"] = 205651,
},
[405668] = {
["source"] = "Drazos Blackwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 205623,
},
[156776] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowmoon Dominator",
["npcID"] = 76446,
},
[342189] = {
["npcID"] = 174175,
},
[79932] = {
["npcID"] = 81999,
},
[346286] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[168040] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["npcID"] = 83893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[456866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Priestess",
["npcID"] = 222688,
},
[403625] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[456868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Priestess",
["npcID"] = 222688,
},
[231522] = {
["isChanneled"] = true,
["source"] = "Archmage Xylem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 115244,
},
[467109] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[428202] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213217,
},
[192617] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["encounterID"] = 1814,
["event"] = "SPELL_CAST_START",
["npcID"] = 96028,
},
[164973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Naturalist",
["npcID"] = 81819,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[189547] = {
["source"] = "Sargerei Soul Cleaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 95640,
},
[356537] = {
["npcID"] = 179334,
},
[473260] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[467117] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[238694] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Sigryn",
["npcID"] = 116484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[407733] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[465071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stagehand",
["npcID"] = 229366,
},
[348350] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[460977] = {
["source"] = "Slippery Syphoner",
["event"] = "SPELL_CAST_START",
["npcID"] = 214548,
},
[340160] = {
["source"] = "Mistveil Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 173655,
},
[448691] = {
["source"] = "Rampaging Deepflayer",
["event"] = "SPELL_CAST_START",
["npcID"] = 218657,
},
[262346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherbark Witch Doctor",
["npcID"] = 230279,
},
[274633] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironhull Apprentice",
["npcID"] = 139799,
},
[262347] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[319685] = {
["encounterName"] = "Kryxis the Voracious",
["npcID"] = 162100,
["encounterID"] = 2360,
},
[446646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[297161] = {
["source"] = "Voidbound Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 153065,
},
[317639] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158041,
},
[411837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Fire",
["npcID"] = 205971,
},
[446649] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[334023] = {
["source"] = "Harugia the Bloodthirsty",
["event"] = "SPELL_CAST_START",
["npcID"] = 167536,
},
[231532] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pyrestar Demolisher",
["npcID"] = 114845,
},
[448698] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rampaging Deepflayer",
["npcID"] = 218657,
},
[12747] = {
["npcID"] = 6519,
},
[256106] = {
["encounterName"] = "Skycap'n Kragg",
["source"] = "Skycap'n Kragg",
["encounterID"] = 2093,
["event"] = "SPELL_CAST_START",
["npcID"] = 126832,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[377029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Scythid Queen",
["npcID"] = 184853,
},
[260202] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Mogul Razdunk",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 129232,
},
[13323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Theurgist",
["npcID"] = 18315,
},
[473276] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[256108] = {
["source"] = "Savage Cursespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 223655,
},
[473277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chief Foreman Gutso",
["npcID"] = 230828,
},
[444609] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[446657] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[377034] = {
["encounterName"] = "Crawth",
["encounterID"] = 2564,
["npcID"] = 191736,
},
[100418] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Patriarch Fire Turtle",
["npcID"] = 53094,
},
[253038] = {
["isChanneled"] = true,
["source"] = "Felblade Shocktrooper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 127725,
},
[262362] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherbark Witch Doctor",
["npcID"] = 230279,
},
[397514] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[327891] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 169506,
["encounterID"] = 2396,
},
[22421] = {
["encounterName"] = "Hydrospawn",
["source"] = "Hydrospawn",
["npcID"] = 13280,
["event"] = "SPELL_CAST_START",
["encounterID"] = 344,
},
[438471] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["encounterID"] = 2926,
["event"] = "SPELL_CAST_START",
["npcID"] = 213179,
},
[422090] = {
["source"] = "Treant",
["event"] = "SPELL_CAST_START",
["npcID"] = 54983,
},
[305369] = {
["source"] = "Voidbound Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 156406,
},
[1221226] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mini Amp",
["npcID"] = 238569,
},
[106563] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["npcID"] = 59479,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1414,
},
[350422] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Soulrender Dormazain",
["npcID"] = 175727,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2434,
},
[438476] = {
["encounterName"] = "Avanoxx",
["source"] = "Avanoxx",
["npcID"] = 213179,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2926,
},
[354519] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2432,
},
[450764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Siegehold Defender",
["npcID"] = 216016,
},
[163966] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grimrail Technician",
["npcID"] = 81236,
},
[463052] = {
["source"] = "Awakened Phalanx",
["event"] = "SPELL_CAST_START",
["npcID"] = 229782,
},
[259187] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[69705] = {
["encounterName"] = "Icecrown Gunship Battle",
["npcID"] = 37117,
["encounterID"] = 1099,
},
[305378] = {
["source"] = "Voidbound Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 156406,
},
[424148] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[393432] = {
["npcID"] = 190340,
},
[411862] = {
["event"] = "SPELL_CAST_START",
["source"] = "Animation Fluid",
["npcID"] = 203939,
},
[391385] = {
["source"] = "Enraged Magma Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 214924,
},
[262377] = {
["source"] = "Crawler Mine",
["event"] = "SPELL_CAST_START",
["npcID"] = 235631,
},
[323810] = {
["encounterName"] = "General Kaal",
["npcID"] = 166085,
["encounterID"] = 2363,
},
[254070] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbraliss",
["npcID"] = 126885,
},
[463058] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Hyena",
["npcID"] = 229252,
},
[224378] = {
["event"] = "SPELL_CAST_START",
["source"] = "Celestial Acolyte",
["npcID"] = 112655,
},
[458963] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kereke",
["npcID"] = 222378,
},
[321764] = {
["npcID"] = 164861,
},
[358624] = {
["event"] = "SPELL_CAST_START",
["source"] = "So'danah",
["npcID"] = 178997,
},
[30741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grand Warlock Nethekurse",
["npcID"] = 16807,
},
[463061] = {
["isChanneled"] = false,
["source"] = "Darkfuse Hyena",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229252,
},
[346340] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unbound Shademongrel",
["npcID"] = 175819,
},
[225404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trained Shadescale",
["npcID"] = 112804,
},
[106055] = {
["encounterName"] = "Wise Mari",
["source"] = "Wise Mari",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56448,
},
[188545] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Gorebound Felcaster",
["npcID"] = 90409,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1778,
},
[375011] = {
["npcID"] = 191019,
},
[368868] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Automa",
["npcID"] = 184738,
},
[42281] = {
["npcID"] = 23694,
},
[34346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidshrieker",
["npcID"] = 18870,
},
[473304] = {
["source"] = "Venture Co. Mastermind",
["event"] = "SPELL_CAST_START",
["npcID"] = 133430,
},
[1221299] = {
["source"] = "Mug'Zee",
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[1221302] = {
["source"] = "Mug'Zee",
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[442589] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[452828] = {
["source"] = "Nesting Swarmite",
["event"] = "SPELL_CAST_START",
["npcID"] = 239581,
},
[366823] = {
["source"] = "Kelmortos",
["event"] = "SPELL_CAST_START",
["npcID"] = 185275,
},
[323821] = {
["encounterName"] = "General Kaal",
["npcID"] = 162099,
["encounterID"] = 2363,
},
[364778] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["npcID"] = 181395,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2542,
},
[240766] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Sentry",
["npcID"] = 120777,
},
[323825] = {
["encounterName"] = "Mordretha",
["npcID"] = 165994,
["encounterID"] = 2404,
},
[465120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loaderbot",
["npcID"] = 231014,
},
[34347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidshrieker",
["npcID"] = 18870,
},
[1213139] = {
["source"] = "Taskmaster Askari",
["event"] = "SPELL_CAST_START",
["npcID"] = 134012,
},
[467169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Boomspark",
["npcID"] = 229287,
},
[440549] = {
["source"] = "Kobyss Bonechewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215040,
},
[401642] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[428263] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[325876] = {
["npcID"] = 165414,
},
[319733] = {
["encounterName"] = "Echelon",
["npcID"] = 164185,
["encounterID"] = 2380,
},
[440551] = {
["source"] = "Kobyss Bonechewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 215040,
},
[422122] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[428266] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[465127] = {
["isChanneled"] = true,
["source"] = "Loaderbot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231014,
},
[1213168] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wandering Gutter",
["npcID"] = 214551,
},
[428269] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Fragment",
["npcID"] = 227518,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[34348] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidshrieker",
["npcID"] = 18870,
},
[307453] = {
["encounterName"] = "Vexiona",
["source"] = "Vexiona",
["encounterID"] = 2336,
["event"] = "SPELL_CAST_START",
["npcID"] = 157354,
},
[467178] = {
["source"] = "Gallagio Cocktail",
["event"] = "SPELL_CAST_START",
["npcID"] = 229435,
},
[311550] = {
["source"] = "Jesh'ra",
["event"] = "SPELL_CAST_START",
["npcID"] = 159764,
},
[403699] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[334076] = {
["npcID"] = 168942,
},
[295169] = {
["isChanneled"] = true,
["source"] = "Blastatron X-80",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 151476,
},
[9613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thuzadin Shadowcaster",
["npcID"] = 10398,
},
[407796] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[467182] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[1221384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
},
[1221385] = {
["source"] = "Stix Bunkjunker",
["event"] = "SPELL_CAST_START",
["npcID"] = 230322,
},
[297220] = {
["source"] = "Voidbound Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 153097,
},
[166032] = {
["npcID"] = 80775,
},
[258181] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[128075] = {
["npcID"] = 81406,
},
[379134] = {
["npcID"] = 191092,
},
[350467] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["encounterID"] = 2429,
["event"] = "SPELL_CAST_START",
["npcID"] = 175726,
},
[272654] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mature Krolusk",
["npcID"] = 134686,
},
[442618] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bazaar Guard",
["npcID"] = 220974,
},
[272655] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mature Krolusk",
["npcID"] = 134686,
},
[471287] = {
["source"] = "Nitro",
["event"] = "SPELL_CAST_START",
["npcID"] = 230995,
},
[411903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[272657] = {
["source"] = "Scaled Krolusk Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 134629,
},
[256138] = {
["source"] = "Dazar'ai Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127799,
},
[13005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightsworn Vindicator",
["npcID"] = 22861,
},
[352520] = {
["encounterName"] = "Blightbone",
["npcID"] = 178601,
["encounterID"] = 2387,
},
[193682] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["encounterID"] = 1811,
["event"] = "SPELL_CAST_START",
["npcID"] = 91789,
},
[36398] = {
["npcID"] = 72783,
},
[383237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 187321,
},
[411906] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Chemist",
["npcID"] = 205656,
},
[350475] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[13901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fel Lash",
["npcID"] = 13197,
},
[348428] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Soul Shard",
["npcID"] = 176605,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[95826] = {
["npcID"] = 68,
},
[354572] = {
["npcID"] = 176561,
},
[471294] = {
["source"] = "Defiled Earth Rager",
["event"] = "SPELL_CAST_START",
["npcID"] = 40023,
},
[387337] = {
["npcID"] = 191093,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40633,
},
[467201] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[411912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[1213270] = {
["source"] = "Zirdo",
["event"] = "SPELL_CAST_START",
["npcID"] = 225705,
},
[71254] = {
["encounterName"] = "Lady Deathwhisper",
["npcID"] = 36855,
["encounterID"] = 1100,
},
[467202] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[1213273] = {
["encounterName"] = "Xel'anegh the Many",
["source"] = "Xel'anegh the Many",
["npcID"] = 234437,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3099,
},
[1213275] = {
["encounterName"] = "Xel'anegh the Many",
["source"] = "Xel'anegh the Many",
["encounterID"] = 3099,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234435,
},
[461060] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[350482] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[264477] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqu'sirr",
["npcID"] = 134056,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[411916] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sundered Devourer",
["npcID"] = 205673,
},
[190616] = {
["source"] = "Brood of Ven'orn",
["event"] = "SPELL_CAST_START",
["npcID"] = 126111,
},
[366866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subjugator Zeltoth",
["npcID"] = 184651,
},
[272670] = {
["source"] = "Sandswept Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 134600,
},
[261264] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["npcID"] = 131824,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2113,
},
[156829] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gul'kosh",
["npcID"] = 78437,
},
[471303] = {
["source"] = "Darkfuse Stunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229175,
},
[473351] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[444683] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moss-Draped Ramolith",
["npcID"] = 214945,
},
[34352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Researcher",
["npcID"] = 18421,
},
[366869] = {
["source"] = "Subjugator Zeltoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 184651,
},
[17434] = {
["encounterName"] = "Lord Aurius Rivendare",
["source"] = "Lord Aurius Rivendare",
["npcID"] = 45412,
["event"] = "SPELL_CAST_START",
["encounterID"] = 484,
},
[467212] = {
["source"] = "Princeguard Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 227929,
},
[465165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Flare",
["npcID"] = 229603,
},
[240790] = {
["source"] = "Nether Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 118044,
},
[387352] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[424212] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[426260] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[389401] = {
["source"] = "Shimmerfin Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 220249,
},
[426261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sootsnout",
["npcID"] = 212412,
},
[34353] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Researcher",
["npcID"] = 18421,
},
[448787] = {
["source"] = "Lightspawn",
["event"] = "SPELL_CAST_START",
["npcID"] = 206710,
},
[444692] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ramolith Curlhorn",
["npcID"] = 221672,
},
[35377] = {
["npcID"] = 176995,
},
[268586] = {
["encounterName"] = "King Dazar",
["source"] = "King Dazar",
["encounterID"] = 2143,
["event"] = "SPELL_CAST_START",
["npcID"] = 136160,
},
[172193] = {
["source"] = "Keen-Eyed Gronnstalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 94894,
},
[274731] = {
["source"] = "Darktide Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 147290,
},
[22938] = {
["encounterName"] = "Alzzin the Wildshaper",
["source"] = "Fel Lash",
["npcID"] = 13197,
["event"] = "SPELL_CAST_START",
["encounterID"] = 346,
},
[258199] = {
["source"] = "Irontide Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 130400,
},
[403740] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[448791] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[221340] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Resolute Courtesan",
["npcID"] = 111151,
},
[403741] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[207006] = {
["encounterName"] = "Gul'dan",
["source"] = "Inquisitor Vethriz",
["npcID"] = 104536,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[1213354] = {
["source"] = "Princeguard Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 229440,
},
[467223] = {
["source"] = "Princeguard Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 227929,
},
[469272] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Mixer",
["npcID"] = 233247,
},
[17435] = {
["encounterName"] = "Lord Aurius Rivendare",
["source"] = "Lord Aurius Rivendare",
["npcID"] = 45412,
["event"] = "SPELL_CAST_START",
["encounterID"] = 484,
},
[358695] = {
["event"] = "SPELL_CAST_START",
["source"] = "Feeding Horror",
["npcID"] = 180426,
},
[418081] = {
["source"] = "Felhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 206090,
},
[418082] = {
["source"] = "Felhound",
["event"] = "SPELL_CAST_START",
["npcID"] = 206090,
},
[452895] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rabaan",
["npcID"] = 228343,
},
[14030] = {
["npcID"] = 14438,
},
[426275] = {
["isChanneled"] = false,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212411,
},
[444705] = {
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_START",
["npcID"] = 207949,
},
[373034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Mudskipper",
["npcID"] = 187540,
},
[467231] = {
["source"] = "Gallagio Dealer",
["event"] = "SPELL_CAST_START",
["npcID"] = 229437,
},
[257181] = {
["npcID"] = 134212,
},
[426277] = {
["isChanneled"] = true,
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212411,
},
[473376] = {
["source"] = "The Junk-Wall",
["event"] = "SPELL_CAST_START",
["npcID"] = 230793,
},
[467234] = {
["source"] = "Princeguard Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 224175,
},
[272698] = {
["source"] = "Crazed Incubator",
["event"] = "SPELL_CAST_START",
["npcID"] = 139425,
},
[272699] = {
["source"] = "Faithless Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 134364,
},
[332084] = {
["npcID"] = 167965,
},
[440615] = {
["source"] = "Whispering Luremancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 221957,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[272700] = {
["source"] = "Faithless Tender",
["event"] = "SPELL_CAST_START",
["npcID"] = 134364,
},
[264510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Marksman",
["npcID"] = 131849,
},
[465190] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodbrine Horror",
["npcID"] = 229973,
},
[467238] = {
["isChanneled"] = true,
["source"] = "Princeguard Enforcer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224175,
},
[473383] = {
["source"] = "The Junk-Wall",
["event"] = "SPELL_CAST_START",
["npcID"] = 230793,
},
[1213425] = {
["encounterName"] = "Xel'anegh the Many",
["source"] = "Xel'anegh the Many",
["npcID"] = 234436,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3099,
},
[1213426] = {
["encounterName"] = "Xel'anegh the Many",
["source"] = "Xel'anegh the Many",
["npcID"] = 234438,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3099,
},
[362806] = {
["encounterName"] = "Rygelon",
["source"] = "Rygelon",
["npcID"] = 182777,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2549,
},
[440622] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ragefin Shadowcaster",
["npcID"] = 213405,
},
[239781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Acolyte",
["npcID"] = 120194,
},
[452910] = {
["source"] = "Zilthara",
["event"] = "SPELL_CAST_START",
["npcID"] = 220270,
},
[405812] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[473388] = {
["source"] = "The Junk-Wall",
["event"] = "SPELL_CAST_START",
["npcID"] = 230793,
},
[467246] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shifty Scalper",
["npcID"] = 229286,
},
[444722] = {
["source"] = "Zealous Templar",
["event"] = "SPELL_CAST_START",
["npcID"] = 207949,
},
[448818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[450866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hellfire Imp",
["npcID"] = 17477,
},
[448820] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Skullface",
["npcID"] = 203951,
},
[71778] = {
["npcID"] = 37122,
},
[1213469] = {
["source"] = "Princeguard Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 224175,
},
[217260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Stormcaller",
["npcID"] = 88087,
},
[354626] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2432,
},
[221356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Stardancer",
["npcID"] = 111164,
},
[446776] = {
["source"] = "War Lynx",
["event"] = "SPELL_CAST_START",
["npcID"] = 206699,
},
[257192] = {
["npcID"] = 134212,
},
[383298] = {
["source"] = "Enraged Magma Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 214924,
},
[471352] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Darkfuse Technician",
["npcID"] = 231977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3016,
},
[409921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[1213497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Compliance Enforcer",
["npcID"] = 225695,
},
[465211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Marauder",
["npcID"] = 229101,
},
[340300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[465213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Marauder",
["npcID"] = 229101,
},
[350541] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[352589] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Energy Core",
["npcID"] = 176583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[350542] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2429,
},
[193717] = {
["encounterName"] = "Lady Hatecoil",
["source"] = "Lady Hatecoil",
["encounterID"] = 1811,
["event"] = "SPELL_CAST_START",
["npcID"] = 91789,
},
[463169] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Surveyor",
["npcID"] = 229686,
},
[418119] = {
["source"] = "Aqir Destroyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 207912,
},
[297302] = {
["source"] = "Endless Hunger Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 153141,
},
[450885] = {
["source"] = "Cinderbee Forager",
["event"] = "SPELL_CAST_START",
["npcID"] = 222976,
},
[15503] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Ellrys Duskhallow",
["npcID"] = 24558,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[257199] = {
["npcID"] = 134212,
},
[409931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[444743] = {
["source"] = "Risen Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 221760,
},
[356690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Helsworn Beastlord",
["npcID"] = 177135,
},
[434505] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[465223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Spellslinger",
["npcID"] = 229100,
},
[287070] = {
["encounterName"] = "Opulence",
["source"] = "Opulence",
["encounterID"] = 2271,
["event"] = "SPELL_CAST_START",
["npcID"] = 145261,
},
[234676] = {
["source"] = "Highlord Kruul",
["event"] = "SPELL_CAST_START",
["npcID"] = 117198,
},
[440652] = {
["source"] = "Wandering Candle",
["event"] = "SPELL_CAST_START",
["npcID"] = 208450,
},
[166077] = {
["npcID"] = 80468,
},
[473417] = {
["event"] = "SPELL_CAST_START",
["source"] = "Projection of Ve'nari",
["npcID"] = 231707,
},
[169149] = {
["npcID"] = 85856,
},
[44599] = {
["source"] = "Sunblade Physician",
["event"] = "SPELL_CAST_START",
["npcID"] = 24687,
},
[368983] = {
["npcID"] = 191378,
},
[465228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Spellslinger",
["npcID"] = 229100,
},
[362841] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Fracturing Rift Blast Portal",
["encounterID"] = 2553,
["event"] = "SPELL_CAST_START",
["npcID"] = 183663,
},
[399701] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Deepflayer",
["npcID"] = 215773,
},
[317792] = {
["npcID"] = 163366,
},
[297315] = {
["source"] = "Greater Void Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 153130,
},
[469327] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["npcID"] = 231075,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3016,
},
[465232] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[34361] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Botanist",
["npcID"] = 18422,
},
[428374] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Lady Naz'jar",
["npcID"] = 40586,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1045,
},
[166081] = {
["npcID"] = 81063,
},
[368990] = {
["encounterName"] = "Emberon",
["npcID"] = 184422,
["encounterID"] = 2558,
},
[405850] = {
["source"] = "Drazos Blackwing",
["event"] = "SPELL_CAST_START",
["npcID"] = 205623,
},
[411994] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Chronoweaver",
["npcID"] = 205384,
},
[422233] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[448854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Contender",
["npcID"] = 217646,
},
[321894] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[438618] = {
["source"] = "Engorged Crawler",
["event"] = "SPELL_CAST_START",
["npcID"] = 214840,
},
[303467] = {
["npcID"] = 176828,
},
[264560] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqu'sirr",
["npcID"] = 134056,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[169156] = {
["npcID"] = 77517,
},
[389474] = {
["npcID"] = 190904,
},
[448859] = {
["source"] = "Enraged Drunkard",
["event"] = "SPELL_CAST_START",
["npcID"] = 218655,
},
[1213621] = {
["source"] = "Princeguard Demolisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 227929,
},
[192706] = {
["source"] = "Binder Ashioi",
["event"] = "SPELL_CAST_START",
["npcID"] = 100250,
},
[469340] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Mixer",
["npcID"] = 233247,
},
[448863] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Burly Contender",
["npcID"] = 217646,
},
[307569] = {
["encounterName"] = "The Hivemind",
["source"] = "Tek'ris",
["encounterID"] = 2333,
["event"] = "SPELL_CAST_START",
["npcID"] = 157254,
},
[448864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burly Contender",
["npcID"] = 217646,
},
[1213641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Compliance Enforcer",
["npcID"] = 225695,
},
[97386] = {
["isChanneled"] = true,
["source"] = "Gurubashi Cauldron-Mixer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 52076,
},
[465247] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Deathdealer",
["npcID"] = 229095,
},
[422245] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 210153,
},
[422246] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Ol' Waxbeard",
["encounterID"] = 2829,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 210153,
},
[465249] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwake Deathdealer",
["npcID"] = 229095,
},
[1213656] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[1213662] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heights Security",
["npcID"] = 233076,
},
[358769] = {
["event"] = "SPELL_CAST_START",
["source"] = "Consumed Soul",
["npcID"] = 180782,
},
[426345] = {
["source"] = "Void-Touched Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 212400,
},
[153804] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["npcID"] = 75452,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1679,
},
[412012] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Timeslicer",
["npcID"] = 205408,
},
[463206] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[407917] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[168139] = {
["npcID"] = 77517,
},
[389488] = {
["npcID"] = 191378,
},
[65648] = {
["encounterName"] = "Mimiron",
["npcID"] = 33670,
["encounterID"] = 1138,
},
[250050] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["encounterID"] = 2611,
["npcID"] = 189901,
},
[111723] = {
["encounterName"] = "Raigonn",
["source"] = "Raigonn",
["npcID"] = 56877,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1419,
},
[471403] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["npcID"] = 225821,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3009,
},
[440687] = {
["source"] = "Royal Jelly Purveyor",
["event"] = "SPELL_CAST_START",
["npcID"] = 220141,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[1213700] = {
["encounterName"] = "Harbinger Ul'thul",
["source"] = "Harbinger Ul'thul",
["encounterID"] = 3096,
["event"] = "SPELL_CAST_START",
["npcID"] = 234339,
},
[446832] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["encounterID"] = 2991,
["event"] = "SPELL_CAST_START",
["npcID"] = 219856,
},
[389497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Sand",
["npcID"] = 187475,
},
[409975] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Commander",
["npcID"] = 202109,
},
[463218] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[452980] = {
["source"] = "Aggregation of Horrors",
["event"] = "SPELL_CAST_START",
["npcID"] = 220999,
},
[283019] = {
["source"] = "Lieutenant Elsbeth Wavecutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 145230,
},
[175314] = {
["npcID"] = 81994,
},
[452985] = {
["source"] = "Siege Marshal Tekhzok",
["event"] = "SPELL_CAST_START",
["npcID"] = 215987,
},
[407936] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[107120] = {
["encounterName"] = "Commander Ri'mok",
["source"] = "Commander Ri'mok",
["npcID"] = 56636,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1406,
},
[471419] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[226511] = {
["source"] = "Duskwatch Astralite",
["event"] = "SPELL_CAST_START",
["npcID"] = 113707,
},
[424322] = {
["source"] = "Blazing Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 220815,
},
[64059] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33890,
["encounterID"] = 1143,
},
[14033] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Darkcaster",
["npcID"] = 18331,
},
[471423] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Muscle",
["npcID"] = 225681,
},
[1213776] = {
["encounterName"] = "Harbinger Ul'thul",
["source"] = "Harbinger Ul'thul",
["npcID"] = 234339,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3096,
},
[1213778] = {
["source"] = "Darkfuse Riot Negotiator",
["event"] = "SPELL_CAST_START",
["npcID"] = 233781,
},
[1213785] = {
["encounterName"] = "Harbinger Ul'thul",
["source"] = "Harbinger Ul'thul",
["encounterID"] = 3096,
["event"] = "SPELL_CAST_START",
["npcID"] = 234339,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["event"] = "SPELL_CAST_START",
["source"] = "Chrono-Lord Deios",
["npcID"] = 199000,
},
[1213797] = {
["source"] = "Darkfuse Riot Negotiator",
["event"] = "SPELL_CAST_START",
["npcID"] = 233781,
},
[326039] = {
["encounterName"] = "Grand Proctor Beryllia",
["npcID"] = 162102,
["encounterID"] = 2362,
},
[352660] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["npcID"] = 175731,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[1213803] = {
["isChanneled"] = false,
["source"] = "Venture Co. Architect",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229251,
},
[1213804] = {
["encounterName"] = "Xel'anegh the Many",
["source"] = "Xel'anegh the Many",
["npcID"] = 234435,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3099,
},
[1213805] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Architect",
["npcID"] = 229251,
},
[348566] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176562,
["encounterID"] = 2440,
},
[446859] = {
["source"] = "Warped Sapling",
["event"] = "SPELL_CAST_START",
["npcID"] = 220655,
},
[350615] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Soulrender Dormazain",
["npcID"] = 175727,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2434,
},
[352663] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[401810] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[455052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Supervisor Radlock",
["npcID"] = 220897,
},
[114291] = {
["source"] = "Hopper",
["event"] = "SPELL_CAST_START",
["npcID"] = 59464,
},
[360856] = {
["source"] = "Dominated Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 185314,
},
[369049] = {
["encounterName"] = "Emberon",
["encounterID"] = 2558,
["npcID"] = 186107,
},
[360859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Halondrus",
["npcID"] = 181047,
},
[469392] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subwoofer",
["npcID"] = 232602,
},
[405914] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[1213852] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 236942,
},
[332196] = {
["npcID"] = 167963,
},
[309671] = {
["encounterName"] = "Therum Deepforge",
["source"] = "Therum Deepforge",
["encounterID"] = 3082,
["event"] = "SPELL_CAST_START",
["npcID"] = 233679,
},
[38209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Confessor",
["npcID"] = 230015,
},
[63038] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33136,
["encounterID"] = 1143,
},
[364962] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Vigilant Guardian",
["encounterID"] = 2512,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 180773,
},
[83066] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["encounterID"] = 1055,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 44819,
},
[434589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overfiend",
["npcID"] = 217429,
},
[436637] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[418208] = {
["source"] = "Dark Prophet",
["event"] = "SPELL_CAST_START",
["npcID"] = 206474,
},
[53824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undertide Deepfisher",
["npcID"] = 226961,
},
[272820] = {
["source"] = "Imbued Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 134599,
},
[405924] = {
["source"] = "Krono Sandtongue",
["event"] = "SPELL_CAST_START",
["npcID"] = 205622,
},
[118903] = {
["source"] = "Glintrok Hexxer",
["event"] = "SPELL_CAST_START",
["npcID"] = 61216,
},
[321968] = {
["source"] = "Tirnenn Villager",
["event"] = "SPELL_CAST_START",
["npcID"] = 164929,
},
[3589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrieking Banshee",
["npcID"] = 10463,
},
[387497] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Destroyer",
["npcID"] = 187244,
},
[436644] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214661,
},
[338353] = {
["npcID"] = 173016,
},
[232673] = {
["source"] = "Archmage Xylem",
["event"] = "SPELL_CAST_START",
["npcID"] = 115244,
},
[315830] = {
["source"] = "Anubisath Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 161571,
},
[118905] = {
["npcID"] = 61245,
},
[338357] = {
["npcID"] = 172981,
},
[364978] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["encounterID"] = 2529,
["event"] = "SPELL_CAST_START",
["npcID"] = 181047,
},
[1213928] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guttergorger",
["npcID"] = 233937,
},
[364979] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["encounterID"] = 2529,
["event"] = "SPELL_CAST_START",
["npcID"] = 180906,
},
[358836] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Infuser",
["npcID"] = 180664,
},
[152814] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Bone-Mender",
["npcID"] = 75713,
},
[465322] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[412081] = {
["event"] = "SPELL_CAST_START",
["source"] = "Colossal Draconic Golem",
["npcID"] = 203826,
},
[471467] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Houndmaster",
["npcID"] = 229162,
},
[465326] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfang Hyena",
["npcID"] = 227843,
},
[91263] = {
["encounterName"] = "General Husam",
["source"] = "General Husam",
["encounterID"] = 1052,
["event"] = "SPELL_CAST_START",
["npcID"] = 44577,
},
[465328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfang Hyena",
["npcID"] = 227843,
},
[234728] = {
["source"] = "Archmage Xylem",
["event"] = "SPELL_CAST_START",
["npcID"] = 115244,
},
[191726] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[377277] = {
["source"] = "Volethi",
["event"] = "SPELL_CAST_START",
["npcID"] = 200727,
},
[121468] = {
["encounterName"] = "Commander Ri'mok",
["source"] = "Raigonn",
["npcID"] = 61177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1406,
},
[319941] = {
["encounterName"] = "Echelon",
["npcID"] = 164185,
["encounterID"] = 2380,
},
[1213990] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Voltaic Image",
["npcID"] = 235187,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[418237] = {
["source"] = "Prophet Skitra",
["event"] = "SPELL_CAST_START",
["npcID"] = 208491,
},
[262610] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherbark Raider",
["npcID"] = 230278,
},
[332234] = {
["npcID"] = 167967,
},
[262611] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherbark Raider",
["npcID"] = 230278,
},
[389572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Devilsaur",
["npcID"] = 187262,
},
[418241] = {
["source"] = "Prophet Skitra",
["event"] = "SPELL_CAST_START",
["npcID"] = 208491,
},
[289235] = {
["source"] = "Akunda the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 148617,
},
[473533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Obedient-ish Predator",
["npcID"] = 231930,
},
[356812] = {
["npcID"] = 180286,
},
[174328] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulbinder Nyami",
["npcID"] = 76177,
},
[1214039] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["npcID"] = 229181,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[1214043] = {
["encounterName"] = "Underpin",
["source"] = "Crony",
["npcID"] = 235162,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3126,
},
[401867] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["npcID"] = 200836,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[250096] = {
["encounterName"] = "Yazma",
["source"] = "Yazma",
["encounterID"] = 2087,
["event"] = "SPELL_CAST_START",
["npcID"] = 122968,
},
[473540] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2364,
},
[1214052] = {
["encounterName"] = "Underpin",
["source"] = "The Underpin",
["npcID"] = 234168,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3126,
},
[473541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Punchy Thug",
["npcID"] = 231904,
},
[369107] = {
["npcID"] = 185272,
},
[375251] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[459210] = {
["source"] = "Void-Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[285152] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["encounterID"] = 2257,
["event"] = "SPELL_CAST_START",
["npcID"] = 145185,
},
[369110] = {
["encounterName"] = "Emberon",
["encounterID"] = 2558,
["npcID"] = 184422,
},
[107140] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["npcID"] = 56754,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1303,
},
[1214078] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pterrordax Matriarch",
["npcID"] = 233939,
},
[1214090] = {
["encounterName"] = "Craggle Fritzbrains",
["source"] = "Craggle Fritzbrains",
["npcID"] = 234291,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3095,
},
[473550] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aerial Support Bot",
["npcID"] = 231906,
},
[41032] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[453073] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[418262] = {
["isChanneled"] = true,
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208728,
},
[303589] = {
["source"] = "Coagulated Horror",
["event"] = "SPELL_CAST_START",
["npcID"] = 156653,
},
[80009] = {
["npcID"] = 82001,
},
[98951] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[98952] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["event"] = "SPELL_CAST_START",
["npcID"] = 52409,
},
[424414] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[328170] = {
["npcID"] = 162057,
},
[1214135] = {
["encounterName"] = "Craggle Fritzbrains",
["source"] = "Craggle Fritzbrains",
["npcID"] = 234291,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3095,
},
[352744] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[412129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[367079] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["npcID"] = 180906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2529,
},
[164102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Laborer",
["npcID"] = 81235,
},
[98953] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["npcID"] = 52409,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1203,
},
[459229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kaz'vik",
["npcID"] = 219751,
},
[264693] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 131863,
},
[162055] = {
["encounterName"] = "Skylord Tovra",
["source"] = "Skylord Tovra",
["npcID"] = 80005,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1736,
},
[1214147] = {
["isChanneled"] = true,
["source"] = "The Underpin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 236942,
},
[264694] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[324079] = {
["encounterName"] = "Mordretha",
["npcID"] = 165946,
["encounterID"] = 2404,
},
[424419] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[80012] = {
["npcID"] = 82001,
},
[346605] = {
["npcID"] = 182296,
},
[424420] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[365036] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Defense Matrix Automa",
["encounterID"] = 2539,
["event"] = "SPELL_CAST_START",
["npcID"] = 184126,
},
[424421] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[1222356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tamed Ruinstalker",
["npcID"] = 234960,
},
[424423] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 211291,
},
[451044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gargantuan Honeyslime",
["npcID"] = 222960,
},
[162058] = {
["encounterName"] = "Skylord Tovra",
["source"] = "Skylord Tovra",
["npcID"] = 80005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1736,
},
[440806] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["npcID"] = 219676,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2946,
},
[196870] = {
["source"] = "Hatecoil Stormweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 91783,
},
[465380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Houndmaster",
["npcID"] = 229162,
},
[184584] = {
["source"] = "Gorebound Crone",
["event"] = "SPELL_CAST_START",
["npcID"] = 93154,
},
[268797] = {
["source"] = "Venture Co. Alchemist",
["event"] = "SPELL_CAST_START",
["npcID"] = 133432,
},
[334326] = {
["npcID"] = 171376,
},
[469478] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["npcID"] = 226396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3053,
},
[1214190] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["npcID"] = 229181,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3010,
},
[424429] = {
["source"] = "Ardent Paladin",
["event"] = "SPELL_CAST_START",
["npcID"] = 206704,
},
[259329] = {
["source"] = "Darktide Sorceress",
["event"] = "SPELL_CAST_START",
["npcID"] = 147291,
},
[334329] = {
["npcID"] = 171376,
},
[459242] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nix'k the Wicked",
["npcID"] = 219749,
},
[428526] = {
["encounterName"] = "Ozumat",
["source"] = "Splotch",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213806,
},
[424431] = {
["source"] = "Elaena Emberlanz",
["event"] = "SPELL_CAST_START",
["npcID"] = 239833,
},
[319997] = {
["npcID"] = 164510,
},
[381430] = {
["npcID"] = 190388,
},
[473579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aerial Support Bot",
["npcID"] = 231906,
},
[46155] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Selin Fireheart",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 24723,
},
[428530] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[418292] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Aberration",
["npcID"] = 234393,
},
[444915] = {
["isChanneled"] = false,
["source"] = "Kobyss Trickster",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214343,
},
[34637] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Channeler",
["npcID"] = 19505,
},
[418295] = {
["source"] = "Treasure Wraith",
["event"] = "SPELL_CAST_START",
["npcID"] = 208728,
},
[338434] = {
["source"] = "Devmorta",
["event"] = "SPELL_CAST_START",
["npcID"] = 162875,
},
[162066] = {
["encounterName"] = "Skylord Tovra",
["source"] = "Skylord Tovra",
["npcID"] = 80005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1736,
},
[418297] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Treasure Wraith",
["npcID"] = 208728,
},
[1214238] = {
["source"] = "Treasure Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 236892,
},
[37965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underbog Shambler",
["npcID"] = 17871,
},
[453110] = {
["source"] = "The Puppetmaster?",
["event"] = "SPELL_CAST_START",
["npcID"] = 220507,
},
[1214246] = {
["source"] = "Treasure Crab",
["event"] = "SPELL_CAST_START",
["npcID"] = 236892,
},
[257288] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Cleaver",
["encounterID"] = 2098,
["event"] = "SPELL_CAST_START",
["npcID"] = 129879,
},
[451064] = {
["source"] = "Gargantuan Honeyslime",
["event"] = "SPELL_CAST_START",
["npcID"] = 222960,
},
[270865] = {
["source"] = "King A'akul",
["event"] = "SPELL_CAST_START",
["npcID"] = 137484,
},
[428542] = {
["source"] = "Naz'jar Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 40577,
},
[307725] = {
["encounterName"] = "Prophet Skitra",
["source"] = "Prophet Skitra",
["encounterID"] = 2334,
["event"] = "SPELL_CAST_START",
["npcID"] = 157238,
},
[444925] = {
["source"] = "Drifting Sporebloom",
["event"] = "SPELL_CAST_START",
["npcID"] = 214961,
},
[358921] = {
["event"] = "SPELL_CAST_START",
["source"] = "Highlord Darion Mograine",
["npcID"] = 178615,
},
[328206] = {
["encounterName"] = "Echelon",
["npcID"] = 164185,
["encounterID"] = 2380,
},
[350732] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["encounterID"] = 2436,
["event"] = "SPELL_CAST_START",
["npcID"] = 175731,
},
[136475] = {
["npcID"] = 23682,
},
[465408] = {
["source"] = "Venture Co. Architect",
["event"] = "SPELL_CAST_START",
["npcID"] = 229251,
},
[270872] = {
["source"] = "Bloodsworn Agent",
["event"] = "SPELL_CAST_START",
["npcID"] = 137485,
},
[34639] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Harvester",
["npcID"] = 19509,
},
[71318] = {
["npcID"] = 37229,
},
[403978] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[360977] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["encounterID"] = 2529,
["event"] = "SPELL_CAST_START",
["npcID"] = 180906,
},
[315927] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158041,
},
[449031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slashjaw",
["npcID"] = 218654,
},
[264734] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[1214315] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[449034] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slashjaw",
["npcID"] = 218654,
},
[418318] = {
["source"] = "Faceless One",
["event"] = "SPELL_CAST_START",
["npcID"] = 206463,
},
[338456] = {
["npcID"] = 172981,
},
[17194] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Mender",
["npcID"] = 19633,
},
[424462] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Taener Duelmal",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 211289,
},
[1214324] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 209230,
},
[1214325] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["npcID"] = 209230,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2816,
},
[315932] = {
["source"] = "Iron-Willed Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 162718,
},
[326171] = {
["encounterName"] = "Mueh'zala",
["npcID"] = 166608,
["encounterID"] = 2396,
},
[449038] = {
["encounterName"] = "Overseer Kaskel",
["source"] = "Overseer Kaskel",
["npcID"] = 220437,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2990,
},
[358938] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostbound Devoted",
["npcID"] = 180840,
},
[221464] = {
["source"] = "Chaos Mage Beleron",
["event"] = "SPELL_CAST_START",
["npcID"] = 111225,
},
[444944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Light-Bathed Eagle",
["npcID"] = 223191,
},
[434706] = {
["source"] = "Tasting Room Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 214920,
},
[428563] = {
["source"] = "Kobold Flametender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213913,
},
[260372] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Venture Co. Skyscorcher",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 132056,
},
[1222542] = {
["encounterName"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["source"] = "Chrome King Gallywix",
["npcID"] = 232131,
},
[270889] = {
["source"] = "King Rahu'ai",
["event"] = "SPELL_CAST_START",
["npcID"] = 134331,
},
[10966] = {
["event"] = "SPELL_CAST_START",
["source"] = "Laughing Skull Legionnaire",
["npcID"] = 17626,
},
[1214362] = {
["source"] = "Enveloping Bloodeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 228300,
},
[30633] = {
["encounterName"] = "Warbringer O'mrogg",
["source"] = "Warbringer O'mrogg",
["npcID"] = 16809,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1937,
},
[106646] = {
["source"] = "Flying Snow",
["event"] = "SPELL_CAST_START",
["npcID"] = 56473,
},
[373279] = {
["npcID"] = 189988,
},
[375327] = {
["npcID"] = 190404,
},
[1214369] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[1214373] = {
["source"] = "Enveloping Bloodeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 228300,
},
[268846] = {
["source"] = "Weapons Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 136934,
},
[1238953] = {
["isChanneled"] = true,
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205490,
},
[3110] = {
["npcID"] = 416,
},
[465432] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[332329] = {
["npcID"] = 170486,
},
[228637] = {
["source"] = "Spectral Journeyman",
["event"] = "SPELL_CAST_START",
["npcID"] = 114802,
},
[444957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Light-Bathed Eagle",
["npcID"] = 223191,
},
[453149] = {
["source"] = "Web Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 219034,
},
[377383] = {
["npcID"] = 192333,
},
[334381] = {
["npcID"] = 171384,
},
[270901] = {
["source"] = "Seneschal M'bara",
["event"] = "SPELL_CAST_START",
["npcID"] = 134251,
},
[434722] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[332335] = {
["npcID"] = 170488,
},
[212258] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["npcID"] = 104154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[3606] = {
["event"] = "SPELL_CAST_START",
["source"] = "Searing Totem",
["npcID"] = 2523,
},
[159017] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zipteq",
["npcID"] = 78734,
},
[385578] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[412200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Aerobot",
["npcID"] = 205723,
},
[471585] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[391723] = {
["npcID"] = 197697,
},
[72350] = {
["encounterName"] = "The Lich King",
["npcID"] = 36597,
["encounterID"] = 1106,
},
[237857] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[387629] = {
["npcID"] = 195876,
},
[438823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diabolic Imp",
["npcID"] = 219161,
},
[473636] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Support Rig",
["npcID"] = 234557,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[358963] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Torturer",
["npcID"] = 180864,
},
[473638] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Defunct Bike",
["npcID"] = 234557,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[453161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[309819] = {
["encounterName"] = "Alleria Windrunner",
["source"] = "Alleria Windrunner",
["encounterID"] = 3081,
["event"] = "SPELL_CAST_START",
["npcID"] = 233675,
},
[426541] = {
["source"] = "Runic Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 131685,
},
[375348] = {
["npcID"] = 190401,
},
[258338] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[338490] = {
["source"] = "Devmorta",
["event"] = "SPELL_CAST_START",
["npcID"] = 162875,
},
[375351] = {
["npcID"] = 190403,
},
[449071] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Taskfinder",
["npcID"] = 204127,
},
[1214468] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechadrone Sniper",
["npcID"] = 229069,
},
[111772] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Scholomance Acolyte",
["npcID"] = 58757,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[449072] = {
["encounterName"] = "Overseer Kaskel",
["source"] = "Overseer Kaskel",
["npcID"] = 220437,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2990,
},
[153905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whirling Dervish",
["npcID"] = 77605,
},
[434740] = {
["source"] = "Nightfall Inquisitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 217518,
},
[412215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[397881] = {
["encounterName"] = "Wise Mari",
["source"] = "Corrupt Living Water",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56511,
},
[1214483] = {
["source"] = "Lead Foreman Krome",
["event"] = "SPELL_CAST_START",
["npcID"] = 225630,
},
[118940] = {
["encounterName"] = "Gekkan",
["source"] = "Glintrok Oracle",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61339,
},
[1214486] = {
["source"] = "Lead Foreman Krome",
["event"] = "SPELL_CAST_START",
["npcID"] = 225630,
},
[361023] = {
["npcID"] = 181005,
},
[473650] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["npcID"] = 229181,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3010,
},
[320069] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164451,
["encounterID"] = 2391,
},
[404027] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[356929] = {
["npcID"] = 179837,
},
[352834] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Soulmage",
["npcID"] = 176959,
},
[1214503] = {
["source"] = "Overseer Dritz",
["event"] = "SPELL_CAST_START",
["npcID"] = 225647,
},
[1214504] = {
["encounterName"] = "Craggle Fritzbrains",
["source"] = "Craggle Fritzbrains",
["npcID"] = 234291,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3095,
},
[444985] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pupating Stinger",
["npcID"] = 216288,
},
[465463] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["npcID"] = 226404,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3054,
},
[279118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[397888] = {
["source"] = "Fallen Waterspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 200126,
},
[397889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[358982] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Warden",
["npcID"] = 180865,
},
[365126] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Absolution",
["encounterID"] = 2544,
["event"] = "SPELL_CAST_START",
["npcID"] = 181548,
},
[387652] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[1214523] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Ascendant",
["npcID"] = 212793,
},
[221487] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Resolute Courtesan",
["npcID"] = 111170,
},
[204082] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsoul Wrathguard",
["npcID"] = 116206,
},
[237870] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[235823] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Risen Soldier",
["npcID"] = 118489,
},
[33111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[449090] = {
["isChanneled"] = true,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[434756] = {
["source"] = "Hired Muscle",
["event"] = "SPELL_CAST_START",
["npcID"] = 210269,
},
[1214546] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[235825] = {
["source"] = "Dread Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 118487,
},
[444998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallowbarb",
["npcID"] = 216078,
},
[159035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shaadum",
["npcID"] = 78728,
},
[350803] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[7948] = {
["encounterName"] = "Alzzin the Wildshaper",
["source"] = "Alzzin the Wildshaper",
["npcID"] = 11492,
["event"] = "SPELL_CAST_START",
["encounterID"] = 346,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[80038] = {
["isChanneled"] = true,
["source"] = "Stonecore Magmalord",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 42789,
},
[313945] = {
["source"] = "Aqir Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 161218,
},
[16430] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thuzadin Necromancer",
["npcID"] = 10400,
},
[397904] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[152894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Initiate of the Rising Sun",
["npcID"] = 79466,
},
[8600] = {
["encounterName"] = "Nekrum Gutchewer",
["source"] = "Nekrum Gutchewer",
["npcID"] = 7796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 598,
},
[465481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfang Hyena",
["npcID"] = 227843,
},
[307805] = {
["encounterName"] = "Maut",
["source"] = "Maut",
["encounterID"] = 2327,
["event"] = "SPELL_CAST_START",
["npcID"] = 156523,
},
[358999] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["npcID"] = 190484,
["encounterID"] = 2623,
},
[461389] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228458,
},
[307808] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 157439,
},
[440912] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lashroom Ambusher",
["npcID"] = 224607,
},
[453199] = {
["source"] = "Vanishing Nightmare",
["event"] = "SPELL_CAST_START",
["npcID"] = 224922,
},
[307809] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[235831] = {
["source"] = "Beaming Eye",
["event"] = "SPELL_CAST_START",
["npcID"] = 118839,
},
[237879] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[1214607] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[377435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Geomancer",
["npcID"] = 187265,
},
[375388] = {
["npcID"] = 190900,
},
[434773] = {
["source"] = "Venture Co. Patron",
["event"] = "SPELL_CAST_START",
["npcID"] = 214668,
},
[297574] = {
["encounterName"] = "Oblivion Elemental",
["source"] = "Oblivion Elemental",
["encounterID"] = 3088,
["event"] = "SPELL_CAST_START",
["npcID"] = 234040,
},
[447060] = {
["isChanneled"] = true,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[350816] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Deathseeker Eye",
["npcID"] = 176531,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[235833] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Risen Mage",
["npcID"] = 118491,
},
[253239] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Juggernaut",
["npcID"] = 122971,
},
[1214620] = {
["encounterName"] = "Maulspike",
["source"] = "Maulspike",
["npcID"] = 234958,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3121,
},
[1214623] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233474,
},
[31405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[381535] = {
["npcID"] = 190388,
},
[473684] = {
["source"] = "Bopper Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231908,
},
[1214628] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Consuming Voidstone",
["npcID"] = 212739,
},
[63830] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33134,
["encounterID"] = 1143,
},
[71339] = {
["encounterName"] = "Icecrown Gunship Battle",
["source"] = "Kor'kron Axethrower",
["encounterID"] = 1099,
["event"] = "SPELL_CAST_START",
["npcID"] = 36968,
},
[426587] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Heartsbane Vinetwister",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[12248] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[1222831] = {
["encounterName"] = "Chrome King Gallywix",
["event"] = "SPELL_CAST_START",
["source"] = "Chrome King Gallywix",
["npcID"] = 231075,
},
[438877] = {
["source"] = "Nakt",
["event"] = "SPELL_CAST_START",
["npcID"] = 218324,
},
[235837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Risen Arbalest",
["npcID"] = 118492,
},
[1222842] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231075,
},
[473691] = {
["source"] = "Bopper Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 231908,
},
[1214656] = {
["encounterName"] = "Maulspike",
["source"] = "Maulspike",
["npcID"] = 234958,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3121,
},
[1214657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ultra-Deluxe Riotguard",
["npcID"] = 230519,
},
[237886] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2059,
},
[350828] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[434786] = {
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 216293,
},
[1231047] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haymar the Devout",
["npcID"] = 242570,
},
[1231049] = {
["source"] = "Haymar the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 242570,
},
[426596] = {
["source"] = "Coven Diviner",
["event"] = "SPELL_CAST_START",
["npcID"] = 131819,
},
[1214670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ultra-Deluxe Riotguard",
["npcID"] = 225748,
},
[1214672] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ultra-Deluxe Riotguard",
["npcID"] = 225748,
},
[101546] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Earth Spirit",
["npcID"] = 69792,
},
[473696] = {
["source"] = "Gold Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 234932,
},
[1214680] = {
["encounterName"] = "Maulspike",
["source"] = "Darkfuse Cackler",
["npcID"] = 235505,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3121,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[261438] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[365168] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Sentry",
["npcID"] = 184530,
},
[471652] = {
["isChanneled"] = true,
["source"] = "Darkfuse Hyena",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226398,
},
[261439] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 131527,
},
[434793] = {
["isChanneled"] = true,
["source"] = "Trilling Attendant",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 216293,
},
[371313] = {
["npcID"] = 2717,
},
[320120] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164463,
["encounterID"] = 2391,
},
[261440] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["encounterID"] = 2116,
["event"] = "SPELL_CAST_START",
["npcID"] = 131527,
},
[346742] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[449130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[285311] = {
["source"] = "Kul Tiran Stormbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 146831,
},
[455275] = {
["source"] = "Shurrai",
["event"] = "SPELL_CAST_START",
["npcID"] = 221224,
},
[1214712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Bruiser",
["npcID"] = 235070,
},
[114859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[445038] = {
["source"] = "Kobyss Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 214343,
},
[318078] = {
["encounterName"] = "Shad'har the Insatiable",
["source"] = "Living Miasma",
["encounterID"] = 2335,
["event"] = "SPELL_CAST_START",
["npcID"] = 157229,
},
[160079] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blackrock Forge Specialist",
["npcID"] = 79200,
},
[62809] = {
["encounterName"] = "Hodir",
["npcID"] = 32897,
["encounterID"] = 1135,
},
[316031] = {
["encounterName"] = "Shad'har the Insatiable",
["source"] = "Shad'har the Insatiable",
["encounterID"] = 2335,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 157231,
},
[449135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glumtooth Bug-Beater",
["npcID"] = 222176,
},
[102573] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Azure Serpent",
["encounterID"] = 1303,
["event"] = "SPELL_CAST_START",
["npcID"] = 56754,
},
[363130] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Lihuvim",
["encounterID"] = 2539,
["event"] = "SPELL_CAST_START",
["npcID"] = 182169,
},
[449136] = {
["isChanneled"] = true,
["source"] = "Glumtooth Trapper",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222176,
},
[434802] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[471662] = {
["event"] = "SPELL_CAST_START",
["source"] = "Giant Gorewalker",
["npcID"] = 225740,
},
[82608] = {
["npcID"] = 3255,
},
[455281] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimslice",
["npcID"] = 221551,
},
[367228] = {
["source"] = "Subjugated Colossus",
["event"] = "SPELL_CAST_START",
["npcID"] = 184767,
},
[1214736] = {
["source"] = "Peet the Wheedler",
["event"] = "SPELL_CAST_START",
["npcID"] = 235071,
},
[1214739] = {
["source"] = "Peet the Wheedler",
["event"] = "SPELL_CAST_START",
["npcID"] = 235071,
},
[262794] = {
["source"] = "Venture Co. Mastermind",
["event"] = "SPELL_CAST_START",
["npcID"] = 133430,
},
[261446] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lady Waycrest",
["encounterID"] = 2116,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 131545,
},
[442998] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Priestess",
["npcID"] = 222688,
},
[62042] = {
["encounterName"] = "Thorim",
["npcID"] = 32865,
["encounterID"] = 1141,
},
[473715] = {
["source"] = "Melbo the Magnificent",
["event"] = "SPELL_CAST_START",
["npcID"] = 229434,
},
[31407] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Spearman",
["npcID"] = 17729,
},
[365185] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominated Sentinel",
["npcID"] = 184659,
},
[261447] = {
["encounterName"] = "Lord and Lady Waycrest",
["source"] = "Lord Waycrest",
["npcID"] = 131527,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2116,
},
[1222949] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2364,
},
[443001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Hierophant",
["npcID"] = 214398,
},
[363139] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Artificer Xy'mox",
["npcID"] = 183501,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2553,
},
[179538] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hatecoil Spitespeaker",
["npcID"] = 89025,
},
[381570] = {
["npcID"] = 190388,
},
[408193] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[402050] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[1214780] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[334476] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[1214790] = {
["source"] = "Melbo the Magnificent",
["event"] = "SPELL_CAST_START",
["npcID"] = 229434,
},
[320144] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[114864] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[1214799] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Skyblaster MK-001",
["npcID"] = 235098,
},
[377483] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deepflayer",
["npcID"] = 221572,
},
[1214804] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Skyblaster MK-001",
["npcID"] = 235098,
},
[350865] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawsworn Vanguard",
["npcID"] = 177154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[377486] = {
["npcID"] = 184335,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 100485,
},
[307863] = {
["encounterName"] = "Inquisitor Gnshal",
["source"] = "Inquisitor Gnshal",
["npcID"] = 234035,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3087,
},
[375439] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[434824] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[164187] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Bombardier",
["npcID"] = 81407,
},
[461446] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grazing Mosswool",
["npcID"] = 212578,
},
[422541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[334488] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[279199] = {
["source"] = "Sabertron Technician",
["event"] = "SPELL_CAST_START",
["npcID"] = 139334,
},
[1214834] = {
["source"] = "Dockmaster Skeez",
["event"] = "SPELL_CAST_START",
["npcID"] = 225706,
},
[165213] = {
["event"] = "SPELL_CAST_START",
["source"] = "Everbloom Cultivator",
["npcID"] = 81985,
},
[389779] = {
["npcID"] = 46914,
},
[387732] = {
["npcID"] = 46914,
},
[449167] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[118963] = {
["source"] = "Glintrok Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 61240,
},
[406165] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[381593] = {
["npcID"] = 184300,
},
[164192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Technician",
["npcID"] = 81236,
},
[443027] = {
["source"] = "High Hollows Duelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 225148,
},
[76473] = {
["source"] = "Twilight Flame Caller",
["event"] = "SPELL_CAST_START",
["npcID"] = 39708,
},
[377500] = {
["npcID"] = 184335,
},
[1214872] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[469650] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[424600] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Podling",
["npcID"] = 211063,
},
[377502] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Murloc",
["npcID"] = 190584,
},
[223579] = {
["event"] = "SPELL_CAST_START",
["source"] = "Or'ell",
["npcID"] = 102495,
},
[451222] = {
["source"] = "Hollows Resident",
["event"] = "SPELL_CAST_START",
["npcID"] = 219983,
},
[473748] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[453271] = {
["source"] = "Aggregation of Horrors",
["event"] = "SPELL_CAST_START",
["npcID"] = 220999,
},
[1223077] = {
["source"] = "Void-Scarred Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 238836,
},
[1223078] = {
["source"] = "Void-Scarred Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 238836,
},
[320168] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[41057] = {
["isChanneled"] = false,
["source"] = "Gamon",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 241702,
},
[1223085] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[320170] = {
["encounterName"] = "Amarth, The Harvester",
["npcID"] = 162692,
["encounterID"] = 2388,
},
[1214897] = {
["source"] = "Dockmaster Skeez",
["event"] = "SPELL_CAST_START",
["npcID"] = 225706,
},
[320171] = {
["encounterName"] = "Amarth, The Harvester",
["npcID"] = 163157,
["encounterID"] = 2388,
},
[17843] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Witch Doctor",
["npcID"] = 5650,
},
[428703] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[447135] = {
["isChanneled"] = true,
["source"] = "Over-Indulged Patron",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 222964,
},
[377512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lava Snail",
["npcID"] = 184851,
},
[430754] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corrupted Oracle",
["npcID"] = 214439,
},
[1223112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hogger",
["npcID"] = 241698,
},
[114872] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bored Student",
["npcID"] = 59614,
},
[406183] = {
["source"] = "Krono Sandtongue",
["event"] = "SPELL_CAST_START",
["npcID"] = 205622,
},
[391849] = {
["npcID"] = 191406,
},
[34659] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["npcID"] = 17978,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1928,
},
[428711] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Dorlita",
["encounterID"] = 2888,
["event"] = "SPELL_CAST_START",
["npcID"] = 213216,
},
[447141] = {
["source"] = "Repurposed Loaderbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 222923,
},
[114873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Slate",
["npcID"] = 59613,
},
[1214943] = {
["source"] = "Zirdo",
["event"] = "SPELL_CAST_START",
["npcID"] = 225705,
},
[225635] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbral Archer",
["npcID"] = 122851,
},
[264893] = {
["source"] = "Auditor Dolp",
["event"] = "SPELL_CAST_START",
["npcID"] = 132182,
},
[447143] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["encounterID"] = 2991,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219856,
},
[191848] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["encounterID"] = 1813,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 91808,
},
[418476] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[195944] = {
["source"] = "Skrog Wavecrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 91796,
},
[114874] = {
["event"] = "SPELL_CAST_START",
["source"] = "Professor Slate",
["npcID"] = 59613,
},
[469671] = {
["source"] = "Clanking Vision",
["event"] = "SPELL_CAST_START",
["npcID"] = 224793,
},
[424621] = {
["source"] = "Sergeant Shaynemail",
["event"] = "SPELL_CAST_START",
["npcID"] = 239836,
},
[443052] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siege Hopebreaker",
["npcID"] = 216019,
},
[400050] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Deepflayer",
["npcID"] = 215773,
},
[369335] = {
["npcID"] = 184107,
},
[371383] = {
["source"] = "Sunblade Magister",
["event"] = "SPELL_CAST_START",
["npcID"] = 24685,
},
[465580] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[453294] = {
["source"] = "Aggregation of Horrors",
["event"] = "SPELL_CAST_START",
["npcID"] = 220999,
},
[389814] = {
["npcID"] = 189955,
},
[367290] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["npcID"] = 180990,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2537,
},
[264903] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqu'sirr",
["npcID"] = 134056,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[266951] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Aka'ali the Conqueror",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135470,
},
[400055] = {
["source"] = "Scavenging Slicer",
["event"] = "SPELL_CAST_START",
["npcID"] = 203384,
},
[1214991] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mk II Electro Shocker",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 230316,
},
[426677] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[34661] = {
["encounterName"] = "Thorngrin the Tender",
["source"] = "Thorngrin the Tender",
["npcID"] = 17978,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1928,
},
[465587] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[1215004] = {
["source"] = "Blackwater Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 235849,
},
[412346] = {
["source"] = "Irontide Corsair",
["event"] = "SPELL_CAST_START",
["npcID"] = 126928,
},
[398012] = {
["npcID"] = 191093,
},
[78530] = {
["event"] = "SPELL_CAST_START",
["source"] = "Petrified Treant",
["npcID"] = 11458,
},
[471733] = {
["source"] = "Disturbed Kelp",
["event"] = "SPELL_CAST_START",
["npcID"] = 231223,
},
[350916] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 179269,
["encounterID"] = 2440,
},
[320200] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[426684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Ravager",
["npcID"] = 212673,
},
[438971] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Ravenous Cinderbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218016,
},
[1215023] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[471736] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Disturbed Kelp",
["npcID"] = 231223,
},
[350919] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[1239601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Ringleader",
["npcID"] = 230020,
},
[438973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Pit Lord",
["npcID"] = 228574,
},
[289488] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 2281,
["event"] = "SPELL_CAST_START",
["npcID"] = 146409,
},
[406210] = {
["source"] = "Thorak Greenscale",
["event"] = "SPELL_CAST_START",
["npcID"] = 205618,
},
[465595] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venture Co. Electrician",
["npcID"] = 231312,
},
[350922] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 179269,
["encounterID"] = 2440,
},
[338636] = {
["npcID"] = 167731,
},
[365257] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Guardian Automa",
["encounterID"] = 2539,
["event"] = "SPELL_CAST_START",
["npcID"] = 182071,
},
[320208] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 164578,
},
[152953] = {
["event"] = "SPELL_CAST_START",
["source"] = "Solar Familiar",
["npcID"] = 76097,
},
[157049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'tash the Destructor",
["npcID"] = 77889,
},
[175479] = {
["npcID"] = 72677,
},
[152954] = {
["encounterName"] = "Vigilant Kaathar",
["source"] = "Vigilant Kaathar",
["npcID"] = 75839,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1686,
},
[175480] = {
["npcID"] = 72677,
},
[35943] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Healer",
["npcID"] = 17730,
},
[264923] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[164218] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Bombardier",
["npcID"] = 81407,
},
[157051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'tash the Destructor",
["npcID"] = 77889,
},
[162171] = {
["encounterName"] = "Rocketspark and Borka",
["source"] = "Railmaster Rocketspark",
["npcID"] = 77803,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1715,
},
[38759] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["npcID"] = 18341,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1900,
},
[261488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Dawnbringer",
["npcID"] = 230016,
},
[1215084] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[157053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Durag the Dominator",
["npcID"] = 77890,
},
[369365] = {
["npcID"] = 184132,
},
[264931] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[1215102] = {
["encounterName"] = "Tussle Tonks",
["source"] = "The Platinum Pummeler",
["encounterID"] = 2257,
["event"] = "SPELL_CAST_START",
["npcID"] = 144244,
},
[377559] = {
["encounterName"] = "Treemouth",
["encounterID"] = 2568,
["npcID"] = 186120,
},
[1239678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Houndmaster",
["npcID"] = 230261,
},
[332509] = {
["npcID"] = 164555,
},
[38760] = {
["encounterName"] = "Pandemonius",
["source"] = "Pandemonius",
["npcID"] = 18341,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1900,
},
[1239681] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Houndmaster",
["npcID"] = 230261,
},
[338653] = {
["npcID"] = 173044,
},
[357083] = {
["event"] = "SPELL_CAST_START",
["source"] = "High Torturer",
["npcID"] = 180864,
},
[334558] = {
["npcID"] = 171448,
},
[170367] = {
["npcID"] = 73468,
},
[357085] = {
["source"] = "Mawsworn Soulmage",
["event"] = "SPELL_CAST_START",
["npcID"] = 176959,
},
[257397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bonesaw",
["npcID"] = 129788,
},
[322274] = {
["encounterName"] = "Nalthor the Rimebinder",
["npcID"] = 164815,
["encounterID"] = 2390,
},
[447187] = {
["encounterName"] = "Researcher Ven'kex",
["source"] = "Researcher Ven'kex",
["encounterID"] = 2991,
["event"] = "SPELL_CAST_START",
["npcID"] = 219856,
},
[229753] = {
["isChanneled"] = true,
["source"] = "Overseer Ingra",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 115273,
},
[469713] = {
["source"] = "Terrifying Vision",
["event"] = "SPELL_CAST_START",
["npcID"] = 224794,
},
[324323] = {
["npcID"] = 165919,
},
[455380] = {
["source"] = "Malfunctioning Railbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 218251,
},
[237945] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Sigryn",
["npcID"] = 116484,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[158083] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adorned Bladetalon",
["npcID"] = 79303,
},
[320230] = {
["encounterName"] = "Dealer Xy'exa",
["npcID"] = 164450,
["encounterID"] = 2400,
},
[152964] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Spawn",
["npcID"] = 75652,
},
[1215140] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nikki the Fixer",
["npcID"] = 230303,
},
[428762] = {
["source"] = "Arena Challenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 161757,
},
[128708] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbling Brew Alemental",
["npcID"] = 59521,
},
[170371] = {
["npcID"] = 77518,
},
[334567] = {
["npcID"] = 171448,
},
[237947] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Jarl Velbrand",
["npcID"] = 116499,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[430812] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[449242] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[457434] = {
["source"] = "Riled Dirtdiver",
["event"] = "SPELL_CAST_START",
["npcID"] = 225905,
},
[102600] = {
["isChanneled"] = true,
["source"] = "Infinite Suppressor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54920,
},
[469721] = {
["source"] = "Bubbles",
["event"] = "SPELL_CAST_START",
["npcID"] = 231197,
},
[1239731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Defensive Construct",
["npcID"] = 239412,
},
[257402] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[418528] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[355048] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Shellcrusher",
["npcID"] = 178139,
},
[237949] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Runeseer Faljar",
["npcID"] = 116496,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2059,
},
[355049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infused Goliath",
["npcID"] = 176535,
},
[62823] = {
["encounterName"] = "Hodir",
["npcID"] = 32893,
["encounterID"] = 1135,
},
[332525] = {
["encounterName"] = "Blightbone",
["npcID"] = 171396,
["encounterID"] = 2387,
},
[237950] = {
["isChanneled"] = true,
["source"] = "Tugar Bloodtotem",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 117230,
},
[332526] = {
["encounterName"] = "Blightbone",
["npcID"] = 171396,
["encounterID"] = 2387,
},
[285428] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Anathos Firecaller",
["encounterID"] = 2285,
["event"] = "SPELL_CAST_START",
["npcID"] = 144692,
},
[99530] = {
["source"] = "Molten Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 53115,
},
[449251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Webspinner",
["npcID"] = 216621,
},
[237952] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Runeseer Faljar",
["npcID"] = 116496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[1239762] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Red Dawn Recruit",
["npcID"] = 232002,
},
[1215194] = {
["encounterName"] = "Tussle Tonks",
["source"] = "The Platinum Pummeler",
["encounterID"] = 2257,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 144244,
},
[361200] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Lihuvim",
["encounterID"] = 2539,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 182169,
},
[1215197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nikki the Fixer",
["npcID"] = 230303,
},
[326389] = {
["encounterName"] = "Echelon",
["npcID"] = 164185,
["encounterID"] = 2380,
},
[443111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightcaller Velys",
["npcID"] = 218520,
},
[365298] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Automated Eliminator",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 184539,
},
[457447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[426731] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Oracle",
["npcID"] = 41096,
},
[152973] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defense Construct",
["npcID"] = 76087,
},
[365299] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Automated Eliminator",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 184539,
},
[410351] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[355062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Guard",
["npcID"] = 178623,
},
[355063] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Guard",
["npcID"] = 178623,
},
[285440] = {
["encounterName"] = "Machinist's Garden",
["source"] = "Head Machinist Sparkflux",
["event"] = "SPELL_CAST_START",
["npcID"] = 144248,
},
[9053] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Wizard",
["npcID"] = 4418,
},
[369399] = {
["npcID"] = 186420,
},
[83151] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["encounterID"] = 1055,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 44819,
},
[369400] = {
["npcID"] = 184132,
},
[314112] = {
["event"] = "SPELL_CAST_START",
["source"] = "Neglected Guild Bank",
["npcID"] = 161293,
},
[357115] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Rager",
["npcID"] = 177915,
},
[221577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Astral Farseer",
["npcID"] = 111170,
},
[206219] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["npcID"] = 104154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[375547] = {
["npcID"] = 191286,
},
[426741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Sentinel",
["npcID"] = 40577,
},
[355070] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Archer",
["npcID"] = 178625,
},
[118988] = {
["encounterName"] = "Gekkan",
["source"] = "Gekkan",
["encounterID"] = 2129,
["event"] = "SPELL_CAST_START",
["npcID"] = 61243,
},
[473841] = {
["source"] = "Gallagio Jackbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 229438,
},
[355072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Darkcaster",
["npcID"] = 178628,
},
[422648] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208745,
},
[457460] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[439031] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[184720] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkcaster Adept",
["npcID"] = 93295,
},
[23224] = {
["event"] = "SPELL_CAST_START",
["source"] = "Baron Silverlaine",
["npcID"] = 3887,
},
[369409] = {
["npcID"] = 184130,
},
[357123] = {
["source"] = "Terrorspine",
["event"] = "SPELL_CAST_START",
["npcID"] = 180779,
},
[357124] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dreadmaw",
["npcID"] = 180780,
},
[369411] = {
["npcID"] = 184301,
},
[357125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hollowsoul",
["npcID"] = 176879,
},
[326409] = {
["npcID"] = 164557,
},
[262929] = {
["source"] = "Bonepicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 152001,
},
[391939] = {
["npcID"] = 189206,
},
[381701] = {
["npcID"] = 190933,
},
[424704] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Gutter",
["npcID"] = 207454,
},
[255371] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[184724] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowheart Fiend",
["npcID"] = 93298,
},
[377608] = {
["npcID"] = 190938,
},
[255372] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122963,
},
[255373] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[267034] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Vol'zith the Whisperer",
["npcID"] = 134069,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[465666] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Jumpstarter",
["npcID"] = 231325,
},
[406282] = {
["source"] = "Thorak Greenscale",
["event"] = "SPELL_CAST_START",
["npcID"] = 205618,
},
[449285] = {
["source"] = "Seeping Crustbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224573,
},
[369423] = {
["npcID"] = 184303,
},
[174489] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defense Construct",
["npcID"] = 76087,
},
[445191] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[1215337] = {
["encounterName"] = "Vindle Snapcrank",
["source"] = "Vindle Snapcrank",
["npcID"] = 234931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3124,
},
[310042] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Basher Tentacle",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158367,
},
[291613] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["encounterID"] = 2260,
["event"] = "SPELL_CAST_START",
["npcID"] = 150396,
},
[449290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sewer Slinker",
["npcID"] = 233827,
},
[250258] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 122965,
},
[273185] = {
["source"] = "Shieldbearer of Zul",
["event"] = "SPELL_CAST_START",
["npcID"] = 127879,
},
[257426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[60781] = {
["source"] = "Forgotten Depths Acolyte",
["event"] = "SPELL_CAST_START",
["npcID"] = 30205,
},
[357144] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["source"] = "Fatespawn Monstrosity",
["npcID"] = 180323,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2431,
},
[1215356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Remote Ticktock",
["npcID"] = 234936,
},
[418578] = {
["source"] = "Illidan Stormrage",
["event"] = "SPELL_CAST_START",
["npcID"] = 205306,
},
[449295] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[426771] = {
["source"] = "Void-Bound Despoiler",
["event"] = "SPELL_CAST_START",
["npcID"] = 212765,
},
[381721] = {
["npcID"] = 6505,
},
[41072] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Blood Mage",
["npcID"] = 22945,
},
[1215374] = {
["encounterName"] = "Vindle Snapcrank",
["source"] = "Vindle Snapcrank",
["npcID"] = 234931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3124,
},
[265001] = {
["encounterName"] = "Aqu'sirr",
["source"] = "Aqualing",
["npcID"] = 134828,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2130,
},
[269097] = {
["encounterName"] = "Lord Stormsong",
["source"] = "Lord Stormsong",
["npcID"] = 134060,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2132,
},
[265002] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Raal the Gluttonous",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131863,
},
[455443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Waxx",
["npcID"] = 226267,
},
[465682] = {
["source"] = "Darkfuse Inspector",
["event"] = "SPELL_CAST_START",
["npcID"] = 231385,
},
[445205] = {
["source"] = "Cinderbee Drone",
["event"] = "SPELL_CAST_START",
["npcID"] = 215024,
},
[277290] = {
["npcID"] = 133399,
},
[82137] = {
["source"] = "Rom'ogg Bonecrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 39665,
},
[330532] = {
["npcID"] = 164510,
},
[62318] = {
["npcID"] = 32883,
},
[445207] = {
["source"] = "Void Bound Howler",
["event"] = "SPELL_CAST_START",
["npcID"] = 221979,
},
[291626] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["encounterID"] = 2260,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 150396,
},
[473876] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globikus",
["npcID"] = 234640,
},
[359203] = {
["npcID"] = 181834,
},
[443162] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[445210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spitfire Charger",
["npcID"] = 213577,
},
[457497] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ixlorb the Spinner",
["npcID"] = 218426,
},
[1215409] = {
["source"] = "Waste Processing Unit",
["event"] = "SPELL_CAST_START",
["npcID"] = 144293,
},
[101592] = {
["source"] = "Murozond",
["event"] = "SPELL_CAST_START",
["npcID"] = 54432,
},
[1215411] = {
["source"] = "Azerite Extractor",
["event"] = "SPELL_CAST_START",
["npcID"] = 136643,
},
[1215412] = {
["source"] = "Metal Gunk",
["event"] = "SPELL_CAST_START",
["npcID"] = 236033,
},
[3256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarab",
["npcID"] = 7269,
},
[320300] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164461,
["encounterID"] = 2391,
},
[152999] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grand Defense Construct",
["npcID"] = 76145,
},
[267060] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Zanazal the Wise",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135472,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[396069] = {
["npcID"] = 191095,
},
[153001] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grand Defense Construct",
["npcID"] = 76145,
},
[308018] = {
["source"] = "Aqir Scarab",
["event"] = "SPELL_CAST_START",
["npcID"] = 157904,
},
[408358] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[173479] = {
["npcID"] = 86690,
},
[348974] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[209315] = {
["isChanneled"] = true,
["source"] = "Greater Void Ravener",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 103692,
},
[469792] = {
["source"] = "Haxle Drillbit",
["event"] = "SPELL_CAST_START",
["npcID"] = 224864,
},
[326450] = {
["npcID"] = 164562,
},
[373549] = {
["source"] = "Proto Dragonfly",
["event"] = "SPELL_CAST_START",
["npcID"] = 191365,
},
[1240020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Cleric",
["npcID"] = 246002,
},
[1240021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Joseph the Enlightened",
["npcID"] = 231777,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[269116] = {
["source"] = "Imbued Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 134599,
},
[1240031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scarlet Confessor",
["npcID"] = 246001,
},
[1240033] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Joseph the Enlightened",
["npcID"] = 229952,
},
[305978] = {
["encounterName"] = "Wrathion",
["source"] = "Wrathion",
["encounterID"] = 2329,
["event"] = "SPELL_CAST_START",
["npcID"] = 156818,
},
[115418] = {
["event"] = "SPELL_CAST_START",
["source"] = "Krik'thik Wind Shaper",
["npcID"] = 59801,
},
[473895] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Globikus",
["npcID"] = 234640,
},
[359222] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176561,
["encounterID"] = 2440,
},
[355127] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Remnant of Kel'Thuzad",
["encounterID"] = 2422,
["event"] = "SPELL_CAST_START",
["npcID"] = 176929,
},
[375605] = {
["npcID"] = 185272,
},
[1215481] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Volunteer Rocketeer",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 230312,
},
[130265] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunder Hold Soldier",
["npcID"] = 66291,
},
[1240058] = {
["event"] = "SPELL_CAST_START",
["source"] = "Joseph the Enlightened",
["npcID"] = 229952,
},
[394037] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Dalaran",
["npcID"] = 223799,
},
[332605] = {
["npcID"] = 170572,
},
[334653] = {
["npcID"] = 165076,
},
[369465] = {
["npcID"] = 186420,
},
[420659] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[271174] = {
["source"] = "Pallid Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 137830,
},
[355132] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Scalebinder",
["npcID"] = 178141,
},
[130266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thunder Hold Soldier",
["npcID"] = 66200,
},
[332608] = {
["npcID"] = 170572,
},
[473903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globikus",
["npcID"] = 234640,
},
[473904] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Globikus",
["npcID"] = 234640,
},
[330562] = {
["npcID"] = 164506,
},
[434998] = {
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_START",
["npcID"] = 214697,
},
[269131] = {
["encounterName"] = "Lord Stormsong",
["source"] = "Lord Stormsong",
["npcID"] = 134060,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2132,
},
[332612] = {
["npcID"] = 170572,
},
[91872] = {
["encounterName"] = "Siamat",
["source"] = "Servant of Siamat",
["encounterID"] = 1055,
["event"] = "SPELL_CAST_START",
["npcID"] = 45259,
},
[1215521] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 236942,
},
[391998] = {
["npcID"] = 191403,
},
[281420] = {
["source"] = "Bilge Rat Brinescale",
["event"] = "SPELL_CAST_START",
["npcID"] = 129600,
},
[182705] = {
["source"] = "Bleeding Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 92041,
},
[359235] = {
["event"] = "SPELL_CAST_START",
["source"] = "Halondrus",
["npcID"] = 180906,
},
[455480] = {
["source"] = "Take",
["event"] = "SPELL_CAST_START",
["npcID"] = 226272,
},
[473910] = {
["source"] = "Darkfuse Precipitant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231310,
},
[1215532] = {
["source"] = "Foreman Luddy",
["event"] = "SPELL_CAST_START",
["npcID"] = 225724,
},
[363332] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["npcID"] = 180990,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2537,
},
[334664] = {
["npcID"] = 171341,
},
[435004] = {
["isChanneled"] = true,
["source"] = "Chef Chewie",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214697,
},
[469816] = {
["isChanneled"] = false,
["source"] = "Bubbles",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231197,
},
[351047] = {
["npcID"] = 178392,
},
[314188] = {
["isChanneled"] = true,
["source"] = "Void Horror",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 161335,
},
[469818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bubbles",
["npcID"] = 231197,
},
[387910] = {
["npcID"] = 196200,
},
[392006] = {
["event"] = "SPELL_CAST_START",
["source"] = "Particularly Bad Guy",
["npcID"] = 220432,
},
[306001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidcrazed Hulk",
["npcID"] = 156143,
},
[357196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Wiseguy",
["npcID"] = 180336,
},
[473918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Globlin",
["npcID"] = 234655,
},
[428868] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["encounterID"] = 1047,
["event"] = "SPELL_CAST_START",
["npcID"] = 213770,
},
[357197] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Wiseguy",
["npcID"] = 180336,
},
[424773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gnarled Reviver",
["npcID"] = 207468,
},
[467776] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Pit Mechanic",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 228514,
},
[469824] = {
["source"] = "Defense Bot",
["event"] = "SPELL_CAST_START",
["npcID"] = 224865,
},
[412488] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crawling Goo",
["npcID"] = 205820,
},
[398154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defiled Spirit",
["npcID"] = 75451,
},
[1215577] = {
["source"] = "Fusetwister Trish",
["event"] = "SPELL_CAST_START",
["npcID"] = 225728,
},
[432967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[99555] = {
["source"] = "Molten Lord",
["event"] = "SPELL_CAST_START",
["npcID"] = 53115,
},
[392013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shard of Dalaran",
["npcID"] = 223799,
},
[473924] = {
["source"] = "Darkfuse Precipitant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231310,
},
[342869] = {
["npcID"] = 168934,
},
[361300] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of War",
["npcID"] = 181549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[1215600] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Sathel the Accursed",
["encounterID"] = 2391,
["event"] = "SPELL_CAST_START",
["npcID"] = 164461,
},
[297822] = {
["encounterName"] = "Thrall the Corrupted",
["source"] = "Thrall",
["encounterID"] = 3086,
["event"] = "SPELL_CAST_START",
["npcID"] = 234034,
},
[257458] = {
["encounterName"] = "Lord Harlan Sweete",
["source"] = "Harlan Sweete",
["encounterID"] = 2096,
["event"] = "SPELL_CAST_START",
["npcID"] = 126983,
},
[428879] = {
["source"] = "Rock Smasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 213954,
},
[105700] = {
["isChanneled"] = true,
["source"] = "Twilight Assaulter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56252,
},
[1223803] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["encounterID"] = 2364,
["event"] = "SPELL_CAST_START",
["npcID"] = 162309,
},
[293729] = {
["isChanneled"] = true,
["source"] = "Mechagon Mechanic",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 144295,
},
[196027] = {
["source"] = "Ritualist Lesha",
["event"] = "SPELL_CAST_START",
["npcID"] = 100248,
},
[324447] = {
["source"] = "Kobyss Spearfisher",
["event"] = "SPELL_CAST_START",
["npcID"] = 214338,
},
[406358] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[196028] = {
["source"] = "Hatecoil Arcanist",
["event"] = "SPELL_CAST_START",
["npcID"] = 97171,
},
[369499] = {
["isChanneled"] = false,
["source"] = "Halondrus",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 180906,
},
[369500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Halondrus",
["npcID"] = 180906,
},
[412505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyr's Vanguard",
["npcID"] = 205151,
},
[351073] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2432,
},
[389981] = {
["npcID"] = 189955,
},
[359265] = {
["npcID"] = 185415,
},
[320358] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[357218] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowsteel Colossus",
["npcID"] = 176957,
},
[351075] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawsworn Vanguard",
["npcID"] = 177154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[357219] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowsteel Colossus",
["npcID"] = 176957,
},
[449368] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wanderer Ida",
["npcID"] = 220953,
},
[96488] = {
["isChanneled"] = true,
["source"] = "Gurubashi Cauldron-Mixer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 52076,
},
[465751] = {
["event"] = "SPELL_CAST_START",
["source"] = "Seafeather Albatross",
["npcID"] = 227668,
},
[1215660] = {
["source"] = "Causticaria",
["event"] = "SPELL_CAST_START",
["npcID"] = 225433,
},
[349030] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[465752] = {
["event"] = "SPELL_CAST_START",
["source"] = "Driftwave Sealion",
["npcID"] = 228156,
},
[426845] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infested Icecaller",
["npcID"] = 84989,
},
[34170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Geomancer",
["npcID"] = 18420,
},
[424798] = {
["source"] = "Infected Beast",
["event"] = "SPELL_CAST_START",
["npcID"] = 210478,
},
[289647] = {
["source"] = "Breakwater Elemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 148569,
},
[166341] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Far Seer",
["npcID"] = 82579,
},
[216511] = {
["source"] = "Twilight Deacon Farthing",
["event"] = "SPELL_CAST_START",
["npcID"] = 101148,
},
[346985] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["npcID"] = 175611,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2423,
},
[252347] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nhal'athoth",
["npcID"] = 121663,
},
[330604] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vault Weaver",
["npcID"] = 200375,
},
[118503] = {
["isChanneled"] = true,
["source"] = "Lieutenant Elsbeth Wavecutter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 145230,
},
[443232] = {
["source"] = "Nightfall Lookout",
["event"] = "SPELL_CAST_START",
["npcID"] = 217485,
},
[71405] = {
["encounterName"] = "Blood Council",
["source"] = "Prince Keleseth",
["encounterID"] = 1095,
["event"] = "SPELL_CAST_START",
["npcID"] = 37972,
},
[408422] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[361324] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["npcID"] = 180906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2529,
},
[255421] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122963,
},
[465761] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[473955] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Machinist",
["npcID"] = 229272,
},
[387950] = {
["npcID"] = 187919,
},
[359282] = {
["event"] = "SPELL_CAST_START",
["source"] = "Automated Eliminator",
["npcID"] = 184539,
},
[69871] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Frostwing Whelp",
["npcID"] = 37023,
},
[330614] = {
["npcID"] = 163086,
},
[389999] = {
["npcID"] = 189955,
},
[433002] = {
["source"] = "Bloodstained Assistant",
["event"] = "SPELL_CAST_START",
["npcID"] = 216333,
},
[320376] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 164578,
},
[449385] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wanderer Ida",
["npcID"] = 220953,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[265088] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[469864] = {
["source"] = "Haywire MEK IV",
["event"] = "SPELL_CAST_START",
["npcID"] = 224918,
},
[102124] = {
["isChanneled"] = true,
["source"] = "Time-Twisted Breaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 54552,
},
[451435] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidwraith",
["npcID"] = 224466,
},
[357239] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Gorgoan Sentinel",
["encounterID"] = 2436,
["event"] = "SPELL_CAST_START",
["npcID"] = 180407,
},
[459627] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[1215738] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Paceran the Virulent",
["npcID"] = 164463,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2391,
},
[322429] = {
["npcID"] = 162057,
},
[166350] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grom'kar Far Seer",
["npcID"] = 82590,
},
[375671] = {
["npcID"] = 190900,
},
[473964] = {
["source"] = "Gallagio Dealer",
["event"] = "SPELL_CAST_START",
["npcID"] = 229437,
},
[383864] = {
["npcID"] = 191403,
},
[332671] = {
["npcID"] = 170480,
},
[428916] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[357245] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Gorgoan Sentinel",
["encounterID"] = 2436,
["event"] = "SPELL_CAST_START",
["npcID"] = 180407,
},
[383866] = {
["npcID"] = 194526,
},
[426869] = {
["source"] = "Waterworks Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 222979,
},
[257478] = {
["source"] = "Irontide Mastiff",
["event"] = "SPELL_CAST_START",
["npcID"] = 128551,
},
[387965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Bladewing",
["npcID"] = 187232,
},
[371584] = {
["npcID"] = 46859,
},
[260551] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[473972] = {
["source"] = "Underpaid Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 231909,
},
[398206] = {
["event"] = "SPELL_CAST_START",
["source"] = "Exhumed Spirit",
["npcID"] = 75979,
},
[351109] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawsworn Hopebreaker",
["npcID"] = 177787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[406399] = {
["source"] = "Malgosa Spellbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 205620,
},
[377732] = {
["npcID"] = 184319,
},
[182739] = {
["source"] = "Sinister Shrieker",
["event"] = "SPELL_CAST_START",
["npcID"] = 101900,
},
[471930] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Reel Assistant",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228463,
},
[441214] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[363400] = {
["source"] = "Vespoid Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 178158,
},
[367496] = {
["source"] = "Foul Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 185537,
},
[259531] = {
["encounterName"] = "Vol'kaal",
["source"] = "Reanimation Totem",
["encounterID"] = 2085,
["event"] = "SPELL_CAST_START",
["npcID"] = 125977,
},
[426883] = {
["source"] = "Kobold Taskworker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212383,
},
[355212] = {
["source"] = "Mawsworn Seeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 178630,
},
[351117] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawforged Souljudge",
["npcID"] = 177889,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[33919] = {
["encounterName"] = "Tavarok",
["source"] = "Tavarok",
["npcID"] = 18343,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1901,
},
[235984] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Corrupted Risen Arbalest",
["npcID"] = 118492,
},
[167385] = {
["npcID"] = 92168,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["encounterID"] = 1041,
["event"] = "SPELL_CAST_START",
["npcID"] = 43873,
},
[469890] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostfire Elemental",
["npcID"] = 234761,
},
[15585] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Healer",
["npcID"] = 17730,
},
[469893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Frostfire Elemental",
["npcID"] = 234761,
},
[365458] = {
["source"] = "Subjugator Zeltoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 184651,
},
[1215850] = {
["source"] = "Dokigg the Brutalizer",
["event"] = "SPELL_CAST_START",
["npcID"] = 167538,
},
[166364] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Iron Infantry",
["npcID"] = 82579,
},
[1240428] = {
["event"] = "SPELL_CAST_START",
["source"] = "Joseph the Enlightened",
["npcID"] = 231777,
},
[192985] = {
["encounterName"] = "Wrath of Azshara",
["source"] = "Wrath of Azshara",
["encounterID"] = 1814,
["event"] = "SPELL_CAST_START",
["npcID"] = 96028,
},
[283551] = {
["encounterName"] = "King Mechagon",
["source"] = "Omega Buster",
["encounterID"] = 2260,
["event"] = "SPELL_CAST_START",
["npcID"] = 144249,
},
[102132] = {
["source"] = "Time-Twisted Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 54552,
},
[473993] = {
["event"] = "SPELL_CAST_START",
["source"] = "Masked Freelancer",
["npcID"] = 231910,
},
[469898] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana-Craving Felhunter",
["npcID"] = 228819,
},
[334747] = {
["npcID"] = 166302,
},
[355225] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Fishmancer",
["npcID"] = 178142,
},
[1215870] = {
["encounterName"] = "Vindle Snapcrank",
["source"] = "Vindle Snapcrank",
["npcID"] = 234931,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3124,
},
[334748] = {
["npcID"] = 166302,
},
[469900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechano Wolf",
["npcID"] = 228050,
},
[252372] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nhal'athoth",
["npcID"] = 121663,
},
[410516] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[1215877] = {
["event"] = "SPELL_CAST_START",
["source"] = "Raging Kaja'mite Gemsplitter",
["npcID"] = 228588,
},
[40832] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[195037] = {
["source"] = "Hatecoil Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 95861,
},
[433045] = {
["source"] = "Underpin's Well-Connected Friend",
["event"] = "SPELL_CAST_START",
["npcID"] = 234901,
},
[69882] = {
["npcID"] = 37030,
},
[332706] = {
["npcID"] = 170490,
},
[474001] = {
["event"] = "SPELL_CAST_START",
["source"] = "Masked Freelancer",
["npcID"] = 231910,
},
[357280] = {
["source"] = "Mawsworn Paindrinker",
["event"] = "SPELL_CAST_START",
["npcID"] = 180387,
},
[336803] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unbound Shademongrel",
["npcID"] = 175819,
},
[332708] = {
["npcID"] = 167532,
},
[426905] = {
["source"] = "Minion of Ghur'sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 212778,
},
[1215905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Geargrave",
["npcID"] = 234949,
},
[465813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Undercrawler",
["npcID"] = 231380,
},
[1215910] = {
["source"] = "Underboss Paulie",
["event"] = "SPELL_CAST_START",
["npcID"] = 225725,
},
[459671] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[306090] = {
["encounterName"] = "Ra-den the Despoiled",
["source"] = "Abyssal Watcher",
["encounterID"] = 2331,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 156884,
},
[441242] = {
["source"] = "Taste Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220060,
},
[269232] = {
["encounterName"] = "King Dazar",
["source"] = "Reban",
["encounterID"] = 2143,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 136984,
},
[359334] = {
["npcID"] = 181862,
},
[443292] = {
["source"] = "Devouring Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217870,
},
[377765] = {
["npcID"] = 189205,
},
[169445] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Abomination",
["npcID"] = 84767,
},
[295856] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian of Azeroth",
["npcID"] = 152396,
},
[62335] = {
["encounterName"] = "Thorim",
["npcID"] = 32886,
["encounterID"] = 1141,
},
[385958] = {
["encounterName"] = "Vexamus",
["encounterID"] = 2562,
["npcID"] = 194181,
},
[318383] = {
["encounterName"] = "Il'gynoth, Corruption Reborn",
["source"] = "Clotted Corruption",
["encounterID"] = 2345,
["event"] = "SPELL_CAST_START",
["npcID"] = 163678,
},
[465822] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Crossfire",
["npcID"] = 230299,
},
[439202] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[57984] = {
["npcID"] = 95061,
},
[459681] = {
["source"] = "Coursehare",
["event"] = "SPELL_CAST_START",
["npcID"] = 228192,
},
[1215953] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["encounterID"] = 1050,
["event"] = "SPELL_CAST_START",
["npcID"] = 40177,
},
[441252] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forming Whispers",
["npcID"] = 218511,
},
[1215957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Geargrave",
["npcID"] = 234949,
},
[465826] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkfuse Crossfire",
["npcID"] = 230299,
},
[459683] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["npcID"] = 225821,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[161258] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Grom'kar Boomer",
["npcID"] = 80935,
},
[195046] = {
["source"] = "Hatecoil Oracle",
["event"] = "SPELL_CAST_START",
["npcID"] = 95861,
},
[474018] = {
["source"] = "Voidrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[449447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Roskarrag",
["npcID"] = 221071,
},
[1215975] = {
["source"] = "Geargrave",
["event"] = "SPELL_CAST_START",
["npcID"] = 234949,
},
[459687] = {
["source"] = "Shalba",
["event"] = "SPELL_CAST_START",
["npcID"] = 218171,
},
[451497] = {
["source"] = "Breach",
["event"] = "SPELL_CAST_START",
["npcID"] = 224443,
},
[157165] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Zealot",
["npcID"] = 77132,
},
[166380] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Captain",
["npcID"] = 82597,
},
[100604] = {
["encounterName"] = "Ragnaros",
["source"] = "Ragnaros",
["encounterID"] = 1203,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 52409,
},
[289727] = {
["source"] = "Gnomish Commando",
["event"] = "SPELL_CAST_START",
["npcID"] = 148442,
},
[36228] = {
["source"] = "Clanking Vision",
["event"] = "SPELL_CAST_START",
["npcID"] = 224793,
},
[72960] = {
["npcID"] = 37663,
},
[449453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Roskarrag",
["npcID"] = 221071,
},
[404403] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[449455] = {
["source"] = "Ghastly Voidsoul",
["event"] = "SPELL_CAST_START",
["npcID"] = 212453,
},
[453551] = {
["source"] = "Wavecrasher Jurvak",
["event"] = "SPELL_CAST_START",
["npcID"] = 222728,
},
[463790] = {
["source"] = "Darkfuse Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229180,
},
[293827] = {
["source"] = "Mechagon Tinkerer",
["event"] = "SPELL_CAST_START",
["npcID"] = 144294,
},
[100094] = {
["source"] = "Harbinger of Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 53793,
},
[170480] = {
["npcID"] = 79589,
},
[157170] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulbinder",
["npcID"] = 77812,
},
[336834] = {
["npcID"] = 184606,
},
[424888] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A.",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[231914] = {
["source"] = "Archmage Xylem",
["event"] = "SPELL_CAST_START",
["npcID"] = 116295,
},
[100095] = {
["source"] = "Harbinger of Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 53793,
},
[287691] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[157172] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sargerei Soulbinder",
["npcID"] = 77812,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[424891] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[318409] = {
["source"] = "Shath'Yar Scribe",
["event"] = "SPELL_CAST_START",
["npcID"] = 163690,
},
[265168] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["npcID"] = 133219,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2094,
},
[256489] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["npcID"] = 126969,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2095,
},
[330697] = {
["npcID"] = 170690,
},
[308172] = {
["source"] = "Fallen Voidspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 152722,
},
[197105] = {
["source"] = "Channeler Varisz",
["event"] = "SPELL_CAST_START",
["npcID"] = 100249,
},
[1216056] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazefeather Peacock",
["npcID"] = 226561,
},
[1216059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazefeather Peacock",
["npcID"] = 226561,
},
[455613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Bot",
["npcID"] = 236838,
},
[320462] = {
["npcID"] = 165137,
},
[326607] = {
["npcID"] = 167612,
},
[330703] = {
["source"] = "Blighted Sludge-Spewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 174210,
},
[1240647] = {
["isChanneled"] = false,
["source"] = "Fallen Shaman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 245907,
},
[7154] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eldreth Spectre",
["npcID"] = 11473,
},
[359374] = {
["npcID"] = 181862,
},
[256494] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[424903] = {
["encounterName"] = "E.D.N.A.",
["source"] = "E.D.N.A.",
["encounterID"] = 2854,
["event"] = "SPELL_CAST_START",
["npcID"] = 210108,
},
[463811] = {
["source"] = "Darkfuse Gunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229180,
},
[314326] = {
["source"] = "Crushing Tendril",
["event"] = "SPELL_CAST_START",
["npcID"] = 161312,
},
[15587] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Acolyte",
["npcID"] = 16594,
},
[474052] = {
["source"] = "Bloodfueled Junker",
["event"] = "SPELL_CAST_START",
["npcID"] = 225814,
},
[189944] = {
["source"] = "Mystic Velruun",
["event"] = "SPELL_CAST_START",
["npcID"] = 95602,
},
[121601] = {
["source"] = "Harthak Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 61946,
},
[383953] = {
["source"] = "Bakar Companion",
["event"] = "SPELL_CAST_START",
["npcID"] = 194255,
},
[453577] = {
["source"] = "Wavecrasher Jurvak",
["event"] = "SPELL_CAST_START",
["npcID"] = 222728,
},
[167420] = {
["npcID"] = 79823,
},
[435148] = {
["source"] = "Risen Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 212835,
},
[154110] = {
["encounterName"] = "Araknath",
["source"] = "Araknath",
["npcID"] = 76141,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1699,
},
[293854] = {
["isChanneled"] = false,
["source"] = "Mechagon Tinkerer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 144294,
},
[166397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Scout",
["npcID"] = 82590,
},
[193018] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["encounterID"] = 1812,
["event"] = "SPELL_CAST_START",
["npcID"] = 91797,
},
[463819] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkfuse Brute",
["npcID"] = 229161,
},
[330716] = {
["npcID"] = 167998,
},
[351194] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Soulrender Dormazain",
["npcID"] = 175727,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2434,
},
[447439] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 207946,
},
[70409] = {
["npcID"] = 37664,
},
[259572] = {
["encounterName"] = "Vol'kaal",
["source"] = "Vol'kaal",
["encounterID"] = 2085,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122965,
},
[465871] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Bloodwarper",
["npcID"] = 230748,
},
[426964] = {
["source"] = "Arathi Footman",
["event"] = "SPELL_CAST_START",
["npcID"] = 206705,
},
[123651] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Kargesh Ribcrusher",
["npcID"] = 61947,
},
[1216142] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[293861] = {
["source"] = "Anti-Personnel Squirrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 151613,
},
[453586] = {
["source"] = "Wavecrasher Jurvak",
["event"] = "SPELL_CAST_START",
["npcID"] = 222728,
},
[34697] = {
["encounterName"] = "Laj",
["source"] = "Laj",
["npcID"] = 17980,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1927,
},
[29765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Protector",
["npcID"] = 17993,
},
[453588] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coalesced Monstrosity",
["npcID"] = 220266,
},
[123652] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[463828] = {
["source"] = "Darkfuse Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 229161,
},
[336868] = {
["source"] = "Monstrous Riftcrasher",
["event"] = "SPELL_CAST_START",
["npcID"] = 184606,
},
[1240735] = {
["source"] = "Waking Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 230580,
},
[69387] = {
["npcID"] = 36807,
},
[451543] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[222716] = {
["source"] = "Taintheart Befouler",
["event"] = "SPELL_CAST_START",
["npcID"] = 111354,
},
[283628] = {
["source"] = "Rezani Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 147895,
},
[32197] = {
["npcID"] = 66267,
},
[443353] = {
["source"] = "Truffle Gorger",
["event"] = "SPELL_CAST_START",
["npcID"] = 217754,
},
[1240745] = {
["event"] = "SPELL_CAST_START",
["source"] = "Red Dawn Confessor",
["npcID"] = 232002,
},
[153094] = {
["encounterName"] = "Sadana Bloodfury",
["source"] = "Sadana Bloodfury",
["npcID"] = 75509,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1677,
},
[435165] = {
["source"] = "Sir Braunpyke",
["event"] = "SPELL_CAST_START",
["npcID"] = 217658,
},
[1216186] = {
["event"] = "SPELL_CAST_START",
["source"] = "Volo the Leg-Breaker",
["npcID"] = 226516,
},
[445406] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Wandering Gutter",
["npcID"] = 214551,
},
[324589] = {
["encounterName"] = "Mordretha",
["source"] = "Deathwalker",
["encounterID"] = 2404,
["event"] = "SPELL_CAST_START",
["npcID"] = 166524,
},
[192003] = {
["encounterName"] = "Serpentrix",
["source"] = "Blazing Hydra Spawn",
["encounterID"] = 1813,
["event"] = "SPELL_CAST_START",
["npcID"] = 97259,
},
[355306] = {
["npcID"] = 179778,
},
[357354] = {
["event"] = "SPELL_CAST_START",
["source"] = "Loom Guardian",
["npcID"] = 180427,
},
[469981] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[269302] = {
["source"] = "Hired Assassin",
["event"] = "SPELL_CAST_START",
["npcID"] = 134232,
},
[328687] = {
["npcID"] = 166079,
},
[318449] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158041,
},
[267256] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Earthwall Totem",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135759,
},
[443363] = {
["source"] = "Aspiring Sand Castle",
["event"] = "SPELL_CAST_START",
["npcID"] = 236769,
},
[404456] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[267257] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Thundering Totem",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135761,
},
[418791] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bill",
["npcID"] = 211062,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["npcID"] = 189340,
},
[461796] = {
["source"] = "Darkfuse Demolitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229212,
},
[412651] = {
["isChanneled"] = true,
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205490,
},
[453607] = {
["source"] = "Shurrai",
["event"] = "SPELL_CAST_START",
["npcID"] = 221224,
},
[418796] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bill",
["npcID"] = 211062,
},
[32908] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodwarder Falconer",
["npcID"] = 17994,
},
[474087] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2364,
},
[322554] = {
["encounterName"] = "Executor Tarvold",
["npcID"] = 162103,
["encounterID"] = 2361,
},
[269313] = {
["source"] = "Wanton Sapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 130653,
},
[1216244] = {
["encounterName"] = "Underpin",
["source"] = "Crony",
["encounterID"] = 3138,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 237432,
},
[469993] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[472041] = {
["source"] = "Mechanized Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 136139,
},
[273411] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Aspix",
["encounterID"] = 2124,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 133944,
},
[201226] = {
["source"] = "Bloodtainted Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100531,
},
[406516] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[1240833] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadow Elemental",
["npcID"] = 220572,
},
[4979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Evoker",
["npcID"] = 1729,
},
[453616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Doomguard",
["npcID"] = 225493,
},
[10277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherbark Axe Thrower",
["npcID"] = 230273,
},
[472047] = {
["source"] = "Arrogant Intruder",
["event"] = "SPELL_CAST_START",
["npcID"] = 225823,
},
[449522] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Disruptor",
["npcID"] = 216356,
},
[361469] = {
["npcID"] = 185800,
},
[404472] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[267273] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Zanazal the Wise",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135472,
},
[465905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Junkyard Shredder",
["npcID"] = 229220,
},
[287751] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[1216278] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lenny the Loanshark",
["npcID"] = 226517,
},
[310277] = {
["encounterName"] = "Drest'agath",
["source"] = "Drest'agath",
["encounterID"] = 2343,
["event"] = "SPELL_CAST_START",
["npcID"] = 157602,
},
[328707] = {
["npcID"] = 168992,
},
[91408] = {
["isChanneled"] = true,
["source"] = "Augh",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 49045,
},
[196111] = {
["encounterName"] = "Serpentrix",
["source"] = "Seaspray Crab",
["encounterID"] = 1813,
["event"] = "SPELL_CAST_START",
["npcID"] = 91793,
},
[287757] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[1224492] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Wild Thunderbolt",
["npcID"] = 235187,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[365572] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominated Grunt",
["npcID"] = 184733,
},
[1224494] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overcharged Pylon",
["npcID"] = 240018,
},
[408576] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[472057] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[112911] = {
["source"] = "Fragment of Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 58810,
},
[365576] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Eternal Sentry",
["npcID"] = 184742,
},
[1216320] = {
["event"] = "SPELL_CAST_START",
["source"] = "Radioactive Rat",
["npcID"] = 228494,
},
[312336] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["encounterID"] = 2328,
["event"] = "SPELL_CAST_START",
["npcID"] = 156575,
},
[390151] = {
["npcID"] = 189955,
},
[369674] = {
["npcID"] = 184022,
},
[347149] = {
["encounterName"] = "Timecap'n Hooktail",
["source"] = "Timecap'n Hooktail",
["encounterID"] = 2419,
["event"] = "SPELL_CAST_START",
["npcID"] = 175546,
},
[369675] = {
["npcID"] = 184022,
},
[1216334] = {
["event"] = "SPELL_CAST_START",
["source"] = "Radioactive Rat",
["npcID"] = 228494,
},
[408583] = {
["isChanneled"] = true,
["source"] = "Lava Storm",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 204456,
},
[369677] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184580,
},
[459779] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226402,
},
[306199] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidcrazed Hulk",
["npcID"] = 156143,
},
[291865] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["npcID"] = 150396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2260,
},
[441351] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[396302] = {
["source"] = "Geothermus",
["event"] = "SPELL_CAST_START",
["npcID"] = 217416,
},
[357396] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Scryer",
["npcID"] = 180070,
},
[310298] = {
["source"] = "Sinister Soulcarver",
["event"] = "SPELL_CAST_START",
["npcID"] = 162717,
},
[355349] = {
["source"] = "Reality Breacher",
["event"] = "SPELL_CAST_START",
["npcID"] = 184185,
},
[75543] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["encounterID"] = 1040,
["event"] = "SPELL_CAST_START",
["npcID"] = 39665,
},
[263202] = {
["source"] = "Venture Co. Earthshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 130661,
},
[355352] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["npcID"] = 175731,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[267299] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Vol'zith the Whisperer",
["npcID"] = 134069,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[461836] = {
["source"] = "Flickerflame Candleflyer",
["event"] = "SPELL_CAST_START",
["npcID"] = 219341,
},
[200218] = {
["source"] = "Reaves",
["event"] = "SPELL_CAST_START",
["npcID"] = 101462,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["npcID"] = 208747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[243221] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Abyss Caller",
["npcID"] = 121761,
},
[357402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Scryer",
["npcID"] = 180070,
},
[314400] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Blood",
["npcID"] = 159312,
},
[474125] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Growler",
["npcID"] = 227903,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[148002] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blazebound Chanter",
["npcID"] = 72897,
},
[330784] = {
["npcID"] = 174197,
},
[263209] = {
["source"] = "Mine Rat",
["event"] = "SPELL_CAST_START",
["npcID"] = 130437,
},
[396313] = {
["npcID"] = 189542,
},
[291878] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["encounterID"] = 2260,
["event"] = "SPELL_CAST_START",
["npcID"] = 150396,
},
[304165] = {
["source"] = "Misha",
["event"] = "SPELL_CAST_START",
["npcID"] = 155656,
},
[353312] = {
["encounterName"] = "Hylbrande",
["source"] = "Hylbrande",
["npcID"] = 175663,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2426,
},
[465939] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Skyfire",
["npcID"] = 227955,
},
[451605] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[1216414] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Beam Turret",
["npcID"] = 230358,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[465940] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Conqueror",
["npcID"] = 227655,
},
[38033] = {
["source"] = "Darktide Witch",
["event"] = "SPELL_CAST_START",
["npcID"] = 147290,
},
[298025] = {
["source"] = "SI:7 Informant",
["event"] = "SPELL_CAST_START",
["npcID"] = 156795,
},
[196127] = {
["encounterName"] = "Serpentrix",
["source"] = "Mak'rana Siltwalker",
["encounterID"] = 1813,
["event"] = "SPELL_CAST_START",
["npcID"] = 91790,
},
[172578] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Melded Berserker",
["npcID"] = 86372,
},
[308265] = {
["source"] = "Alx'kov the Infested",
["event"] = "SPELL_CAST_START",
["npcID"] = 152809,
},
[408605] = {
["source"] = "Sundered Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 198869,
},
[459799] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["npcID"] = 226402,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[1216431] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["encounterID"] = 2257,
["event"] = "SPELL_CAST_START",
["npcID"] = 145185,
},
[1241014] = {
["event"] = "SPELL_CAST_START",
["source"] = "Treasure Goblin",
["npcID"] = 205490,
},
[1216443] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["encounterID"] = 2257,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 145185,
},
[369703] = {
["encounterName"] = "Bromach",
["encounterID"] = 2556,
["npcID"] = 184018,
},
[463900] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["npcID"] = 229177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[361513] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["source"] = "Dausegne",
["npcID"] = 181224,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2540,
},
[298033] = {
["source"] = "SI:7 Informant",
["event"] = "SPELL_CAST_START",
["npcID"] = 156795,
},
[316463] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Mindgate",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158374,
},
[69405] = {
["npcID"] = 36844,
},
[449568] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[429091] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[406566] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[408614] = {
["source"] = "Sundered Devastator",
["event"] = "SPELL_CAST_START",
["npcID"] = 198869,
},
[287797] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[1241036] = {
["source"] = "Fallen Shaman",
["event"] = "SPELL_CAST_START",
["npcID"] = 245907,
},
[443427] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[306228] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Flayed Soul",
["npcID"] = 157005,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[463905] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patreux",
["npcID"] = 211061,
},
[377900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Attendant",
["npcID"] = 241433,
},
[308278] = {
["encounterName"] = "Alleria Windrunner",
["source"] = "Alleria Windrunner",
["encounterID"] = 3081,
["event"] = "SPELL_CAST_START",
["npcID"] = 233675,
},
[1216475] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["encounterID"] = 2364,
["event"] = "SPELL_CAST_START",
["npcID"] = 162309,
},
[336947] = {
["source"] = "Unbreakable Urtz",
["event"] = "SPELL_CAST_START",
["npcID"] = 162853,
},
[1224669] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[474147] = {
["source"] = "Gallagio Cocktail",
["event"] = "SPELL_CAST_START",
["npcID"] = 229435,
},
[408620] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Obsidian Guard",
["npcID"] = 200836,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[400430] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[80158] = {
["source"] = "Stonecore Warbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 42696,
},
[326712] = {
["npcID"] = 167956,
},
[50066] = {
["npcID"] = 27936,
},
[42131] = {
["npcID"] = 4973,
},
[17228] = {
["encounterName"] = "Zevrim Thornhoof",
["source"] = "Zevrim Thornhoof",
["npcID"] = 11490,
["event"] = "SPELL_CAST_START",
["encounterID"] = 343,
},
[367669] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ancient Sentinel",
["npcID"] = 183406,
},
[443436] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[330810] = {
["isChanneled"] = true,
["source"] = "Shackled Soul",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 169875,
},
[1216505] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Gobfather",
["npcID"] = 231821,
},
[318525] = {
["source"] = "Shath'Yar Scribe",
["event"] = "SPELL_CAST_START",
["npcID"] = 163690,
},
[1216508] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[167470] = {
["npcID"] = 78553,
},
[293954] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eclipsing Grasp",
["npcID"] = 218693,
},
[406581] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Lava Elemental",
["npcID"] = 202264,
},
[465966] = {
["isChanneled"] = true,
["source"] = "Waterworks Bottomfeeder",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231312,
},
[336958] = {
["source"] = "Unbreakable Urtz",
["event"] = "SPELL_CAST_START",
["npcID"] = 162853,
},
[314433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Blood",
["npcID"] = 159312,
},
[1241095] = {
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 205490,
},
[1216525] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Rocket Launcher",
["npcID"] = 230360,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[472111] = {
["source"] = "Underrider Roadhog",
["event"] = "SPELL_CAST_START",
["npcID"] = 230626,
},
[429109] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[474160] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Crawler",
["npcID"] = 234206,
},
[1241106] = {
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 205490,
},
[1241107] = {
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 205490,
},
[465971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Skyfire",
["npcID"] = 227955,
},
[328772] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vault Weaver",
["npcID"] = 200375,
},
[1241114] = {
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 205490,
},
[422969] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[318534] = {
["source"] = "Umbral Gatekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 163708,
},
[328773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vault Weaver",
["npcID"] = 200375,
},
[171570] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Dockworker",
["npcID"] = 84841,
},
[334918] = {
["npcID"] = 162047,
},
[1216557] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Smuggler",
["npcID"] = 232777,
},
[377923] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Magma",
["npcID"] = 225390,
},
[390210] = {
["event"] = "SPELL_CAST_START",
["source"] = "Acidic Wastefiend",
["npcID"] = 234572,
},
[474168] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[457787] = {
["isChanneled"] = true,
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215077,
},
[203313] = {
["isChanneled"] = true,
["source"] = "Void Tendril",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 102784,
},
[63891] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33134,
["encounterID"] = 1143,
},
[308305] = {
["source"] = "Alx'kov the Infested",
["event"] = "SPELL_CAST_START",
["npcID"] = 152809,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[160312] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Cleric",
["npcID"] = 77134,
},
[472126] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greedy Turncoat",
["npcID"] = 225768,
},
[441410] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[1232971] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[263257] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Aspix",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133944,
},
[308308] = {
["source"] = "Fallen Heartpiercer",
["event"] = "SPELL_CAST_START",
["npcID"] = 158092,
},
[439365] = {
["encounterName"] = "I'pa",
["source"] = "I'pa",
["encounterID"] = 2929,
["event"] = "SPELL_CAST_START",
["npcID"] = 210267,
},
[257582] = {
["encounterName"] = "Azerokk",
["source"] = "Earthrager",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129802,
},
[320596] = {
["encounterName"] = "Blightbone",
["npcID"] = 162691,
["encounterID"] = 2387,
},
[291928] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["encounterID"] = 2260,
["event"] = "SPELL_CAST_START",
["npcID"] = 150396,
},
[15655] = {
["event"] = "SPELL_CAST_START",
["source"] = "Laughing Skull Enforcer",
["npcID"] = 17370,
},
[365649] = {
["source"] = "Sacred Matrix Automa",
["event"] = "SPELL_CAST_START",
["npcID"] = 184734,
},
[263262] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Shalebiter",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 134005,
},
[298074] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burrowing Appendage",
["npcID"] = 156145,
},
[461895] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Orb of Ascendance",
["npcID"] = 229296,
},
[267360] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Vol'zith the Whisperer",
["npcID"] = 134069,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[271456] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Mogul Razdunk",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 129232,
},
[171580] = {
["source"] = "Iron Mauler",
["event"] = "SPELL_CAST_START",
["npcID"] = 85748,
},
[241984] = {
["source"] = "Legion Cannon",
["event"] = "SPELL_CAST_START",
["npcID"] = 118049,
},
[363607] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["source"] = "Domination Core",
["encounterID"] = 2540,
["event"] = "SPELL_CAST_START",
["npcID"] = 181244,
},
[262383] = {
["source"] = "Venture Co. War Machine",
["event"] = "SPELL_CAST_START",
["npcID"] = 133463,
},
[366701] = {
["source"] = "Ebonsteel Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 186127,
},
[456891] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[453709] = {
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220287,
},
[366629] = {
["source"] = "Overthrown Protector",
["event"] = "SPELL_CAST_START",
["npcID"] = 185155,
},
[366326] = {
["source"] = "Foul Controller",
["event"] = "SPELL_CAST_START",
["npcID"] = 185537,
},
[470465] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Scrapper",
["npcID"] = 229224,
},
[109348] = {
["source"] = "Stormborn Myrmidon",
["event"] = "SPELL_CAST_START",
["npcID"] = 57817,
},
[452035] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cyclonecrier Alpha",
["npcID"] = 222959,
},
[293986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blastatron X-80",
["npcID"] = 151476,
},
[69929] = {
["isChanneled"] = true,
["source"] = "Darkfallen Commander",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 38125,
},
[405391] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[352538] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["npcID"] = 175731,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[473995] = {
["source"] = "Masked Freelancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 231910,
},
[369754] = {
["encounterName"] = "Bromach",
["encounterID"] = 2556,
["npcID"] = 184018,
},
[69899] = {
["npcID"] = 37027,
},
[73001] = {
["encounterName"] = "Blood Council",
["npcID"] = 37972,
["encounterID"] = 1095,
},
[155201] = {
["encounterName"] = "Blast Furnace",
["source"] = "Furnace Engineer",
["npcID"] = 76810,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[1218127] = {
["source"] = "The Junkmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 233306,
},
[461904] = {
["source"] = "Orb of Ascendance",
["event"] = "SPELL_CAST_START",
["npcID"] = 229296,
},
[1216654] = {
["event"] = "SPELL_CAST_START",
["source"] = "Watchful Hyena",
["npcID"] = 227771,
},
[473067] = {
["source"] = "Nitro",
["event"] = "SPELL_CAST_START",
["npcID"] = 230995,
},
[1216656] = {
["isChanneled"] = true,
["source"] = "The Gobfather",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231821,
},
[362849] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Artificer Xy'mox",
["encounterID"] = 2553,
["event"] = "SPELL_CAST_START",
["npcID"] = 183501,
},
[329168] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 165737,
["encounterID"] = 2381,
},
[245303] = {
["encounterName"] = "The Coven of Shivarra",
["source"] = "Asara, Mother of Night",
["npcID"] = 122467,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2073,
},
[326574] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[273276] = {
["source"] = "Zeth'jir Seashaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 139124,
},
[348008] = {
["npcID"] = 176394,
},
[1218120] = {
["source"] = "The Junkmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 233306,
},
[259519] = {
["source"] = "Bonepicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 152001,
},
[445251] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brushmane Wolf",
["npcID"] = 217561,
},
[1218117] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[22478] = {
["encounterName"] = "Zevrim Thornhoof",
["source"] = "Zevrim Thornhoof",
["npcID"] = 11490,
["event"] = "SPELL_CAST_START",
["encounterID"] = 343,
},
[361568] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Renewal",
["npcID"] = 181546,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[465801] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Crossfire",
["npcID"] = 230299,
},
[463956] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[111854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
},
[160323] = {
["npcID"] = 79205,
},
[418622] = {
["source"] = "Aqir Scarab",
["event"] = "SPELL_CAST_START",
["npcID"] = 207910,
},
[291946] = {
["encounterName"] = "K.U.-J.0.",
["source"] = "K.U.-J.0.",
["encounterID"] = 2258,
["event"] = "SPELL_CAST_START",
["npcID"] = 144246,
},
[418621] = {
["source"] = "Aqir Fanatic",
["event"] = "SPELL_CAST_START",
["npcID"] = 207896,
},
[322433] = {
["npcID"] = 162057,
},
[271290] = {
["encounterName"] = "Mchimba the Embalmer",
["source"] = "Mchimba the Embalmer",
["encounterID"] = 2142,
["event"] = "SPELL_CAST_START",
["npcID"] = 134993,
},
[1215693] = {
["source"] = "Causticaria",
["event"] = "SPELL_CAST_START",
["npcID"] = 225433,
},
[310184] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychus",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158376,
},
[48280] = {
["npcID"] = 25803,
},
[1216674] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Void Turret",
["encounterID"] = 3013,
["event"] = "SPELL_CAST_START",
["npcID"] = 231846,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[180670] = {
["source"] = "K'ute",
["event"] = "SPELL_CAST_START",
["npcID"] = 90215,
},
[443482] = {
["encounterName"] = "Cult Leaders",
["source"] = "Shadeguard Speaker",
["encounterID"] = 3050,
["event"] = "SPELL_CAST_START",
["npcID"] = 230904,
},
[324417] = {
["npcID"] = 162133,
},
[440195] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Shadow",
["npcID"] = 214379,
},
[1216687] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Gobfather",
["npcID"] = 231821,
},
[209471] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Nightmare Ichor",
["npcID"] = 105721,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1873,
},
[177731] = {
["encounterName"] = "Witherbark",
["source"] = "Enchanted Waters",
["npcID"] = 88862,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[355234] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Fishmancer",
["npcID"] = 178142,
},
[372529] = {
["event"] = "SPELL_CAST_START",
["source"] = "Particularly Bad Guy",
["npcID"] = 220432,
},
[408476] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Erratic Remnant",
["npcID"] = 202824,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[362405] = {
["encounterName"] = "Anduin Wrynn",
["source"] = "Anduin Wrynn",
["npcID"] = 181954,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2546,
},
[472153] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[474201] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tainted Feaster",
["npcID"] = 234207,
},
[278463] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Survivalist",
["npcID"] = 131850,
},
[211439] = {
["encounterName"] = "Gul'dan",
["source"] = "The Demon Within",
["npcID"] = 111022,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[472154] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[1216699] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Void Launcher",
["npcID"] = 231903,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[62601] = {
["npcID"] = 33196,
},
[205231] = {
["encounterName"] = "Amarth, The Harvester",
["npcID"] = 103673,
["encounterID"] = 2388,
},
[433053] = {
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214625,
},
[474203] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[443487] = {
["source"] = "Worker Bee",
["event"] = "SPELL_CAST_START",
["npcID"] = 210265,
},
[76588] = {
["source"] = "Twilight Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 39990,
},
[472839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swigs Farsight",
["npcID"] = 231288,
},
[269429] = {
["source"] = "Venture Co. War Machine",
["event"] = "SPELL_CAST_START",
["npcID"] = 133463,
},
[356133] = {
["source"] = "Burly Deckhand",
["event"] = "SPELL_CAST_START",
["npcID"] = 180015,
},
[1216709] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Gobfather",
["npcID"] = 231821,
},
[157168] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sargerei Warden",
["npcID"] = 79508,
},
[257596] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["npcID"] = 129227,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2106,
},
[81642] = {
["encounterName"] = "Lockmaw",
["source"] = "Lockmaw",
["encounterID"] = 1054,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 43614,
},
[474004] = {
["source"] = "Drill Sergeant",
["event"] = "SPELL_CAST_START",
["npcID"] = 231925,
},
[463967] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[474206] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hideous Amalgamation",
["npcID"] = 234208,
},
[1215747] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Sathel the Accursed",
["npcID"] = 164461,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2391,
},
[452024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthenwork Ironstrider",
["npcID"] = 213951,
},
[365676] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sacred Matrix Automa",
["npcID"] = 184734,
},
[355438] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[193093] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["encounterID"] = 1812,
["event"] = "SPELL_CAST_START",
["npcID"] = 91797,
},
[265337] = {
["source"] = "Gorestained Piglet",
["event"] = "SPELL_CAST_START",
["npcID"] = 135048,
},
[267385] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Tentacle",
["npcID"] = 135987,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["npcID"] = 215968,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[269099] = {
["isChanneled"] = true,
["source"] = "Venture Co. War Machine",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 133463,
},
[468405] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darktide Conqueror",
["npcID"] = 227655,
},
[423015] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["npcID"] = 207939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2835,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[258622] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[445541] = {
["encounterName"] = "Master Machinists",
["source"] = "Speaker Brokk",
["encounterID"] = 2888,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 213217,
},
[342317] = {
["npcID"] = 181005,
},
[1216731] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Geargrinder Biker",
["npcID"] = 225804,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[1215760] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Gallagio Goon",
["npcID"] = 233474,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[330868] = {
["npcID"] = 160495,
},
[40059] = {
["encounterName"] = "The Maker",
["source"] = "The Maker",
["npcID"] = 17381,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1922,
},
[375919] = {
["event"] = "SPELL_CAST_START",
["source"] = "Primal Scythid",
["npcID"] = 191104,
},
[256922] = {
["source"] = "Faceless Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 131821,
},
[371824] = {
["npcID"] = 46859,
},
[283422] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["npcID"] = 145185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2257,
},
[474212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Wretch",
["npcID"] = 230028,
},
[447926] = {
["source"] = "Voltscale Borer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222280,
},
[449277] = {
["event"] = "SPELL_CAST_START",
["source"] = "General Emmerich",
["npcID"] = 215371,
},
[365682] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Xy Acolyte",
["npcID"] = 184140,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2553,
},
[268211] = {
["event"] = "SPELL_CAST_START",
["source"] = "Runecarver Sorn",
["npcID"] = 134150,
},
[160332] = {
["npcID"] = 79205,
},
[1216745] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2364,
},
[308346] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dod",
["npcID"] = 156820,
},
[155213] = {
["encounterName"] = "Blast Furnace",
["source"] = "Slag Elemental",
["npcID"] = 76829,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[304251] = {
["encounterName"] = "Thrall the Corrupted",
["source"] = "Void Boar",
["encounterID"] = 3086,
["event"] = "SPELL_CAST_START",
["npcID"] = 157349,
},
[465827] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Bloodwarper",
["npcID"] = 230748,
},
[439403] = {
["isChanneled"] = false,
["source"] = "Yes Man",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219588,
},
[268061] = {
["source"] = "Plague Doctor",
["event"] = "SPELL_CAST_START",
["npcID"] = 139949,
},
[330565] = {
["npcID"] = 164506,
},
[170402] = {
["npcID"] = 72674,
},
[270293] = {
["source"] = "Purification Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 134739,
},
[34716] = {
["encounterName"] = "Warp Splinter",
["source"] = "Warp Splinter",
["npcID"] = 17977,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1929,
},
[443500] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["npcID"] = 81522,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[472169] = {
["source"] = "Venture Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 238624,
},
[451496] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[20299] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Witch",
["npcID"] = 24696,
},
[330875] = {
["npcID"] = 169893,
},
[36508] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ethereum Researcher",
["npcID"] = 20456,
},
[285454] = {
["encounterName"] = "Machinist's Garden",
["source"] = "Head Machinist Sparkflux",
["event"] = "SPELL_CAST_START",
["npcID"] = 144248,
},
[320637] = {
["encounterName"] = "Blightbone",
["npcID"] = 162691,
["encounterID"] = 2387,
},
[311046] = {
["source"] = "Umbral Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 159219,
},
[166478] = {
["npcID"] = 82647,
},
[75539] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Rom'ogg Bonecrusher",
["encounterID"] = 1040,
["event"] = "SPELL_CAST_START",
["npcID"] = 39665,
},
[184730] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slavering Hound",
["npcID"] = 93303,
},
[445217] = {
["source"] = "Cinderbee Worker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215023,
},
[38556] = {
["npcID"] = 25764,
},
[102158] = {
["source"] = "Time-Twisted Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 54553,
},
[1218061] = {
["source"] = "Underpin's Explosive Ally",
["event"] = "SPELL_CAST_START",
["npcID"] = 234902,
},
[266206] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Kula the Butcher",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135475,
},
[64153] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33985,
["encounterID"] = 1143,
},
[359547] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Enhanced Avian",
["npcID"] = 185314,
},
[346866] = {
["npcID"] = 174175,
},
[365295] = {
["encounterName"] = "Anduin Wrynn",
["source"] = "Anduin Wrynn",
["npcID"] = 181954,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2546,
},
[468915] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Blaster",
["npcID"] = 229356,
},
[100060] = {
["isChanneled"] = true,
["source"] = "Flamewaker Cauterizer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 53639,
},
[287877] = {
["encounterName"] = "Mekkatorque",
["source"] = "Explosive Sheep",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 148450,
},
[265352] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Blight Toad",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 135052,
},
[291973] = {
["encounterName"] = "K.U.-J.0.",
["source"] = "K.U.-J.0.",
["encounterID"] = 2258,
["event"] = "SPELL_CAST_START",
["npcID"] = 144246,
},
[474223] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hideous Amalgamation",
["npcID"] = 234208,
},
[1216784] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Hovering Menace",
["npcID"] = 236886,
},
[175621] = {
["source"] = "Iron Flame Binder",
["event"] = "SPELL_CAST_START",
["npcID"] = 87515,
},
[116178] = {
["source"] = "Sudsy Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59522,
},
[263943] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Heartsbane Runeweaver",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131677,
},
[323538] = {
["encounterName"] = "High Adjudicator Aleez",
["npcID"] = 165410,
["encounterID"] = 2403,
},
[427899] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1751,
},
[1216790] = {
["source"] = "Hovering Menace",
["event"] = "SPELL_CAST_START",
["npcID"] = 236886,
},
[463798] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["npcID"] = 229177,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[320644] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[186883] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Flamebelcher",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 90432,
},
[1216794] = {
["source"] = "Hovering Menace",
["event"] = "SPELL_CAST_START",
["npcID"] = 236886,
},
[406227] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[443510] = {
["source"] = "Nightfall Executor",
["event"] = "SPELL_CAST_START",
["npcID"] = 217516,
},
[453749] = {
["source"] = "Kelpmire",
["event"] = "SPELL_CAST_START",
["npcID"] = 220287,
},
[365272] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Duty",
["encounterID"] = 2544,
["event"] = "SPELL_CAST_START",
["npcID"] = 181551,
},
[221059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gelatinized Decay",
["npcID"] = 111004,
},
[263309] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Adderis",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133379,
},
[236537] = {
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_START",
["npcID"] = 118065,
},
[38557] = {
["npcID"] = 80886,
},
[474228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Silent Slitherer",
["npcID"] = 234210,
},
[13952] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lightsworn Vindicator",
["npcID"] = 22861,
},
[1216805] = {
["source"] = "Malfunctioning Pummeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 236895,
},
[1216806] = {
["source"] = "Malfunctioning Pummeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 236895,
},
[448443] = {
["encounterName"] = "Web General Ab'enar",
["source"] = "Web General Ab'enar",
["npcID"] = 221896,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2877,
},
[448441] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[347269] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["npcID"] = 175611,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2423,
},
[357508] = {
["npcID"] = 180495,
},
[267237] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Faithless Tender",
["npcID"] = 134364,
},
[1216812] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Gobfather",
["npcID"] = 231821,
},
[426943] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[19645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wailing Banshee",
["npcID"] = 10464,
},
[1216815] = {
["source"] = "Xal'atath",
["event"] = "SPELL_CAST_START",
["npcID"] = 236933,
},
[278504] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Thistle Acolyte",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[348117] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[227917] = {
["source"] = "Ghostly Understudy",
["event"] = "SPELL_CAST_START",
["npcID"] = 114526,
},
[326794] = {
["npcID"] = 167876,
},
[287887] = {
["encounterName"] = "Stormwall Blockade",
["source"] = "Sister Katherine",
["encounterID"] = 2280,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 146251,
},
[309961] = {
["encounterName"] = "Il'gynoth, Corruption Reborn",
["source"] = "Il'gynoth",
["encounterID"] = 2345,
["event"] = "SPELL_CAST_START",
["npcID"] = 158328,
},
[440181] = {
["event"] = "SPELL_CAST_START",
["source"] = "Encroaching Fungarian",
["npcID"] = 216281,
},
[304101] = {
["event"] = "SPELL_CAST_START",
["source"] = "Misha",
["npcID"] = 155656,
},
[44189] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Kael'thas Sunstrider",
["npcID"] = 24664,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[407207] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[1216826] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Venture Co. Contractor",
["encounterID"] = 3020,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230748,
},
[360414] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Vigilant Guardian",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 180773,
},
[353417] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[306319] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["npcID"] = 156575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[355294] = {
["encounterName"] = "The Nine",
["source"] = "Skyja",
["npcID"] = 175726,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2429,
},
[457853] = {
["source"] = "The Taskmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 218444,
},
[353418] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[252773] = {
["event"] = "SPELL_CAST_START",
["source"] = "Enthralled Voidcaller",
["npcID"] = 121675,
},
[407198] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["npcID"] = 201261,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2688,
},
[457854] = {
["source"] = "The Taskmaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 218444,
},
[320655] = {
["encounterName"] = "Blightbone",
["npcID"] = 162691,
["encounterID"] = 2387,
},
[449481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overseer Roskarrag",
["npcID"] = 221071,
},
[70965] = {
["npcID"] = 36725,
},
[474237] = {
["event"] = "SPELL_CAST_START",
["source"] = "Silent Slitherer",
["npcID"] = 234210,
},
[338606] = {
["npcID"] = 167731,
},
[426645] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[357516] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chained Dusksavage",
["npcID"] = 177137,
},
[253517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[49309] = {
["npcID"] = 2718,
},
[1216845] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Darkfuse Wrenchmonger",
["npcID"] = 231939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3016,
},
[256589] = {
["encounterName"] = "Council o' Captains",
["source"] = "Captain Raoul",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 126847,
},
[1215563] = {
["source"] = "Foreman Luddy",
["event"] = "SPELL_CAST_START",
["npcID"] = 225724,
},
[169841] = {
["event"] = "SPELL_CAST_START",
["source"] = "Addled Arcanomancer",
["npcID"] = 84990,
},
[449960] = {
["source"] = "Gutter Scarfer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217717,
},
[308903] = {
["encounterName"] = "Maut",
["source"] = "Maut",
["encounterID"] = 2327,
["event"] = "SPELL_CAST_START",
["npcID"] = 156523,
},
[51219] = {
["npcID"] = 46859,
},
[1216852] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Darkfuse Wrenchmonger",
["npcID"] = 231939,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3016,
},
[449154] = {
["source"] = "Forge Loader",
["event"] = "SPELL_CAST_START",
["npcID"] = 213343,
},
[350875] = {
["encounterName"] = "So'leah",
["source"] = "So'leah",
["encounterID"] = 2442,
["event"] = "SPELL_CAST_START",
["npcID"] = 177269,
},
[40598] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[369806] = {
["npcID"] = 184020,
},
[265371] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Enthralled Guard",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131585,
},
[455812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[334493] = {
["npcID"] = 164862,
},
[109334] = {
["source"] = "Twilight Frost Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 57807,
},
[355473] = {
["npcID"] = 179821,
},
[308375] = {
["source"] = "Fallen Voidspeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 152722,
},
[309882] = {
["source"] = "Cultist Slavedriver",
["event"] = "SPELL_CAST_START",
["npcID"] = 157158,
},
[462802] = {
["source"] = "Corrupted Machinist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229695,
},
[347283] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["npcID"] = 175611,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2423,
},
[472196] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imagined Rug Monster",
["npcID"] = 233755,
},
[327664] = {
["encounterName"] = "Surgeon Stitchflesh",
["encounterID"] = 2389,
["npcID"] = 162689,
},
[450515] = {
["encounterName"] = "Rhahk'Zor",
["source"] = "Rhahk'Zor",
["npcID"] = 644,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2967,
},
[322711] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["npcID"] = 165408,
["encounterID"] = 2401,
},
[455815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Cabbage Smacker",
["npcID"] = 206514,
},
[87861] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glubtok",
["npcID"] = 47162,
},
[304282] = {
["encounterName"] = "Rexxar",
["source"] = "Rexxar",
["encounterID"] = 3090,
["event"] = "SPELL_CAST_START",
["npcID"] = 234038,
},
[465872] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["npcID"] = 229177,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[365715] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Eternal Sentry",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 184530,
},
[288410] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["npcID"] = 144796,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2276,
},
[369811] = {
["npcID"] = 184020,
},
[396432] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ancient Proto-Dragon",
["npcID"] = 189798,
},
[8362] = {
["encounterName"] = "Nekrum Gutchewer",
["source"] = "Shadowpriest Sezz'ziz",
["npcID"] = 7275,
["event"] = "SPELL_CAST_START",
["encounterID"] = 598,
},
[392337] = {
["npcID"] = 186853,
},
[465765] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228458,
},
[1216039] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Demolitionist",
["npcID"] = 229212,
},
[308380] = {
["source"] = "Inquisitor Darkspeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 158136,
},
[164907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reanimated Ritual Bones",
["npcID"] = 75715,
},
[369813] = {
["source"] = "Wickbreaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 215077,
},
[355479] = {
["npcID"] = 179821,
},
[257870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Buccaneer",
["npcID"] = 130011,
},
[470433] = {
["event"] = "SPELL_CAST_START",
["source"] = "Extractor Silisai",
["npcID"] = 229870,
},
[44137] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["npcID"] = 24556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[177756] = {
["encounterName"] = "Blast Furnace",
["source"] = "Bellows Operator",
["npcID"] = 76811,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1690,
},
[384648] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironbark Protector",
["npcID"] = 11459,
},
[445407] = {
["source"] = "Wandering Gutter",
["event"] = "SPELL_CAST_START",
["npcID"] = 214551,
},
[221783] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["npcID"] = 104154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[118297] = {
["npcID"] = 61029,
},
[382578] = {
["npcID"] = 184131,
},
[324609] = {
["npcID"] = 166396,
},
[329340] = {
["npcID"] = 165410,
},
[350847] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Eye of the Jailer",
["npcID"] = 175725,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[359028] = {
["encounterName"] = "Myza's Oasis",
["npcID"] = 176563,
["encounterID"] = 2440,
},
[431714] = {
["source"] = "Webspeaker Grik'ik",
["event"] = "SPELL_CAST_START",
["npcID"] = 216041,
},
[333231] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164461,
["encounterID"] = 2391,
},
[268315] = {
["event"] = "SPELL_CAST_START",
["source"] = "Abyss Dweller",
["npcID"] = 134423,
},
[64157] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33985,
["encounterID"] = 1143,
},
[411236] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[369818] = {
["npcID"] = 184020,
},
[427629] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[406678] = {
["encounterName"] = "The Vigilant Steward, Zskarn",
["source"] = "Zskarn",
["npcID"] = 202375,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2689,
},
[470873] = {
["event"] = "SPELL_CAST_START",
["source"] = "Junkyard Hobgoblin",
["npcID"] = 229219,
},
[470429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Extractor Silisai",
["npcID"] = 229870,
},
[315000] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Shadowcrafter",
["npcID"] = 161416,
},
[455825] = {
["encounterName"] = "Warchief Kargath Bladefist",
["source"] = "Warchief Kargath Bladefist",
["npcID"] = 16808,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1938,
},
[359016] = {
["encounterName"] = "Cragpie",
["source"] = "Cragpie",
["encounterID"] = 3001,
["event"] = "SPELL_CAST_START",
["npcID"] = 220008,
},
[427157] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 208747,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[423062] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[443397] = {
["source"] = "Sureki Venomblade",
["event"] = "SPELL_CAST_START",
["npcID"] = 220193,
},
[407552] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Rionthus",
["npcID"] = 200918,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[1214404] = {
["source"] = "Enveloping Bloodeater",
["event"] = "SPELL_CAST_START",
["npcID"] = 228300,
},
[336910] = {
["source"] = "Xantuth the Blighted",
["event"] = "SPELL_CAST_START",
["npcID"] = 162872,
},
[268317] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drowned Depthbringer",
["npcID"] = 134418,
},
[451732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Swarming Cogwalker",
["npcID"] = 232871,
},
[255814] = {
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 127757,
},
[304169] = {
["source"] = "Aqir Mindhunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 153532,
},
[105848] = {
["encounterName"] = "Spine of Deathwing",
["source"] = "Burning Tendons",
["npcID"] = 56575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1291,
},
[369823] = {
["npcID"] = 184023,
},
[115509] = {
["source"] = "Shado-Pan Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 59751,
},
[40091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[323608] = {
["encounterName"] = "Mordretha",
["npcID"] = 165946,
["encounterID"] = 2404,
},
[237890] = {
["encounterName"] = "Fury of the God Queen",
["source"] = "Runeseer Faljar",
["npcID"] = 116496,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2059,
},
[39581] = {
["source"] = "Storm Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 22848,
},
[63134] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33134,
["encounterID"] = 1143,
},
[165715] = {
["npcID"] = 82016,
},
[158549] = {
["npcID"] = 82037,
},
[465749] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skittersong Krolusk",
["npcID"] = 229625,
},
[152917] = {
["event"] = "SPELL_CAST_START",
["source"] = "Solar Magnifier",
["npcID"] = 77559,
},
[359587] = {
["npcID"] = 179004,
},
[404896] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[1216937] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 236948,
},
[406686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Magmashaper",
["npcID"] = 202257,
},
[387091] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Sunseeker",
["npcID"] = 187239,
},
[106807] = {
["encounterName"] = "Ook-Ook",
["source"] = "Ook-Ook",
["npcID"] = 56637,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1412,
},
[255577] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[391825] = {
["npcID"] = 190900,
},
[355930] = {
["npcID"] = 177816,
},
[369828] = {
["npcID"] = 184023,
},
[17235] = {
["encounterName"] = "Nerub'enkan",
["source"] = "Nerub'enkan",
["npcID"] = 10437,
["event"] = "SPELL_CAST_START",
["encounterID"] = 480,
},
[472216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crowd Disperser",
["npcID"] = 225679,
},
[159290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Solar Familiar",
["npcID"] = 76097,
},
[467510] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skiggy Muckheimer",
["npcID"] = 229433,
},
[70460] = {
["npcID"] = 37744,
},
[423324] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[326827] = {
["npcID"] = 162040,
},
[64145] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33966,
["encounterID"] = 1143,
},
[451128] = {
["source"] = "Sparking Haulbot",
["event"] = "SPELL_CAST_START",
["npcID"] = 220191,
},
[260698] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[356942] = {
["npcID"] = 179837,
},
[114999] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[255579] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122967,
},
[341163] = {
["encounterName"] = "Blightbone",
["npcID"] = 171396,
["encounterID"] = 2387,
},
[326829] = {
["npcID"] = 167876,
},
[288814] = {
["source"] = "Rastari Flamespeaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 147830,
},
[171336] = {
["npcID"] = 77140,
},
[154216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sun Trinket",
["npcID"] = 76094,
},
[269493] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 129214,
},
[397899] = {
["source"] = "Sha-Touched Guardian",
["event"] = "SPELL_CAST_START",
["npcID"] = 200131,
},
[298584] = {
["isChanneled"] = true,
["source"] = "Enthralled Footman",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 153760,
},
[442387] = {
["source"] = "Nerubian Ambusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 216247,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[100549] = {
["source"] = "Unstable Magma",
["event"] = "SPELL_CAST_START",
["npcID"] = 53901,
},
[322736] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[195172] = {
["source"] = "Hatecoil Crusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 91782,
},
[1214614] = {
["encounterName"] = "Maulspike",
["source"] = "Maulspike",
["npcID"] = 234958,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3121,
},
[12491] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Apoko",
["npcID"] = 24553,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[41069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Deathshaper",
["npcID"] = 22882,
},
[115650] = {
["source"] = "Sudsy Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59522,
},
[285878] = {
["encounterName"] = "Conclave of the Chosen",
["source"] = "Akunda's Aspect",
["encounterID"] = 2268,
["event"] = "SPELL_CAST_START",
["npcID"] = 144941,
},
[366142] = {
["source"] = "Subjugator Zeltoth",
["event"] = "SPELL_CAST_START",
["npcID"] = 184651,
},
[106797] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["encounterID"] = 1416,
["event"] = "SPELL_CAST_START",
["npcID"] = 56732,
},
[260701] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[310329] = {
["encounterName"] = "Drest'agath",
["source"] = "Drest'agath",
["encounterID"] = 2343,
["event"] = "SPELL_CAST_START",
["npcID"] = 157602,
},
[458795] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravageant",
["npcID"] = 207826,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[267354] = {
["isChanneled"] = true,
["source"] = "Hired Assassin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 134232,
},
[1225174] = {
["encounterName"] = "Soul-Scribe",
["source"] = "Soul-Scribe",
["encounterID"] = 3109,
["event"] = "SPELL_CAST_START",
["npcID"] = 234935,
},
[308645] = {
["event"] = "SPELL_CAST_START",
["source"] = "Reprogrammed Warbot",
["npcID"] = 158286,
},
[355900] = {
["npcID"] = 177807,
},
[308406] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge-Guard Hurrul",
["npcID"] = 158158,
},
[290878] = {
["source"] = "Lady Jaina Proudmoore",
["event"] = "SPELL_CAST_START",
["npcID"] = 146409,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["npcID"] = 213008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[451608] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fathomless Ambusher",
["npcID"] = 219939,
},
[365744] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subjugator Zeltoth",
["npcID"] = 184651,
},
[326837] = {
["npcID"] = 162040,
},
[360295] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of War",
["npcID"] = 181549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[260703] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[365745] = {
["encounterName"] = "Artificer Xy'mox",
["source"] = "Cartel Overseer",
["encounterID"] = 2553,
["event"] = "SPELL_CAST_START",
["npcID"] = 184792,
},
[5159] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Craftsman",
["npcID"] = 1731,
},
[351067] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2432,
},
[75441] = {
["encounterName"] = "Rom'ogg Bonecrusher",
["source"] = "Chains of Woe",
["encounterID"] = 1040,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 40447,
},
[454191] = {
["source"] = "Stormlord Kao'dor",
["event"] = "SPELL_CAST_START",
["npcID"] = 222733,
},
[320063] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164451,
["encounterID"] = 2391,
},
[459943] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225821,
},
[265407] = {
["encounterName"] = "Raal the Gluttonous",
["source"] = "Banquet Steward",
["encounterID"] = 2115,
["event"] = "SPELL_CAST_START",
["npcID"] = 131586,
},
[154221] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zipteq",
["npcID"] = 78734,
},
[270927] = {
["isChanneled"] = true,
["source"] = "King Timalji",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 137474,
},
[115002] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[406934] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
[439467] = {
["source"] = "Yes Man",
["event"] = "SPELL_CAST_START",
["npcID"] = 219588,
},
[270920] = {
["source"] = "Queen Wasi",
["event"] = "SPELL_CAST_START",
["npcID"] = 137478,
},
[465952] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[359483] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["source"] = "Dausegne",
["npcID"] = 181224,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2540,
},
[408677] = {
["source"] = "Sundered Scaleguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 198871,
},
[372800] = {
["event"] = "SPELL_CAST_START",
["source"] = "Expedition Guardian",
["npcID"] = 187125,
},
[156270] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Crack-Shot",
["npcID"] = 81315,
},
[17620] = {
["encounterName"] = "Maleki the Pallid",
["source"] = "Maleki the Pallid",
["npcID"] = 10438,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 481,
},
[390323] = {
["npcID"] = 189933,
},
[152893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Herald of Sunrise",
["npcID"] = 78933,
},
[257593] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[243300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Council Warlock",
["npcID"] = 117776,
},
[267459] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Forgotten Denizen",
["npcID"] = 136083,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[449709] = {
["source"] = "Gorloc Springcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 218650,
},
[271555] = {
["source"] = "Interment Construct",
["event"] = "SPELL_CAST_START",
["npcID"] = 137969,
},
[378420] = {
["source"] = "Primal Stonekin",
["event"] = "SPELL_CAST_START",
["npcID"] = 194291,
},
[106920] = {
["source"] = "Regenerating Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 56763,
},
[460173] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Pit Mechanic",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 228514,
},
[263365] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Adderis",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133379,
},
[84799] = {
["source"] = "Augh",
["event"] = "SPELL_CAST_START",
["npcID"] = 49045,
},
[310839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Occult Shadowmender",
["npcID"] = 159425,
},
[157505] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sargerei Defender",
["npcID"] = 76263,
},
[375924] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184580,
},
[427672] = {
["encounterName"] = "Commander Ulthok",
["source"] = "Commander Ulthok",
["encounterID"] = 1044,
["event"] = "SPELL_CAST_START",
["npcID"] = 40765,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 163157,
},
[326847] = {
["npcID"] = 167876,
},
[270481] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 135002,
["encounterID"] = 2391,
},
[44479] = {
["source"] = "Sunblade Blood Knight",
["event"] = "SPELL_CAST_START",
["npcID"] = 24684,
},
[267969] = {
["event"] = "SPELL_CAST_START",
["source"] = "Temple Attendant",
["npcID"] = 134137,
},
[268865] = {
["source"] = "Weapons Tester",
["event"] = "SPELL_CAST_START",
["npcID"] = 136934,
},
[265368] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[32863] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Warlock",
["npcID"] = 17371,
},
[320182] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Paceran the Virulent",
["encounterID"] = 2391,
["event"] = "SPELL_CAST_START",
["npcID"] = 164463,
},
[449714] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[275563] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowstarved Bullfrog",
["npcID"] = 214406,
},
[6535] = {
["npcID"] = 3273,
},
[265781] = {
["encounterName"] = "The Golden Serpent",
["source"] = "The Golden Serpent",
["encounterID"] = 2139,
["event"] = "SPELL_CAST_START",
["npcID"] = 135322,
},
[351066] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2432,
},
[369853] = {
["npcID"] = 184019,
},
[408975] = {
["source"] = "Sundered Edgelord",
["event"] = "SPELL_CAST_START",
["npcID"] = 198873,
},
[347679] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["encounterID"] = 2423,
["event"] = "SPELL_CAST_START",
["npcID"] = 175611,
},
[451764] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sir Braunpyke",
["npcID"] = 217658,
},
[44196] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Phoenix",
["npcID"] = 24674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[322756] = {
["npcID"] = 165137,
},
[260666] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Gilded Priestess",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 132126,
},
[299110] = {
["source"] = "Annihilator Lak'hal",
["event"] = "SPELL_CAST_START",
["npcID"] = 153942,
},
[453142] = {
["source"] = "Web Marauder",
["event"] = "SPELL_CAST_START",
["npcID"] = 219034,
},
[255591] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Priestess Alun'za",
["encounterID"] = 2084,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 122967,
},
[335709] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mawsworn Blackguard",
["npcID"] = 172523,
},
[448155] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crazed Abomination",
["npcID"] = 219454,
},
[1214716] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vynnie Samophlangus",
["npcID"] = 235072,
},
[471126] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grunch",
["npcID"] = 233564,
},
[154228] = {
["npcID"] = 75482,
},
[460867] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[18327] = {
["encounterName"] = "Baroness Anastari",
["source"] = "Baroness Anastari",
["npcID"] = 10436,
["event"] = "SPELL_CAST_START",
["encounterID"] = 479,
},
[322759] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 164558,
["encounterID"] = 2395,
},
[1216441] = {
["encounterName"] = "Underpin",
["source"] = "The Underpin",
["encounterID"] = 3138,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 236626,
},
[106547] = {
["source"] = "Shado-Pan Novice",
["event"] = "SPELL_CAST_START",
["npcID"] = 56395,
},
[160372] = {
["npcID"] = 76380,
},
[458271] = {
["event"] = "SPELL_CAST_START",
["source"] = "Moth'ethk",
["npcID"] = 206203,
},
[336996] = {
["npcID"] = 162744,
},
[473589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Explosive Barrel",
["npcID"] = 234498,
},
[93863] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rethilgore",
["npcID"] = 237274,
},
[355525] = {
["encounterName"] = "Painsmith Raznal",
["source"] = "Painsmith Raznal",
["npcID"] = 176523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2430,
},
[445830] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampaging Deepflayer",
["npcID"] = 218657,
},
[106400] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Mutated Corruption",
["encounterID"] = 1299,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56471,
},
[288917] = {
["event"] = "SPELL_CAST_START",
["source"] = "Screeching Phantasm",
["npcID"] = 148199,
},
[93505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Walden",
["npcID"] = 46963,
},
[6358] = {
["npcID"] = 1863,
},
[383823] = {
["npcID"] = 192796,
},
[295028] = {
["event"] = "SPELL_CAST_START",
["source"] = "Livid Enforcer",
["npcID"] = 227356,
},
[128304] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shado-Pan Disciple",
["npcID"] = 58198,
},
[316620] = {
["source"] = "Anubisath Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 162508,
},
[308366] = {
["source"] = "Inquisitor Darkspeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 158136,
},
[80195] = {
["source"] = "Stonecore Bruiser",
["event"] = "SPELL_CAST_START",
["npcID"] = 42692,
},
[361024] = {
["npcID"] = 180085,
},
[357512] = {
["npcID"] = 180495,
},
[474298] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["encounterID"] = 2364,
["event"] = "SPELL_CAST_START",
["npcID"] = 162309,
},
[369791] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184582,
},
[449339] = {
["encounterName"] = "Tomb-Raider Drywhisker",
["source"] = "Tomb-Raider Drywhisker",
["npcID"] = 204188,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2878,
},
[362601] = {
["encounterName"] = "Lihuvim, Principal Architect",
["source"] = "Lihuvim",
["npcID"] = 182169,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2539,
},
[422393] = {
["source"] = "Skittering Darkness",
["event"] = "SPELL_CAST_START",
["npcID"] = 208457,
},
[259856] = {
["encounterName"] = "Rixxa Fluxfume",
["source"] = "Rixxa Fluxflame",
["npcID"] = 129231,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2107,
},
[76612] = {
["isChanneled"] = true,
["source"] = "Twilight Zealot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 39990,
},
[308432] = {
["source"] = "Forge-Guard Hurrul",
["event"] = "SPELL_CAST_START",
["npcID"] = 158158,
},
[34344] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidshrieker",
["npcID"] = 18870,
},
[451775] = {
["source"] = "Cogwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224527,
},
[115003] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["npcID"] = 59479,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1414,
},
[342135] = {
["npcID"] = 167532,
},
[470684] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Melter",
["npcID"] = 229222,
},
[40102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqueous Spawn",
["npcID"] = 22883,
},
[195284] = {
["source"] = "Restless Tides",
["event"] = "SPELL_CAST_START",
["npcID"] = 97173,
},
[26262] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Tendril",
["npcID"] = 65282,
},
[407212] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[361676] = {
["event"] = "SPELL_CAST_START",
["source"] = "Halondrus",
["npcID"] = 180906,
},
[360960] = {
["encounterName"] = "Dausegne, the Fallen Oracle",
["source"] = "Dausegne",
["encounterID"] = 2540,
["event"] = "SPELL_CAST_START",
["npcID"] = 181224,
},
[423109] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[83780] = {
["source"] = "Pygmy Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 44897,
},
[451778] = {
["source"] = "Dogmatic Machine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212878,
},
[42024] = {
["encounterName"] = "Shade of Akama",
["source"] = "Ashtongue Elementalist",
["npcID"] = 23523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 603,
},
[211571] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felsworn Chaos-Mage",
["npcID"] = 113012,
},
[470397] = {
["source"] = "Premium Surveillance B.I.R.D.",
["event"] = "SPELL_CAST_START",
["npcID"] = 233324,
},
[69958] = {
["npcID"] = 37031,
},
[331288] = {
["npcID"] = 167532,
},
[443507] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[249113] = {
["encounterName"] = "Felhounds of Sargeras",
["source"] = "F'harg",
["npcID"] = 122477,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2074,
},
[263318] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Aspix",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133944,
},
[256405] = {
["encounterName"] = "Ring of Booty",
["source"] = "Trothak",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 126969,
},
[36519] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Waste",
["npcID"] = 20778,
},
[1217855] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Geargrinder Biker",
["npcID"] = 237516,
},
[271579] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Venture Co. Earthshaper",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 130661,
},
[30932] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Houndmaster",
["npcID"] = 17670,
},
[1214754] = {
["source"] = "Taskmaster Askari",
["event"] = "SPELL_CAST_START",
["npcID"] = 134012,
},
[381438] = {
["source"] = "Hydraulic Eroder",
["event"] = "SPELL_CAST_START",
["npcID"] = 195092,
},
[352390] = {
["npcID"] = 179334,
},
[257407] = {
["encounterName"] = "Rezan",
["source"] = "Rezan",
["encounterID"] = 2086,
["event"] = "SPELL_CAST_START",
["npcID"] = 122963,
},
[1227629] = {
["source"] = "Manifested Shadow",
["event"] = "SPELL_CAST_START",
["npcID"] = 241632,
},
[227925] = {
["source"] = "Ghostly Understudy",
["event"] = "SPELL_CAST_START",
["npcID"] = 114526,
},
[470515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'Ranax",
["npcID"] = 240969,
},
[15979] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arcane Aberration",
["npcID"] = 11480,
},
[154396] = {
["encounterName"] = "High Sage Viryx",
["source"] = "High Sage Viryx",
["npcID"] = 76266,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1701,
},
[89663] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kobold Digger",
["npcID"] = 48229,
},
[258672] = {
["source"] = "Irontide Crackshot",
["event"] = "SPELL_CAST_START",
["npcID"] = 126918,
},
[355540] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[271526] = {
["encounterName"] = "Azerokk",
["source"] = "Earthrager",
["npcID"] = 129802,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2106,
},
[320729] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[436360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightcaller Velys",
["npcID"] = 218520,
},
[8364] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Geomancer",
["npcID"] = 18420,
},
[470831] = {
["event"] = "SPELL_CAST_START",
["source"] = "Alatear",
["npcID"] = 235801,
},
[470392] = {
["source"] = "Acidic Salvage",
["event"] = "SPELL_CAST_START",
["npcID"] = 225430,
},
[109379] = {
["encounterName"] = "Spine of Deathwing",
["source"] = "Corruption",
["encounterID"] = 1291,
["event"] = "SPELL_CAST_START",
["npcID"] = 53891,
},
[1217138] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Sathel the Accursed",
["encounterID"] = 2391,
["event"] = "SPELL_CAST_START",
["npcID"] = 164461,
},
[355477] = {
["npcID"] = 179821,
},
[34984] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fen Ray",
["npcID"] = 17731,
},
[466296] = {
["source"] = "Mechanized Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 227961,
},
[32364] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["npcID"] = 18344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[100559] = {
["source"] = "Majordomo Staghelm",
["event"] = "SPELL_CAST_START",
["npcID"] = 54015,
},
[258674] = {
["source"] = "Off-Duty Laborer",
["event"] = "SPELL_CAST_START",
["npcID"] = 130436,
},
[453084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sweetspark the Oozeful",
["npcID"] = 220883,
},
[267444] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Vol'zith the Whisperer",
["npcID"] = 134069,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2133,
},
[334324] = {
["npcID"] = 171376,
},
[107588] = {
["encounterName"] = "Warmaster Blackhorn",
["source"] = "Goriona",
["encounterID"] = 1298,
["event"] = "SPELL_CAST_START",
["npcID"] = 56781,
},
[372201] = {
["npcID"] = 189464,
},
[256627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrimshaw Enforcer",
["npcID"] = 129374,
},
[466124] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[260699] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Solena",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131824,
},
[305875] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coagulated Horror",
["npcID"] = 156653,
},
[314855] = {
["source"] = "Gryth'ax the Executioner",
["event"] = "SPELL_CAST_START",
["npcID"] = 159224,
},
[457934] = {
["isChanneled"] = false,
["source"] = "Geothermus",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217416,
},
[330919] = {
["npcID"] = 169912,
},
[188225] = {
["source"] = "Fel Touched Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 94916,
},
[376292] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[333641] = {
["npcID"] = 169905,
},
[285177] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Lady Jaina Proudmoore",
["npcID"] = 146409,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2281,
},
[378731] = {
["npcID"] = 190938,
},
[439506] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["event"] = "SPELL_CAST_START",
["npcID"] = 215405,
},
[79858] = {
["npcID"] = 82005,
},
[433040] = {
["source"] = "Kobyss Trickster",
["event"] = "SPELL_CAST_START",
["npcID"] = 214343,
},
[287929] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[390361] = {
["npcID"] = 190070,
},
[457937] = {
["isChanneled"] = true,
["source"] = "Geothermus",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 217416,
},
[467379] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[166335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Far Seer",
["npcID"] = 82579,
},
[360775] = {
["npcID"] = 185511,
},
[425048] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[263371] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Aspix",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133944,
},
[325782] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwarren Spitter",
["npcID"] = 164038,
},
[472273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crowd Disperser",
["npcID"] = 225679,
},
[15802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eldreth Phantasm",
["npcID"] = 11475,
},
[427223] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Putrid Pyromancer",
["npcID"] = 84957,
},
[320696] = {
["npcID"] = 163121,
},
[471841] = {
["isChanneled"] = true,
["source"] = "Scaffolding",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 231312,
},
[366759] = {
["source"] = "Illicit Collector",
["event"] = "SPELL_CAST_START",
["npcID"] = 183498,
},
[470384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Trashmaster Blazedump",
["npcID"] = 238011,
},
[30933] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Houndmaster",
["npcID"] = 17670,
},
[269029] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["npcID"] = 129208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2109,
},
[449318] = {
["source"] = "Peculiar Nerubian",
["event"] = "SPELL_CAST_START",
["npcID"] = 220485,
},
[464240] = {
["source"] = "High Priest Aemya",
["event"] = "SPELL_CAST_START",
["npcID"] = 212827,
},
[470383] = {
["source"] = "Premium Surveillance B.I.R.D.",
["event"] = "SPELL_CAST_START",
["npcID"] = 228107,
},
[266036] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Thistle Acolyte",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 135474,
},
[426295] = {
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_START",
["npcID"] = 212412,
},
[69963] = {
["npcID"] = 37034,
},
[455895] = {
["encounterName"] = "Ramstein the Gorger",
["source"] = "Ramstein the Gorger",
["npcID"] = 10439,
["event"] = "SPELL_CAST_START",
["encounterID"] = 483,
},
[39593] = {
["source"] = "Ashtongue Searing Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 22896,
},
[39849] = {
["encounterName"] = "Illidan Stormrage",
["source"] = "Illidan Stormrage",
["npcID"] = 22917,
["event"] = "SPELL_CAST_START",
["encounterID"] = 609,
},
[193152] = {
["encounterName"] = "King Deepbeard",
["source"] = "King Deepbeard",
["encounterID"] = 1812,
["event"] = "SPELL_CAST_START",
["npcID"] = 91797,
},
[287952] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[285150] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["encounterID"] = 2257,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 145185,
},
[195584] = {
["source"] = "Twilight Shadowcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 101122,
},
[106823] = {
["encounterName"] = "Liu Flameheart",
["source"] = "Liu Flameheart",
["npcID"] = 56732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1416,
},
[364240] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of War",
["npcID"] = 181549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[308459] = {
["source"] = "Zardeth of the Black Claw",
["event"] = "SPELL_CAST_START",
["npcID"] = 158371,
},
[465051] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xal'atath",
["npcID"] = 230937,
},
[264390] = {
["source"] = "Runic Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 131685,
},
[351091] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawsworn Hopebreaker",
["npcID"] = 177787,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[323393] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterID"] = 2381,
},
[253562] = {
["source"] = "Dazar'ai Augur",
["event"] = "SPELL_CAST_START",
["npcID"] = 122972,
},
[410848] = {
["source"] = "Neltharion",
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[442536] = {
["source"] = "Covert Webmancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 223844,
},
[414944] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Speartender",
["npcID"] = 207456,
},
[39122] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Frayer",
["npcID"] = 19557,
},
[459995] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Geargrinder Biker",
["encounterID"] = 3009,
["event"] = "SPELL_CAST_START",
["npcID"] = 225804,
},
[115009] = {
["isChanneled"] = true,
["source"] = "Shado-Pan Stormbringer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 59808,
},
[414945] = {
["source"] = "Fungal Rotcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 207459,
},
[228086] = {
["source"] = "Phantom Crew",
["event"] = "SPELL_CAST_START",
["npcID"] = 114584,
},
[337131] = {
["event"] = "SPELL_CAST_START",
["source"] = "Xantuth the Blighted",
["npcID"] = 162872,
},
[470379] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slimy Sewage",
["npcID"] = 234571,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[199805] = {
["source"] = "Stormforged Sentinel",
["event"] = "SPELL_CAST_START",
["npcID"] = 96574,
},
[459997] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "Geargrinder Biker",
["npcID"] = 225804,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[398300] = {
["source"] = "Shambling Infester",
["event"] = "SPELL_CAST_START",
["npcID"] = 200387,
},
[349419] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[44475] = {
["source"] = "Sunblade Mage Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 24683,
},
[448944] = {
["source"] = "Kobold Snuffercrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 218662,
},
[165511] = {
["npcID"] = 82017,
},
[41169] = {
["source"] = "Illidari Heartseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 23339,
},
[264038] = {
["source"] = "Coven Thornshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 131666,
},
[424737] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["npcID"] = 207205,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2861,
},
[87859] = {
["event"] = "SPELL_CAST_START",
["source"] = "Glubtok",
["npcID"] = 47162,
},
[455904] = {
["event"] = "SPELL_CAST_START",
["source"] = "Oozemodius",
["npcID"] = 220410,
},
[367851] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["npcID"] = 180990,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2537,
},
[71140] = {
["npcID"] = 37022,
},
[320614] = {
["encounterName"] = "Blightbone",
["npcID"] = 164702,
["encounterID"] = 2387,
},
[1217231] = {
["encounterName"] = "Sprocketmonger Lockenstock",
["source"] = "Sprocketmonger Lockenstock",
["npcID"] = 230583,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3013,
},
[474335] = {
["source"] = "Slugger the Smart",
["event"] = "SPELL_CAST_START",
["npcID"] = 230800,
},
[333875] = {
["npcID"] = 168942,
},
[462049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imposter Refugee",
["npcID"] = 230342,
},
[439524] = {
["encounterName"] = "Benk Buzzbee",
["source"] = "Benk Buzzbee",
["encounterID"] = 2931,
["event"] = "SPELL_CAST_START",
["npcID"] = 218002,
},
[442995] = {
["source"] = "Venture Co. Honey Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 220946,
},
[44272] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["npcID"] = 24556,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1895,
},
[470241] = {
["source"] = "Gozzic's Bloody Shredder",
["event"] = "SPELL_CAST_START",
["npcID"] = 225754,
},
[226687] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Rotspew Leftovers",
["npcID"] = 113707,
},
[474337] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shreddinator 3000",
["npcID"] = 230740,
},
[451812] = {
["event"] = "SPELL_CAST_START",
["source"] = "Burkhalt",
["npcID"] = 228671,
},
[412905] = {
["isChanneled"] = true,
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 205490,
},
[319713] = {
["encounterName"] = "Kryxis the Voracious",
["npcID"] = 162100,
["encounterID"] = 2360,
},
[449765] = {
["event"] = "SPELL_CAST_START",
["source"] = "Magma Serpent",
["npcID"] = 215770,
},
[106826] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["encounterID"] = 1305,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56719,
},
[82765] = {
["source"] = "Neferset Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 44982,
},
[239741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghostly Acolyte",
["npcID"] = 120194,
},
[408811] = {
["source"] = "Sundered Siegemaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 198874,
},
[3605] = {
["event"] = "SPELL_CAST_START",
["source"] = "Goblin Engineer",
["npcID"] = 622,
},
[1217249] = {
["source"] = "Gallagio Customer Care",
["event"] = "SPELL_CAST_START",
["npcID"] = 237109,
},
[404846] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[468658] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[69967] = {
["npcID"] = 37034,
},
[355571] = {
["encounterName"] = "Painsmith Raznal",
["source"] = "Painsmith Raznal",
["encounterID"] = 2430,
["event"] = "SPELL_CAST_START",
["npcID"] = 176523,
},
[472293] = {
["encounterName"] = "Rik Reverb",
["source"] = "Pyrotechnics",
["encounterID"] = 3011,
["event"] = "SPELL_CAST_START",
["npcID"] = 233623,
},
[474341] = {
["source"] = "Slugger the Smart",
["event"] = "SPELL_CAST_START",
["npcID"] = 230800,
},
[16172] = {
["event"] = "SPELL_CAST_START",
["source"] = "Warpwood Guardian",
["npcID"] = 11461,
},
[426768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Naz'jar Tempest Witch",
["npcID"] = 40634,
},
[156301] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Boomer",
["npcID"] = 80935,
},
[359668] = {
["npcID"] = 180051,
},
[106827] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["encounterID"] = 1305,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56719,
},
[290045] = {
["source"] = "Rastari Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 147495,
},
[16429] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thuzadin Shadowcaster",
["npcID"] = 10398,
},
[474343] = {
["isChanneled"] = true,
["source"] = "Slugger the Smart",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 230800,
},
[427245] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hapless Assistant",
["npcID"] = 212981,
},
[106421] = {
["source"] = "Shado-Pan Disciple",
["event"] = "SPELL_CAST_START",
["npcID"] = 58198,
},
[154254] = {
["npcID"] = 75482,
},
[286368] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Living Bomb",
["encounterID"] = 2285,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 146106,
},
[69968] = {
["npcID"] = 37030,
},
[339706] = {
["encounterName"] = "Mordretha",
["source"] = "Echo Bullrider",
["npcID"] = 173549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2404,
},
[234631] = {
["source"] = "Smoldering Infernal",
["event"] = "SPELL_CAST_START",
["npcID"] = 118065,
},
[192138] = {
["encounterName"] = "Warlord Parjesh",
["source"] = "Hatecoil Crestrider",
["encounterID"] = 1810,
["event"] = "SPELL_CAST_START",
["npcID"] = 97269,
},
[18392] = {
["encounterName"] = "Onyxia",
["source"] = "Onyxia",
["encounterID"] = 1084,
["event"] = "SPELL_CAST_START",
["npcID"] = 10184,
},
[470250] = {
["source"] = "Gozzic Cogcrane",
["event"] = "SPELL_CAST_START",
["npcID"] = 233251,
},
[384366] = {
["source"] = "Ashwhite Kestrel",
["event"] = "SPELL_CAST_START",
["npcID"] = 215070,
},
[61353] = {
["npcID"] = 96779,
},
[34359] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Chemist",
["npcID"] = 19486,
},
[412914] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fragment of Shadow",
["npcID"] = 205968,
},
[107852] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Soldier",
["npcID"] = 57159,
},
[1217279] = {
["source"] = "Addled Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 130435,
},
[453989] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[355118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Wavejumper",
["npcID"] = 178133,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[1217283] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Mechanized Peacekeeper",
["npcID"] = 136139,
},
[111813] = {
["event"] = "SPELL_CAST_START",
["source"] = "Risen Guard",
["npcID"] = 58822,
},
[357084] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Arbalest",
["npcID"] = 180379,
},
[308481] = {
["source"] = "Fallen Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 158146,
},
[403671] = {
["encounterName"] = "Magmorax",
["source"] = "Magmorax",
["npcID"] = 201579,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2683,
},
[468206] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shifty Scalper",
["npcID"] = 229286,
},
[224387] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sidereal Familiar",
["npcID"] = 112718,
},
[456438] = {
["source"] = "Warped Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 225342,
},
[22272] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ethereal Sorcerer",
["npcID"] = 18313,
},
[468207] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["npcID"] = 225821,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3009,
},
[290053] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Unexploded Ordnance",
["encounterID"] = 2281,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 149535,
},
[1217294] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[1223079] = {
["source"] = "Void-Scarred Wolf",
["event"] = "SPELL_CAST_START",
["npcID"] = 238836,
},
[468208] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shifty Scalper",
["npcID"] = 229286,
},
[453874] = {
["source"] = "Vrykul Hoardseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 223653,
},
[260741] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[188046] = {
["npcID"] = 198489,
},
[320771] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[1217301] = {
["source"] = "Aggressively Lost Hobgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 234905,
},
[268239] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Elemental",
["npcID"] = 136249,
},
[160402] = {
["npcID"] = 76382,
},
[320772] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[454318] = {
["isChanneled"] = true,
["source"] = "Brew Drop",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[284276] = {
["encounterName"] = "King Rastakhan",
["source"] = "King Rastakhan",
["encounterID"] = 2272,
["event"] = "SPELL_CAST_START",
["npcID"] = 145616,
},
[191732] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greater Lightning Elemental",
["npcID"] = 97022,
},
[430805] = {
["source"] = "Coalescing Void Diffuser",
["event"] = "SPELL_CAST_START",
["npcID"] = 214421,
},
[157331] = {
["encounterName"] = "Blightbone",
["npcID"] = 77936,
["encounterID"] = 2387,
},
[80781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rockwing Screecher",
["npcID"] = 10409,
},
[1217311] = {
["source"] = "Aggressively Lost Hobgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 234905,
},
[351835] = {
["encounterName"] = "The Eye of the Jailer",
["source"] = "Deathseeker Eye",
["npcID"] = 176531,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2433,
},
[404732] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[37967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Underbog Shambler",
["npcID"] = 17871,
},
[457266] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greenhorn Extra",
["npcID"] = 228307,
},
[312584] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Venomweaver",
["npcID"] = 156089,
},
[165740] = {
["npcID"] = 82010,
},
[121165] = {
["source"] = "Harthak Flameseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 61392,
},
[241290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tidescale Witch",
["npcID"] = 121011,
},
[250505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Scarred Gryphon",
["npcID"] = 237991,
},
[425315] = {
["encounterName"] = "Spinshroom",
["source"] = "Spinshroom",
["npcID"] = 207481,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2831,
},
[376049] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[433403] = {
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skittering Swarmer",
["npcID"] = 208245,
},
[427260] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Rooktender",
["npcID"] = 207199,
},
[369061] = {
["encounterName"] = "Emberon",
["encounterID"] = 2558,
["npcID"] = 184422,
},
[406783] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Shadowflame Amalgamation",
["npcID"] = 201934,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[450176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nerubian Slasher",
["npcID"] = 208243,
},
[458978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Kereke",
["npcID"] = 222378,
},
[37500] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dimensius the All-Devouring",
["npcID"] = 19554,
},
[101816] = {
["source"] = "Time-Twisted Sorceress",
["event"] = "SPELL_CAST_START",
["npcID"] = 54691,
},
[474360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flyboy Snooty",
["npcID"] = 230840,
},
[69972] = {
["npcID"] = 37149,
},
[255626] = {
["isChanneled"] = false,
["source"] = "Reanimated Honor Guard",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 127757,
},
[242316] = {
["event"] = "SPELL_CAST_START",
["source"] = "Archmage Xylem",
["npcID"] = 115244,
},
[159382] = {
["encounterName"] = "Rukhran",
["source"] = "Rukhran",
["npcID"] = 76143,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1700,
},
[1217336] = {
["source"] = "Crocodilian",
["event"] = "SPELL_CAST_START",
["npcID"] = 231177,
},
[266512] = {
["encounterName"] = "Galvazzt",
["source"] = "Galvazzt",
["npcID"] = 133389,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2126,
},
[113999] = {
["encounterName"] = "Rattlegore",
["source"] = "Rattlegore",
["npcID"] = 59153,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1428,
},
[267824] = {
["source"] = "Soul Essence",
["event"] = "SPELL_CAST_START",
["npcID"] = 135240,
},
[1217344] = {
["source"] = "Crocodilian",
["event"] = "SPELL_CAST_START",
["npcID"] = 231177,
},
[18649] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandfury Shadowhunter",
["npcID"] = 7246,
},
[410978] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Dragonhunter",
["npcID"] = 202108,
},
[228164] = {
["source"] = "Phantom Crew",
["event"] = "SPELL_CAST_START",
["npcID"] = 114584,
},
[217744] = {
["npcID"] = 134541,
},
[178837] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cackling Pyromaniac",
["npcID"] = 79510,
},
[63147] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33134,
["encounterID"] = 1143,
},
[347404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Darkcaster",
["npcID"] = 178628,
},
[69973] = {
["npcID"] = 37149,
},
[453887] = {
["source"] = "Savage Cursespreader",
["event"] = "SPELL_CAST_START",
["npcID"] = 223655,
},
[357135] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Paindrinker",
["npcID"] = 180387,
},
[433410] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chittering Fearmonger",
["npcID"] = 216583,
},
[1215482] = {
["source"] = "Underboss Paulie",
["event"] = "SPELL_CAST_START",
["npcID"] = 225725,
},
[188053] = {
["source"] = "Fel Hellweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 94806,
},
[81236] = {
["event"] = "SPELL_CAST_START",
["source"] = "Plagued Hatchling",
["npcID"] = 10678,
},
[433411] = {
["source"] = "Peculiar Nerubian",
["event"] = "SPELL_CAST_START",
["npcID"] = 220485,
},
[277296] = {
["source"] = "Cutwater Duelist",
["event"] = "SPELL_CAST_START",
["npcID"] = 129025,
},
[157043] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Ritualist",
["npcID"] = 77130,
},
[323150] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 165737,
["encounterID"] = 2381,
},
[294165] = {
["npcID"] = 182214,
},
[316779] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Lancer",
["npcID"] = 178043,
},
[1217361] = {
["source"] = "Underpin's Adoring Fan",
["event"] = "SPELL_CAST_START",
["npcID"] = 234900,
},
[403101] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Eternal Blaze",
["npcID"] = 201773,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[69974] = {
["npcID"] = 37146,
},
[320787] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[268415] = {
["isChanneled"] = true,
["source"] = "Haywire Excavator",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 224875,
},
[267546] = {
["source"] = "Rowdy Reveler",
["event"] = "SPELL_CAST_START",
["npcID"] = 144231,
},
[466178] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["npcID"] = 229177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3010,
},
[320788] = {
["encounterName"] = "Nalthor the Rimebinder",
["encounterID"] = 2390,
["npcID"] = 162693,
},
[404744] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[469378] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[253583] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Dazar'ai Augur",
["npcID"] = 122972,
},
[22907] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Witch",
["npcID"] = 24696,
},
[37551] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[472323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimewick",
["npcID"] = 231017,
},
[267308] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Zanazal the Wise",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135472,
},
[276268] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrine Templar",
["npcID"] = 134139,
},
[453894] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ren'khat",
["npcID"] = 222152,
},
[468229] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shifty Scalper",
["npcID"] = 229286,
},
[310552] = {
["encounterName"] = "Drest'agath",
["source"] = "Eye of Drest'agath",
["npcID"] = 157612,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2343,
},
[69975] = {
["npcID"] = 37146,
},
[470277] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brined Monstrosity",
["npcID"] = 230263,
},
[261265] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["npcID"] = 131825,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2113,
},
[320293] = {
["encounterName"] = "An Affront of Challengers",
["npcID"] = 164461,
["encounterID"] = 2391,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[445705] = {
["source"] = "Deepwater Makura",
["event"] = "SPELL_CAST_START",
["npcID"] = 220643,
},
[267551] = {
["source"] = "Coin-Operated Crowd Pummeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[232084] = {
["source"] = "Backup Singer",
["event"] = "SPELL_CAST_START",
["npcID"] = 116549,
},
[394512] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void Spawn",
["npcID"] = 75652,
},
[347414] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[472327] = {
["source"] = "Grime",
["event"] = "SPELL_CAST_START",
["npcID"] = 230936,
},
[373526] = {
["source"] = "Sunrise Honeysucker",
["event"] = "SPELL_CAST_START",
["npcID"] = 224133,
},
[382303] = {
["encounterName"] = "Bromach",
["encounterID"] = 2556,
["npcID"] = 184018,
},
[474008] = {
["event"] = "SPELL_CAST_START",
["source"] = "Corruption Parasite",
["npcID"] = 234205,
},
[318406] = {
["encounterName"] = "Gorechop",
["source"] = "Gorechop",
["encounterID"] = 2365,
["event"] = "SPELL_CAST_START",
["npcID"] = 162317,
},
[321834] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["encounterID"] = 2392,
["event"] = "SPELL_CAST_START",
["npcID"] = 164501,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[153521] = {
["event"] = "SPELL_CAST_START",
["source"] = "Adept of the Dawn",
["npcID"] = 79467,
},
[472329] = {
["source"] = "Uninformed Citizen",
["event"] = "SPELL_CAST_START",
["npcID"] = 233280,
},
[347716] = {
["npcID"] = 176394,
},
[337178] = {
["npcID"] = 170838,
},
[404754] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Null Glimmer",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 202971,
},
[472330] = {
["source"] = "Ratspit",
["event"] = "SPELL_CAST_START",
["npcID"] = 230934,
},
[113] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defias Wizard",
["npcID"] = 4418,
},
[451758] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hungering Shimmerfin",
["npcID"] = 215243,
},
[470354] = {
["source"] = "Surveillance B.I.R.D.",
["event"] = "SPELL_CAST_START",
["npcID"] = 225860,
},
[240277] = {
["encounterName"] = "Garothi Worldbreaker",
["source"] = "Garothi Worldbreaker",
["npcID"] = 122450,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2076,
},
[195801] = {
["isChanneled"] = true,
["source"] = "Bitterbrine Slave",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 95939,
},
[353562] = {
["encounterName"] = "Soulrender Dormazain",
["source"] = "Mawsworn Overlord",
["npcID"] = 179177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2434,
},
[437719] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[390422] = {
["npcID"] = 189933,
},
[123649] = {
["source"] = "Kargesh Ribcrusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 61947,
},
[1215033] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Torque Clankfire",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237554,
},
[406918] = {
["event"] = "SPELL_CAST_START",
["source"] = "Djaradin Lavamancer",
["npcID"] = 202256,
},
[165674] = {
["npcID"] = 79585,
},
[466190] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[69869] = {
["npcID"] = 37033,
},
[382233] = {
["npcID"] = 193462,
},
[1217418] = {
["source"] = "Underpin's Well-Connected Friend",
["event"] = "SPELL_CAST_START",
["npcID"] = 234901,
},
[249114] = {
["event"] = "SPELL_CAST_START",
["source"] = "Garothi Worldbreaker",
["npcID"] = 122450,
},
[254613] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Voidbender",
["npcID"] = 127784,
},
[320008] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164556,
["encounterID"] = 2394,
},
[403771] = {
["encounterName"] = "Scalecommander Sarkareth",
["source"] = "Sarkareth",
["encounterID"] = 2685,
["event"] = "SPELL_CAST_START",
["npcID"] = 201754,
},
[1217326] = {
["source"] = "Underpin's Adoring Fan",
["event"] = "SPELL_CAST_START",
["npcID"] = 234900,
},
[385536] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primalist Flamedancer",
["npcID"] = 190206,
},
[453906] = {
["source"] = "Lost Wickedfoot",
["event"] = "SPELL_CAST_START",
["npcID"] = 223654,
},
[93527] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Lord Walden",
["npcID"] = 46963,
},
[360845] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Prototype of Duty",
["npcID"] = 181551,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[349663] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176556,
["encounterID"] = 2441,
},
[320571] = {
["npcID"] = 163128,
},
[264520] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Survivalist",
["npcID"] = 131850,
},
[333479] = {
["npcID"] = 163620,
},
[320804] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164561,
["encounterID"] = 2394,
},
[470290] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brined Monstrosity",
["npcID"] = 230263,
},
[445718] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stolen Loader",
["npcID"] = 223541,
},
[355675] = {
["npcID"] = 176705,
},
[288041] = {
["encounterName"] = "Mekkatorque",
["source"] = "High Tinker Mekkatorque",
["encounterID"] = 2276,
["event"] = "SPELL_CAST_START",
["npcID"] = 144796,
},
[331044] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anima-Starved Shrieker",
["npcID"] = 169050,
},
[464149] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3012,
},
[241305] = {
["event"] = "SPELL_CAST_START",
["source"] = "Razorjaw Acolyte",
["npcID"] = 117154,
},
[335141] = {
["npcID"] = 165824,
},
[76634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tainted Sentry",
["npcID"] = 40925,
},
[316711] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychus",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158376,
},
[466197] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[46153] = {
["encounterName"] = "Selin Fireheart",
["source"] = "Selin Fireheart",
["npcID"] = 24723,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1897,
},
[157348] = {
["encounterName"] = "Blightbone",
["npcID"] = 77936,
["encounterID"] = 2387,
},
[71303] = {
["source"] = "Ymirjar Deathbringer",
["event"] = "SPELL_CAST_START",
["npcID"] = 38125,
},
[241306] = {
["event"] = "SPELL_CAST_START",
["source"] = "Razorjaw Acolyte",
["npcID"] = 117154,
},
[326952] = {
["npcID"] = 168058,
},
[1217449] = {
["source"] = "Underpin's Well-Connected Friend",
["event"] = "SPELL_CAST_START",
["npcID"] = 234901,
},
[1217450] = {
["isChanneled"] = true,
["source"] = "Patented Jetcopter",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 235111,
},
[335143] = {
["npcID"] = 165222,
},
[1217452] = {
["source"] = "Underpin's Well-Connected Friend",
["event"] = "SPELL_CAST_START",
["npcID"] = 234901,
},
[1217453] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Captain",
["npcID"] = 228465,
},
[262092] = {
["source"] = "Addled Thug",
["event"] = "SPELL_CAST_START",
["npcID"] = 130435,
},
[441627] = {
["source"] = "Flavor Scientist",
["event"] = "SPELL_CAST_START",
["npcID"] = 214673,
},
[1217456] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Disturbed Kelp",
["npcID"] = 231223,
},
[357128] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hollowsoul",
["npcID"] = 176879,
},
[448276] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungarian Sporeflinger",
["npcID"] = 218667,
},
[451014] = {
["encounterName"] = "Tendris Warpwood",
["source"] = "Tendris Warpwood",
["npcID"] = 11489,
["event"] = "SPELL_CAST_START",
["encounterID"] = 350,
},
[464112] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["npcID"] = 230322,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3012,
},
[1217461] = {
["event"] = "SPELL_CAST_START",
["source"] = "The Captain",
["npcID"] = 228465,
},
[166565] = {
["encounterName"] = "Nitrogg Thundertower",
["source"] = "Assault Cannon",
["npcID"] = 79548,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1732,
},
[167589] = {
["encounterName"] = "Nitrogg Thundertower",
["source"] = "Assault Cannon",
["npcID"] = 79548,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1732,
},
[121174] = {
["source"] = "Harthak Flameseeker",
["event"] = "SPELL_CAST_START",
["npcID"] = 61392,
},
[355074] = {
["source"] = "Mawsworn Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 178628,
},
[423200] = {
["encounterName"] = "Skarmorak",
["source"] = "Skarmorak",
["encounterID"] = 2880,
["event"] = "SPELL_CAST_START",
["npcID"] = 210156,
},
[73564] = {
["encounterName"] = "Siamat",
["source"] = "Siamat",
["encounterID"] = 1055,
["event"] = "SPELL_CAST_START",
["npcID"] = 44819,
},
[378150] = {
["npcID"] = 191376,
},
[264608] = {
["encounterName"] = "Council o' Captains",
["source"] = "Rummy Mancomb",
["encounterID"] = 2094,
["event"] = "SPELL_CAST_START",
["npcID"] = 133219,
},
[264525] = {
["event"] = "SPELL_CAST_START",
["source"] = "Maddened Survivalist",
["npcID"] = 131850,
},
[153923] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Skyreach Raven Whisperer",
["npcID"] = 76154,
},
[284451] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Living Bomb",
["encounterID"] = 2285,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 146105,
},
[314149] = {
["source"] = "Dark Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 161286,
},
[445252] = {
["isChanneled"] = true,
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 214625,
},
[268702] = {
["source"] = "Stonefury",
["event"] = "SPELL_CAST_START",
["npcID"] = 130635,
},
[357029] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cartel Smuggler",
["npcID"] = 180335,
},
[218806] = {
["encounterName"] = "High Botanist Tel'arn",
["source"] = "Solarist Tel'arn",
["npcID"] = 109038,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1886,
},
[294195] = {
["source"] = "Defense Bot Mk III",
["event"] = "SPELL_CAST_START",
["npcID"] = 144298,
},
[318768] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychophage",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 163947,
},
[431544] = {
["source"] = "Quartermaster's Bulwark",
["event"] = "SPELL_CAST_START",
["npcID"] = 224517,
},
[388392] = {
["npcID"] = 196044,
},
[398631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Vindictive Technician",
["npcID"] = 220472,
},
[454384] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[1215015] = {
["encounterName"] = "Torque Clanfire and Sprok",
["source"] = "Sprok",
["encounterID"] = 3140,
["event"] = "SPELL_CAST_START",
["npcID"] = 237552,
},
[451913] = {
["source"] = "The Puppetmaster?",
["event"] = "SPELL_CAST_START",
["npcID"] = 220507,
},
[267977] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shrine Templar",
["npcID"] = 134139,
},
[288836] = {
["source"] = "Rastari Alpha",
["event"] = "SPELL_CAST_START",
["npcID"] = 147835,
},
[156294] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Raider",
["npcID"] = 81197,
},
[1215065] = {
["encounterName"] = "Tussle Tonks",
["source"] = "The Platinum Pummeler",
["encounterID"] = 2257,
["event"] = "SPELL_CAST_START",
["npcID"] = 144244,
},
[187876] = {
["source"] = "Voidscribe Aathalos",
["event"] = "SPELL_CAST_START",
["npcID"] = 94802,
},
[318771] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "Psychophage",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 163947,
},
[76508] = {
["source"] = "Crazed Mage",
["event"] = "SPELL_CAST_START",
["npcID"] = 39982,
},
[346947] = {
["encounterName"] = "Mailroom Mayhem",
["npcID"] = 175646,
["encounterID"] = 2424,
},
[35507] = {
["encounterName"] = "Laj",
["source"] = "Thorn Flayer",
["npcID"] = 19920,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1927,
},
[88194] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[1217496] = {
["source"] = "Bubbles",
["event"] = "SPELL_CAST_START",
["npcID"] = 231197,
},
[15284] = {
["encounterName"] = "Karsh Steelbender",
["source"] = "Karsh Steelbender",
["encounterID"] = 1039,
["event"] = "SPELL_CAST_START",
["npcID"] = 39698,
},
[76572] = {
["source"] = "Twilight Sadist",
["event"] = "SPELL_CAST_START",
["npcID"] = 39980,
},
[472355] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimewick",
["npcID"] = 231017,
},
[53425] = {
["npcID"] = 25804,
},
[157355] = {
["npcID"] = 81711,
},
[365872] = {
["encounterName"] = "Anduin Wrynn",
["source"] = "Anduin Wrynn",
["npcID"] = 181954,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2546,
},
[433448] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Nerubian Webspinner",
["npcID"] = 216621,
},
[320822] = {
["npcID"] = 165222,
},
[470308] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Acolyte",
["npcID"] = 232094,
},
[31673] = {
["encounterName"] = "Hungarfen",
["source"] = "Hungarfen",
["npcID"] = 17770,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1946,
},
[449831] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Battlefront Hauler",
["npcID"] = 222719,
},
[320823] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164555,
["encounterID"] = 2394,
},
[15982] = {
["encounterName"] = "Witch Doctor Zum'rah",
["source"] = "Witch Doctor Zum'rah",
["npcID"] = 7271,
["event"] = "SPELL_CAST_START",
["encounterID"] = 597,
},
[1217510] = {
["source"] = "Underpin's Well-Connected Friend",
["event"] = "SPELL_CAST_START",
["npcID"] = 234901,
},
[34634] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Channeler",
["npcID"] = 19505,
},
[31598] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Shadowmoon Darkcaster",
["npcID"] = 17694,
},
[363827] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Ebon Dominator",
["npcID"] = 181224,
},
[267077] = {
["encounterName"] = "The Council of Tribes",
["source"] = "Explosive Totem",
["encounterID"] = 2140,
["event"] = "SPELL_CAST_START",
["npcID"] = 135764,
},
[331237] = {
["npcID"] = 162763,
},
[320825] = {
["encounterName"] = "The Manastorms",
["npcID"] = 164568,
["encounterID"] = 2394,
},
[355637] = {
["npcID"] = 179840,
},
[350342] = {
["encounterName"] = "The Nine",
["source"] = "Kyra",
["encounterID"] = 2429,
["event"] = "SPELL_CAST_START",
["npcID"] = 177095,
},
[169839] = {
["event"] = "SPELL_CAST_START",
["source"] = "Putrid Pyromancer",
["npcID"] = 84957,
},
[255824] = {
["encounterName"] = "Priestess Alun'za",
["source"] = "Dazar'ai Juggernaut",
["encounterID"] = 2084,
["event"] = "SPELL_CAST_START",
["npcID"] = 122971,
},
[342675] = {
["npcID"] = 170882,
},
[166969] = {
["npcID"] = 79315,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[1219617] = {
["source"] = "Maddened Eyestalk",
["event"] = "SPELL_CAST_START",
["npcID"] = 234382,
},
[314720] = {
["source"] = "Gamon",
["event"] = "SPELL_CAST_START",
["npcID"] = 241702,
},
[332156] = {
["npcID"] = 167963,
},
[365901] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominated Shaper",
["npcID"] = 184627,
},
[320759] = {
["isChanneled"] = false,
["source"] = "Decimator Shiq'voth",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 153943,
},
[355640] = {
["npcID"] = 179840,
},
[300351] = {
["source"] = "Decimator Shiq'voth",
["event"] = "SPELL_CAST_START",
["npcID"] = 153943,
},
[382712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilted Oak",
["npcID"] = 186229,
},
[107356] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[355641] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[349498] = {
["encounterName"] = "The Grand Menagerie",
["npcID"] = 176556,
["encounterID"] = 2441,
},
[470686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechano Wolf",
["npcID"] = 228050,
},
[470335] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sureki Burrower",
["npcID"] = 232096,
},
[355642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Veteran Sparkcaster",
["npcID"] = 179841,
},
[187052] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Contracted Engineer",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 93881,
},
[260280] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Mogul Razdunk",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 129232,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[406854] = {
["source"] = "Malgosa Spellbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 205620,
},
[355069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Archer",
["npcID"] = 178625,
},
[1217608] = {
["source"] = "The Stone",
["event"] = "SPELL_CAST_START",
["npcID"] = 219003,
},
[473537] = {
["event"] = "SPELL_CAST_START",
["source"] = "Punchy Thug",
["npcID"] = 231904,
},
[321249] = {
["npcID"] = 162051,
},
[202995] = {
["isChanneled"] = true,
["source"] = "Twilight Ritualist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 102693,
},
[17473] = {
["encounterName"] = "Lord Aurius Rivendare",
["source"] = "Lord Aurius Rivendare",
["npcID"] = 45412,
["event"] = "SPELL_CAST_START",
["encounterID"] = 484,
},
[355577] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stormforged Guardian",
["npcID"] = 178171,
},
[445746] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkwater Clawsmasher",
["npcID"] = 220985,
},
[5208] = {
["encounterName"] = "Captain Greenskin",
["source"] = "Captain Greenskin",
["npcID"] = 647,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2971,
},
[32363] = {
["encounterName"] = "Nexus-Prince Shaffar",
["source"] = "Nexus-Prince Shaffar",
["npcID"] = 18344,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1899,
},
[451890] = {
["source"] = "Dogmatic Soot-Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 212876,
},
[352833] = {
["encounterName"] = "Guardian of the First Ones",
["source"] = "Guardian of the First Ones",
["npcID"] = 175731,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2436,
},
[326441] = {
["npcID"] = 164557,
},
[453875] = {
["source"] = "Shurrai",
["event"] = "SPELL_CAST_START",
["npcID"] = 221224,
},
[240540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Razorjaw Swiftfin",
["npcID"] = 120516,
},
[450127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Siegehold Defender",
["npcID"] = 216016,
},
[1217562] = {
["source"] = "The Stone",
["event"] = "SPELL_CAST_START",
["npcID"] = 219003,
},
[165520] = {
["npcID"] = 82003,
},
[472378] = {
["isChanneled"] = true,
["source"] = "Worn Scrapbot",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 232468,
},
[365887] = {
["event"] = "SPELL_CAST_START",
["source"] = "Eternal Forger",
["npcID"] = 184878,
},
[36533] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nexus-King Salhadaar",
["npcID"] = 20454,
},
[451900] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dogmatic Soot-Seer",
["npcID"] = 212876,
},
[71296] = {
["npcID"] = 38125,
},
[453733] = {
["source"] = "Shurrai",
["event"] = "SPELL_CAST_START",
["npcID"] = 221224,
},
[365888] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominated Eradicator",
["npcID"] = 184879,
},
[1217589] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sporbit",
["npcID"] = 237337,
},
[353603] = {
["encounterName"] = "Fatescribe Roh-Kalo",
["source"] = "Fatescribe Roh-Kalo",
["npcID"] = 175730,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2431,
},
[153268] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Exhumer",
["npcID"] = 77700,
},
[228011] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114522,
["encounterID"] = 1957,
},
[31707] = {
["npcID"] = 78116,
},
[205486] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["npcID"] = 103758,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1863,
},
[446474] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greasebaddaden",
["npcID"] = 216574,
},
[271903] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[359829] = {
["encounterName"] = "Skolex, the Insatiable Ravener",
["source"] = "Skolex",
["npcID"] = 181395,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2542,
},
[427323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[306656] = {
["encounterName"] = "Vez'okk the Lightless",
["source"] = "Vez'okk the Lightless",
["encounterID"] = 3089,
["event"] = "SPELL_CAST_START",
["npcID"] = 234037,
},
[121182] = {
["isChanneled"] = true,
["source"] = "Harthak Flameseeker",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 61392,
},
[75610] = {
["source"] = "Corla, Herald of Twilight",
["event"] = "SPELL_CAST_START",
["npcID"] = 39679,
},
[424614] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fungal Stabber",
["npcID"] = 207450,
},
[324103] = {
["npcID"] = 162133,
},
[320114] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[184065] = {
["source"] = "Gorebound Corruptor",
["event"] = "SPELL_CAST_START",
["npcID"] = 94604,
},
[308862] = {
["source"] = "Unstable Servant",
["event"] = "SPELL_CAST_START",
["npcID"] = 158411,
},
[453946] = {
["encounterName"] = "Bogpiper",
["source"] = "Bogpiper",
["npcID"] = 220314,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2960,
},
[15744] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Theurgist",
["npcID"] = 18315,
},
[162407] = {
["encounterName"] = "Rocketspark and Borka",
["source"] = "Railmaster Rocketspark",
["npcID"] = 77803,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1715,
},
[453967] = {
["source"] = "Warmonger Ogli",
["event"] = "SPELL_CAST_START",
["npcID"] = 223896,
},
[453947] = {
["source"] = "Warmonger Ogli",
["event"] = "SPELL_CAST_START",
["npcID"] = 222725,
},
[215241] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Executor",
["npcID"] = 115595,
},
[443430] = {
["source"] = "Sureki Silkbinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 220195,
},
[271698] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[264311] = {
["source"] = "Treasure Counter",
["event"] = "SPELL_CAST_START",
["npcID"] = 145202,
},
[382277] = {
["npcID"] = 193457,
},
[152792] = {
["encounterName"] = "Nhallish",
["source"] = "Nhallish",
["npcID"] = 75829,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1688,
},
[102569] = {
["encounterName"] = "Murozond",
["source"] = "Murozond",
["encounterID"] = 1271,
["event"] = "SPELL_CAST_START",
["npcID"] = 54432,
},
[348953] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Kel'Thuzad",
["npcID"] = 175559,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[406851] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[62016] = {
["encounterName"] = "Thorim",
["npcID"] = 32865,
["encounterID"] = 1141,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[433731] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["encounterID"] = 2906,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 215405,
},
[390470] = {
["npcID"] = 189933,
},
[107357] = {
["encounterName"] = "Taran Zhu",
["source"] = "Taran Zhu",
["npcID"] = 56884,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 1306,
},
[69989] = {
["npcID"] = 37146,
},
[206514] = {
["encounterName"] = "Gul'dan",
["source"] = "Gul'dan",
["npcID"] = 104154,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1866,
},
[365898] = {
["source"] = "Dominated Eradicator",
["event"] = "SPELL_CAST_START",
["npcID"] = 185346,
},
[473576] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2364,
},
[112992] = {
["encounterName"] = "Hoptallus",
["source"] = "Hoptallus",
["npcID"] = 56717,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1413,
},
[432120] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overlord",
["npcID"] = 228575,
},
[390472] = {
["npcID"] = 189933,
},
[474430] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flyboy Snooty",
["npcID"] = 230840,
},
[157931] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Magus",
["npcID"] = 76263,
},
[57780] = {
["npcID"] = 33236,
},
[65133] = {
["encounterName"] = "Hodir",
["npcID"] = 32900,
["encounterID"] = 1135,
},
[257802] = {
["event"] = "SPELL_CAST_START",
["source"] = "Clobex",
["npcID"] = 127732,
},
[332550] = {
["npcID"] = 169875,
},
[448219] = {
["source"] = "Colossal Titan Orb",
["event"] = "SPELL_CAST_START",
["npcID"] = 221730,
},
[195253] = {
["source"] = "Restless Tides",
["event"] = "SPELL_CAST_START",
["npcID"] = 97173,
},
[474432] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Flyboy Snooty",
["npcID"] = 230840,
},
[110945] = {
["encounterName"] = "Gu Cloudstrike",
["source"] = "Gu Cloudstrike",
["encounterID"] = 1303,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 56747,
},
[454375] = {
["source"] = "Toaka the Explorer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222659,
},
[35511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[276229] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "B.O.O.M.B.A.",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 141303,
},
[264574] = {
["source"] = "Sandswept Marksman",
["event"] = "SPELL_CAST_START",
["npcID"] = 134600,
},
[169657] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twisted Abomination",
["npcID"] = 84767,
},
[365903] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dominated Shaper",
["npcID"] = 186353,
},
[317791] = {
["npcID"] = 163366,
},
[221875] = {
["encounterName"] = "Star Augur Etraeus",
["source"] = "Star Augur Etraeus",
["npcID"] = 103758,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1863,
},
[464584] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[334377] = {
["npcID"] = 171805,
},
[326997] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stoneborn Slasher",
["npcID"] = 167607,
},
[260696] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[76682] = {
["source"] = "Twilight Element Warden",
["event"] = "SPELL_CAST_START",
["npcID"] = 40017,
},
[428401] = {
["encounterName"] = "Ozumat",
["source"] = "Ink of Ozumat",
["npcID"] = 213770,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1047,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92612,
},
[309648] = {
["encounterName"] = "Magister Umbric",
["source"] = "Magister Umbric",
["encounterID"] = 3085,
["event"] = "SPELL_CAST_START",
["npcID"] = 233681,
},
[322903] = {
["encounterName"] = "General Kaal",
["npcID"] = 162099,
["encounterID"] = 2363,
},
[472389] = {
["source"] = "S.A.L.",
["event"] = "SPELL_CAST_START",
["npcID"] = 230979,
},
[321807] = {
["npcID"] = 163619,
},
[30937] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Channeler",
["npcID"] = 17653,
},
[413005] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Additive",
["npcID"] = 205672,
},
[471760] = {
["source"] = "Venture Scrapper",
["event"] = "SPELL_CAST_START",
["npcID"] = 225716,
},
[474438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flyboy Snooty",
["npcID"] = 230840,
},
[106851] = {
["source"] = "Stout Brew Alemental",
["event"] = "SPELL_CAST_START",
["npcID"] = 59519,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[1217646] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lady of the Lake",
["npcID"] = 216577,
},
[324293] = {
["npcID"] = 165919,
},
[354531] = {
["encounterName"] = "Remnant of Ner'zhul",
["source"] = "Remnant of Ner'zhul",
["npcID"] = 175729,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2432,
},
[445771] = {
["source"] = "Deepwater Makura",
["event"] = "SPELL_CAST_START",
["npcID"] = 220643,
},
[355057] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkbrine Shellcrusher",
["npcID"] = 178139,
},
[268703] = {
["source"] = "Charged Dust Devil",
["event"] = "SPELL_CAST_START",
["npcID"] = 134990,
},
[427342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[1217653] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[267618] = {
["encounterName"] = "Mchimba the Embalmer",
["source"] = "Mchimba the Embalmer",
["encounterID"] = 2142,
["event"] = "SPELL_CAST_START",
["npcID"] = 134993,
},
[426283] = {
["source"] = "Cursedheart Invader",
["event"] = "SPELL_CAST_START",
["npcID"] = 212389,
},
[361815] = {
["encounterName"] = "Anduin Wrynn",
["source"] = "Anduin Wrynn",
["npcID"] = 181954,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2546,
},
[426619] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[1217658] = {
["event"] = "SPELL_CAST_START",
["source"] = "Greasebaddaden",
["npcID"] = 216574,
},
[152818] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Bone-Mender",
["npcID"] = 75713,
},
[356021] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Mawforged Summoner",
["npcID"] = 177891,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[1217661] = {
["encounterName"] = "Underpin",
["source"] = "The Underpin",
["encounterID"] = 3138,
["event"] = "SPELL_CAST_START",
["npcID"] = 236626,
},
[308575] = {
["source"] = "Fallen Riftwalker",
["event"] = "SPELL_CAST_START",
["npcID"] = 158146,
},
[15232] = {
["event"] = "SPELL_CAST_START",
["source"] = "Murkblood Oracle",
["npcID"] = 17771,
},
[449817] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Toxic Swarmite",
["npcID"] = 222721,
},
[396629] = {
["source"] = "Leg Chewer",
["event"] = "SPELL_CAST_START",
["npcID"] = 217743,
},
[1217666] = {
["encounterName"] = "Underpin",
["source"] = "The Underpin",
["encounterID"] = 3138,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 236626,
},
[1217667] = {
["encounterName"] = "Underpin",
["source"] = "The Underpin",
["encounterID"] = 3138,
["event"] = "SPELL_CAST_START",
["npcID"] = 236626,
},
[427346] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[413012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Additive",
["npcID"] = 205671,
},
[449815] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sandres the Relicbearer",
["npcID"] = 217534,
},
[453909] = {
["isChanneled"] = true,
["source"] = "Venture Co. Pyromaniac",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218671,
},
[268705] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sand-Crusted Striker",
["npcID"] = 135846,
},
[241049] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lylth the Silent",
["npcID"] = 120808,
},
[315011] = {
["event"] = "SPELL_CAST_START",
["source"] = "Aqir Shadowcrafter",
["npcID"] = 161416,
},
[1219192] = {
["event"] = "SPELL_CAST_START",
["source"] = "Imperious Blaster",
["npcID"] = 229356,
},
[106853] = {
["encounterName"] = "Master Snowdrift",
["source"] = "Master Snowdrift",
["encounterID"] = 1304,
["event"] = "SPELL_CAST_START",
["npcID"] = 56541,
},
[1217677] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sparring Squireling",
["npcID"] = 229938,
},
[300388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Decimator Shiq'voth",
["npcID"] = 153943,
},
[18670] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironbark Protector",
["npcID"] = 11459,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["encounterID"] = 2397,
["event"] = "SPELL_CAST_START",
["npcID"] = 164804,
},
[250102] = {
["event"] = "SPELL_CAST_START",
["source"] = "Summoned Skeleton",
["npcID"] = 11200,
},
[445819] = {
["event"] = "SPELL_CAST_START",
["source"] = "Rampaging Deepflayer",
["npcID"] = 218657,
},
[165875] = {
["npcID"] = 79702,
},
[405821] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[167092] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cackling Pyromaniac",
["npcID"] = 79510,
},
[176127] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Boomer",
["npcID"] = 80935,
},
[34254] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Botanist",
["npcID"] = 18422,
},
[83877] = {
["source"] = "Oathsworn Pathfinder",
["event"] = "SPELL_CAST_START",
["npcID"] = 44932,
},
[445781] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stolen Loader",
["npcID"] = 223541,
},
[406874] = {
["source"] = "Servant of Kruul",
["event"] = "SPELL_CAST_START",
["npcID"] = 206861,
},
[267809] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forgotten Denizen",
["npcID"] = 136297,
},
[460116] = {
["encounterName"] = "Vexie and the Geargrinders",
["source"] = "The Geargrinder",
["encounterID"] = 3009,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 225821,
},
[347490] = {
["encounterName"] = "The Tarragrue",
["source"] = "The Tarragrue",
["encounterID"] = 2423,
["event"] = "SPELL_CAST_START",
["npcID"] = 175611,
},
[357729] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Anduin Wrynn",
["npcID"] = 178072,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[290355] = {
["source"] = "Furious Merchant",
["event"] = "SPELL_CAST_START",
["npcID"] = 148119,
},
[23601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shattered Hand Sharpshooter",
["npcID"] = 16704,
},
[101223] = {
["encounterName"] = "Alysrazor",
["source"] = "Blazing Talon Initiate",
["encounterID"] = 1206,
["event"] = "SPELL_CAST_START",
["npcID"] = 53369,
},
[357730] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Anduin Wrynn",
["npcID"] = 178072,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2435,
},
[453897] = {
["encounterName"] = "Bogpiper",
["source"] = "Bogpiper",
["npcID"] = 220314,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2960,
},
[1242273] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Defense Matrix",
["npcID"] = 239445,
},
[249121] = {
["encounterName"] = "The Defense of Eonar",
["source"] = "The Paraxis",
["npcID"] = 124445,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2075,
},
[163752] = {
["source"] = "Grom'kar Man-at-Arms",
["event"] = "SPELL_CAST_START",
["npcID"] = 77687,
},
[474453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mechanized Peacekeeper",
["npcID"] = 227961,
},
[112998] = {
["source"] = "Residual Hatred",
["event"] = "SPELL_CAST_START",
["npcID"] = 58803,
},
[467606] = {
["encounterName"] = "Rik Reverb",
["source"] = "Rik Reverb",
["npcID"] = 228648,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3011,
},
[162500] = {
["encounterName"] = "Rocketspark and Borka",
["source"] = "Railmaster Rocketspark",
["npcID"] = 77803,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1715,
},
[160772] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Bilgewater Assessor",
["npcID"] = 234103,
},
[427356] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[1217371] = {
["source"] = "The Underpin",
["event"] = "SPELL_CAST_START",
["npcID"] = 236942,
},
[223933] = {
["source"] = "Big Keech",
["event"] = "SPELL_CAST_START",
["npcID"] = 241024,
},
[1239721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Syndicate Torchthrower",
["npcID"] = 230340,
},
[427357] = {
["source"] = "Devout Priest",
["event"] = "SPELL_CAST_START",
["npcID"] = 206697,
},
[397914] = {
["source"] = "Depraved Mistweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 200137,
},
[187074] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Hulking Berserker",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 92911,
},
[311399] = {
["source"] = "Armsmaster Terenson",
["event"] = "SPELL_CAST_START",
["npcID"] = 156949,
},
[1213671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Heights Security",
["npcID"] = 233076,
},
[277297] = {
["npcID"] = 133399,
},
[357735] = {
["encounterName"] = "Painsmith Raznal",
["source"] = "Shadowsteel Horror",
["npcID"] = 179847,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2430,
},
[1217354] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Underpin's Adoring Fan",
["npcID"] = 234900,
},
[427359] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[1217721] = {
["event"] = "SPELL_CAST_START",
["source"] = "Snake Eyes",
["npcID"] = 237264,
},
[315947] = {
["encounterName"] = "Carapace of N'Zoth",
["source"] = "Fury of N'Zoth",
["encounterID"] = 2337,
["event"] = "SPELL_CAST_START",
["npcID"] = 157439,
},
[125056] = {
["npcID"] = 165189,
},
[271731] = {
["isChanneled"] = true,
["source"] = "Gnomish Gyro-Engineer",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 148441,
},
[102601] = {
["source"] = "Infinite Suppressor",
["event"] = "SPELL_CAST_START",
["npcID"] = 54920,
},
[471811] = {
["source"] = "Underrider Pyromaniac",
["event"] = "SPELL_CAST_START",
["npcID"] = 230665,
},
[455932] = {
["source"] = "Kobyss Necromancer",
["event"] = "SPELL_CAST_START",
["npcID"] = 214625,
},
[467176] = {
["event"] = "SPELL_CAST_START",
["source"] = "King Flamespite",
["npcID"] = 229288,
},
[309035] = {
["encounterName"] = "Magister Umbric",
["source"] = "Magister Umbric",
["encounterID"] = 3085,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233681,
},
[260508] = {
["encounterName"] = "Soulbound Goliath",
["source"] = "Soulbound Goliath",
["encounterID"] = 2114,
["event"] = "SPELL_CAST_START",
["npcID"] = 131667,
},
[457959] = {
["source"] = "Geothermus",
["event"] = "SPELL_CAST_START",
["npcID"] = 217416,
},
[272659] = {
["source"] = "Scaled Krolusk Rider",
["event"] = "SPELL_CAST_START",
["npcID"] = 134629,
},
[44276] = {
["encounterName"] = "Priestess Delrissa",
["source"] = "Zelfan",
["npcID"] = 24556,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1895,
},
[1225925] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[474461] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[451936] = {
["isChanneled"] = true,
["source"] = "Ascended Webfriar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 219022,
},
[470366] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'Ranax",
["npcID"] = 240969,
},
[267639] = {
["encounterName"] = "Mchimba the Embalmer",
["source"] = "Mchimba the Embalmer",
["encounterID"] = 2142,
["event"] = "SPELL_CAST_START",
["npcID"] = 134993,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["npcID"] = 186121,
},
[101809] = {
["encounterName"] = "Echo of Jaina",
["source"] = "Echo of Jaina",
["encounterID"] = 1883,
["event"] = "SPELL_CAST_START",
["npcID"] = 54445,
},
[136387] = {
["npcID"] = 23682,
},
[20831] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mana Remnant",
["npcID"] = 11483,
},
[274703] = {
["event"] = "SPELL_CAST_START",
["source"] = "Drowned Depthbringer",
["npcID"] = 134418,
},
[360228] = {
["event"] = "SPELL_CAST_START",
["source"] = "Subjugated Colossus",
["npcID"] = 184767,
},
[367521] = {
["npcID"] = 185534,
},
[404713] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Neldris",
["npcID"] = 200912,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[407790] = {
["encounterName"] = "Echo of Neltharion",
["source"] = "Neltharion",
["encounterID"] = 2684,
["event"] = "SPELL_CAST_START",
["npcID"] = 201668,
},
[69970] = {
["npcID"] = 37031,
},
[20824] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deadwind Ogre Mage",
["npcID"] = 7379,
},
[360229] = {
["encounterName"] = "Lords of Dread",
["source"] = "Kin'tessa",
["npcID"] = 181399,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[34616] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nethervine Inciter",
["npcID"] = 19511,
},
[40062] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Technician",
["npcID"] = 17414,
},
[60936] = {
["encounterName"] = "Malygos",
["npcID"] = 28859,
["encounterID"] = 1094,
},
[350453] = {
["event"] = "SPELL_CAST_START",
["source"] = "Deathseeker Eye",
["npcID"] = 179894,
},
[201872] = {
["source"] = "Faceless Corrupter",
["event"] = "SPELL_CAST_START",
["npcID"] = 101118,
},
[254592] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Riftstalker",
["npcID"] = 127796,
},
[165578] = {
["encounterName"] = "Bonemaw",
["source"] = "Bonemaw",
["npcID"] = 75452,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1679,
},
[354011] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[241345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Defensive Countermeasure",
["npcID"] = 120449,
},
[435560] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[364330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Acquisitions Automa",
["npcID"] = 184737,
},
[418000] = {
["source"] = "Fel-Corrupted Kaldorei",
["event"] = "SPELL_CAST_START",
["npcID"] = 206146,
},
[241280] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felguard Invader",
["npcID"] = 119742,
},
[61923] = {
["encounterName"] = "Hodir",
["npcID"] = 32897,
["encounterID"] = 1135,
},
[470719] = {
["event"] = "SPELL_CAST_START",
["source"] = "Saltwind Pterrordax",
["npcID"] = 229666,
},
[390511] = {
["npcID"] = 189954,
},
[34358] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Chemist",
["npcID"] = 19486,
},
[34642] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sunseeker Gene-Splicer",
["npcID"] = 19507,
},
[322936] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["npcID"] = 165408,
["encounterID"] = 2401,
},
[387508] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Destroyer",
["npcID"] = 187244,
},
[196296] = {
["encounterName"] = "Serpentrix",
["source"] = "Stormwake Hydra",
["encounterID"] = 1813,
["event"] = "SPELL_CAST_START",
["npcID"] = 91792,
},
[241788] = {
["source"] = "Spectral Attendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 114632,
},
[44202] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Phoenix",
["npcID"] = 24674,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[334051] = {
["npcID"] = 168942,
},
[225410] = {
["source"] = "Withered Skulker",
["event"] = "SPELL_CAST_START",
["npcID"] = 113128,
},
[334534] = {
["npcID"] = 171805,
},
[363893] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["encounterID"] = 2537,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 180990,
},
[254074] = {
["event"] = "SPELL_CAST_START",
["source"] = "Umbraliss",
["npcID"] = 126885,
},
[440506] = {
["source"] = "Gulping Mudskip",
["event"] = "SPELL_CAST_START",
["npcID"] = 219011,
},
[438883] = {
["isChanneled"] = true,
["source"] = "Nakt",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 218324,
},
[429422] = {
["source"] = "Cursedforge Stoneshaper",
["event"] = "SPELL_CAST_START",
["npcID"] = 214066,
},
[1215647] = {
["encounterName"] = "Underpin",
["source"] = "Crony",
["npcID"] = 235162,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3126,
},
[61909] = {
["encounterName"] = "Hodir",
["npcID"] = 33327,
["encounterID"] = 1135,
},
[100842] = {
["event"] = "SPELL_CAST_START",
["source"] = "Patriarch Fire Turtle",
["npcID"] = 53094,
},
[18144] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bloodfalcon",
["npcID"] = 18155,
},
[309451] = {
["encounterName"] = "Magister Umbric",
["source"] = "Magister Umbric",
["encounterID"] = 3085,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 233681,
},
[408946] = {
["source"] = "Sundered Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 198870,
},
[427376] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[372087] = {
["npcID"] = 187897,
},
[356548] = {
["npcID"] = 178392,
},
[441518] = {
["source"] = "Failed Batch",
["event"] = "SPELL_CAST_START",
["npcID"] = 220368,
},
[71253] = {
["npcID"] = 37134,
},
[264407] = {
["source"] = "Faceless Maiden",
["event"] = "SPELL_CAST_START",
["npcID"] = 131821,
},
[89415] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ghost Iron Dragonling",
["npcID"] = 57783,
},
[474325] = {
["source"] = "Dark Walker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234553,
},
[274642] = {
["source"] = "Hoodoo Hexer",
["event"] = "SPELL_CAST_START",
["npcID"] = 136250,
},
[322943] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["npcID"] = 165408,
["encounterID"] = 2401,
},
[11985] = {
["npcID"] = 46914,
},
[257732] = {
["source"] = "Irontide Enforcer",
["event"] = "SPELL_CAST_START",
["npcID"] = 129602,
},
[472233] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["npcID"] = 229181,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3010,
},
[429427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[236142] = {
["encounterName"] = "The Desolate Host",
["source"] = "Engine of Souls",
["npcID"] = 118460,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2054,
},
[263959] = {
["source"] = "Heartsbane Soulcharmer",
["event"] = "SPELL_CAST_START",
["npcID"] = 131812,
},
[1217903] = {
["encounterName"] = "Maklin Drillstab",
["source"] = "Maklin Drillstab",
["npcID"] = 216863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3005,
},
[429428] = {
["source"] = "Earth Burst Totem",
["event"] = "SPELL_CAST_START",
["npcID"] = 214287,
},
[215754] = {
["npcID"] = 108655,
},
[458097] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skirmisher Sa'zryk",
["npcID"] = 216052,
},
[271561] = {
["isChanneled"] = true,
["source"] = "Interment Construct",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 137969,
},
[396665] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[426145] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[113629] = {
["event"] = "SPELL_CAST_START",
["source"] = "Boneweaver",
["npcID"] = 59193,
},
[427382] = {
["source"] = "Engine Speaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 212764,
},
[274631] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironhull Apprentice",
["npcID"] = 139799,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[49711] = {
["npcID"] = 25800,
},
[424750] = {
["source"] = "Fungal Rotcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 207459,
},
[212423] = {
["npcID"] = 99541,
},
[115010] = {
["encounterName"] = "Taran Zhu",
["source"] = "Gripping Hatred",
["npcID"] = 59804,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1306,
},
[474482] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Walker",
["npcID"] = 234553,
},
[427384] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Hunter",
["npcID"] = 40935,
},
[260700] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Malady",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131823,
},
[359233] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["npcID"] = 181047,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2529,
},
[359809] = {
["encounterName"] = "The Jailer",
["source"] = "The Jailer",
["encounterID"] = 2537,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 180990,
},
[473224] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226398,
},
[470388] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anub'Ranax",
["npcID"] = 240969,
},
[224515] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nobleborn Warpcaster",
["npcID"] = 112676,
},
[462983] = {
["source"] = "Automatic Ironstrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 229778,
},
[180945] = {
["encounterName"] = "Hellfire Assault",
["source"] = "Felfire Demolisher",
["encounterID"] = 1778,
["event"] = "SPELL_CAST_START",
["npcID"] = 91103,
},
[389266] = {
["source"] = "Void-Scarred Wyvern Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 238145,
},
[359236] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["npcID"] = 180906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2529,
},
[257736] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Stormcaller",
["npcID"] = 126919,
},
[450330] = {
["encounterName"] = "Waxface",
["source"] = "Waxface",
["npcID"] = 214263,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2894,
},
[270514] = {
["source"] = "Spectral Brute",
["event"] = "SPELL_CAST_START",
["npcID"] = 135231,
},
[423051] = {
["encounterName"] = "Baron Braunpyke",
["source"] = "Baron Braunpyke",
["encounterID"] = 2835,
["event"] = "SPELL_CAST_START",
["npcID"] = 207939,
},
[260697] = {
["encounterName"] = "Heartsbane Triad",
["source"] = "Sister Briar",
["encounterID"] = 2113,
["event"] = "SPELL_CAST_START",
["npcID"] = 131825,
},
[71326] = {
["npcID"] = 37502,
},
[333294] = {
["npcID"] = 169893,
},
[406911] = {
["source"] = "Sarek Cinderbreath",
["event"] = "SPELL_CAST_START",
["npcID"] = 205619,
},
[233164] = {
["isChanneled"] = true,
["source"] = "Corrupting Shadows",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 116839,
},
[242379] = {
["source"] = "Bile Spitter Egg",
["event"] = "SPELL_CAST_START",
["npcID"] = 121459,
},
[109423] = {
["source"] = "Twilight Frost Evoker",
["event"] = "SPELL_CAST_START",
["npcID"] = 57807,
},
[267433] = {
["source"] = "Mech Jockey",
["event"] = "SPELL_CAST_START",
["npcID"] = 130488,
},
[458106] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skirmisher Sa'zryk",
["npcID"] = 216052,
},
[270502] = {
["isChanneled"] = true,
["source"] = "Honored Raptor",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 135192,
},
[406333] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[428169] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[377661] = {
["source"] = "Vorquin",
["event"] = "SPELL_CAST_START",
["npcID"] = 198789,
},
[429176] = {
["event"] = "SPELL_CAST_START",
["source"] = "Gilgoblin Aquamage",
["npcID"] = 40943,
},
[154327] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Void Spawn",
["npcID"] = 76446,
},
[82753] = {
["isChanneled"] = true,
["source"] = "Neferset Theurgist",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 44980,
},
[460156] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["npcID"] = 226398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3020,
},
[1217853] = {
["source"] = "Geargrinder Biker",
["event"] = "SPELL_CAST_START",
["npcID"] = 237516,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[277907] = {
["source"] = "Brinescale Gladiator",
["event"] = "SPELL_CAST_START",
["npcID"] = 129252,
},
[472178] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "Fiery Dynamite Booty",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 231028,
},
[413059] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadow Canister",
["npcID"] = 206019,
},
[34345] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidshrieker",
["npcID"] = 18870,
},
[458867] = {
["encounterName"] = "Nerl'athekk the Skulking",
["source"] = "Nerl'athekk the Skulking",
["encounterID"] = 2949,
["event"] = "SPELL_CAST_START",
["npcID"] = 220577,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[413060] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fire Canister",
["npcID"] = 206022,
},
[71029] = {
["npcID"] = 36724,
},
[369781] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184582,
},
[316244] = {
["npcID"] = 162056,
},
[347249] = {
["encounterName"] = "So'azmi",
["npcID"] = 175806,
["encounterID"] = 2437,
},
[130414] = {
["npcID"] = 82001,
},
[466303] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrapbeak",
["npcID"] = 230931,
},
[329104] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 164218,
["encounterID"] = 2381,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["npcID"] = 189232,
["encounterID"] = 2606,
},
[334967] = {
["npcID"] = 171343,
},
[365678] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sacred Matrix Automa",
["npcID"] = 184734,
},
[460602] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["npcID"] = 226403,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3019,
},
[330586] = {
["npcID"] = 169927,
},
[260813] = {
["encounterName"] = "Mogul Razdunk",
["source"] = "Mogul Razdunk",
["encounterID"] = 2108,
["event"] = "SPELL_CAST_START",
["npcID"] = 129232,
},
[400777] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[434281] = {
["source"] = "Weeping Shade",
["event"] = "SPELL_CAST_START",
["npcID"] = 217268,
},
[62625] = {
["npcID"] = 33237,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[1241022] = {
["source"] = "Treasure Goblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 205490,
},
[468794] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 229953,
},
[169689] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diving Chakram Spinner",
["npcID"] = 76116,
},
[154331] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grove Cultivator Kados",
["npcID"] = 133104,
},
[408970] = {
["source"] = "Sundered Preserver",
["event"] = "SPELL_CAST_START",
["npcID"] = 198870,
},
[159021] = {
["event"] = "SPELL_CAST_START",
["source"] = "Durag the Dominator",
["npcID"] = 77890,
},
[470403] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forming Pusglob",
["npcID"] = 225739,
},
[423305] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[466308] = {
["source"] = "Trained Scrounger",
["event"] = "SPELL_CAST_START",
["npcID"] = 238608,
},
[353682] = {
["event"] = "SPELL_CAST_START",
["source"] = "Soulscream Tormentor",
["npcID"] = 176880,
},
[169690] = {
["event"] = "SPELL_CAST_START",
["source"] = "Diving Chakram Spinner",
["npcID"] = 76116,
},
[472452] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[376208] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[427402] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursed Rookguard",
["npcID"] = 207197,
},
[390256] = {
["event"] = "SPELL_CAST_START",
["source"] = "Proscenium Punk",
["npcID"] = 215791,
},
[365686] = {
["event"] = "SPELL_CAST_START",
["source"] = "Overthrown Protector",
["npcID"] = 184533,
},
[366685] = {
["event"] = "SPELL_CAST_START",
["source"] = "Stellar Mote",
["npcID"] = 185271,
},
[258768] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Scarred Gryphon",
["npcID"] = 237991,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[472454] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 228424,
},
[153395] = {
["event"] = "SPELL_CAST_START",
["source"] = "Carrion Worm",
["npcID"] = 76057,
},
[427404] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[462216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[397878] = {
["encounterName"] = "Wise Mari",
["source"] = "Corrupt Living Water",
["encounterID"] = 1418,
["event"] = "SPELL_CAST_START",
["npcID"] = 56511,
},
[16866] = {
["event"] = "SPELL_CAST_START",
["source"] = "Venom Belcher",
["npcID"] = 10417,
},
[345495] = {
["npcID"] = 175519,
},
[1217905] = {
["encounterName"] = "Maklin Drillstab",
["source"] = "Maklin Drillstab",
["npcID"] = 216863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3005,
},
[361304] = {
["encounterName"] = "Prototype Pantheon",
["source"] = "Wild Stampede",
["npcID"] = 183421,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2544,
},
[458122] = {
["event"] = "SPELL_CAST_START",
["source"] = "Skirmisher Sa'zryk",
["npcID"] = 216052,
},
[270923] = {
["source"] = "Queen Wasi",
["event"] = "SPELL_CAST_START",
["npcID"] = 137478,
},
[472842] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bomb Bot",
["npcID"] = 231928,
},
[472457] = {
["source"] = "G.O.L.E.M.",
["event"] = "SPELL_CAST_START",
["npcID"] = 230719,
},
[422414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[41056] = {
["npcID"] = 37133,
},
[1217913] = {
["encounterName"] = "Maklin Drillstab",
["source"] = "Maklin Drillstab",
["npcID"] = 216863,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3005,
},
[472458] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["encounterID"] = 3015,
["event"] = "SPELL_CAST_START",
["npcID"] = 229953,
},
[371812] = {
["npcID"] = 6517,
},
[407640] = {
["encounterName"] = "The Amalgamation Chamber",
["source"] = "Essence of Shadow",
["npcID"] = 201774,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2687,
},
[171591] = {
["npcID"] = 77140,
},
[429110] = {
["source"] = "Forgebound Mender",
["event"] = "SPELL_CAST_START",
["npcID"] = 213338,
},
[445492] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wandering Gutter",
["npcID"] = 214551,
},
[1226111] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ravenous Destroyer",
["npcID"] = 236995,
},
[305236] = {
["source"] = "Aqir Venomweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 156089,
},
[64156] = {
["encounterName"] = "Yogg-Saron",
["npcID"] = 33985,
["encounterID"] = 1143,
},
[365627] = {
["encounterName"] = "Vigilant Guardian",
["source"] = "Ancient Shaper",
["encounterID"] = 2512,
["event"] = "SPELL_CAST_START",
["npcID"] = 184954,
},
[398394] = {
["event"] = "SPELL_CAST_START",
["source"] = "Disturbed Krolusk",
["npcID"] = 229813,
},
[347548] = {
["encounterName"] = "Sylvanas Windrunner",
["source"] = "Sylvanas Windrunner",
["npcID"] = 175732,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2435,
},
[1219477] = {
["source"] = "Propaganda Pusher",
["event"] = "SPELL_CAST_START",
["npcID"] = 225826,
},
[269399] = {
["encounterName"] = "Vol'zith the Whisperer",
["source"] = "Vol'zith the Whisperer",
["npcID"] = 134069,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2133,
},
[99629] = {
["source"] = "Druid of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 53619,
},
[31601] = {
["event"] = "SPELL_CAST_START",
["source"] = "Crypt Crawler",
["npcID"] = 10412,
},
[105845] = {
["encounterName"] = "Spine of Deathwing",
["source"] = "Hideous Amalgamation",
["encounterID"] = 1291,
["event"] = "SPELL_CAST_START",
["npcID"] = 53890,
},
[114548] = {
["encounterName"] = "Yan-Zhu the Uncasked",
["source"] = "Yan-Zhu the Uncasked",
["encounterID"] = 1414,
["event"] = "SPELL_CAST_START",
["npcID"] = 59479,
},
[1231046] = {
["source"] = "Haymar the Devout",
["event"] = "SPELL_CAST_START",
["npcID"] = 242570,
},
[322977] = {
["encounterName"] = "Halkias, the Sin-Stained Goliath",
["npcID"] = 165408,
["encounterID"] = 2401,
},
[308643] = {
["event"] = "SPELL_CAST_START",
["source"] = "Haywire Clockwork Rocket Bot",
["npcID"] = 158279,
},
[474511] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dark Walker",
["npcID"] = 234553,
},
[271784] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Footbomb Hooligan",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 138369,
},
[427858] = {
["encounterName"] = "Archmage Sol",
["source"] = "Archmage Sol",
["npcID"] = 82682,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1751,
},
[374859] = {
["encounterName"] = "Halondrus the Reclaimer",
["source"] = "Halondrus",
["npcID"] = 180906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2529,
},
[256551] = {
["encounterName"] = "Ring of Booty",
["source"] = "Sawtooth Shark",
["encounterID"] = 2095,
["event"] = "SPELL_CAST_START",
["npcID"] = 129359,
},
[289360] = {
["event"] = "SPELL_CAST_START",
["source"] = "Div'yane",
["npcID"] = 148615,
},
[310129] = {
["encounterName"] = "Maut",
["source"] = "Maut",
["encounterID"] = 2327,
["event"] = "SPELL_CAST_START",
["npcID"] = 156523,
},
[232153] = {
["encounterName"] = "Opera Hall",
["npcID"] = 114328,
["encounterID"] = 1957,
},
[192050] = {
["encounterName"] = "Serpentrix",
["source"] = "Serpentrix",
["encounterID"] = 1813,
["event"] = "SPELL_CAST_START",
["npcID"] = 91808,
},
[44224] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Kael'thas Sunstrider",
["npcID"] = 24664,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[153315] = {
["encounterName"] = "Ranjit",
["source"] = "Ranjit",
["npcID"] = 75964,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1698,
},
[292264] = {
["encounterName"] = "King Mechagon",
["source"] = "Omega Buster",
["encounterID"] = 2260,
["event"] = "SPELL_CAST_START",
["npcID"] = 144249,
},
[449941] = {
["source"] = "Emperor Pitfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 219265,
},
[263234] = {
["encounterName"] = "Adderis and Aspix",
["source"] = "Adderis",
["encounterID"] = 2124,
["event"] = "SPELL_CAST_START",
["npcID"] = 133379,
},
[154442] = {
["encounterName"] = "Ner'zhul",
["source"] = "Ner'zhul",
["npcID"] = 76407,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1682,
},
[164168] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grimrail Overseer",
["npcID"] = 81212,
},
[449942] = {
["source"] = "Emperor Pitfang",
["event"] = "SPELL_CAST_START",
["npcID"] = 219265,
},
[460181] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["encounterID"] = 3014,
["event"] = "SPELL_CAST_START",
["npcID"] = 228458,
},
[110117] = {
["source"] = "Ethereal Sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 65414,
},
[1217954] = {
["encounterName"] = "Stix Bunkjunker",
["source"] = "Stix Bunkjunker",
["encounterID"] = 3012,
["event"] = "SPELL_CAST_START",
["npcID"] = 230322,
},
[443433] = {
["source"] = "Herald of Ansurek",
["event"] = "SPELL_CAST_START",
["npcID"] = 220196,
},
[175668] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ironworker",
["npcID"] = 87448,
},
[421910] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[462859] = {
["source"] = "Fervent Sharpshooter",
["event"] = "SPELL_CAST_START",
["npcID"] = 206694,
},
[242733] = {
["source"] = "Tugar Bloodtotem",
["event"] = "SPELL_CAST_START",
["npcID"] = 117230,
},
[332836] = {
["npcID"] = 169927,
},
[155200] = {
["encounterName"] = "Blast Furnace",
["source"] = "Slag Elemental",
["encounterID"] = 1690,
["event"] = "SPELL_CAST_START",
["npcID"] = 76829,
},
[105847] = {
["encounterName"] = "Spine of Deathwing",
["source"] = "Burning Tendons",
["encounterID"] = 1291,
["event"] = "SPELL_CAST_START",
["npcID"] = 56341,
},
[41188] = {
["source"] = "Ashtongue Primalist",
["event"] = "SPELL_CAST_START",
["npcID"] = 22847,
},
[367642] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Automated Eliminator",
["npcID"] = 185363,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[274480] = {
["npcID"] = 139842,
},
[82362] = {
["source"] = "Evolved Twilight Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 39987,
},
[258777] = {
["source"] = "Irontide Oarsman",
["event"] = "SPELL_CAST_START",
["npcID"] = 127111,
},
[282031] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Ma'ra Grimfang",
["encounterID"] = 2285,
["event"] = "SPELL_CAST_START",
["npcID"] = 144691,
},
[263215] = {
["source"] = "Stonefury",
["event"] = "SPELL_CAST_START",
["npcID"] = 130635,
},
[1217971] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mookcenary Captain Freg",
["npcID"] = 235074,
},
[429093] = {
["encounterName"] = "Ol' Waxbeard",
["source"] = "Dynamite Mine Cart",
["encounterID"] = 2829,
["event"] = "SPELL_CAST_START",
["npcID"] = 213751,
},
[209443] = {
["encounterName"] = "Xavius",
["source"] = "Xavius",
["npcID"] = 103769,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1864,
},
[9739] = {
["npcID"] = 82012,
},
[30853] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowmoon Summoner",
["npcID"] = 17395,
},
[147289] = {
["event"] = "SPELL_CAST_START",
["source"] = "Death Adder",
["npcID"] = 72841,
},
[465715] = {
["source"] = "Darkfuse Stunner",
["event"] = "SPELL_CAST_START",
["npcID"] = 229175,
},
[333227] = {
["npcID"] = 169905,
},
[195108] = {
["source"] = "Hatecoil Stormweaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 91783,
},
[312750] = {
["encounterName"] = "Ra-den the Despoiled",
["source"] = "Zealous Adherent",
["encounterID"] = 2331,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 160663,
},
[328740] = {
["npcID"] = 168992,
},
[99705] = {
["source"] = "Druid of the Flame",
["event"] = "SPELL_CAST_START",
["npcID"] = 53619,
},
[465754] = {
["source"] = "Shreddinator 3000",
["event"] = "SPELL_CAST_START",
["npcID"] = 230740,
},
[353706] = {
["event"] = "SPELL_CAST_START",
["source"] = "Brawling Patron",
["npcID"] = 176562,
},
[396709] = {
["source"] = "Servant of Kruul",
["event"] = "SPELL_CAST_START",
["npcID"] = 206861,
},
[473070] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[471671] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Manager",
["npcID"] = 225680,
},
[268932] = {
["encounterName"] = "King Dazar",
["source"] = "King Dazar",
["encounterID"] = 2143,
["event"] = "SPELL_CAST_START",
["npcID"] = 136160,
},
[282036] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Anathos Firecaller",
["encounterID"] = 2285,
["event"] = "SPELL_CAST_START",
["npcID"] = 144692,
},
[267702] = {
["encounterName"] = "Mchimba the Embalmer",
["source"] = "Mchimba the Embalmer",
["encounterID"] = 2142,
["event"] = "SPELL_CAST_START",
["npcID"] = 134993,
},
[257756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Buccaneer",
["npcID"] = 129527,
},
[76584] = {
["source"] = "Twilight Zealot",
["event"] = "SPELL_CAST_START",
["npcID"] = 39990,
},
[314801] = {
["source"] = "Agustus Moulaine",
["event"] = "SPELL_CAST_START",
["npcID"] = 157700,
},
[252637] = {
["source"] = "Slobbering Fiend",
["event"] = "SPELL_CAST_START",
["npcID"] = 127810,
},
[238622] = {
["isChanneled"] = true,
["source"] = "Vile Thrasher",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 126207,
},
[427011] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["encounterID"] = 2788,
["event"] = "SPELL_CAST_START",
["npcID"] = 208747,
},
[473690] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[155179] = {
["encounterName"] = "Blast Furnace",
["source"] = "Furnace Engineer",
["encounterID"] = 1690,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 76810,
},
[75645] = {
["source"] = "Corla, Herald of Twilight",
["event"] = "SPELL_CAST_START",
["npcID"] = 39679,
},
[336893] = {
["source"] = "Azmogal",
["event"] = "SPELL_CAST_START",
["npcID"] = 162873,
},
[385024] = {
["event"] = "SPELL_CAST_START",
["source"] = "Salty Salamander",
["npcID"] = 188027,
},
[40088] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilskar Sea-Caller",
["npcID"] = 22875,
},
[217434] = {
["source"] = "Suramar Shieldguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 107567,
},
[407544] = {
["encounterName"] = "Rashok, the Elder",
["source"] = "Rashok",
["npcID"] = 201320,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2680,
},
[282040] = {
["encounterName"] = "Jadefire Masters",
["source"] = "Anathos Firecaller",
["encounterID"] = 2285,
["event"] = "SPELL_CAST_START",
["npcID"] = 144692,
},
[252438] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shadowguard Siphoner",
["npcID"] = 121671,
},
[21987] = {
["event"] = "SPELL_CAST_START",
["source"] = "Whip Lasher",
["npcID"] = 13022,
},
[435622] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[474069] = {
["event"] = "SPELL_CAST_START",
["source"] = "Darkfuse Growler",
["npcID"] = 227903,
},
[367484] = {
["npcID"] = 185508,
},
[426974] = {
["event"] = "SPELL_CAST_START",
["source"] = "Addled Arcanomancer",
["npcID"] = 84990,
},
[471669] = {
["event"] = "SPELL_CAST_START",
["source"] = "Giant Gorewalker",
["npcID"] = 225740,
},
[465863] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Flarendo",
["npcID"] = 229181,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3010,
},
[22883] = {
["event"] = "SPELL_CAST_START",
["source"] = "Ethereal Priest",
["npcID"] = 18317,
},
[466340] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[157020] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blinding Solar Flare",
["npcID"] = 79462,
},
[1218017] = {
["isChanneled"] = true,
["source"] = "Underpin's Explosive Ally",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 234902,
},
[308664] = {
["event"] = "SPELL_CAST_START",
["source"] = "Craggle Wobbletop",
["npcID"] = 158284,
},
[466341] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["npcID"] = 231075,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3016,
},
[473958] = {
["event"] = "SPELL_CAST_START",
["source"] = "Flame Laser",
["npcID"] = 234671,
},
[306617] = {
["encounterName"] = "Vez'okk the Lightless",
["source"] = "Vez'okk the Lightless",
["npcID"] = 234037,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3089,
},
[306168] = {
["encounterName"] = "Ra-den the Despoiled",
["source"] = "Zealous Adherent",
["encounterID"] = 2331,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 156980,
},
[466342] = {
["encounterName"] = "Chrome King Gallywix",
["source"] = "Chrome King Gallywix",
["encounterID"] = 3016,
["event"] = "SPELL_CAST_START",
["npcID"] = 231075,
},
[388060] = {
["npcID"] = 187033,
},
[398296] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shambling Infester",
["npcID"] = 200387,
},
[307177] = {
["source"] = "Spellbound Ritualist",
["event"] = "SPELL_CAST_START",
["npcID"] = 162716,
},
[294855] = {
["encounterName"] = "Machinist's Garden",
["source"] = "Detect-o-Bot",
["encounterID"] = 2259,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 152033,
},
[452009] = {
["event"] = "SPELL_CAST_START",
["source"] = "Slag Elemental",
["npcID"] = 212885,
},
[259940] = {
["encounterName"] = "Rixxa Fluxfume",
["source"] = "Rixxa Fluxflame",
["encounterID"] = 2107,
["event"] = "SPELL_CAST_START",
["npcID"] = 129231,
},
[348128] = {
["encounterName"] = "Zo'phex the Sentinel",
["npcID"] = 175616,
["encounterID"] = 2425,
},
[16868] = {
["encounterName"] = "Baroness Anastari",
["source"] = "Baroness Anastari",
["npcID"] = 10436,
["event"] = "SPELL_CAST_START",
["encounterID"] = 479,
},
[161150] = {
["event"] = "SPELL_CAST_START",
["source"] = "Grom'kar Grenadier",
["npcID"] = 80936,
},
[22414] = {
["npcID"] = 78553,
},
[333241] = {
["npcID"] = 170850,
},
[93697] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lord Walden",
["npcID"] = 46963,
},
[30923] = {
["encounterName"] = "The Maker",
["source"] = "The Maker",
["npcID"] = 17381,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1922,
},
[333787] = {
["npcID"] = 168934,
},
[308669] = {
["encounterName"] = "Overlord Mathias Shaw",
["source"] = "Eye of Chaos",
["encounterID"] = 3084,
["event"] = "SPELL_CAST_START",
["npcID"] = 158315,
},
[401258] = {
["encounterName"] = "Assault of the Zaqali",
["source"] = "Warlord Kagni",
["npcID"] = 199659,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2682,
},
[464825] = {
["source"] = "Disturbed Trashpicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234568,
},
[429487] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[430013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Unruly Stormrook",
["npcID"] = 207186,
},
[449965] = {
["event"] = "SPELL_CAST_START",
["source"] = "Witherthorn",
["npcID"] = 214790,
},
[452013] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tempest Wolf",
["npcID"] = 222797,
},
[323544] = {
["encounterName"] = "Hakkar, the Soulflayer",
["npcID"] = 165905,
["encounterID"] = 2395,
},
[275907] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[357086] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mawsworn Soulmage",
["npcID"] = 176959,
},
[361913] = {
["encounterName"] = "Lords of Dread",
["source"] = "Mal'Ganis",
["npcID"] = 181398,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[363961] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Thieving Agent",
["npcID"] = 183501,
},
[292290] = {
["encounterName"] = "King Mechagon",
["source"] = "Omega Buster",
["npcID"] = 144249,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2260,
},
[425394] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[111631] = {
["encounterName"] = "Instructor Chillheart",
["source"] = "Instructor Chillheart",
["npcID"] = 58633,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1426,
},
[268260] = {
["source"] = "Ashvane Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 138465,
},
[22924] = {
["encounterName"] = "Tendris Warpwood",
["source"] = "Tendris Warpwood",
["npcID"] = 11489,
["event"] = "SPELL_CAST_START",
["encounterID"] = 350,
},
[44538] = {
["encounterName"] = "Kael'thas Sunstrider",
["source"] = "Ethereum Smuggler",
["npcID"] = 24698,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1894,
},
[39671] = {
["isChanneled"] = true,
["source"] = "Illidari Defiler",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 22853,
},
[470446] = {
["event"] = "SPELL_CAST_START",
["source"] = "Junkyard Shredder",
["npcID"] = 229220,
},
[447921] = {
["source"] = "Voltscale Borer",
["event"] = "SPELL_CAST_START",
["npcID"] = 222280,
},
[378818] = {
["npcID"] = 192788,
},
[106877] = {
["encounterName"] = "Sha of Violence",
["source"] = "Sha of Violence",
["encounterID"] = 1305,
["event"] = "SPELL_CAST_START",
["npcID"] = 56719,
},
[470447] = {
["event"] = "SPELL_CAST_START",
["source"] = "Junkyard Shredder",
["npcID"] = 229220,
},
[32330] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lykul Wasp",
["npcID"] = 17732,
},
[102156] = {
["source"] = "Time-Twisted Seer",
["event"] = "SPELL_CAST_START",
["npcID"] = 54553,
},
[454519] = {
["source"] = "Tortollan Visitor",
["event"] = "SPELL_CAST_START",
["npcID"] = 223857,
},
[474031] = {
["event"] = "SPELL_CAST_START",
["source"] = "Void-Cursed Crusher",
["npcID"] = 214419,
},
[307977] = {
["encounterName"] = "Prophet Skitra",
["source"] = "Prophet Skitra",
["encounterID"] = 2334,
["event"] = "SPELL_CAST_START",
["npcID"] = 157238,
},
[331718] = {
["source"] = "Mistveil Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 171772,
},
[288199] = {
["encounterName"] = "Lady Jaina Proudmoore",
["source"] = "Lady Jaina Proudmoore",
["encounterID"] = 2281,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 146409,
},
[1215787] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["encounterID"] = 2364,
["event"] = "SPELL_CAST_START",
["npcID"] = 162309,
},
[367502] = {
["npcID"] = 181059,
},
[104318] = {
["npcID"] = 55659,
},
[185854] = {
["event"] = "SPELL_CAST_START",
["source"] = "Nightmare Rider",
["npcID"] = 92792,
},
[186274] = {
["source"] = "Iron Reaver",
["event"] = "SPELL_CAST_START",
["npcID"] = 90284,
},
[428894] = {
["source"] = "Cursedforge Honor Guard",
["event"] = "SPELL_CAST_START",
["npcID"] = 214264,
},
[409018] = {
["event"] = "SPELL_CAST_START",
["source"] = "Failed Prototype",
["npcID"] = 203927,
},
[263628] = {
["source"] = "Mechanized Peacekeeper",
["event"] = "SPELL_CAST_START",
["npcID"] = 136139,
},
[240623] = {
["encounterName"] = "Fallen Avatar",
["source"] = "Containment Pylon",
["npcID"] = 117279,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2038,
},
[11443] = {
["event"] = "SPELL_CAST_START",
["source"] = "Thuzadin Shadowcaster",
["npcID"] = 10398,
},
[440231] = {
["source"] = "Dark-Crazed Harvester",
["event"] = "SPELL_CAST_START",
["npcID"] = 206067,
},
[69906] = {
["isChanneled"] = true,
["source"] = "Kor'kron Templar",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 37034,
},
[123654] = {
["encounterName"] = "Trial of the King",
["source"] = "Ming the Cunning",
["encounterID"] = 1442,
["event"] = "SPELL_CAST_START",
["npcID"] = 61444,
},
[154356] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sargerei Soulpriest",
["npcID"] = 76595,
},
[178177] = {
["source"] = "Iron Flametwister",
["event"] = "SPELL_CAST_START",
["npcID"] = 80676,
},
[246505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fanatical Pyromancer",
["npcID"] = 127724,
},
[401318] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[268233] = {
["event"] = "SPELL_CAST_START",
["source"] = "Guardian Elemental",
["npcID"] = 136249,
},
[1218087] = {
["event"] = "SPELL_CAST_START",
["source"] = "Awakened Attendant",
["npcID"] = 241433,
},
[361923] = {
["encounterName"] = "Lords of Dread",
["source"] = "Inchoate Shadow",
["npcID"] = 183138,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2543,
},
[1215741] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Dessia the Decapitator",
["encounterID"] = 2391,
["event"] = "SPELL_CAST_START",
["npcID"] = 164451,
},
[401319] = {
["encounterName"] = "Kazzara, the Hellforged",
["source"] = "Kazzara, the Hellforged",
["encounterID"] = 2688,
["event"] = "SPELL_CAST_START",
["npcID"] = 201261,
},
[342125] = {
["npcID"] = 167538,
},
[217583] = {
["event"] = "SPELL_CAST_START",
["source"] = "Duskwatch Executor",
["npcID"] = 111621,
},
[445882] = {
["event"] = "SPELL_CAST_START",
["source"] = "Miss Lilly",
["npcID"] = 219683,
},
[374563] = {
["npcID"] = 190362,
},
[16869] = {
["encounterName"] = "Maleki the Pallid",
["source"] = "Maleki the Pallid",
["npcID"] = 10438,
["event"] = "SPELL_CAST_START",
["encounterID"] = 481,
},
[443835] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[426893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[431549] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sazh'kel",
["npcID"] = 221166,
},
[335305] = {
["npcID"] = 171799,
},
[107018] = {
["encounterName"] = "Madness of Deathwing",
["source"] = "Deathwing",
["encounterID"] = 1299,
["event"] = "SPELL_CAST_START",
["npcID"] = 56173,
},
[210931] = {
["encounterName"] = "Il'gynoth, The Heart of Corruption",
["source"] = "Eye of Il'gynoth",
["npcID"] = 105906,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1873,
},
[473994] = {
["encounterName"] = "Cauldron of Carnage",
["source"] = "Torq",
["npcID"] = 229177,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3010,
},
[34449] = {
["event"] = "SPELL_CAST_START",
["source"] = "Coilfang Water Elemental",
["npcID"] = 17917,
},
[443837] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["npcID"] = 217570,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3007,
},
[396084] = {
["npcID"] = 190933,
},
[336809] = {
["source"] = "Azmogal",
["event"] = "SPELL_CAST_START",
["npcID"] = 162873,
},
[474554] = {
["encounterName"] = "Mug'Zee, Heads of Security",
["source"] = "Mug'Zee",
["npcID"] = 229953,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 3015,
},
[312782] = {
["encounterName"] = "N'Zoth the Corruptor",
["source"] = "N'Zoth the Corruptor",
["encounterID"] = 2344,
["event"] = "SPELL_CAST_START",
["npcID"] = 158041,
},
[314195] = {
["source"] = "Gnashing Terror",
["event"] = "SPELL_CAST_START",
["npcID"] = 161334,
},
[431552] = {
["source"] = "Loyalist Mutagenician",
["event"] = "SPELL_CAST_START",
["npcID"] = 215980,
},
[335308] = {
["npcID"] = 171799,
},
[405375] = {
["encounterName"] = "The Forgotten Experiments",
["source"] = "Thadrion",
["npcID"] = 200913,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2693,
},
[311551] = {
["encounterName"] = "Dark Inquisitor Xanesh",
["source"] = "Dark Inquisitor Xanesh",
["npcID"] = 156575,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2328,
},
[286563] = {
["encounterName"] = "Stormwall Blockade",
["source"] = "Brother Joseph",
["npcID"] = 146253,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2280,
},
[440207] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
},
[443840] = {
["encounterName"] = "Speaker Halven",
["source"] = "Speaker Halven",
["npcID"] = 217570,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3007,
},
[396742] = {
["source"] = "Disturbed Trashpicker",
["event"] = "SPELL_CAST_START",
["npcID"] = 234568,
},
[319957] = {
["event"] = "SPELL_CAST_START",
["source"] = "Anima-starved Defector",
["npcID"] = 180217,
},
[1215677] = {
["source"] = "Causticaria",
["event"] = "SPELL_CAST_START",
["npcID"] = 225433,
},
[427459] = {
["encounterName"] = "Ancient Protectors",
["source"] = "Earthshaper Telu",
["npcID"] = 83893,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1757,
},
[161781] = {
["npcID"] = 81360,
},
[440205] = {
["event"] = "SPELL_CAST_START",
["source"] = "Living Shadow",
["npcID"] = 214379,
},
[123648] = {
["source"] = "Harthak Stormcaller",
["event"] = "SPELL_CAST_START",
["npcID"] = 61946,
},
[353741] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mor'geth",
["npcID"] = 178958,
},
[464772] = {
["encounterName"] = "One-Armed Bandit",
["source"] = "One-Armed Bandit",
["npcID"] = 228458,
["event"] = "SPELL_CAST_START",
["encounterID"] = 3014,
},
[157173] = {
["event"] = "SPELL_CAST_START",
["source"] = "Felguard",
["npcID"] = 79507,
},
[159481] = {
["event"] = "SPELL_CAST_START",
["source"] = "Iron Gunnery Sergeant",
["npcID"] = 81318,
},
[349087] = {
["npcID"] = 176705,
},
[367428] = {
["source"] = "Gnarled Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 184962,
},
[332705] = {
["npcID"] = 170490,
},
[34759] = {
["encounterName"] = "High Botanist Freywinn",
["source"] = "High Botanist Freywinn",
["npcID"] = 17975,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1926,
},
[329170] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 165737,
["encounterID"] = 2381,
},
[1218133] = {
["isChanneled"] = false,
["source"] = "Sootsnout",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 212412,
},
[360304] = {
["encounterName"] = "Lords of Dread",
["source"] = "Kin'tessa",
["encounterID"] = 2543,
["event"] = "SPELL_CAST_START",
["npcID"] = 181399,
},
[348513] = {
["encounterName"] = "Painsmith Raznal",
["source"] = "Painsmith Raznal",
["npcID"] = 176523,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2430,
},
[329171] = {
["encounterName"] = "Lord Chamberlain",
["npcID"] = 165737,
["encounterID"] = 2381,
},
[359458] = {
["encounterName"] = "Kel'Thuzad",
["source"] = "Unstoppable Abomination",
["npcID"] = 176973,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2422,
},
[22373] = {
["event"] = "SPELL_CAST_START",
["source"] = "Petrified Guardian",
["npcID"] = 14303,
},
[107597] = {
["event"] = "SPELL_CAST_START",
["source"] = "Earthen Destroyer",
["npcID"] = 57158,
},
},
["performance_units"] = {
[217126] = 0,
[191714] = 0,
[214441] = true,
[189707] = 0,
[220626] = true,
[84401] = 0,
[96247] = 0,
[196679] = 0,
[100529] = 0,
[208994] = 0,
[87329] = false,
[198594] = false,
[210231] = 0,
[211306] = 0,
[167999] = true,
[219746] = 0,
[196642] = 0,
[194999] = 0,
[189706] = 0,
[197398] = 0,
[176920] = 0,
[189363] = 0,
},
["SkipNonEssentialPatches"] = true,
["InterruptableSpells"] = {
[1214468] = true,
[19647] = true,
[330784] = true,
[465871] = true,
[187707] = true,
[585] = true,
[5143] = true,
[59638] = true,
[427176] = true,
[15615] = true,
[430109] = true,
[157331] = true,
[342135] = true,
[430238] = true,
[351252] = true,
[270481] = true,
[263215] = true,
[465813] = true,
[188443] = true,
[46036] = true,
[96231] = true,
[5176] = true,
[268702] = true,
[132409] = true,
[301088] = true,
[317791] = true,
[1214780] = true,
[426677] = true,
[426295] = true,
[133] = true,
[194153] = true,
[386071] = true,
[422090] = true,
[105174] = true,
[424322] = true,
[293827] = true,
[382440] = true,
[425536] = true,
[330868] = true,
[423051] = true,
[47528] = true,
[426240] = true,
[188196] = true,
[135029] = true,
[429812] = true,
[441351] = true,
[339415] = true,
[11972] = true,
[341902] = true,
[330810] = true,
[194509] = true,
[351338] = true,
[1064] = true,
[157375] = true,
[330875] = true,
[1766] = true,
[8936] = true,
[437721] = true,
[1217138] = true,
[341969] = true,
[425674] = true,
[420320] = true,
[347008] = true,
[330562] = true,
[342675] = true,
[48438] = true,
[91807] = true,
[104318] = true,
[451435] = true,
[2139] = true,
[116670] = true,
[452201] = true,
[30451] = true,
[8092] = true,
[444743] = true,
[446657] = true,
[427469] = true,
[420330] = true,
[188046] = true,
[268797] = true,
[441242] = true,
[465595] = true,
[97547] = true,
[431044] = true,
[441627] = true,
[57994] = true,
[330703] = true,
[427157] = true,
[293729] = true,
[356995] = true,
[317792] = true,
[267997] = true,
[453989] = true,
[115175] = true,
[453616] = true,
[205231] = true,
[424419] = true,
[428563] = true,
[93985] = true,
[124682] = true,
[424420] = true,
[453909] = true,
[423479] = true,
[116705] = true,
[424421] = true,
[220543] = true,
[324589] = true,
[423536] = true,
[36033] = true,
[32747] = true,
[190984] = true,
[391528] = true,
[1216475] = true,
[31935] = true,
[427356] = true,
[426145] = true,
[280604] = true,
[462771] = true,
[427357] = true,
[420090] = true,
[257732] = true,
[468631] = true,
[463058] = true,
[263202] = true,
[6552] = true,
[147362] = true,
[51505] = true,
[427260] = true,
[461904] = true,
[2948] = true,
[117952] = true,
[450215] = true,
[427609] = true,
[269302] = true,
[394976] = true,
[183752] = true,
[423664] = true,
[30283] = true,
[341977] = true,
[455476] = true,
[429091] = true,
[373279] = true,
[471733] = true,
[440687] = true,
[157348] = true,
[422541] = true,
},
["profiles"] = {
["Jundies Plater"] = {
["focus_as_target_alpha"] = true,
["aura_breakline_space"] = 1,
["aura_sort"] = true,
["npcs_renamed"] = {
[173044] = "Stitcher",
[176394] = "Worker",
[212764] = "Speaker",
[192333] = "Alpha",
[178141] = "Fish Sticker",
[197985] = "Flame",
[190381] = "Rotburst",
[207796] = "Burning",
[98965] = "Kur'talos",
[176523] = "Painsmith",
[185683] = "Speed Relic",
[87329] = "Test Dummy",
[98521] = "Etheldrin",
[101839] = "Cat",
[199368] = "Big Crystal",
[164967] = "Dickus",
[179334] = "Zo'dahh",
[98696] = "Illysanna",
[184319] = "Custodian",
[204560] = "Incorporeal",
[135234] = "Doggo",
[181224] = "Da Sausage",
[151649] = "Mk I",
[168969] = "Green Slime",
[189813] = "Dathea",
[98538] = "Velandras",
[184130] = "Earthen",
[216658] = "Izo",
[179733] = "Fish Stick",
[184972] = "Eggnog",
[230740] = "Shreddinator",
[131823] = "M'lady",
[163891] = "Bad Slime",
[201261] = "Kazzara",
[184910] = "Speed Boi",
[128551] = "Doggo",
[190340] = "Defender",
[184911] = "CDR Boi",
[180990] = "Jailer",
[185610] = "Simp",
[194897] = "Stormsurge Totem",
[209090] = "T. Swift",
[174843] = "Maitre D",
[191222] = "Frost Dragon",
[214012] = "Dark ",
[214287] = "Bad Totem",
[114627] = "Terror",
[181548] = "Absolution",
[197509] = "Cloud",
[227300] = "Big Spawn",
[164705] = "Haste Slime",
[99192] = "Xavius",
[184908] = "Haste Boi",
[144298] = "Mk III",
[181546] = "Renewal",
[181549] = "War",
[59555] = "Haunting",
[167731] = "Separator",
[201155] = "Nascent Dragon",
[184582] = "Eric",
[151657] = "Bomb",
[151659] = "Rocket",
[182169] = "Lithium",
[197298] = "Nascent Dragon",
[214840] = "Engorged",
[197219] = "Big Lasher",
[164707] = "Purple Slime",
[185685] = "CDR Relic",
[70245] = "uh oh",
[174773] = "Spiteful",
[180773] = "Trash Can",
[181551] = "Duty",
[165946] = "Mordretha",
[102781] = "Bat",
[198998] = "Tyr",
[175646] = "S.U.C.C. Master",
[114632] = "Attendant",
[165010] = "Purple Slime",
[190426] = "Decay Totem",
[229537] = "Emissary",
[175806] = "Sa'lami",
[214350] = "Turned",
[220401] = "Detector",
[185680] = "Haste Relic",
[175663] = "Hill Brad",
[208445] = "Larodar",
[198047] = "Tempest",
[216340] = "Sentry",
},
["bossmod_support_bars_text_enabled"] = false,
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5468",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater.lua:1600",
["SoftTargetIconGameObject"] = "Interface/AddOns/Plater/Plater.lua:1600",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateOverlapH"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:1600",
["SoftTargetInteract"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:1600",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowEnemyPets"] = "Interface/AddOns/Plater/Plater.lua:8696",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater.lua:8696",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater.lua:1600",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowEnemyTotems"] = "Interface/AddOns/Plater/Plater.lua:8696",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateOtherAtBase"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater.lua:1600",
["SoftTargetNameplateInteract"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:5428",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:1600",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater.lua:1600",
},
["aura_cache_by_name"] = {
["mort'regar's echoes"] = {
333575,
},
["broodkeeper's blaze"] = {
394452,
394453,
},
["regrowth"] = {
8936,
16561,
20665,
22373,
22695,
27637,
28744,
34361,
39000,
39125,
66067,
69882,
72922,
72932,
84158,
97426,
98099,
102047,
165753,
173791,
176218,
187697,
188905,
224527,
265532,
283745,
292627,
292734,
311571,
326689,
338857,
},
["storm dominance"] = {
374918,
396076,
396077,
396111,
396113,
},
["crippling poison"] = {
3408,
3409,
25809,
30981,
44289,
115196,
132747,
132748,
169622,
169623,
283648,
283649,
},
["flame dominance"] = {
374881,
396056,
396062,
396105,
396106,
},
["blazing soul"] = {
111642,
235365,
389176,
411008,
422067,
423530,
426898,
},
["echoing void"] = {
307232,
307236,
317014,
317020,
317022,
317029,
318280,
318485,
318486,
373281,
373304,
373305,
},
["ice barrier"] = {
11426,
33245,
69787,
198094,
201565,
240074,
262251,
264458,
267504,
284882,
},
["sphere of suppression"] = {
294906,
294907,
294908,
294909,
294910,
294912,
294919,
294920,
294922,
298292,
298418,
298419,
298420,
300012,
300013,
},
["atrophic poison"] = {
83609,
381637,
392388,
},
["concentrated flame"] = {
295368,
295373,
295374,
295375,
295376,
295377,
295378,
295379,
295380,
295384,
299349,
299353,
302564,
},
["sanguine sphere"] = {
163689,
166591,
},
["enslaved"] = {
201089,
204831,
211680,
222424,
268192,
299156,
303622,
323961,
},
["bolster"] = {
209859,
280001,
},
["frost dominance"] = {
374916,
396072,
396074,
396108,
396109,
},
["chaos brand"] = {
1490,
255260,
281242,
},
["whip rage"] = {
29340,
233210,
},
["kevin's wrath"] = {
352520,
352528,
352533,
352534,
},
["sinful revelation"] = {
309623,
324260,
},
["predatory instincts"] = {
389808,
},
["iron wire"] = {
196861,
256148,
},
["earth shield"] = {
379,
974,
32734,
38590,
54479,
54480,
55599,
55600,
56451,
57802,
57803,
58981,
58982,
59471,
59472,
60013,
60014,
66063,
66064,
67530,
67537,
69568,
69569,
69925,
69926,
77905,
79927,
79928,
101649,
101650,
143475,
143479,
145559,
145560,
159981,
159982,
165773,
199355,
199356,
204288,
204290,
226078,
254417,
254425,
268709,
268710,
374066,
374067,
377874,
377875,
383648,
413008,
413010,
},
["power word: shield"] = {
17,
11647,
11835,
11974,
17139,
20697,
22187,
27607,
29408,
32595,
35944,
36052,
41373,
44175,
44291,
46193,
66099,
71548,
71780,
83842,
84039,
102409,
113734,
122808,
123258,
127399,
135313,
136100,
165718,
211558,
226076,
248441,
284471,
318158,
344426,
},
["strength of the pack"] = {
64369,
64381,
171114,
178149,
178150,
189715,
199184,
199186,
200922,
260057,
341222,
341223,
359768,
365338,
},
["numbing poison"] = {
5760,
5761,
158873,
158876,
311373,
342947,
359078,
},
["consecration"] = {
26573,
32773,
33559,
36946,
37553,
38385,
41541,
43429,
57798,
59998,
69930,
79966,
81297,
107100,
111365,
153441,
158416,
162642,
165711,
184047,
188370,
190010,
200667,
200678,
200679,
204242,
205228,
216217,
221645,
221730,
233390,
243597,
251151,
251152,
251549,
251550,
264082,
283579,
283582,
283583,
288807,
288808,
288809,
290496,
290497,
290498,
294346,
294347,
327980,
344172,
382484,
387881,
413267,
},
["lunar empowerment"] = {
211091,
292664,
},
["ancient flame"] = {
144691,
144695,
144699,
295365,
295367,
295369,
295372,
295381,
299348,
299350,
303380,
369990,
375583,
},
["nimble steps"] = {
352366,
354050,
354051,
354052,
},
["breath of eons"] = {
403631,
403755,
403758,
409632,
409990,
},
["tidebringer"] = {
236501,
236502,
},
["prey on the weak"] = {
131511,
255909,
389788,
389806,
},
["pistol shot"] = {
185763,
207820,
214779,
223933,
240073,
255966,
267241,
267452,
268229,
274253,
275000,
285167,
294934,
},
["liquefying ooze"] = {
345466,
},
["enveloping mist"] = {
124682,
209193,
212414,
227345,
231605,
274062,
317602,
344008,
344240,
},
["selfless healer"] = {
85804,
114250,
128863,
216777,
},
["butcher cut"] = {
279416,
279426,
},
["mutilated flesh"] = {
211672,
340431,
381672,
394021,
},
["shadowflame wreathe"] = {
405076,
405764,
405765,
405766,
406753,
406764,
406770,
},
["shadow's grasp"] = {
206760,
263656,
263658,
306965,
},
["scouring touch"] = {
356329,
},
["dream delver"] = {
352786,
353353,
353354,
},
["might of the upper reaches"] = {
333579,
},
["thunder clap"] = {
6343,
57832,
60019,
69304,
85216,
145046,
147683,
183543,
236389,
237917,
262538,
267578,
283929,
316143,
316414,
316490,
382590,
386028,
396719,
},
["nothing personal"] = {
286573,
286579,
286581,
289467,
},
["filthy transfusion"] = {
273834,
273835,
273836,
},
["soulglow spectrometer"] = {
352186,
352938,
352939,
352940,
358379,
},
["mystic touch"] = {
8647,
113746,
331653,
},
["arcane intellect"] = {
1459,
13326,
36880,
45525,
129171,
266499,
367803,
},
["blistering heat"] = {
105444,
105445,
417039,
420950,
420968,
},
["effusive anima accelerator"] = {
352188,
353248,
353349,
360277,
},
["mind flay"] = {
15407,
16568,
17165,
22919,
23953,
26044,
26143,
28310,
29407,
29570,
32417,
35507,
37276,
37330,
37621,
38243,
40842,
42396,
43512,
46562,
52586,
54339,
54805,
57779,
57941,
59367,
59974,
60006,
60472,
65488,
78751,
79541,
79711,
89032,
91134,
103024,
129033,
144293,
149984,
150886,
150893,
154125,
164445,
172670,
183324,
189873,
193473,
193635,
196508,
196509,
201520,
202894,
203037,
203313,
203375,
208697,
216513,
218510,
222075,
234696,
241934,
254123,
260182,
260304,
263117,
264892,
271649,
274019,
274032,
277358,
277521,
278311,
284414,
290402,
292974,
299301,
303566,
306391,
308172,
308884,
308885,
310552,
310555,
312526,
312679,
314187,
314188,
314592,
315949,
316835,
317490,
319027,
321330,
394167,
406231,
},
["in the spotlight"] = {
227931,
312926,
},
["moonkin aura"] = {
209740,
209746,
},
["power word: fortitude"] = {
13864,
21562,
23947,
23948,
36004,
58921,
74973,
94366,
133538,
160637,
165739,
183585,
206629,
211681,
266501,
267528,
284466,
286145,
},
["blaze of glory"] = {
99252,
146038,
146039,
153926,
167629,
167630,
177354,
373972,
373973,
373974,
373975,
373976,
373977,
385528,
},
["insidious chill"] = {
391566,
391568,
},
["freezing ice stone"] = {
402940,
403391,
},
["amplifying poison"] = {
381664,
383414,
394328,
},
["earth dominance"] = {
374917,
396067,
396068,
396085,
396098,
},
["deadly poison"] = {
2818,
2823,
3583,
10022,
13582,
21787,
21788,
32970,
32971,
34616,
34655,
34657,
36872,
38519,
38520,
41191,
41192,
41485,
43580,
43581,
56145,
56149,
59479,
59482,
63755,
63756,
67710,
67711,
72329,
82632,
82633,
96648,
113780,
129410,
130980,
130981,
132745,
132746,
145419,
145420,
145421,
177918,
177919,
177920,
289078,
314113,
373774,
377030,
377036,
394324,
394325,
403952,
},
["defensive countermeasure"] = {
297133,
299428,
300996,
303941,
},
["inspired"] = {
105710,
133461,
133928,
134116,
134454,
134885,
135077,
135414,
135435,
192943,
224693,
235727,
256539,
301972,
343503,
},
["all-consuming spite"] = {
343553,
},
},
["url"] = "https://wago.io/ak3iS95aa/112",
["blizzard_nameplate_font_override_enabled"] = true,
["hover_highlight_alpha"] = 0.5,
["indicator_raidmark_scale"] = 0.8499999642372131,
["cast_statusbar_spark_alpha"] = 1,
["aura2_y_offset"] = 1.5,
["aura_timer_text_anchor"] = {
["x"] = 0.5,
},
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["spellname_text_font"] = "Expressway",
["castbar_offset"] = -55,
["spellpercent_text_font"] = "Expressway",
["mana_incombat"] = {
168,
4,
},
["power_percent_text_font"] = "Expressway",
["cast"] = {
170,
},
["percent_text_size"] = 9,
["castbar_enabled"] = false,
["cast_incombat"] = {
170,
},
["module_enabled"] = false,
["healthbar_color"] = {
0,
0,
0,
},
["healthbar_color_by_hp"] = true,
["health_incombat"] = {
168,
},
["health"] = {
168,
},
["mana"] = {
168,
4,
},
["power_percent_text_size"] = 8,
["percent_text_anchor"] = {
["y"] = 1.299999237060547,
},
["percent_text_font"] = "Expressway",
["percent_text_color"] = {
1,
1,
1,
},
},
["friendlyplayer"] = {
["actorname_text_font"] = "Expressway",
["spellpercent_text_font"] = "Expressway",
["actorname_friend_color"] = {
0.70980392156863,
},
["level_text_size"] = 8,
["actorname_use_class_color"] = true,
["cast"] = {
135,
7,
},
["spellpercent_text_size"] = 9,
["level_text_alpha"] = 0.29999998211861,
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 8,
["only_damaged"] = false,
["only_thename"] = true,
["actorname_guild_color"] = {
0.49803921568627,
},
["cast_incombat"] = {
135,
7,
},
["percent_show_percent"] = false,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Expressway",
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
},
["spellname_text_size"] = 9,
["spellname_text_font"] = "Expressway",
["level_text_font"] = "Expressway",
["actorname_text_size"] = 9,
},
["friendlynpc"] = {
["quest_color_enemy"] = {
1,
0.36862745098039,
0,
1,
},
["spellpercent_text_font"] = "Expressway",
["level_text_size"] = 8,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
135,
7,
},
["spellpercent_text_size"] = 9,
["big_actortitle_text_size"] = 9,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["cast_incombat"] = {
135,
7,
},
["spellname_text_outline"] = "OUTLINE",
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["level_text_font"] = "Expressway",
["actorname_text_font"] = "Expressway",
["quest_color"] = {
1,
0.49803921568627,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["actorname_text_size"] = 9,
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["big_actortitle_text_color"] = {
nil,
0.7843137254902,
nil,
1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 8,
["percent_text_font"] = "Expressway",
["big_actorname_text_color"] = {
0.25098039215686,
0.68627450980392,
0.20392156862745,
1,
},
["level_text_alpha"] = 0.29999998211861,
["spellname_text_font"] = "Expressway",
["spellname_text_size"] = 9,
["health"] = {
135,
15,
},
["percent_text_ooc"] = true,
["percent_show_health"] = true,
["health_incombat"] = {
135,
15,
},
["big_actorname_text_font"] = "Expressway",
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2.5,
["side"] = 10,
},
},
["global_health_height"] = 16,
["global_health_width"] = 132,
["enemyplayer"] = {
["actorname_text_font"] = "Expressway",
["big_actorname_text_size"] = 10,
["quest_color_enemy"] = {
1,
0.49803921568627,
0,
1,
},
["spellpercent_text_font"] = "Expressway",
["quest_color_neutral"] = {
1,
0.49803921568627,
0,
1,
},
["level_text_size"] = 8,
["spellname_text_font"] = "Expressway",
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
135,
7,
},
["all_names"] = true,
["level_text_alpha"] = 0.29999998211861,
["big_actortitle_text_size"] = 10,
["fixed_class_color"] = {
0.69803921568627,
0.1921568627451,
0.11372549019608,
},
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["spellpercent_text_size"] = 9,
["actorname_text_spacing"] = 8,
["percent_text_font"] = "Expressway",
["big_actorname_text_font"] = "Expressway",
["quest_enabled"] = true,
["cast_incombat"] = {
135,
7,
},
["spellname_text_outline"] = "OUTLINE",
["spellname_text_size"] = 9,
["quest_color_enabled"] = true,
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["actorname_text_size"] = 9,
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["level_text_font"] = "Expressway",
["level_text_enabled"] = false,
},
["enemynpc"] = {
["actorname_text_font"] = "Expressway",
["quest_color_enemy"] = {
nil,
0.49803921568627,
},
["spellpercent_text_font"] = "Expressway",
["quest_color_neutral"] = {
nil,
0.49803921568627,
},
["actorname_text_size"] = 9,
["big_actortitle_text_font"] = "Expressway",
["cast"] = {
135,
7,
},
["spellpercent_text_size"] = 9,
["big_actortitle_text_size"] = 9,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 0.5,
["x"] = 2,
["side"] = 10,
},
["spellpercent_text_anchor"] = {
["y"] = -1.5,
["x"] = 3,
["side"] = 5,
},
["actorname_text_spacing"] = 8,
["percent_text_font"] = "Expressway",
["spellname_text_font"] = "Expressway",
["cast_incombat"] = {
135,
7,
},
["level_text_alpha"] = 0.29999998211861,
["big_actorname_text_size"] = 9,
["big_actorname_text_font"] = "Expressway",
["health_incombat"] = {
135,
15,
},
["health"] = {
135,
15,
},
["spellname_text_anchor"] = {
["y"] = -1.5,
["x"] = -1,
["side"] = 3,
},
["spellname_text_size"] = 9,
["percent_text_anchor"] = {
["y"] = 0.5,
["side"] = 11,
},
["level_text_font"] = "Expressway",
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Details! Slash",
["aura_y_offset"] = 1.5,
["expansion_triggerwipe"] = {
[8] = true,
[10] = true,
[9] = true,
},
["bossmod_aura_glow_important_only"] = false,
["cast_statusbar_color_nointerrupt"] = {
0.80000007152557,
0.30196079611778,
0.30196079611778,
1,
},
["first_run2"] = true,
["indicator_spec"] = false,
["border_thickness"] = 1.200000047683716,
["resources_settings"] = {
["global_settings"] = {
["anchor"] = {
["y"] = 9.709999084472656,
},
["show_depleted"] = false,
["scale"] = 0.80000001192093,
},
["chr"] = {
["Player-4184-004EAE08"] = "ArcaneCharges",
["Player-3296-00936CF9"] = "ComboPoints",
["Player-11-0E82EBCD"] = "ArcaneCharges",
["Player-3678-0D4F17CA"] = "ComboPoints",
["Player-11-0E5C6A6B"] = "ComboPoints",
["Player-970-00B46921"] = "ComboPoints",
["Player-11-0E5C6A2D"] = "ComboPoints",
["Player-3674-09CBAF8C"] = "ArcaneCharges",
["Player-3678-0D7BB774"] = "ComboPoints",
["Player-2073-09AF21B0"] = "ComboPoints",
["Player-11-0E912F58"] = "SoulShards",
["Player-5764-00018799"] = "ComboPoints",
["Player-3684-0E9E51FC"] = "ComboPoints",
["Player-4184-00C60F8C"] = "ArcaneCharges",
["Player-5764-0008F0CD"] = "ComboPoints",
["Player-3684-091919FE"] = "HolyPower",
["Player-4184-0021692E"] = "ComboPoints",
["Player-3296-00945C33"] = "ComboPoints",
["Player-11-0E912F44"] = "ComboPoints",
["Player-970-006B99B8"] = "ComboPoints",
["Player-3684-0E9F508B"] = "ComboPoints",
["Player-5764-003EB19F"] = "ComboPoints",
["Player-3678-0D8642EB"] = "ComboPoints",
["Player-3678-0D4C07B5"] = "ComboPoints",
["Player-4184-00CB2DE1"] = "ComboPoints",
["Player-3678-0D44FD01"] = "ComboPoints",
["Player-970-00B49A85"] = "ComboPoints",
["Player-5764-004254A6"] = "ArcaneCharges",
["Player-970-00B2046C"] = "ComboPoints",
["Player-3685-07F1620A"] = "ArcaneCharges",
["Player-3674-0898468A"] = "SoulShards",
["Player-5764-003EB012"] = "ComboPoints",
["Player-3685-07180DDD"] = "Chi",
["Player-3674-096625B1"] = "Chi",
["Player-4184-008FBEFA"] = "ComboPoints",
["Player-11-0E89E36C"] = "ComboPoints",
["Player-3684-0E9F0125"] = "ComboPoints",
["Player-3676-0DBAB9E1"] = "ComboPoints",
["Player-11-0E929C72"] = "SoulShards",
["Player-5764-003E78D5"] = "ComboPoints",
["Player-970-0065C1C7"] = "ComboPoints",
["Player-3684-0E9F010E"] = "ComboPoints",
["Player-5764-00423DA8"] = "SoulShards",
["Player-5764-0008EBB9"] = "ComboPoints",
["Player-4604-00325132"] = "ComboPoints",
["Player-3685-0722B5D5"] = "ComboPoints",
["Player-4184-00C7C500"] = "HolyPower",
["Player-4184-00C8CB6C"] = "ComboPoints",
},
},
["health_animation_time_dilatation"] = 1.6699999570847,
["npc_cache"] = {
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[194241] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
},
[234671] = {
"Flame Laser",
"Liberation of Undermine",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[230322] = {
"Stix Bunkjunker",
"Liberation of Undermine",
"enUS",
},
[210108] = {
"E.D.N.A.",
"The Stonevault",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[200387] = {
"Shambling Infester",
"Temple of the Jade Serpent",
},
[219066] = {
"Afflicted Civilian",
"The Rookery",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[234932] = {
"Gold Shaman",
"Sidestreet Sluice",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[211904] = {
"Tainted Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[230583] = {
"Sprocketmonger Lockenstock",
"Liberation of Undermine",
"enUS",
},
[227513] = {
"Tala",
"The Dread Pit",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[227514] = {
"Velo",
"The Dread Pit",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[236982] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[213954] = {
"Rock Smasher",
"The Stonevault",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[102404] = {
"Stoneclaw Grubmaster",
"Neltharion's Lair",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[176598] = {
"Torment Golem",
"Torghast, Tower of the Damned",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[101637] = {
"Valarjar Aspirant",
"Halls of Valor",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[175576] = {
"Containment Cell",
"Tazavesh, the Veiled Market",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[100486] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[98696] = {
"Illysanna Ravencrest",
"Black Rook Hold",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[222149] = {
"Injured Earthen",
"The Stonevault",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[150250] = {
"Pistonhead Blaster",
"Operation: Mechagon",
"enUS",
},
[233154] = {
"Stagehand",
"Liberation of Undermine",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[150251] = {
"Pistonhead Mechanic",
"Operation: Mechagon",
"enUS",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
},
[225479] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[199124] = {
"Primalist Chillblaster",
"Vault of the Incarnates",
"enUS",
},
[215756] = {
"Ascended Webwarden",
"Khaz Algar",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[150253] = {
"Weaponized Crawler",
"Operation: Mechagon",
"enUS",
},
[82579] = {
"Grom'kar Far Seer",
"Grimrail Depot",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[190426] = {
"Decay Totem",
"Brackenhide Hollow",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[234949] = {
"Geargrave",
"Sidestreet Sluice",
"enUS",
},
[222923] = {
"Repurposed Loaderbot",
"UNKNOWN",
"enUS",
},
[84499] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
"enUS",
},
[190174] = {
"Hypnosis Bat",
"Operation: Mechagon",
},
[190686] = {
"Frozen Destroyer",
"Vault of the Incarnates",
"enUS",
},
[168425] = {
"Forsworn Annihilator",
"Spires of Ascension",
},
[197595] = {
"Earthwrought Smasher",
"Vault of the Incarnates",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[94224] = {
"Petrifying Totem",
"Neltharion's Lair",
"enUS",
},
[202969] = {
"Empty Recollection",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Sidestreet Sluice",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[190688] = {
"Blazing Fiend",
"Vault of the Incarnates",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[234443] = {
"Jundies",
"Theater of Pain",
"enUS",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[193760] = {
"Surging Ruiner",
"Vault of the Incarnates",
"enUS",
},
[190690] = {
"Thundering Ravager",
"Vault of the Incarnates",
"enUS",
},
[81432] = {
"Grom'kar Technician",
"Iron Docks",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[228050] = {
"Mechano Wolf",
"Liberation of Undermine",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[101008] = {
"Stinging Swarm",
"Black Rook Hold",
"enUS",
},
[135169] = {
"Spirit Drain Totem",
"The Underrot",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[191206] = {
"Primalist Mage",
"Vault of the Incarnates",
"enUS",
},
[222167] = {
"Brood Infuser",
"Nerub-ar Palace",
"enUS",
},
[40925] = {
"Tainted Sentry",
"Throne of the Tides",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[45915] = {
"Armored Mistral",
"The Vortex Pinnacle",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[76446] = {
"Shadowmoon Enslaver",
"Shadowmoon Burial Grounds",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[114316] = {
"Baroness Dorothea Millstipe",
"Return to Karazhan",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[156157] = {
"Coldheart Ascendant",
"Torghast, Tower of the Damned",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[224221] = {
"Twilight Overseer",
"Grim Batol",
"enUS",
},
[98965] = {
"Kur'talos Ravencrest",
"Black Rook Hold",
"enUS",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
},
[235737] = {
"Bomb Tail",
"Liberation of Undermine",
"enUS",
},
[86684] = {
"Feral Lasher",
"The Everbloom",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[39392] = {
"Faceless Corruptor",
"Grim Batol",
"enUS",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[56792] = {
"Figment of Doubt",
"Temple of the Jade Serpent",
},
[221667] = {
"Lost Watcher",
"Nerub-ar Palace",
"enUS",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[155908] = {
"Deathspeaker",
"Torghast, Tower of the Damned",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[205804] = {
"Risen Dragon",
"Dawn of the Infinite",
"enUS",
},
[84767] = {
"Twisted Abomination",
"The Everbloom",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[231904] = {
"Punchy Thug",
"Sidestreet Sluice",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[210156] = {
"Skarmorak",
"The Stonevault",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[227300] = {
"Bile-Soaked Spawn",
"Nerub-ar Palace",
"enUS",
},
[229603] = {
"Darkfuse Flare",
"Liberation of Undermine",
"enUS",
},
[231906] = {
"Aerial Support Bot",
"Sidestreet Sluice",
"enUS",
},
[191222] = {
"Juvenile Frost Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[231908] = {
"Bopper Bot",
"Sidestreet Sluice",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
"enUS",
},
[231909] = {
"Underpaid Brute",
"Sidestreet Sluice",
"enUS",
},
[191225] = {
"Tarasek Earthreaver",
"Vault of the Incarnates",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[87329] = {
"Raider's Training Dummy",
"Draenor",
},
[196856] = {
"Primal Stormsentry",
"Vault of the Incarnates",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[80805] = {
"Makogg Emberblade",
"Iron Docks",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[82597] = {
"Grom'kar Captain",
"Grimrail Depot",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[191230] = {
"Dragonspawn Flamebender",
"Vault of the Incarnates",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[229356] = {
"Imperious Blaster",
"Liberation of Undermine",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[80935] = {
"Grom'kar Boomer",
"Grimrail Depot",
},
[188673] = {
"Smoldering Colossus",
"Vault of the Incarnates",
"enUS",
},
[191232] = {
"Drakonid Stormbringer",
"Vault of the Incarnates",
"enUS",
},
[238569] = {
"Mini Amp",
"Liberation of Undermine",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[80936] = {
"Grom'kar Grenadier",
"Grimrail Depot",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
"enUS",
},
[214263] = {
"Waxface",
"The Waterworks",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
"enUS",
},
[59547] = {
"Jiang",
"Temple of the Jade Serpent",
},
[168718] = {
"Forsworn Warden",
"Spires of Ascension",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[98081] = {
"Bellowing Idol",
"Neltharion's Lair",
"enUS",
},
[150297] = {
"Mechagon Renormalizer",
"Operation: Mechagon",
"enUS",
},
[84520] = {
"Pitwarden Gwarnok",
"Iron Docks",
},
[40357] = {
"Invoked Shadowflame Spirit",
"Grim Batol",
"enUS",
},
[80938] = {
"Grom'kar Hulk",
"Grimrail Depot",
},
[229619] = {
"Blazing Fueldemon",
"Liberation of Undermine",
"enUS",
},
[95779] = {
"Festerhide Grizzly",
"Darkheart Thicket",
"enUS",
},
[229364] = {
"Imperious Deathtone",
"Liberation of Undermine",
"enUS",
},
[227573] = {
"Anub'vir",
"Earthcrawl Mines",
"enUS",
},
[214012] = {
"Dark Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[153882] = {
"Deadsoul Spirit",
"Torghast, Tower of the Damned",
},
[221945] = {
"Forgotten Harbinger",
"Nerub-ar Palace",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[163862] = {
"Defender of Many Eyes",
"Plaguefall",
},
[227575] = {
"Armored Shellguard",
"Earthcrawl Mines",
"enUS",
},
[231925] = {
"Drill Sergeant",
"Sidestreet Sluice",
"enUS",
},
[40166] = {
"Molten Giant",
"Grim Batol",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[189706] = {
"Chaotic Essence",
"Castle Nathria",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[201222] = {
"Valow, Timesworn Keeper",
"Dawn of the Infinite",
"enUS",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
"enUS",
},
[227578] = {
"Nerubian Webcaster",
"Earthcrawl Mines",
"enUS",
},
[231928] = {
"Bomb Bot",
"Sidestreet Sluice",
"enUS",
},
[193291] = {
"Apex Blazewing",
"Neltharus",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[231930] = {
"Obedient-ish Predator",
"Sidestreet Sluice",
"enUS",
},
[114334] = {
"Damaged Golem",
"Return to Karazhan",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[227581] = {
"Nerubian Oracle",
"Earthcrawl Mines",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[187154] = {
"Unstable Curator",
"The Azure Vault",
"enUS",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[168988] = {
"Overgrowth",
"Mists of Tirna Scithe",
"enUS",
},
[218884] = {
"Shattershell Scarab",
"Nerub-ar Palace",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[220164] = {
"Darkened Husk",
"The Dread Pit",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[40936] = {
"Faceless Watcher",
"Throne of the Tides",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[231935] = {
"Junkyard Hyena",
"Liberation of Undermine",
"enUS",
},
[115488] = {
"Infused Pyromancer",
"Return to Karazhan",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[224516] = {
"Skardyn Invader",
"The Stonevault",
"enUS",
},
[216584] = {
"Nerubian Captain",
"The Dread Pit",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[227843] = {
"Bloodfang Hyena",
"Liberation of Undermine",
"enUS",
},
[84400] = {
"Gnarled Ancient",
"The Everbloom",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[204560] = {
"Incorporeal Being",
"Halls of Infusion",
"enUS",
},
[233474] = {
"Gallagio Goon",
"Liberation of Undermine",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"UNKNOWN",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[196117] = {
"Crystal Thrasher",
"The Azure Vault",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[192791] = {
"Nokhud Warspear",
"The Nokhud Offensive",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[189466] = {
"Irontorch Commander",
"Neltharus",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[214287] = {
"Earth Burst Totem",
"The Stonevault",
"enUS",
},
[83763] = {
"Grom'kar Technician",
"Iron Docks",
},
[59553] = {
"The Songbird Queen",
"Temple of the Jade Serpent",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198424] = {
"Primalist Frostsculptor",
"Vault of the Incarnates",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[197145] = {
"Colossal Stormfiend",
"Vault of the Incarnates",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[197146] = {
"Qalashi Emissary",
"Vault of the Incarnates",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[188703] = {
"Protoform Barrier",
"Castle Nathria",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[197149] = {
"Qalashi Lavamancer",
"Vault of the Incarnates",
"enUS",
},
[168747] = {
"Venomfang",
"Plaguefall",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[197406] = {
"Aggravated Skitterfly",
"Algeth'ar Academy",
"enUS",
},
[230927] = {
"Darkfuse Shredder Pilot",
"Operation: Floodgate",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[212764] = {
"Engine Speaker",
"The Stonevault",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[212765] = {
"Void Bound Despoiler",
"The Stonevault",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[163894] = {
"Blighted Spinebreaker",
"Plaguefall",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
},
[81212] = {
"Grimrail Overseer",
"Grimrail Depot",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[216863] = {
"Maklin Drillstab",
"Earthcrawl Mines",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[166969] = {
"Baroness Frieda",
"Castle Nathria",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[177716] = {
"So' Cartel Assassin",
"Tazavesh, the Veiled Market",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[225821] = {
"The Geargrinder",
"Liberation of Undermine",
"enUS",
},
[83389] = {
"Ironwing Flamespitter",
"Iron Docks",
},
[166970] = {
"Lord Stavros",
"Castle Nathria",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[166971] = {
"Castellan Niklaus",
"Castle Nathria",
},
[152898] = {
"Deadsoul Chorus",
"Torghast, Tower of the Damned",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[83390] = {
"Thunderlord Wrangler",
"Iron Docks",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[189234] = {
"Frostbreath Arachnid",
"Vault of the Incarnates",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[198702] = {
"Unstable Frost",
"Vault of the Incarnates",
"enUS",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[81984] = {
"Gnarlroot",
"The Everbloom",
"enUS",
},
[238108] = {
"Cement Shoes",
"Liberation of Undermine",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[233247] = {
"Imperious Mixer",
"Liberation of Undermine",
"enUS",
},
[238109] = {
"Water Bubble",
"Liberation of Undermine",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[65317] = {
"Xiang",
"Temple of the Jade Serpent",
},
[152905] = {
"Tower Sentinel",
"Torghast, Tower of the Damned",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[210478] = {
"Infected Beast",
"Fungal Folly",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
"enUS",
},
[210479] = {
"Carnivorous Lasher",
"Fungal Folly",
"enUS",
},
[198709] = {
"Unstable Earth",
"Vault of the Incarnates",
"enUS",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[228648] = {
"Rik Reverb",
"Liberation of Undermine",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[229161] = {
"Darkfuse Brute",
"Liberation of Undermine",
"enUS",
},
[168007] = {
"Empowered Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[179010] = {
"Fatespawn Anomaly",
"Sanctum of Domination",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[220974] = {
"Bazaar Guard",
"Khaz Algar",
},
[96574] = {
"Stormforged Sentinel",
"Halls of Valor",
"enUS",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[115765] = {
"Abstract Nullifier",
"Return to Karazhan",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[198716] = {
"Unstable Storm",
"Vault of the Incarnates",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[208440] = {
"Infinite Slayer",
"Dawn of the Infinite",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[195135] = {
"Bracken Warscourge",
"Brackenhide Hollow",
},
[92610] = {
"Understone Drummer",
"Neltharion's Lair",
},
[101438] = {
"Vileshard Chunk",
"Neltharion's Lair",
},
[227632] = {
"Venombite",
"The Dread Pit",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[228144] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[98368] = {
"Ghostly Protector",
"Black Rook Hold",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[156244] = {
"Winged Automaton",
"Torghast, Tower of the Damned",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[151127] = {
"Lord of Torment",
"Torghast, Tower of the Damned",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[156245] = {
"Grand Automaton",
"Torghast, Tower of the Damned",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[227635] = {
"Kas'dru",
"The Dread Pit",
"enUS",
},
[199233] = {
"Flamescale Captain",
"Vault of the Incarnates",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[208445] = {
"Larodar, Keeper of the Flame",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[115642] = {
"Umbral Imp",
"Faronaar",
},
[211262] = {
"Ixkreten the Unbreakable",
"The Dawnbreaker",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[157017] = {
"Lithic Watcher",
"Torghast, Tower of the Damned",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[198214] = {
"Broodguardian Ziruss",
"Vault of the Incarnates",
"enUS",
},
[229175] = {
"Darkfuse Stunner",
"Liberation of Undermine",
"enUS",
},
[85194] = {
"Entanglement",
"The Everbloom",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[211777] = {
"Spitfire Fusetender",
"Kriegval's Rest",
"enUS",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[115388] = {
"King",
"Return to Karazhan",
},
[237109] = {
"Gallagio Customer Care",
"Liberation of Undermine",
"enUS",
},
[229177] = {
"Torq",
"Liberation of Undermine",
"enUS",
},
[229433] = {
"Skiggy Muckheimer",
"Liberation of Undermine",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[229434] = {
"Melbo the Magnificent",
"Liberation of Undermine",
"enUS",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[234553] = {
"Dark Walker",
"Excavation Site 9",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[229180] = {
"Darkfuse Gunner",
"Liberation of Undermine",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[229181] = {
"Flarendo",
"Liberation of Undermine",
"enUS",
},
[229437] = {
"Gallagio Dealer",
"Liberation of Undermine",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[229438] = {
"Gallagio Jackbot",
"Liberation of Undermine",
"enUS",
},
[207177] = {
"Infinite Watchkeeper",
"Dawn of the Infinite",
"enUS",
},
[227903] = {
"Darkfuse Growler",
"Liberation of Undermine",
"enUS",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
"enUS",
},
[190034] = {
"Blazebound Destroyer",
"Ruby Life Pools",
"enUS",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
"enUS",
},
[229439] = {
"Gallagio Security",
"Liberation of Undermine",
"enUS",
},
[227904] = {
"Darkfuse Shredder",
"Liberation of Undermine",
"enUS",
},
[234557] = {
"Support Rig",
"Liberation of Undermine",
"enUS",
},
[226625] = {
"Cave Skipper",
"Fungal Folly",
"enUS",
},
[165471] = {
"Nathrian Duelist",
"Castle Nathria",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[229440] = {
"Princeguard Muscle",
"Liberation of Undermine",
"enUS",
},
[194897] = {
"Stormsurge Totem",
"The Nokhud Offensive",
"enUS",
},
[204109] = {
"Cavernous Shrieker",
"The Waterworks",
"enUS",
},
[208459] = {
"Fiery Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[213577] = {
"Spitfire Charger",
"The Waterworks",
"enUS",
},
[52019] = {
"Skyfall Nova",
"The Vortex Pinnacle",
"enUS",
},
[220742] = {
"Guardian Tentacle",
"The Sinkhole",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[83025] = {
"Grom'kar Battlemaster",
"Iron Docks",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
"enUS",
},
[187224] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[96587] = {
"Felsworn Infester",
"Vault of the Wardens",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[83026] = {
"Siegemaster Olugar",
"Iron Docks",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
"enUS",
},
[208208] = {
"Alliance Destroyer",
"Dawn of the Infinite",
"enUS",
},
[114627] = {
"Shrieking Terror",
"Return to Karazhan",
},
[115395] = {
"Queen",
"Return to Karazhan",
},
[198998] = {
"Tyr, the Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[81236] = {
"Grimrail Technician",
"Grimrail Depot",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[165479] = {
"Court Enforcer",
"Castle Nathria",
},
[227145] = {
"Waterworks Crocolisk",
"Operation: Floodgate",
"enUS",
},
[203861] = {
"Horde Destroyer",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[214608] = {
"Screaming Soul",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[186208] = {
"Rotbow Stalker",
"Brackenhide Hollow",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
},
[223822] = {
"Queen's Guard Re'zah",
"Nerub-ar Palace",
"enUS",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[218961] = {
"Starved Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[87252] = {
"Unruly Ogron",
"Iron Docks",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[208728] = {
"Treasure Wraith",
"Sidestreet Sluice",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
"enUS",
},
[101326] = {
"Honored Ancestor",
"Halls of Valor",
},
[157810] = {
"Mawsworn Endbringer",
"Torghast, Tower of the Damned",
},
[207450] = {
"Fungal Stabber",
"Fungal Folly",
"enUS",
},
[167534] = {
"Rek the Hardened",
"Theater of Pain",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[101839] = {
"Risen Companion",
"Black Rook Hold",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Fungal Folly",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[204127] = {
"Kobold Taskfinder",
"The Waterworks",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[197219] = {
"Vile Lasher",
"Algeth'ar Academy",
"enUS",
},
[187240] = {
"Drakonid Breaker",
"The Azure Vault",
"enUS",
},
[154744] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[198500] = {
"Council Earthcaller",
"Vault of the Incarnates",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Fungal Folly",
"enUS",
},
[196198] = {
"Algeth'ar Security",
"Algeth'ar Academy",
},
[198501] = {
"Council Icecaller",
"Vault of the Incarnates",
"enUS",
},
[229462] = {
"Balloon",
"Liberation of Undermine",
"enUS",
},
[115019] = {
"Coldmist Widow",
"Return to Karazhan",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[150142] = {
"Scrapbone Trashtosser",
"Operation: Mechagon",
"enUS",
},
[198503] = {
"Council Flamecaller",
"Vault of the Incarnates",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
},
[168310] = {
"Plagueroc",
"Plaguefall",
},
[207459] = {
"Fungal Rotcaster",
"Fungal Folly",
"enUS",
},
[203877] = {
"Kobold Thwacker",
"The Waterworks",
"enUS",
},
[101075] = {
"Wormspeaker Devout",
"Neltharion's Lair",
"enUS",
},
[227930] = {
"Greater Acid Slime",
"Liberation of Undermine",
"enUS",
},
[203878] = {
"Kobold Mystic",
"The Waterworks",
"enUS",
},
[236886] = {
"Hovering Menace",
"Sidestreet Sluice",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[227931] = {
"Oozing Salvage",
"Liberation of Undermine",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[196203] = {
"Ethereal Restorer",
"Algeth'ar Academy",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[150146] = {
"Scrapbone Shaman",
"Operation: Mechagon",
"enUS",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[120651] = {
"Explosives",
"Operation: Mechagon",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[115406] = {
"Knight",
"Return to Karazhan",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[224609] = {
"Twilight Destroyer",
"Grim Batol",
"enUS",
},
[206698] = {
"Fanatical Conjuror",
"Priory of the Sacred Flame",
"enUS",
},
[211816] = {
"Bazaar Sentry",
"Khaz Algar",
},
[189555] = {
"Astral Attendant",
"The Azure Vault",
"enUS",
},
[236892] = {
"Treasure Crab",
"Sidestreet Sluice",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[183671] = {
"Monstrous Soul",
"Sepulcher of the First Ones",
},
[157572] = {
"Mawsworn Firecaller",
"Torghast, Tower of the Damned",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[164737] = {
"Brood Ambusher",
"Plaguefall",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[189813] = {
"Dathea, Ascended",
"Vault of the Incarnates",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[137103] = {
"Blood Visage",
"The Underrot",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
},
[40577] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[187768] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[165763] = {
"Vile Occultist",
"Castle Nathria",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[208239] = {
"Skittering Menace",
"The Dread Pit",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[166276] = {
"Mistveil Guardian",
"Mists of Tirna Scithe",
"enUS",
},
[234339] = {
"Harbinger Ul'thul",
"Excavation Site 9",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[188026] = {
"Frost Tomb",
"Vault of the Incarnates",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[76518] = {
"Ritual of Bones",
"Shadowmoon Burial Grounds",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"The Dread Pit",
"enUS",
},
[198263] = {
"Stalwart Broodwarden",
"Vault of the Incarnates",
"enUS",
},
[169861] = {
"Ickor Bileflesh",
"Plaguefall",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
},
[183423] = {
"Reformed Bachelor",
"Return to Karazhan",
},
[208243] = {
"Nerubian Slasher",
"The Dread Pit",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[190588] = {
"Tectonic Crusher",
"Vault of the Incarnates",
"enUS",
},
[150160] = {
"Scrapbone Bully",
"Operation: Mechagon",
"enUS",
},
[173189] = {
"Nathrian Hawkeye",
"Castle Nathria",
},
[208244] = {
"Nerubian Threadmancer",
"Earthcrawl Mines",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[229226] = {
"Darkfuse Junker",
"Liberation of Undermine",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[173190] = {
"Court Hawkeye",
"Castle Nathria",
},
[208245] = {
"Skittering Swarmer",
"The Dread Pit",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[88163] = {
"Grom'kar Cinderseer",
"Grimrail Depot",
},
[86372] = {
"Melded Berserker",
"The Everbloom",
"enUS",
},
[199547] = {
"Frostforged Zealot",
"Vault of the Incarnates",
},
[231788] = {
"Unstable Crawler Mine",
"Liberation of Undermine",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
},
[211063] = {
"Fungal Podling",
"Fungal Folly",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[207481] = {
"Spinshroom",
"Fungal Folly",
"enUS",
},
[199549] = {
"Flamesworn Herald",
"Vault of the Incarnates",
},
[228463] = {
"Coin Reel Assistant",
"Liberation of Undermine",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
},
[176521] = {
"Stygian Abductor",
"Sanctum of Domination",
},
[205435] = {
"Epoch Ripper",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[180104] = {
"Tangling Bloom",
"The Shadowlands",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
},
[150168] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
"enUS",
},
[150169] = {
"Toxic Lurker",
"Operation: Mechagon",
"enUS",
},
[165010] = {
"Congealed Slime",
"Plaguefall",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[227956] = {
"Crawler Mine",
"Liberation of Undermine",
"enUS",
},
[114266] = {
"Shoreline Tidespeaker",
"Return to Karazhan",
},
[179852] = {
"Soulless Vengeance",
"The Shadowlands",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[214140] = {
"Naz'jar Sentinel",
"Throne of the Tides",
"enUS",
},
[231028] = {
"Fiery Dynamite Booty",
"Liberation of Undermine",
"enUS",
},
[213885] = {
"Nightfall Dark Architect",
"The Dawnbreaker",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[184972] = {
"Eranog",
"Vault of the Incarnates",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[227960] = {
"Mech Jockey",
"Liberation of Undermine",
"enUS",
},
[227961] = {
"Mechanized Peacekeeper",
"Liberation of Undermine",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[154014] = {
"Imprisoned Cabalist",
"Torghast, Tower of the Damned",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[188302] = {
"Reconfiguration Emitter",
"Castle Nathria",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[206214] = {
"Infinite Infiltrator",
"Dawn of the Infinite",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[75506] = {
"Shadowmoon Loyalist",
"Shadowmoon Burial Grounds",
},
[233306] = {
"The Junkmaker",
"Liberation of Undermine",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[166301] = {
"Mistveil Stalker",
"Mists of Tirna Scithe",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[165483] = {
"Court Hierarch",
"Castle Nathria",
},
[229953] = {
"Mug'Zee",
"Liberation of Undermine",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[239435] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[231027] = {
"Premium Dynamite Booty",
"Liberation of Undermine",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[150165] = {
"Slime Elemental",
"Operation: Mechagon",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[228458] = {
"One-Armed Bandit",
"Liberation of Undermine",
"enUS",
},
[227929] = {
"Princeguard Demolisher",
"Liberation of Undermine",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[155812] = {
"Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[129369] = {
"Irontide Raider",
"Siege of Boralus",
"enUS",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[229435] = {
"Gallagio Cocktail",
"Liberation of Undermine",
"enUS",
},
[228015] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[229366] = {
"Stagehand",
"Liberation of Undermine",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[227955] = {
"Darkfuse Skyfire",
"Liberation of Undermine",
"enUS",
},
[236823] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[229365] = {
"Imperious Mouthpiece",
"Liberation of Undermine",
"enUS",
},
[238068] = {
"Geargrinder Rager",
"Liberation of Undermine",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[225804] = {
"Geargrinder Biker",
"Liberation of Undermine",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[229250] = {
"Venture Co. Contractor",
"Operation: Floodgate",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
"enUS",
},
[99358] = {
"Rotheart Dryad",
"Darkheart Thicket",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[216328] = {
"Unstable Test Subject",
"City of Threads",
"enUS",
},
[175517] = {
"Symbiotic Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[229363] = {
"Imperious Soundwave",
"Liberation of Undermine",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[80816] = {
"Ahri'ok Dugru",
"Iron Docks",
},
[230316] = {
"Mk II Electro Shocker",
"Liberation of Undermine",
"enUS",
},
[233956] = {
"Wild Thunderbolt",
"Liberation of Undermine",
"enUS",
},
[233955] = {
"Charred Fanatic",
"Liberation of Undermine",
"enUS",
},
[216658] = {
"Izo, the Grand Splicer",
"City of Threads",
"enUS",
},
[59873] = {
"Corrupt Living Water",
"Temple of the Jade Serpent",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
},
[180433] = {
"Wandering Pulsar",
"Tazavesh, the Veiled Market",
},
[131823] = {
"Sister Malady",
"UNKNOWN",
"enUS",
},
[212786] = {
"Voidrider",
"The Rookery",
"enUS",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
},
[221103] = {
"Hulking Warshell",
"City of Threads",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[173729] = {
"Manifestation of Pride",
"Halls of Atonement",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
},
[129372] = {
"Blacktar Bomber",
"Siege of Boralus",
"enUS",
},
[164707] = {
"Congealed Slime",
"Plaguefall",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[151659] = {
"Rocket Tonk",
"Operation: Mechagon",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[135245] = {
"Bilge Rat Demolisher",
"Siege of Boralus",
"enUS",
},
[115640] = {
"Fuming Imp",
"Faronaar",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[201155] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
},
[220976] = {
"Hollows Guard",
"Khaz Algar",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[229513] = {
"Darkfuse Stunner",
"Liberation of Undermine",
"enUS",
},
[45704] = {
"Lurking Tempest",
"The Vortex Pinnacle",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[83894] = {
"Dulhu",
"The Everbloom",
"enUS",
},
[211261] = {
"Ascendant Vis'coxria",
"The Dawnbreaker",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[115020] = {
"Arcanid",
"Return to Karazhan",
},
[169924] = {
"Veteran Stoneguard",
"Castle Nathria",
},
[206230] = {
"Infinite Diversionist",
"Dawn of the Infinite",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[220978] = {
"Skeins Guard",
"Khaz Algar",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
"enUS",
},
[214419] = {
"Void Cursed Crusher",
"The Rookery",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[155824] = {
"Lumbering Creation",
"Torghast, Tower of the Damned",
},
[150143] = {
"Scrapbone Grinder",
"Operation: Mechagon",
"enUS",
},
[230028] = {
"Darkfuse Wretch",
"Liberation of Undermine",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[99891] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[130909] = {
"Fetid Maggot",
"The Underrot",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[176551] = {
"Vault Purifier",
"Tazavesh, the Veiled Market",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[165805] = {
"Shade of Kael'thas",
"Castle Nathria",
},
[214421] = {
"Coalescing Void Diffuser",
"The Rookery",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[208241] = {
"Ankle Biter",
"The Dread Pit",
"enUS",
},
[223541] = {
"Stolen Loader",
"Excavation Site 9",
"enUS",
},
[199325] = {
"Nokhud Stormcaller",
"The Nokhud Offensive",
},
[238496] = {
"Slots Patron",
"Liberation of Undermine",
"enUS",
},
[220988] = {
"Skeins Sentry",
"Khaz Algar",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[190370] = {
"Squallbringer Cyraz",
"Halls of Infusion",
"enUS",
},
[168109] = {
"Empowered Mawsworn Ritualist",
"Torghast, Tower of the Damned",
},
[98538] = {
"Lady Velandras Ravencrest",
"Black Rook Hold",
"enUS",
},
[130400] = {
"Irontide Crusher",
"Freehold",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[214443] = {
"Crystal Shard",
"The Stonevault",
"enUS",
},
[75899] = {
"Possessed Soul",
"Shadowmoon Burial Grounds",
},
[205212] = {
"Infinite Keeper",
"Dawn of the Infinite",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[198868] = {
"Primalist Voltweaver",
"Vault of the Incarnates",
"enUS",
},
[194487] = {
"Vile Rothexer",
"Brackenhide Hollow",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[77700] = {
"Shadowmoon Exhumer",
"Shadowmoon Burial Grounds",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[203951] = {
"Kobold Skullface",
"The Waterworks",
"enUS",
},
[236942] = {
"The Underpin",
"Sidestreet Sluice",
"enUS",
},
[215755] = {
"Ascended Overseer",
"Khaz Algar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[155830] = {
"Mawsworn Disciple",
"Torghast, Tower of the Damned",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[173714] = {
"Mistveil Nightblossom",
"Mists of Tirna Scithe",
"enUS",
},
[234640] = {
"Globikus",
"Liberation of Undermine",
"enUS",
},
[198577] = {
"Unstable Flame",
"Vault of the Incarnates",
"enUS",
},
[75652] = {
"Void Spawn",
"Shadowmoon Burial Grounds",
},
[214441] = {
"Scorched Treant",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[155831] = {
"Mawsworn Soulbinder",
"Torghast, Tower of the Damned",
},
[228514] = {
"Pit Mechanic",
"Liberation of Undermine",
"enUS",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[200943] = {
"Electrified Colossal Stormfiend",
"Vault of the Incarnates",
},
[189816] = {
"Dathea Stormlash",
"Vault of the Incarnates",
"enUS",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[192934] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[229281] = {
"Charred Fanatic",
"Liberation of Undermine",
"enUS",
},
[168882] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[197509] = {
"Primal Thundercloud",
"Ruby Life Pools",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[207468] = {
"Gnarled Reviver",
"Fungal Folly",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[154758] = {
"Toxic Monstrosity",
"Operation: Mechagon",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[83578] = {
"Ogron Laborer",
"Iron Docks",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[187771] = {
"Kadros Icewrath",
"Vault of the Incarnates",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[150292] = {
"Mechagon Cavalry",
"Operation: Mechagon",
"enUS",
},
[226200] = {
"Chamber Acolyte",
"Nerub-ar Palace",
"enUS",
},
[168717] = {
"Forsworn Justicar",
"Spires of Ascension",
},
[234900] = {
"Underpin's Adoring Fan",
"Sidestreet Sluice",
"enUS",
},
[196263] = {
"Nokhud Neophyte",
"The Nokhud Offensive",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
"enUS",
},
[197799] = {
"Quarry Infuser",
"Vault of the Incarnates",
"enUS",
},
[114783] = {
"Reformed Maiden",
"Return to Karazhan",
},
[198311] = {
"Flamewrought Eradicator",
"Vault of the Incarnates",
"enUS",
},
[229272] = {
"Darkfuse Machinist",
"Liberation of Undermine",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[157634] = {
"Flameforge Enforcer",
"Torghast, Tower of the Damned",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[232599] = {
"Reel Assistant",
"Liberation of Undermine",
"enUS",
},
[234902] = {
"Underpin's Explosive Ally",
"Sidestreet Sluice",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[233623] = {
"Pyrotechnics",
"Liberation of Undermine",
"enUS",
},
[155221] = {
"Faeleaf Tender",
"Torghast, Tower of the Damned",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[234903] = {
"Pea-brained Hauler",
"Earthcrawl Mines",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[97720] = {
"Blightshard Skitter",
"Neltharion's Lair",
},
[174773] = {
"Spiteful Shade",
"Algeth'ar Academy",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[165762] = {
"Soul Infuser",
"Castle Nathria",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[168156] = {
"Remornia",
"Castle Nathria",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[230299] = {
"Darkfuse Crossfire",
"Liberation of Undermine",
"enUS",
},
[234393] = {
"Void Aberration",
"Excavation Site 9",
"enUS",
},
[232602] = {
"Subwoofer",
"Liberation of Undermine",
"enUS",
},
[234905] = {
"Aggressively Lost Hobgoblin",
"Sidestreet Sluice",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[199595] = {
"Nokhud Defender",
"The Nokhud Offensive",
},
[157571] = {
"Mawsworn Flametender",
"Torghast, Tower of the Damned",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[211291] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[194990] = {
"Stormseeker Acolyte",
"Vault of the Incarnates",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
"enUS",
},
[198502] = {
"Council Stormcaller",
"Vault of the Incarnates",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[207454] = {
"Fungal Gutter",
"Fungal Folly",
"enUS",
},
[92538] = {
"Tarspitter Grub",
"Neltharion's Lair",
"enUS",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[235670] = {
"0.H-N.0",
"Sidestreet Sluice",
"enUS",
},
[45917] = {
"Cloud Prince",
"The Vortex Pinnacle",
"enUS",
},
[174843] = {
"Stoneborn Maitre D'",
"Castle Nathria",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
},
[114796] = {
"Wholesome Hostess",
"Return to Karazhan",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[198308] = {
"Frostwrought Dominator",
"Vault of the Incarnates",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[163520] = {
"Forsworn Squad-Leader",
"Spires of Ascension",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[229270] = {
"Darkfuse Destructionist",
"Liberation of Undermine",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[175992] = {
"Dutiful Attendant",
"Castle Nathria",
},
[86526] = {
"Grom'kar Chainmaster",
"Iron Docks",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[99192] = {
"Shade of Xavius",
"Darkheart Thicket",
"enUS",
},
[219046] = {
"Voracious Worm",
"Nerub-ar Palace",
"enUS",
},
[229537] = {
"Void Emissary",
"Mists of Tirna Scithe",
"enUS",
},
[115486] = {
"Erudite Slayer",
"Return to Karazhan",
},
[238237] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[224164] = {
"Slots Patron",
"Liberation of Undermine",
"enUS",
},
[234655] = {
"Globlin",
"Liberation of Undermine",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[229282] = {
"Wild Thunderbolt",
"Liberation of Undermine",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[168384] = {
"Flesh Construct",
"The Necrotic Wake",
},
[197298] = {
"Nascent Proto-Dragon",
"Vault of the Incarnates",
"enUS",
},
[154020] = {
"Prisonbreak Cursewalker",
"Torghast, Tower of the Damned",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[189878] = {
"Nathrezim Infiltrator",
"Operation: Mechagon",
},
[183425] = {
"Wholesome Host",
"Return to Karazhan",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[81603] = {
"Champion Druna",
"Iron Docks",
},
[176573] = {
"Mawsworn Woebringer",
"Torghast, Tower of the Damned",
},
[221863] = {
"Summoned Acolyte",
"Nerub-ar Palace",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
},
[175550] = {
"Volatile Faerie",
"9.0 Bastion Arena - Path of Ascension",
},
[163524] = {
"Kyrian Dark-Praetor",
"Spires of Ascension",
},
[229284] = {
"Guk Boomdog",
"Liberation of Undermine",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
"enUS",
},
[98810] = {
"Wrathguard Bladelord",
"Black Rook Hold",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[176575] = {
"Mawsworn Soulwarden",
"Torghast, Tower of the Damned",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[168658] = {
"Forsworn Devastator",
"Spires of Ascension",
},
[97068] = {
"Storm Drake",
"Halls of Valor",
"enUS",
},
[83761] = {
"Ogron Laborer",
"Iron Docks",
},
[220986] = {
"Hollows Sentry",
"Khaz Algar",
},
[229286] = {
"Shifty Scalper",
"Liberation of Undermine",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[115757] = {
"Wrathguard Flamebringer",
"Return to Karazhan",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[197671] = {
"Volatile Infuser",
"Vault of the Incarnates",
"enUS",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
"enUS",
},
[209090] = {
"Tindral Sageswift",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[198326] = {
"Stormwrought Despoiler",
"Vault of the Incarnates",
},
[229287] = {
"Professor Boomspark",
"Liberation of Undermine",
"enUS",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104251] = {
"Duskwatch Sentry",
"Court of Stars",
},
[188244] = {
"Primal Juggernaut",
"Ruby Life Pools",
"enUS",
},
[212400] = {
"Void-Touched Elemental",
"The Stonevault",
"enUS",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[229288] = {
"King Flamespite",
"Liberation of Undermine",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[102095] = {
"Risen Lancer",
"Black Rook Hold",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[230312] = {
"Volunteer Rocketeer",
"Liberation of Undermine",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[156212] = {
"Coldheart Agent",
"Torghast, Tower of the Damned",
},
[231910] = {
"Masked Freelancer",
"Sidestreet Sluice",
"enUS",
},
[128551] = {
"Irontide Mastiff",
"Freehold",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[207796] = {
"Burning Colossus",
"Amirdrassil, the Dream's Hope",
"enUS",
},
[169159] = {
"Unstable Canister",
"Plaguefall",
},
[234919] = {
"Gold Elemental",
"Sidestreet Sluice",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
"enUS",
},
[167113] = {
"Spinemaw Acidgullet",
"Mists of Tirna Scithe",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[212739] = {
"Radiating Voidstone",
"The Rookery",
"enUS",
},
[223150] = {
"Ascended Voidspeaker",
"Nerub-ar Palace",
"enUS",
},
[183033] = {
"Grim Reflection",
"Sepulcher of the First Ones",
},
[156226] = {
"Coldheart Binder",
"Torghast, Tower of the Damned",
},
[82590] = {
"Grimrail Scout",
"Grimrail Depot",
},
[168153] = {
"Plagueroc",
"Plaguefall",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
},
[164926] = {
"Drust Boughbreaker",
"Mists of Tirna Scithe",
"enUS",
},
[99359] = {
"Rotheart Keeper",
"Darkheart Thicket",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
},
[189227] = {
"Qalashi Hunter",
"Neltharus",
"enUS",
},
[115407] = {
"Rook",
"Return to Karazhan",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[224175] = {
"Princeguard Enforcer",
"Liberation of Undermine",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[212405] = {
"Aspiring Forgehand",
"The Stonevault",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[225822] = {
"Vexie Fullthrottle",
"Liberation of Undermine",
"enUS",
},
[167116] = {
"Spinemaw Reaver",
"Mists of Tirna Scithe",
"enUS",
},
[155090] = {
"Anodized Coilbearer",
"Operation: Mechagon",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[229162] = {
"Darkfuse Houndmaster",
"Liberation of Undermine",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[168396] = {
"Plaguebelcher",
"Plaguefall",
},
[102781] = {
"Fel Bat Pup",
"Black Rook Hold",
"enUS",
},
[229224] = {
"Darkfuse Scrapper",
"Liberation of Undermine",
"enUS",
},
[229220] = {
"Junkyard Shredder",
"Liberation of Undermine",
"enUS",
},
[229219] = {
"Junkyard Hobgoblin",
"Liberation of Undermine",
"enUS",
},
[229222] = {
"Darkfuse Melter",
"Liberation of Undermine",
"enUS",
},
[228053] = {
"Goblin Sapper Bot",
"Liberation of Undermine",
"enUS",
},
[227932] = {
"Volatile Slimeling",
"Liberation of Undermine",
"enUS",
},
[192767] = {
"Primal Icebulk",
"Vault of the Incarnates",
"enUS",
},
[232228] = {
"Waterworks Bottomfeeder",
"Operation: Floodgate",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
},
["spell_animation_list"] = {
[203782] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = true,
["scaleY"] = -1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[107270] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 200,
},
},
[7268] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[196278] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.05,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[189112] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.34999999403954,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["duration"] = 0.40000000596046,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.34999999403954,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1.05,
["amplitude"] = 1.8799999952316,
["fade_in"] = 0,
["duration"] = 0.40000000596046,
["cooldown"] = 0.5,
["frequency"] = 51.979999542236,
},
},
[2643] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[188443] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[162243] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 1,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[199547] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.59999847412109,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.039999961853,
["scale_upY"] = 1.039999961853,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[228354] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[31661] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[117418] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.1499999910593,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.1499999910593,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1799999922514,
["cooldown"] = 0.5,
["frequency"] = 116.00999450684,
},
},
[17364] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.02,
["scale_upY"] = 1.02,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.10000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["6"] = {
["scaleY"] = -1,
["fade_out"] = 0.11,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[222024] = {
["1"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["3"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
["5"] = {
["enabled"] = true,
["scale_upX"] = 1,
["duration"] = 0.050000000745058,
["scale_downX"] = 1,
["animation_type"] = "scale",
["critical_scale"] = 1,
["scale_upY"] = 1.1000000238419,
["cooldown"] = 0.75,
["scale_downY"] = 0.89999997615814,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
["6"] = {
["enabled"] = true,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["critical_scale"] = 1,
["amplitude"] = 1.7999999523163,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 11.14999961853,
},
},
[11366] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["6"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 10,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[155166] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[46968] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 0.95,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.1,
["frequency"] = 120,
},
},
[257045] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.75,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[108853] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[49998] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["enabled"] = true,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.019999999552965,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["enabled"] = true,
["amplitude"] = 1.0330086946487,
["fade_in"] = 0.01,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[204157] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 6,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[31935] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["6"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = true,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[53595] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.03,
["scale_upY"] = 1.03,
["scale_downX"] = 0.97,
["scale_downY"] = 0.97,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["critical_scale"] = 1,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.1,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[264178] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.08,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 2.5,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[148135] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.75,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 60.874122619629,
},
},
[324540] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.089999996125698,
["absolute_sineX"] = false,
["scaleY"] = 2,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 0.89999997615814,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.1499999910593,
["cooldown"] = 0.5,
["frequency"] = 25.650197982788,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900558,
["scale_downY"] = 0.96999996900558,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[53351] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["6"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[8042] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.05,
["scale_upY"] = 1.05,
["scale_downX"] = 0.95,
["scale_downY"] = 0.95,
["duration"] = 0.060000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["6"] = {
["scaleY"] = -1,
["fade_out"] = 0.05,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 7.5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.06,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[206930] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0199999809265,
["scale_upY"] = 1,
["scale_downX"] = 0.97999995946884,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
["6"] = {
["scaleY"] = -1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0,
["enabled"] = true,
["amplitude"] = 5.6999998092651,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.050000000745058,
["cooldown"] = 0.5,
["frequency"] = 3.0999999046326,
},
},
[275779] = {
["1"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["3"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["scaleY"] = -1,
["fade_out"] = 0.02,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 1,
["fade_in"] = 0.01,
["duration"] = 0.12,
["cooldown"] = 0.5,
["frequency"] = 25,
},
},
[185763] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.25999999046326,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 3.6583230495453,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.15999999642372,
["cooldown"] = 0.5,
["frequency"] = 23.525663375854,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[100784] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 3,
["fade_in"] = 0.01,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 1,
},
},
[196819] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1999999284744,
["scale_upY"] = 1.2999999523163,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
["6"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 5,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.21999999880791,
["cooldown"] = 0.5,
["frequency"] = 3.3099999427795,
},
},
[27285] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1,
["scale_upY"] = 1.1,
["scale_downX"] = 0.9,
["scale_downY"] = 0.9,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[199804] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 0.88999938964844,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0499999523163,
["scale_upY"] = 1.0499999523163,
["scale_downX"] = 1,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.09,
["absolute_sineX"] = false,
["scaleY"] = 0.88999938964844,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["critical_scale"] = 1.05,
["amplitude"] = 1.1699999570847,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.19999998807907,
["cooldown"] = 0.5,
["frequency"] = 23.525676727295,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0499999523163,
["scale_upY"] = 1.0499999523163,
["scale_downX"] = 1,
["scale_downY"] = 1,
["duration"] = 0.050000000745058,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[187708] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["3"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.45,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 200,
},
},
[52174] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.15,
["scale_upY"] = 1.15,
["scale_downX"] = 0.8,
["scale_downY"] = 0.8,
["duration"] = 0.075,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
["6"] = {
["enabled"] = true,
["fade_out"] = 0.2,
["absolute_sineX"] = false,
["scaleY"] = 1,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.15,
["critical_scale"] = 1,
["amplitude"] = 6,
["fade_in"] = 0.01,
["duration"] = 0.3,
["cooldown"] = 0.5,
["frequency"] = 50,
},
},
[185438] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.19999998807907,
["absolute_sineX"] = false,
["scaleY"] = -1,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 0.099998474121094,
["critical_scale"] = 1.05,
["amplitude"] = 6.460000038147,
["fade_in"] = 0,
["duration"] = 0.099999994039536,
["cooldown"] = 0.5,
["frequency"] = 25,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
[32645] = {
["1"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["3"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
["5"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.1000000238419,
["scale_upY"] = 1.1999999284744,
["scale_downX"] = 0.89999997615814,
["scale_downY"] = 0.89999997615814,
["duration"] = 0.04,
["cooldown"] = 0.75,
["enabled"] = true,
},
["4"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
["6"] = {
["scaleY"] = 1,
["fade_out"] = 0.1799999922514,
["absolute_sineX"] = false,
["absolute_sineY"] = true,
["animation_type"] = "frameshake",
["scaleX"] = 1,
["enabled"] = true,
["amplitude"] = 4.0999999046326,
["fade_in"] = 0.0099999997764826,
["duration"] = 0.12000000476837,
["cooldown"] = 0.5,
["frequency"] = 2.6099998950958,
},
},
[86040] = {
["1"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["3"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
["2"] = {
["scaleY"] = 1,
["fade_out"] = 0.1,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.1,
["enabled"] = true,
["amplitude"] = 2,
["fade_in"] = 0.05,
["duration"] = 0.15,
["cooldown"] = 0.25,
["frequency"] = 20,
},
},
[187874] = {
["1"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
["3"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
["2"] = {
["scaleY"] = 0.6,
["fade_out"] = 0.01,
["absolute_sineX"] = false,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.2,
["enabled"] = true,
["amplitude"] = 0.85,
["fade_in"] = 0.01,
["duration"] = 0.2,
["cooldown"] = 0,
["frequency"] = 100,
},
},
[228478] = {
["1"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["3"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["2"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["5"] = {
["enabled"] = true,
["fade_out"] = 0.099999994039536,
["absolute_sineX"] = true,
["scaleY"] = 0.79999923706055,
["absolute_sineY"] = false,
["animation_type"] = "frameshake",
["scaleX"] = 0.20000076293945,
["critical_scale"] = 1.05,
["amplitude"] = 2.5,
["fade_in"] = 0,
["duration"] = 0.099999994039535,
["cooldown"] = 0.5,
["frequency"] = 1,
},
["4"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
["6"] = {
["animation_type"] = "scale",
["scale_upX"] = 1.0299999713898,
["scale_upY"] = 1.0299999713898,
["scale_downX"] = 0.96999996900559,
["scale_downY"] = 0.96999996900559,
["duration"] = 0.05,
["cooldown"] = 0.75,
["enabled"] = true,
},
},
},
["indicator_scale"] = 0.99999994039536,
["extra_icon_timer_decimals"] = true,
["border_color"] = {
nil,
nil,
nil,
1,
},
["focus_color"] = {
nil,
nil,
nil,
0.50234389305115,
},
["indicator_anchor"] = {
["side"] = 6,
["x"] = 2,
},
["hide_name_on_game_objects"] = false,
["health_selection_overlay_alpha"] = 0,
["minor_height_scale"] = 0.99999994039536,
["extra_icon_show_enrage_border"] = {
0.85098039215686,
0,
0.074509803921569,
},
["aura_padding"] = 0,
["indicator_worldboss"] = false,
["auto_inside_raid_dungeon"] = {
["hide_enemy_player_pets"] = true,
["hide_enemy_player_totems"] = true,
},
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        --Priest\n        [\"Vampiric Touch\"] = 21,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 25,\n        \n        --Rogue\n        [\"Deathstalker's Mark\"] = 102,\n        [\"Marked for Death\"] = 101,\n        [\"Ghostly Strike\"] = 100,\n        [\"Vendetta\"] = 98,\n        [\"Shiv\"] = 97,\n        [\"Flagellation\"] = 96,\n        [\"Garrote\"] = 95,\n        [\"Rupture\"] = 94,\n        [\"Caustic Spatter\"] = 92,\n        [\"Find Weakness\"] = 93,\n        [\"Crimson Tempest\"] = 85,\n        [\"Between the Eyes\"] = 83,\n        [\"Pistol Shot\"] = 82,\n        -- [\"Se\"] =\n        [\"Serrated Bone Spike\"] = 0,\n        \n        --Druid\n        [\"Sunfire\"] = 100,\n        [\"Moonfire\"] = 99,\n        \n        --Monk\n        [\"Mark of the Crane\"] = 59,\n        \n        --Dungeon Debuffs\n        [\"Droman's Wrath\"] = 1001,\n        \n        --Dungeon Buffs\n        [\"Bolstering\"] = 2001,\n        [\"Slime Coated\"] = 2002,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1739453320,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 583,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder - Jundies",
["LastHookEdited"] = "Initialization",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 211,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Options"] = {
},
["Author"] = "�r��ne-Kel'thuzad",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Desc"] = "Adds double arrow as a target indicators option",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    -- /RELOAD AFTER IMPORTING OR CHANGING THE SCRIPT\n    -- SELECT THE INDICATOR AT THE TARGET TAB\n    \n    Plater.TargetIndicators    [\"Double Arrows\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_double_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 17,\n        height = 13,\n        x = 14,\n        y = 0,\n        blend = \"ADD\",\n        color = \"white\",\n    }    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1739453320,
["PlaterCore"] = 1,
["Name"] = "Double Arrow Target",
["Url"] = "https://wago.io/f5itAXjQq/1",
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_double_right_64",
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
["SPglowfreq"] = 0.59999990463257,
["SPglowxoff"] = 0.5,
["doNotPurge"] = {
},
["SPglowyoff"] = 0.5,
["SPglowcolor"] = {
1,
1,
0.45490199327469,
1,
},
["SPglowparticle"] = 5,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    local options1 = {\n        glowType = \"button\",\n        frequency = modTable.config.SPglowfreq\n    }\n    \n    local options2 = {\n        glowType = \"pixel\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        length = modTable.config.SPpixellength,\n        th = modTable.config.SPpixelth,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff,\n        border = modTable.config.SPpixelborder\n    }\n    \n    local options3 = {\n        glowType = \"ants\",\n        N = modTable.config.SPglowparticle,\n        frequency = modTable.config.SPglowfreq,\n        scale = modTable.config.SPantsscale,\n        xOffset = modTable.config.SPglowxoff,\n        yOffset = modTable.config.SPglowyoff\n    }\n    \n    modTable.options =\n    (modTable.config.SPglownum == 1 and options1) or (modTable.config.SPglownum == 2 and options2) or\n    (modTable.config.SPglownum == 3 and options3)\n    \n    local doNotPurgeList = {\n        [385063] = true, -- Burning Ambition, Ruby Life Pools\n        [392454] = true, -- Burning Veins, Ruby Life Pools\n        [396020] = true, -- Golden Barrier, Temple of the Jade Serpent\n        [383161] = true -- Decay Infusion, Brackenhide Hollow\n    }\n    \n    for _, id in pairs(modTable.config.doNotPurge) do\n        doNotPurgeList[tonumber(id)] = true\n    end\n    \n    modTable.doNotPurge = function(id)\n        return doNotPurgeList[id] ~= nil\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitFrame.healthBar:IsShown() then\n        return\n    end\n    \n    local buffSpecialGlow = true\n    local color = modTable.config.SPglowcolor\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers[2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers[containerID]\n        \n        for _, auraIcon in ipairs(auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge and not modTable.doNotPurge(auraIcon.SpellId)) then\n                Plater.StartGlow(auraIcon, nil, modTable.options)\n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs(unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon.canStealOrPurge and not modTable.doNotPurge(auraIcon.SpellId)) then\n                    Plater.StartGlow(auraIcon, nil, modTable.options)\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end\n            end\n        end\n    end\nend",
},
["Time"] = 1739451865,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 132096,
["Enabled"] = true,
["Revision"] = 1065,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Steal/Purge Aura Glow",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Common Options",
["Name"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "1(Button) / 2(Pixel) / 3(Ants) ",
["Min"] = 1,
["Key"] = "SPglownum",
["Value"] = 2,
["Name"] = "Glow Type",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set to negative to inverse direction of rotation",
["Min"] = -2,
["Key"] = "SPglowfreq",
["Value"] = 0.5,
["Name"] = "Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "SPglowcolor",
["Value"] = {
1,
1,
0.45490196078431,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Set glow color",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel & Ants Glow",
["Name"] = "Options for Pixel & Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Set number of lines",
["Min"] = 1,
["Key"] = "SPglowparticle",
["Value"] = 6,
["Name"] = "Number of Particles",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowxoff",
["Value"] = 1.2,
["Name"] = "X-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Offset of glow relative to region border",
["Min"] = -10,
["Key"] = "SPglowyoff",
["Value"] = 1.2,
["Name"] = "Y-Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Pixel Glow",
["Name"] = "Options for Pixel Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "SPpixelborder",
["Value"] = false,
["Name"] = "Pixel Add Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Enable to true to create border under lines",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "Set pixel line length",
["Min"] = 0.01,
["Key"] = "SPpixellength",
["Value"] = 6,
["Name"] = "Pixel Line Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Set pixel line thickness",
["Min"] = 0.01,
["Key"] = "SPpixelth",
["Value"] = 2,
["Name"] = "Pixel Line Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options for Ants Glow",
["Name"] = "Options for Ants Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 2.5,
["Desc"] = "Set ants glow scale",
["Min"] = 0.01,
["Key"] = "SPantsscale",
["Value"] = 0.8,
["Name"] = "Ants Glow Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 7,
["Key"] = "doNotPurge",
["Value"] = {
},
["Name"] = "Do Not Purge",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "List of spells you may not want to purge for whichever reason",
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --if this unit is a player, ignore\n        if (UnitPlayerControlled(unitFrame.unit)) then\n            return\n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1739451873,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 126,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color NPC",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.ttdTextFrame:SetText(\"\")\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateUnit(unitId, unitFrame.namePlateNpcId)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateUnit(unitId)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    -- Credit to Aethys for the algorithm: https://github.com/herotc/hero-lib\n    \n    --general settings:\n    envTable.onlyShowOnBoss = false\n    envTable.includeShields = true\n    \n    --custom health% for specific units:\n    envTable.customPercent = {\n        --Dawnbreaker \n        [213937] = 59.5, --Rasha'nan\n        --Darkflame Cleft\n        [208747] = 55, --The Darkness\n        -- City of Threads\n        [219984] = 50, -- Xeph'itik\n        ----- Shadowlands\n        -- Sanguine Depths\n        [162099] = 50, -- General Kaal\n        --- De Other Side\n        [166608] = 10, --Mueh'Zala\n        --- Mists of Tirna Scithe\n        [164929] = 20, -- Tirnenn Villager\n        [164804] = 20, -- Droman Oulfarran\n        ----- Draenor\n        --- Shadowmoon Burial Ground\n        [76057] = 20.5, -- Carrion Worm\n        ----- Legion\n        -- Halls of Valor\n        [95674] = 60, -- Fenryr P1\n        [95676] = 80, -- Odyn\n        [94960] = 10, -- Hymdall\n        -- Court of Stars\n        [104215] = 20, -- Patrol Captain Gerdo\n        ----- Mists of Pandaria\n        -- Temple of the Jade Serpent\n        [56732] = 30, -- Liu Flameheart,\n        ----- Dragonflight\n        -- Brackenhide Hollow\n        [186121] = 4, -- Decatriarch Wratheye\n        -- Uldaman\n        [184580] = 10, -- Olaf\n        [184581] = 10, -- Baelog\n        [184582] = 10, -- Eric \"The Swift\"\n        [184125] = 1, -- Chrono-Lord Deios,\n        -- Doti lower\n        [198933] = 90, -- Iridikron, technically 85 but you care only until 90\n        [207638] = 80, -- Blight of Galakrond\n        [201792] = 60, -- Ahnzon\n        -----Cata\n        --Grim Batol \n        [40320] = 50.0, -- Valiona\n    }\n    \n    -- text settings:\n    local textColor = \"white\"\n    local textSize = 12\n    local textFont = \"2002\"\n    local textOutline = \"NONE\" --\"OUTLINE\"\n    --local textShadowColor = \"green\"\n    \n    -- positioning\n    local anchor = {\n        side = 3, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 2, --x offset\n        y = -3, --y offset\n    }\n    \n    -- TTD calculation config\n    envTable.config = {\n        historyCount = 100,\n        historyTime = 10,\n        duration = 600,\n        pctHP = 0,\n    }\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    --frames:\n    \n    --create the text frame that will show the TTD\n    if not unitFrame.healthBar.ttdTextFrame then\n        envTable.ttdTextFrame = Plater:CreateLabel(unitFrame.healthBar, \"\", textSize, textColor)\n        unitFrame.healthBar.ttdTextFrame = envTable.ttdTextFrame\n        envTable.ttdTextFrame:SetText(\"\")\n    end\n    \n    Plater.SetAnchor(unitFrame.healthBar.ttdTextFrame, anchor)\n    \n    if textFont then\n        DetailsFramework:SetFontFace(unitFrame.healthBar.ttdTextFrame, textFont)\n    end\n    if textSize then\n        DetailsFramework:SetFontSize(unitFrame.healthBar.ttdTextFrame, textSize)\n    end\n    if textOutline then\n        DetailsFramework:SetFontOutline(unitFrame.healthBar.ttdTextFrame, textOutline)\n    end\n    if textColor then\n        local r, g, b, a = DetailsFramework:ParseColors(textColor)\n        unitFrame.healthBar.ttdTextFrame:SetTextColor(r, g, b, a)\n    end\n    if textShadowColor then\n        local r, g, b, a = DetailsFramework:ParseColors(textShadowColor)\n        DetailsFramework:SetFontShadow(unitFrame.healthBar.ttdTextFrame, r, g, b, a, 1, -1)\n    end\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    --functions\n    \n    envTable.cache = {}\n    envTable.units = {}\n    \n    function envTable.TTDRefresh(unit)\n        local currentTime = GetTime()\n        local historyCount = envTable.config.historyCount\n        local historyTime = envTable.config.historyTime\n        \n        if not UnitExists(unit) then\n            return\n        end\n        \n        local GUID = UnitGUID(unit)\n        \n        if not GUID then\n            return\n        end\n        \n        local health = UnitHealth(unit)\n        local maxHealth = UnitHealthMax(unit)\n        local absorbsPercent = 0\n        \n        if UnitGetTotalAbsorbs and envTable.includeShields then\n            local absorbs = UnitGetTotalAbsorbs(unit)\n            health = health + absorbs\n            absorbsPercent = absorbs ~= -1 and maxHealth ~= -1 and absorbs / maxHealth * 100 or 0\n        end\n        \n        local healthPercentage = health ~= -1 and maxHealth ~= -1 and health / maxHealth * 100\n        -- Check if it's a valid unit\n        if UnitCanAttack(\"player\", unit) and healthPercentage < (100 + absorbsPercent) then\n            local unitTable = envTable.units[GUID]\n            -- Check if we have seen one time this unit, if we don't then initialize it.\n            if not unitTable or healthPercentage > unitTable[1][1][2] then\n                unitTable = { {}, currentTime }\n                envTable.units[GUID] = unitTable\n            end\n            \n            local values = unitTable[1]\n            local time = currentTime - unitTable[2]\n            -- Check if the % HP changed since the last check (or if there were none)\n            if #values == 0 or healthPercentage ~= values[1][2] then\n                local value\n                local lastIndex = #envTable.cache\n                -- Check if we can re-use a table from the cache -- Buds: i have doubt on the value of reusing table, with the high cost of tinsert on 1st index\n                if lastIndex == 0 then\n                    value = { time, healthPercentage }\n                else\n                    value = envTable.cache[lastIndex]\n                    envTable.cache[lastIndex] = nil\n                    value[1] = time\n                    value[2] = healthPercentage\n                end\n                table.insert(values, 1, value)\n                local n = #values\n                -- Delete values that are no longer valid\n                while (n > historyCount) or (time - values[n][1] > historyTime) do\n                    envTable.cache[#envTable.cache + 1] = values[n]\n                    values[n] = nil\n                    n = n - 1\n                end\n            end\n        end\n    end\n    \n    function envTable.TimeToX(guid, percentage, minSamples)\n        local seconds = 8888\n        local unitTable = envTable.units[guid]\n        -- Simple linear regression\n        -- ( E(x^2)  E(x) )  ( a )  ( E(xy) )\n        -- ( E(x)     n  )  ( b ) = ( E(y)  )\n        -- Format of the above: ( 2x2 Matrix ) * ( 2x1 Vector ) = ( 2x1 Vector )\n        -- Solve to find a and b, satisfying y = a + bx\n        -- Matrix arithmetic has been expanded and solved to make the following operation as fast as possible\n        if unitTable then\n            local values = unitTable[1]\n            local n = #values\n            if n > minSamples then\n                local a, b = 0, 0\n                local Ex2, Ex, Exy, Ey = 0, 0, 0, 0\n                \n                local value, x, y\n                for i = 1, n do\n                    value = values[i]\n                    x, y = value[1], value[2]\n                    \n                    Ex2 = Ex2 + x * x\n                    Ex = Ex + x\n                    Exy = Exy + x * y\n                    Ey = Ey + y\n                end\n                -- invariant to find matrix inverse\n                local invariant = 1 / (Ex2 * n - Ex * Ex)\n                -- Solve for a and b\n                a = (-Ex * Exy * invariant) + (Ex2 * Ey * invariant)\n                b = (n * Exy * invariant) - (Ex * Ey * invariant)\n                if b ~= 0 then\n                    -- Use best fit line to calculate estimated time to reach target health\n                    seconds = (percentage - a) / b\n                    -- Subtract current time to obtain \"time remaining\"\n                    seconds = math.min(7777, seconds - (GetTime() - unitTable[2]))\n                    if seconds < 0 then\n                        seconds = 9999\n                    end\n                end\n            end\n        end\n        \n        return seconds\n    end\n    \n    function envTable.updateUnit(unitId, npcId)\n        if UnitExists(unitId) and (not envTable.onlyShowOnBoss or UnitLevel(unitId) == -1) then\n            envTable.TTDRefresh(unitId)\n            local GUID = UnitGUID(unitId)\n            local customPercent = envTable.customPercent[npcId] or nil\n            envTable.TTD = envTable.TimeToX(GUID, customPercent or envTable.config.pctHP, 3)\n            if envTable.TTD < 7777 and envTable.TTD < envTable.config.duration then\n                envTable.show = true\n                envTable.updateText()\n            end\n        end\n    end\n    \n    function envTable.updateText()\n        ---@type string|number\n        local ret = \"\"\n        \n        local number = envTable.TTD\n        \n        if not number or number == 0 or not envTable.show then\n            unitFrame.healthBar.ttdTextFrame:SetText(\"\")\n            return\n        end\n        \n        local H = floor(number / 3600)\n        local M = floor((number - (floor(number / 3600) * 3600)) / 60)\n        local S = number - math.floor(number / 60) * 60\n        if H > 0 then\n            ret = (\"%02d:%02d:%02d\"):format(H, M, S)\n        elseif M > 0 then\n            ret = (\"%02d:%02d\"):format(M, S)\n        else\n            ret = floor(S)\n        end\n        \n        unitFrame.healthBar.ttdTextFrame:SetText(ret)\n    end\nend",
},
["Time"] = 1739453229,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 2125377,
["Enabled"] = false,
["Revision"] = 238,
["semver"] = "",
["Author"] = "Viash-Thrall",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Time to Die (TTD)",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    function Plater.UpdateLifePercentText(healthBar, unitId, showHealthAmount, showPercentAmount, showDecimals) -- ~health\n        --get the cached health amount for performance\n        local currentHealth, maxHealth = healthBar.CurrentHealth, healthBar.CurrentHealthMax\n        \n        if showHealthAmount and showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. \" 100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth) .. format(\" %d%%\", percent))\n            end\n        elseif showHealthAmount then\n            healthBar.lifePercent:SetText(Plater.FormatNumber(currentHealth))\n        elseif showPercentAmount then\n            local percent = maxHealth == 0 and 100 or (currentHealth / maxHealth * 100)\n            \n            if showDecimals then\n                if percent < 10 then\n                    healthBar.lifePercent:SetText(format(\"%.2f%%\", percent))\n                elseif percent < 99.9 then\n                    healthBar.lifePercent:SetText(format(\"%.1f%%\", percent))\n                else\n                    healthBar.lifePercent:SetText(\"100%\")\n                end\n            else\n                healthBar.lifePercent:SetText(format(\"%d%%\", percent))\n            end\n        else\n            healthBar.lifePercent:SetText(\"\")\n        end\n    end\nend\n\n\n\n\n",
},
["Time"] = 1739451873,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 237031,
["Enabled"] = true,
["Revision"] = 180,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Removes parenthesis when show health amount and percent are both enabled.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Health Formatting",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.addHook(unitFrame)\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.healthBar.customShieldHookNeedsUpdate = true\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local hb = unitFrame.healthBar\n    if hb.customShieldHookNeedsUpdate and hb.displayedUnit then\n        hb:UNIT_MAXHEALTH()\n        hb.customShieldHookNeedsUpdate = false\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "function (modTable)\n    modTable.LibSharedMedia = LibStub:GetLibrary (\"LibSharedMedia-3.0\")\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    --Disable for classic\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        function envTable.addHook(unitFrame) end\n        return\n    end\n    \n    --settings: (changing this requires a /reload)\n    local shieldTexture = \"\"\n    --local shieldTexture = \"Details Flat\"\n    local useHalfBar = false --use a \"half bar\" overlay if the health+absorb is > 100% of the health\n    \n    --init\n    local hb = unitFrame.healthBar\n    if shieldTexture and shieldTexture ~= \"\" then\n        local texture = modTable.LibSharedMedia:Fetch(\"statusbar\", shieldTexture)\n        hb.Settings.ShieldIndicatorTexture = texture or [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture(hb.Settings.ShieldIndicatorTexture, true, true)\n    else\n        hb.Settings.ShieldIndicatorTexture = [[Interface\\RaidFrame\\Shield-Fill]]\n        hb.shieldAbsorbIndicator:SetTexture(hb.Settings.ShieldIndicatorTexture, true, true)\n    end\n    \n    -- ensure settings are up to date... workardound till fix in Plater core.\n    unitFrame.healthBar.Settings.ShowShields = Plater.db.profile.show_shield_prediction\n    \n    -- overwrite UpdateHealPrediction on the healthBar\n    function envTable.addHook(unitFrame)\n        if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n            return\n        end\n        local hb = unitFrame.healthBar\n        \n        if hb.isCustomShieldHook then\n            return\n        end\n        --health and absorbs prediction from Plater core, reworked to integrate shields into the health bar\n        hb.UpdateHealPrediction = function(self)\n            local currentHealth = self.currentHealth\n            local currentHealthMax = self.currentHealthMax\n            local healthPercent = currentHealth / currentHealthMax\n            \n            if not currentHealthMax or currentHealthMax <= 0 then\n                return\n            end\n            \n            --order is: the health of the unit > damage absorb > heal absorb > incoming heal\n            local width = self:GetWidth()\n            \n            hb.shieldAbsorbIndicator:Hide()\n            hb.shieldAbsorbGlow:Hide()\n            \n            if not self.displayedUnit then\n                return\n            end\n            \n            if self.Settings.ShowHealingPrediction then\n                --incoming heal on the unit from all sources\n                local unitHealIncoming = UnitGetIncomingHeals(self.displayedUnit) or 0\n                --heal absorbs\n                local unitHealAbsorb = UnitGetTotalHealAbsorbs(self.displayedUnit) or 0\n                \n                if unitHealIncoming > 0 then\n                    --calculate what is the percent of health incoming based on the max health the player has\n                    local incomingPercent = unitHealIncoming / currentHealthMax\n                    self.incomingHealIndicator:Show()\n                    self.incomingHealIndicator:SetWidth(\n                        max(1, min(width * incomingPercent, abs(healthPercent - 1) * width))\n                    )\n                    self.incomingHealIndicator:SetPoint(\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                    self.incomingHealIndicator:SetPoint(\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                else\n                    self.incomingHealIndicator:Hide()\n                end\n                \n                if unitHealAbsorb > 0 then\n                    local healAbsorbPercent = unitHealAbsorb / currentHealthMax\n                    self.healAbsorbIndicator:Show()\n                    self.healAbsorbIndicator:SetWidth(\n                        max(1, min(width * healAbsorbPercent, abs(healthPercent - 1) * width))\n                    )\n                    self.healAbsorbIndicator:SetPoint(\"topleft\", self, \"topleft\", width * healthPercent, 0)\n                    self.healAbsorbIndicator:SetPoint(\"bottomleft\", self, \"bottomleft\", width * healthPercent, 0)\n                else\n                    self.healAbsorbIndicator:Hide()\n                end\n            end\n            \n            if self.Settings.ShowShields then\n                --damage absorbs\n                local unitDamageAbsorb = UnitGetTotalAbsorbs(self.displayedUnit) or 0\n                self.currentAbsorb = unitDamageAbsorb\n                \n                if unitDamageAbsorb > 0 then\n                    local curHealthTotal = unitDamageAbsorb + currentHealth\n                    local damageAbsorbPercent\n                    local healthPercentAbsorb\n                    local isHalfBar = false\n                    if curHealthTotal > currentHealthMax then\n                        if useHalfBar then\n                            damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                            if damageAbsorbPercent > 1 then\n                                damageAbsorbPercent = 1 -- just limit it to the healthbar width...\n                            end\n                            healthPercentAbsorb = 1 - damageAbsorbPercent\n                            self:SetMinMaxValues(0, currentHealthMax)\n                            \n                            isHalfBar = true\n                        else\n                            damageAbsorbPercent = unitDamageAbsorb / curHealthTotal\n                            healthPercentAbsorb = currentHealth / curHealthTotal\n                            self:SetMinMaxValues(0, curHealthTotal)\n                        end\n                    else\n                        damageAbsorbPercent = unitDamageAbsorb / currentHealthMax\n                        healthPercentAbsorb = currentHealth / currentHealthMax\n                        self:SetMinMaxValues(0, currentHealthMax)\n                    end\n                    --print(healthPercentAbsorb, currentHealth, unitDamageAbsorb, damageAbsorbPercent)\n                    \n                    self.shieldAbsorbIndicator:SetWidth(width * damageAbsorbPercent)\n                    self.shieldAbsorbIndicator:SetPoint(\n                        \"topleft\",\n                        self,\n                        \"topleft\",\n                        width * healthPercentAbsorb,\n                        (isHalfBar and (-self:GetHeight() / 2)) or 0\n                    )\n                    self.shieldAbsorbIndicator:SetPoint(\n                        \"bottomleft\",\n                        self,\n                        \"bottomleft\",\n                        width * healthPercentAbsorb,\n                        0\n                    )\n                    \n                    self.shieldAbsorbIndicator:Show()\n                else\n                    self.shieldAbsorbIndicator:Hide()\n                end\n            end\n            \n            hb.isCustomShieldHook = true\n        end\n        \n        if hb.displayedUnit then\n            hb.shieldAbsorbIndicator:Hide()\n            hb.shieldAbsorbGlow:Hide()\n            hb:UNIT_MAXHEALTH()\n        else\n            hb.customShieldHookNeedsUpdate = true\n        end\n    end\nend",
},
["Time"] = 1737159141,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135940,
["Enabled"] = true,
["Revision"] = 1280,
["semver"] = "",
["Author"] = "Elaiana-Proudmoore",
["Desc"] = "Adds absorbs to the health bar as full health value.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Absorb Shields in Healthbar",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 5,
["Key"] = "",
["Value"] = "Options For @scriptname",
["Name"] = "Options Intro",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = "",
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
["nameColor"] = {
0,
1,
0.011764707043767,
1,
},
["useNameplateColor"] = false,
["useNameColor"] = true,
["borderColor"] = {
0,
1,
0.011764707043767,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x669ff67a1d2afb0",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
["Initialization"] = "function (modTable)\n    -- Populated with root immune npcIds from MDT.\n    local immuneMap = {\n        -- not stun immune in MDT\n        [205408] = true, -- Infinite Timeslicer\n    }\n    \n    local hasMDT = false\n    \n    if MDT and MDT.dungeonEnemies then\n        hasMDT = true\n        \n        for _, dungeon in pairs(MDT.dungeonEnemies) do\n            for _, npc in pairs(dungeon) do\n                if npc.characteristics and npc.characteristics and not npc.characteristics[\"Stun\"] then\n                    immuneMap[npc.id] = true\n                end\n            end\n        end\n    end\n    \n    function modTable.maybeUpdateColor(unitFrame)\n        if not hasMDT then\n            return\n        end\n        \n        if immuneMap[unitFrame.namePlateNpcId] == nil then\n            return\n        end\n        \n        if modTable.config.useNameplateColor then\n            Plater.SetNameplateColor(unitFrame, modTable.config.healthBarColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n        \n        if modTable.config.useBorderColor then\n            Plater.SetBorderColor(unitFrame, modTable.config.borderColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n        \n        if modTable.config.useNameColor then\n            Plater:SetFontColor(unitFrame.unitName, modTable.config.nameColor)\n            Plater.DenyColorChange(unitFrame, true)\n        end\n    end\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.maybeUpdateColor(unitFrame)\nend",
},
["Time"] = 1739151480,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["Enabled"] = true,
["64"] = true,
},
},
["url"] = "",
["Icon"] = 135848,
["Enabled"] = false,
["Revision"] = 622,
["semver"] = "",
["Author"] = "Aparratchic-Ragnaros",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "Initialization",
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Activate Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
0,
0.34117648005486,
1,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBorderColor",
["Value"] = false,
["Name"] = "Activate Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "borderColor",
["Value"] = {
0,
1,
0.011764707043767,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useNameColor",
["Value"] = false,
["Name"] = "Activate Name Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "nameColor",
["Value"] = {
0,
1,
0.26666668057442,
1,
},
["Name"] = "Name Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Name"] = "Freeze Immune NPC's [MDT]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#5d00ff\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1739453140,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/ZqU9hBu43/3",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 143,
["semver"] = "1.0.2",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 97,
["version"] = 3,
["PlaterCore"] = 1,
["Name"] = "Pet Threat Highlighter",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if unitFrame.healthBar.questProgressTextFrame then\n        unitFrame.healthBar.questProgressTextFrame:SetText(\"\")\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateText(unitFrame)\nend",
["Constructor"] = "function(self, unitId, unitFrame, envTable)\n    local textColor = \"orange\"\n    local textSize = 12\n    \n    -- positioning\n    local anchor = {\n        side = 2, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = -15, --x offset\n        y = 0, --y offset\n    }\n    \n    function envTable.updateText(unitFrame)\n        if not unitFrame or not unitFrame.namePlateIsQuestObjective or not unitFrame.QuestAmountCurrent then\n            if unitFrame.healthBar.questProgressTextFrame and unitFrame.healthBar.questProgressTextFrame:IsShown() then\n                unitFrame.healthBar.questProgressTextFrame:Hide()\n            end\n            \n            return\n        end\n        \n        local text = unitFrame.QuestAmountTotal and unitFrame.QuestAmountTotal - unitFrame.QuestAmountCurrent\n        or unitFrame.QuestAmountCurrent .. \"%\"\n        \n        local currentText = unitFrame.healthBar.questProgressTextFrame\n        and unitFrame.healthBar.questProgressTextFrame:GetText()\n        or nil\n        \n        if currentText == text then\n            return\n        end\n        \n        --create the text frame that will show the quest progress\n        if not unitFrame.healthBar.questProgressTextFrame then\n            envTable.questProgressTextFrame = Plater:CreateLabel(unitFrame.healthBar, \"\", textSize, textColor)\n            Plater.SetAnchor(envTable.questProgressTextFrame, anchor)\n            unitFrame.healthBar.questProgressTextFrame = envTable.questProgressTextFrame\n        end\n        \n        if not unitFrame.healthBar.questProgressTextFrame:IsVisible() then\n            unitFrame.healthBar.questProgressTextFrame:Show()\n        end\n        \n        unitFrame.healthBar.questProgressTextFrame:SetText(text)\n    end\nend",
},
["Time"] = 1738535963,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "236671",
["Enabled"] = true,
["Revision"] = 373,
["semver"] = "",
["Author"] = "Viashi-Antonidas",
["Desc"] = "Adds a text indicator for quest progress to show how many times the objective has to be completed.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "QuestProgress",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.UpdateBorder (unitFrame, false)\nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    envTable.UpdateBorder (unitFrame, true)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    --self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = Plater.db.profile.castbar_icon_show --true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accept 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 0\n    envTable.moveCastIcon = not Plater.db.profile.castbar_icon_customization_enabled --false\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = true\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        if not envTable.moveCastIcon then return end\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:ClearAllPoints()\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", 0, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:ClearAllPoints()\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 0, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 0, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\n    \n    function envTable.UpdateBorder (unitFrame, casting)\n        local healthBar = unitFrame.healthBar\n        local castBar = unitFrame.castBar\n        --casting = not casting == false or  ((castBar.casting or castBar.channeling) and not (castBar.interrupted or castBar.failed))\n        \n        if not envTable.ShowShield then\n            castBar.BorderShield:Hide()\n        end\n        \n        if casting then\n            if envTable.ShowIcon and castBar.Icon:IsShown() then\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", castBar.Icon, \"TOPLEFT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", castBar.Icon, \"TOPRIGHT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            else\n                if envTable.IconAnchor == \"left\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", castBar, \"BOTTOMRIGHT\", 0, 0)\n                elseif envTable.IconAnchor == \"right\" then\n                    healthBar.border:ClearAllPoints()\n                    PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                    PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", castBar, \"BOTTOMLEFT\", 0, 0) \n                end\n            end\n        else\n            if envTable.IconAnchor == \"left\" then\n                healthBar.border:ClearAllPoints()\n                PixelUtil.SetPoint(healthBar.border, \"TOPLEFT\", healthBar, \"TOPLEFT\", 0, 0)\n                PixelUtil.SetPoint(healthBar.border, \"BOTTOMRIGHT\", healthBar, \"BOTTOMRIGHT\", 0, 0)\n            elseif envTable.IconAnchor == \"right\" then\n                healthBar.border:ClearAllPoints()\n                PixelUtil.SetPoint(healthBar.border, \"TOPRIGHT\", healthBar, \"TOPRIGHT\", 0, 0)\n                PixelUtil.SetPoint(healthBar.border, \"BOTTOMLEFT\", healthBar, \"BOTTOMLEFT\", 0, 0) \n            end\n        end\n    end\n    \n    if not unitFrame.castBar.borderChangeHooked then\n        hooksecurefunc(unitFrame.castBar, \"Hide\", function() envTable.UpdateBorder(unitFrame, false) end)\n        unitFrame.castBar.borderChangeHooked = true\n    end\n    \nend",
},
["Time"] = 1737159135,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/mEN8Q6zUa/13",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["Enabled"] = true,
["Revision"] = 470,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate and extend the border around icon + cast bar.",
["Prio"] = 99,
["version"] = 13,
["PlaterCore"] = 1,
["Name"] = "Cast Icon Anchor + Border",
["LastHookEdited"] = "Cast Update",
["Options"] = {
},
},
{
["OptionsValues"] = {
["lowScale"] = 0.79999995231628,
["midScale"] = 0.89999997615814,
},
["HooksTemp"] = {
},
["UID"] = "0x6366dbeb1fda6285",
["Hooks"] = {
["Leave Combat"] = "function (_, unitId, unitFrame, _, modTable)\n    -- when updating this, also update Init and Nameplate Updated\n    \n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpitefulLike(npcID) then\n        return\n    end\n    \n    local specialScale = modTable.getSpitefulLikeScale(npcID)\n    \n    Plater.SetNameplateScale(unitFrame, modTable.targetsPlayer(unitId) and specialScale.self or specialScale.others)\nend",
["Nameplate Updated"] = "function (_, unitId, unitFrame, _, modTable)\n    -- when updating this, also update Init and Leave Combat\n    \n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID or not modTable.isSpitefulLike(npcID) then\n        return\n    end\n    \n    local specialScale = modTable.getSpitefulLikeScale(npcID)\n    \n    Plater.SetNameplateScale(unitFrame, modTable.targetsPlayer(unitId) and specialScale.self or specialScale.others)\nend",
["Initialization"] = "function (modTable)\n    local medium = modTable.config.midScale -- 0.90\n    local small = modTable.config.lowScale -- 0.80\n    local extrasmall = modTable.config.extraLowScale -- 0.70,\n    local larger = modTable.config.higherScale -- 1.1\n    \n    --[[\n    GUIDELINES\n    - use LARGER for enemies with great situational importance that need extra attention\n        ex: totems at the end of Stonevault, Spiteful targeting you\n    - use MEDIUM for enemies that do little to nothing but melee the tank and have average health\n        OR casters without mandatory kick\n        ex: Patchwerk Soldier, Necrotic Wake | Tainted Lashers, Gnarlroot\n        ex: Primalist Galesinger, Halls of Infusion\n    - use SMALL for enemies that do nothing but melee the tank and have less than average health\n        -- ex: Jagged Hound, Waycrest Manor\n    - use EXTRA SMALL for enemies that do nothing at all AND/OR there's so many on the screen, you have no choice\n        ex: Fiery Vines, Tindral | Hungry Lashers, Academy\n    ]]\n    --\n    \n    ---@class SpitefulLikeScaling\n    ---@field self number\n    ---@field others number\n    \n    ---@type table<number, SpitefulLikeScaling>\n    ---@description table of npc ids with conditional scaling based on their current target\n    local spitefulLikes = {\n        [220626] = {\n            self = larger,\n            others = extrasmall,\n        }, --Blood Parasite, Ovinax\n    }\n    \n    modTable.npcIDs = {}\n    do\n        local test = {\n            --[87329] = extrasmall, -- test dummy\n        }\n        -- raids\n        \n        local liberationOfUndermine = {\n            [231935] = small, -- Junkyard Hyena\n            [236280] = small, -- Tiny Torq\n            [236284] = small, -- Fun-sized Flarendo\n        }\n        \n        local nerubarPalace = {\n            [219739] = small, -- Infested Spawn\n            [223674] = small, --Skitterer - Ansurek\n            [219746] = small, -- Tomb - Ansurek\n            [221344] = medium, -- Gloom Hatchling - Ansurek\n        }\n        local amirdrassil = {\n            [210231] = medium, -- Tainted Lasher, Gnarlroot\n            [211306] = extrasmall, -- Fiery Vines, Tindral\n        }\n        local vault = {\n            [194991] = medium, -- Oathsworn Vanguard\n            [191714] = small, -- Seeking Stormling\n        }\n        local sepulcher = {\n            [183669] = small, -- Fiendish Soul\n        }\n        local nathria = {\n            [169925] = small, -- Begrudging Waiter\n        }\n        \n        -- War Within dungeons\n        local operationFloodgate = {\n            [231497] = medium, --Bombshell crab\n            [231014] = medium, -- Loaderbot\n            [229250] = medium, -- Venture Co. Contractor\n        }\n        \n        local theRookery = {\n            [219066] = small, --Citizen\n        }\n        \n        local prioryOfTheSacredFlame = {\n            [212838] = small, --Arathi Neophyte\n            [207943] = extrasmall, --Arathi Neophyte\n            [206705] = small, -- Arathi Footman\n            [206699] = medium, -- War lynx\n            [206694] = medium, -- Fervent Sharpshooter\n        }\n        \n        local darkflameCleft = {\n            [210148] = small, -- Menial Laborer\n            [210810] = small, -- Menial Laborer\n            [208457] = small, -- Skittering Darkness\n            [213008] = medium, -- Wriggling Darkspawn\n        }\n        \n        local cinderbrewMeadery = {\n            [217126] = extrasmall, --Over-indulged Patron\n            [214668] = small, -- Patron\n            [214920] = small, -- Tasting room attendant\n            [218865] = small, --Bee-let\n            [210270] = small, --Brew Drop\n            [223562] = small, --Brew Drop #2\n        }\n        \n        local stoneVault = {\n            [214287] = larger, --Earth Burst Totem\n        }\n        \n        local araKara = {\n            [216336] = small, --Ravenous Crawler\n            [216341] = small, --Jabbing Flyer\n            [218325] = extrasmall, --Swarming Flyer\n            [216337] = small, --Bloodworker\n            [215968] = small, -- Black blood\n        }\n        \n        local cityOfThreads = {\n            [220199] = small, --Battle Scarab\n            [216363] = medium, --Reenforced drone\n            [216365] = medium, --Carrier\n            [223357] = medium, --Conscript\n            [216329] = small, --Droplet\n            [220065] = small, --Umbral Weave\n            [222700] = small, --Umbral Weave\n            [219198] = medium, --Ravenous Scarab\n            [216342] = medium, -- Skittering Assistant\n        }\n        \n        local theDawnbreaker = {\n            --[225601] = extrasmall, --Webbed Victim\n            [224616] = small, --Animated Shadow\n        }\n        \n        -- DF Dungeons\n        \n        local murozondsRise = {\n            [205151] = small, -- Tyr's Vanguard\n        }\n        \n        local galakrondsFall = {\n            [204536] = extrasmall, -- Blight Chunk\n            [206065] = extrasmall, -- Interval\n        }\n        \n        local hallsOfInfusion = {\n            [190923] = small, -- Zephyrling\n        }\n        \n        local neltharus = {\n            [192781] = small, -- Ore Elemental\n            [194389] = small, -- Lava Spawn\n        }\n        \n        local uldaman = {\n            [184134] = small, -- Scavenging Leaper\n            [186696] = larger, -- Quaking Totem\n        }\n        \n        local brackenhideHollow = {\n            [189299] = small, -- Decaying Slime\n            [192481] = small, -- Decaying Slime (boss adds)\n            [194330] = small, -- Decaying Slime (from big slime split)\n            [199916] = small, -- Decaying Slime\n            [194273] = small, -- Witherling\n            [187238] = small, -- Witherling\n            [189363] = extrasmall, -- Infected Lasher\n            [208994] = extrasmall, -- Infected Lasher\n            [194373] = small, -- Witherling\n            [190381] = larger, -- Rotburst Totem\n        }\n        \n        local algetharAcademy = {\n            [196642] = extrasmall, -- Hungry Lasher\n            [197398] = extrasmall, -- Hungry Lasher\n            [192329] = small, -- Territorial Eagle\n            [196694] = medium, -- Arcane Forager\n        }\n        \n        local azureVault = {\n            [191313] = extrasmall, -- Bubbling Sapling\n            [196559] = extrasmall, -- Volatile Sapling\n            [187246] = medium, -- Nullmagic Hornswog\n            [187242] = medium, -- Tarasek Looter\n            [187159] = small, -- Whelp\n        }\n        \n        local rubyLifePools = {\n            [189893] = extrasmall, -- Infused Whelp\n            [187894] = extrasmall, -- Infused Whelp\n            [194622] = extrasmall, -- Scorchling\n            [190205] = extrasmall, -- Scorchling\n            [197509] = extrasmall, -- Primal Thundercloud\n        }\n        \n        local nokhudOffensive = {\n            [195855] = small, -- Risen Warrior\n            [195875] = small, -- Desecrated Bakar\n            [196645] = small, -- Desecrated Bakar\n        }\n        \n        -- Shadowlands Dungeons\n        \n        local tazavesh = {\n            [178163] = small, -- Murkbrine Shorerunner\n        }\n        \n        local theaterOfPain = {\n            [163089] = small, -- Disgusting Refuse\n            [169875] = medium, -- Shackled Soul\n            \n        }\n        \n        local necroticWake = {\n            [166264] = small, -- Spare Parts\n            [166266] = small, -- Spare Parts #2\n            [171500] = extrasmall, -- Shuffling Corpse\n            [165138] = small, -- Blight bag\n            [162729] = medium, -- Patchwerk Soldier\n            [163122] = small, -- Brittlebone Warrior\n            [164427] = small, -- Reanimated Warrior\n        }\n        \n        local mistsOfTirnaScithe = {\n            [165111] = medium, -- Drust Spiteclaw\n            [167117] = small, -- Larva\n        }\n        \n        local hallsOfAtonement = {\n            [167892] = medium, -- Tormented Soul\n        }\n        \n        local deOtherSide = {\n            [168986] = small, -- Skeletal Raptor\n        }\n        \n        local plaguefall = {\n            [168969] = small, -- Gushing Slime\n        }\n        \n        local sanguineDepths = {\n            [171455] = small, -- Stonewall Gargon\n            [168457] = small, -- Stonewall Gargon\n            [166589] = small, -- Animate Weapon\n        }\n        \n        --BFA Dungeons\n        \n        local theMotherlode = {\n            [130436] = medium, -- Off-Duty Laborer\n            [136006] = extrasmall, -- Rowdy Reveler\n            [136005] = extrasmall, -- Rowdy Reveler\n            [130437] = medium, -- Mine Rat\n            [133963] = small, -- Test Subject\n            [130653] = small, -- Wanton Sapper\n            [134005] = small, -- Shalebiter\n            [138369] = small, -- Footbomb Hooligan\n        }\n        \n        local mechagon = {\n            [144300] = extrasmall, -- Mechagon Citizen\n            [150547] = medium, -- Scrapbone Grunter\n            [144301] = small, -- Living Waste\n        }\n        \n        local siegeOfBoralus = {\n            [133990] = medium, -- Scrimshaw Gutter\n            [138002] = medium, -- Scrimshaw Gutter\n            [135258] = medium, -- Curseblade\n        }\n        \n        local atalDazar = {\n            [128435] = extrasmall, -- saurid\n        }\n        \n        local waycrestManor = {\n            [131669] = small, -- Jagged Hound\n        }\n        \n        local underrot = {\n            [131402] = extrasmall, -- Underrot Tick\n        }\n        \n        local freehold = {\n            [130024] = small, -- Soggy Shiprat\n        }\n        \n        -- Legion Dungeons\n        \n        local hallsOfValor = {\n            [97087] = medium, -- Valajar Champion\n            [96640] = medium, -- Valajar Marksman\n            [99922] = small, -- Ebonclaw Packmate\n            [96608] = medium, -- Ebonclaw Worg\n            [96609] = medium, -- Gildedfur Stag\n        }\n        \n        local darkheartThicket = {\n            [100529] = small, -- Hatespawn Slime\n            [101074] = small, -- Hatespawn Whelpling\n            [100991] = small, -- Strangling Roots\n            [107288] = small, -- Vilethorn Sapling\n        }\n        \n        local blackRookHold = {\n            [98677] = small, -- Rook Spiderling\n            [98900] = medium, -- Wyrmtongue Trickster\n            [102781] = extrasmall, -- Fel Bat Pup\n        }\n        \n        local courtOfStars = {\n            [105703] = small, -- Mana Wyrm,\n            [104295] = small, -- Blazing Imp\n        }\n        \n        local neltharionsLair = {\n            [96247] = extrasmall, -- Vileshard Crawler\n            [102430] = small, -- Tarspitter Slug\n        }\n        \n        -- WoD Dungeons\n        \n        local everbloom = {\n            [81864] = small, -- Dreadpetal\n            [84401] = small, -- Swift Sproutling\n        }\n        \n        local shadowmoonBurialGrounds = {\n            [75451] = small, -- Defiled Spirit (non-casting)\n            [77006] = small, -- Corpse Skitterling\n            [76444] = small, -- Subjugated Soul\n        }\n        -- MoP Dungeons\n        local templeOfTheJadeSerpent = {\n            [62358] = small, -- Corrupt Droplet\n            [58319] = small, -- Lesser Sha\n            [59598] = small, -- Lesser Sha\n        }\n        \n        -- Cata Dungeons\n        \n        local throneOfTheTides = {\n            [40923] = extrasmall, -- Unstable Corruption\n        }\n        \n        local vortexPinnacle = {\n            [205326] = medium, -- Gust Soldier\n            [45477] = medium, -- Gust Soldier\n            [45704] = small, -- Lurking Tempest\n            [204337] = small, -- Lurking Tempest\n            [45924] = medium, -- Turbulent Squall\n            [45922] = medium, -- Empyrean Assassin\n            [45926] = medium, -- Servant of Asaad\n            [45932] = small, -- Skyfall Star\n        }\n        \n        local grimBatol = {\n            [224853] = small, -- Hatchling\n            [39388] = medium, -- Boss Hatchling\n        }\n        \n        local misc = {\n            -- Fodder to the Flame demons\n            [169428] = small,\n            [169430] = small,\n            [169429] = small,\n            [169426] = small,\n            [169421] = small,\n            [169425] = small,\n            [168932] = small,\n            -- Misc\n            [189707] = small, -- Chaotic Motes, SL Fated affix\n            [229537] = larger, -- Void Emissary\n            [229296] = small, -- Orb of Ascendance\n        }\n        \n        local maps = {\n            test,\n            liberationOfUndermine,\n            operationFloodgate,\n            theMotherlode,\n            theRookery,\n            prioryOfTheSacredFlame,\n            darkflameCleft,\n            cinderbrewMeadery,\n            theDawnbreaker,\n            stoneVault,\n            amirdrassil,\n            atalDazar,\n            waycrestManor,\n            darkheartThicket,\n            everbloom,\n            blackRookHold,\n            galakrondsFall,\n            throneOfTheTides,\n            templeOfTheJadeSerpent,\n            nokhudOffensive,\n            courtOfStars,\n            shadowmoonBurialGrounds,\n            algetharAcademy,\n            azureVault,\n            hallsOfValor,\n            rubyLifePools,\n            underrot,\n            freehold,\n            neltharionsLair,\n            vortexPinnacle,\n            hallsOfInfusion,\n            neltharus,\n            uldaman,\n            brackenhideHollow,\n            murozondsRise,\n            misc,\n            vault,\n            sepulcher,\n            nathria,\n            nerubarPalace,\n            araKara,\n            cityOfThreads,\n            tazavesh,\n            theaterOfPain,\n            necroticWake,\n            mistsOfTirnaScithe,\n            hallsOfAtonement,\n            deOtherSide,\n            plaguefall,\n            sanguineDepths,\n            grimBatol,\n            siegeOfBoralus,\n            mechagon,\n        }\n        \n        for i = 1, #maps do\n            local map = maps[i]\n            \n            for id, priority in pairs(map) do\n                modTable.npcIDs[id] = priority\n            end\n        end\n    end\n    \n    ---@param unit string\n    ---@return number|nil\n    function modTable.parseGUID(unit)\n        local guid = UnitGUID(unit)\n        \n        if not guid then\n            return nil\n        end\n        \n        local id = select(6, strsplit(\"-\", guid))\n        \n        return id and tonumber(id) or nil\n    end\n    \n    ---@param id number\n    ---@return boolean\n    function modTable.isSpitefulLike(id)\n        return spitefulLikes[id] ~= nil\n    end\n    \n    function modTable.getSpitefulLikeScale(id)\n        return spitefulLikes[id]\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    function modTable.targetsPlayer(unitId)\n        local targetName = UnitName(unitId .. \"target\")\n        \n        if not targetName then\n            return false\n        end\n        \n        return UnitIsUnit(targetName, \"player\")\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not modTable.config.scale then\n        return\n    end\n    \n    local npcID = unitFrame.namePlateNpcId or modTable.parseGUID(unitId)\n    \n    if not npcID then\n        return\n    end\n    \n    local scale = modTable.npcIDs[npcID]\n    \n    if scale then\n        Plater.SetNameplateScale(unitFrame, scale)\n    end\nend",
},
["Time"] = 1739456121,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 1041231,
["Enabled"] = true,
["Revision"] = 2513,
["semver"] = "",
["Author"] = "Causese-Valdrakken",
["Desc"] = "Allows you to scale a creatures nameplate based on it's importance in the dungeon.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "Initialization",
["Options"] = {
{
["Type"] = 4,
["Key"] = "scale",
["Value"] = true,
["Name"] = "Enable Scaling",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Allows nameplates to scale based on priority.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for mid priority.",
["Min"] = 0,
["Key"] = "midScale",
["Value"] = 0.9,
["Name"] = "Mid prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for low priority.",
["Min"] = 0,
["Key"] = "lowScale",
["Value"] = 0.8,
["Name"] = "Low prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set scaling value for extra low scale",
["Min"] = 0,
["Key"] = "extraLowScale",
["Value"] = 0.7,
["Name"] = "Very Low Prio",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Set scaling value for higher priority",
["Min"] = 0,
["Key"] = "higherScale",
["Value"] = 1.1,
["Name"] = "Higher Priority",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Name"] = "Priority based scaling - Jundies",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["UID"] = "0x669565071fdad90",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.updateBorderColor(unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    local function holdsSameColor(frame, nextColor)\n        local currentR, currentG, currentB, currentA =\n        unpack(frame.customBorderColor and frame.customBorderColor or Plater.db.profile.border_color)\n        local nextR, nextG, nextB, nextA = unpack(nextColor or Plater.db.profile.border_color)\n        \n        return currentR == nextR and currentG == nextG and currentB == nextB and currentA == nextA\n    end\n    \n    function envTable.updateBorderColor(frame)\n        local color = nil\n        \n        if UnitIsUnit(\"target\", unitFrame.unit) then\n            color = modTable.config.targetColor\n        elseif UnitIsUnit(\"focus\", unitFrame.unit) then\n            color = modTable.config.focusColor\n        end\n        \n        if not holdsSameColor(frame, color) then\n            Plater.SetBorderColor(frame, color)\n        end\n    end\nend",
},
["Time"] = 1739453247,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "132212",
["Enabled"] = true,
["Revision"] = 469,
["semver"] = "",
["Author"] = "Xephunt-These Go To Eleven",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 1,
["Key"] = "targetColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Target Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes target border color",
},
{
["Type"] = 1,
["Key"] = "focusColor",
["Value"] = {
0,
1,
0.94117653369904,
1,
},
["Name"] = "Focus Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes Focus border color",
},
},
["Name"] = "Target Border Color",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["UID"] = "0x62f9521d664ad",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    if not Plater.AddPerformanceUnits or not Plater.PERF_UNIT_OVERRIDES_BIT then\n        return\n    end\n    \n    local castDisabled = Plater.PERF_UNIT_OVERRIDES_BIT.CAST\n    local auraDisabled = Plater.PERF_UNIT_OVERRIDES_BIT.AURA\n    local threatDisabled = Plater.PERF_UNIT_OVERRIDES_BIT.THREAT\n    local allDisabled = 0\n    \n    -- local castAndAuraDisabled = bit.bor(castDisabled, auraDisabled)\n    \n    local units = {\n        -- Raids\n        [189706] = { enabled = true, flag = 0 }, -- Chaotic Essence\n        [189707] = { enabled = true, flag = 0 }, -- Chaotic mote\n        [176920] = { enabled = true, flag = 0 }, -- Domination Arrow -- Sylv\n        [196679] = { enabled = true, flag = 0 }, -- Frozen Shroud -- Broodkeeper\n        [194999] = { enabled = true, flag = 0 }, -- Volatile Spark -- Raszageth\n        [191714] = { enabled = true, flag = 0 }, -- Seeking Stormling -- Raszageth\n        [210231] = { enabled = true, flag = 0 }, -- Tainted Lasher -- Gnarlroot\n        [211306] = { enabled = true, flag = 0 }, -- Fiery vines -- Tindral\n        [219746] = { enabled = true, flag = 0 }, -- Tomb - Ansurek\n        \n        -- Dungeons\n        [196642] = { enabled = true, flag = 0 }, -- Hungry Lasher (Boss add)\n        [197398] = { enabled = true, flag = 0 }, -- Hungry Lasher\n        [208994] = { enabled = true, flag = 0 }, -- Infected Lasher\n        [189363] = { enabled = true, flag = 0 }, -- Infected Lasher\n        [96247] = { enabled = true, flag = 0 }, -- Vileshard Crawler\n        [100529] = { enabled = true, flag = 0 }, -- Hatespawn Slime\n        [84401] = { enabled = true, flag = 0 }, -- Swift Sproutling (boss add)\n        [217126] = { enabled = true, flag = 0 }, -- Over-Indulged Patron\n        \n        --Testing\n        [198594] = { enabled = false, flag = 0 }, -- Testing target dummy\n        [87329] = { enabled = false, flag = 0 }, -- testing\n    }\n    \n    for unit, meta in pairs(units) do\n        if meta.enabled and modTable.config.performance then\n            Plater.AddPerformanceUnits(unit, meta.flag)\n        else\n            Plater.RemovePerformanceUnits(unit)\n        end\n        \n        if meta.enabled and modTable.config.forceBlizz then\n            Plater.AddForceBlizzardNameplateUnits(unit)\n        else\n            Plater.RemoveForceBlizzardNameplateUnits(unit)\n        end\n    end\nend\n\n\n\n\n\n",
},
["Time"] = 1739453122,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
["HEALER"] = true,
["DAMAGER"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 458228,
["Enabled"] = true,
["Revision"] = 459,
["semver"] = "",
["Author"] = "Viashi-Argent Dawn",
["Desc"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "performance",
["Value"] = true,
["Name"] = "Performance",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "forceBlizz",
["Value"] = false,
["Name"] = "Force Blizzard",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Name"] = "Performance Units - Jundies",
},
{
["OptionsValues"] = {
["colour_names"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend",
["Initialization"] = "function (modTable)\n    -- used for nameColouring\n    -- AARRGGBB\n    local markerToHex = {\n        [1] = \"FFEAEA0D\", -- Yellow 5 Point Star\n        [2] = \"FFEAB10D\", -- Orange Circle\n        [3] = \"FFCD00FF\", -- Purple Diamond\n        [4] = \"FF06D425\", -- Green Triangle\n        [5] = \"FFB3E3D8\", -- Light Blue Moon\n        [6] = \"FF0CD2EA\", -- Blue Square\n        [7] = \"FFD6210B\", -- Red Cross\n        [8] = \"FFFFFFFF\", -- White Skull\n    }\n    \n    local isFrenchLocale = ((GAME_LOCALE or GetLocale()) == \"frFR\")\n    \n    -- Makes it so you take their first name e.g Jessie Howlis -> Jessie\n    local nameBlacklist = isFrenchLocale\n    and {\n        [\"d'entraînement\"] = true,\n        [\"le\"] = true,\n        [\"la\"] = true,\n        [\"les\"] = true,\n        [\"un\"] = true,\n        [\"une\"] = true,\n        [\"des\"] = true,\n        [\"d'\"] = true,\n        [\"de\"] = true,\n        [\"du\"] = true,\n        [\"et\"] = true,\n        [\"en\"] = true,\n        [\"terreur\"] = true,\n    }\n    or {\n        [\"the\"] = true,\n        [\"of\"] = true,\n        [\"Tentacle\"] = true,\n        [\"Apprentice\"] = true,\n        [\"Denizen\"] = true,\n        [\"Emissary\"] = true,\n        [\"Howlis\"] = true,\n        [\"Terror\"] = true,\n        [\"Totem\"] = true,\n        [\"Waycrest\"] = true,\n        [\"Aspect\"] = true,\n    }\n    \n    local function RemoveTrailingPunctuation(word)\n        return word and word:gsub(\"[%p]+$\", \"\") or word\n    end\n    \n    local function GetSanitizedParts(name)\n        local a, b, c, d, e, f = strsplit(\" \", name, 5)\n        \n        if not isFrenchLocale then\n            return a, b, c, d, e, f\n        end\n        \n        return RemoveTrailingPunctuation(a),\n        RemoveTrailingPunctuation(b),\n        RemoveTrailingPunctuation(c),\n        RemoveTrailingPunctuation(d),\n        RemoveTrailingPunctuation(e),\n        RemoveTrailingPunctuation(f)\n    end\n    \n    local function Capitalize(str)\n        return str and str:gsub(\"^%l\", string.upper) or str\n    end\n    \n    -- @unitId  unitID for mob e.g nameplate1\n    function modTable.renamer(unitFrame, unitId)\n        if not (unitId and unitFrame) then\n            return\n        end\n        \n        local name = unitFrame.namePlateUnitName or UnitName(unitId) or \"\"\n        \n        if modTable.config.short_names and not unitFrame.unitName.isRenamed then\n            local a, b, c, d, e, f = GetSanitizedParts(name)\n            \n            local unitName\n            \n            if isFrenchLocale then\n                if a and nameBlacklist[a:lower()] then\n                    unitName = Capitalize(f or e or d or c or b or a)\n                else\n                    unitName = a\n                end\n            else\n                if nameBlacklist[b] then\n                    unitName = a or b or c or d or e or f\n                else\n                    unitName = f or e or d or c or b or a\n                end\n            end\n            name = unitName or name\n        end\n        \n        if modTable.config.colour_names then\n            local marker = GetRaidTargetIndex(unitId)\n            if marker then\n                local color = markerToHex[marker or 8]\n                name = WrapTextInColorCode(name, color)\n            end\n        end\n        \n        unitFrame.healthBar.unitName:SetText(name)\n    end\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.renamer(unitFrame, unitId)\nend\n\n\n\n",
},
["Time"] = 1739453058,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "INTERFACE\\ICONS\\Ability_Monk_Ascension",
["Enabled"] = true,
["Revision"] = 338,
["semver"] = "",
["Author"] = "Rhk-Tarren Mill",
["Desc"] = "Aimed at making calls in dungeons simpler by using the last name of a mob or first name of certains ones i.e Jessie Howlis -> Jessie",
["Prio"] = 98,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Short Names",
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 4,
["Key"] = "short_names",
["Value"] = true,
["Name"] = "Shorten Names",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Shortens NPC Names. eg.: \"Murkbrine Fishmancer\" -> \"Fishmancer\"",
},
{
["Type"] = 4,
["Key"] = "colour_names",
["Value"] = false,
["Name"] = "Colour by Raidmark",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colours the Name by the assigned Raidmark. eg.: Triangle --> Green Name",
},
},
},
{
["Enabled"] = true,
["Revision"] = 2137,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Feature - Custom cast bar coloring:",
["Name"] = "CUSTOM CAST BAR COLORS",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showInterruptColor",
["Value"] = true,
["Name"] = "Enable custom colored enemy cast bars.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting the cast bar will change to the colors below based on the status of you being able to interrupt the cast.",
},
{
["Type"] = 4,
["Key"] = "showSecondaryInterrupts",
["Value"] = true,
["Name"] = "Enable support for secondary interrupts: Avenger's Shield (Paladin), Spell Reflection (Warrior).",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Colors casts that can be reflected with Spell Reflection (Warrior) and interrupted with Avenger's Shield (Paladin).",
},
{
["Type"] = 1,
["Key"] = "colorInterruptAvailable",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is available.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorInterruptSoon",
["Value"] = {
1,
0.96078437566757,
0.070588238537312,
1,
},
["Name"] = "Color when my primary interrupt is down but will be available before cast finishes.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you have an interrupt on cooldown but it will be available to interrupt the current cast.",
},
{
["Type"] = 1,
["Key"] = "colorNoInterrupt",
["Value"] = {
1,
0.49411767721176,
0.13725490868092,
1,
},
["Name"] = "Color when my primary interrupt is unavailable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when you do not have an interrupt available to interrupt the current cast",
},
{
["Type"] = 1,
["Key"] = "colorSecondaryInterrupt",
["Value"] = {
1,
0.0078431377187371,
0.78431379795074,
1,
},
["Name"] = "Color for secondary interrupts. (Avenger's Shield and Spell Reflection)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast targeting you can be reflected with Spell Reflection or interrupted with Avenger's Shield. Only active when playing the appropriate class with the skill off cooldown.",
},
{
["Type"] = 1,
["Key"] = "colorProtected",
["Value"] = {
0.80784320831299,
0.29411765933037,
0.28627452254295,
1,
},
["Name"] = "Color for casts that are protected/un-interruptable.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "This color will be used when the current cast can not be interrupted by a standard interrupt.",
},
{
["Type"] = 1,
["Key"] = "colorTick",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Color of interrupt available tick. (Hover for more info)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "When your interrupt is currently down but will become available before the current cast completes a tick will appear in the cast bar showing you the exact position in the cast you will be able to interrupt the cast. You can customize the color of the tick using this setting.  YOU MUST /RELOAD YOUR UI AFTER CHANGING THIS COLOR.",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Feature - Show name of target in the cast bar:",
["Name"] = "Settings Target Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTargetName",
["Value"] = true,
["Name"] = "Show the name of cast targets in the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is casting a spell at a target, the targets name will appear in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "hideNameSolo",
["Value"] = false,
["Name"] = "Hide my name when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When you are not in a party or raid group casts targetting you will not display your name in the cast bar.",
},
{
["Type"] = 4,
["Key"] = "replaceName",
["Value"] = false,
["Name"] = "Show \"Me\" instead of my character name.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When targetted by casts, instead of showing your character name it will show \"Me\".",
},
{
["Type"] = 5,
["Key"] = "option8",
["Value"] = "Feature - Flash nameplates when a spell targets you:",
["Name"] = "Settings Border Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Namplate Flash",
},
{
["Type"] = 4,
["Key"] = "nameplateFlash",
["Value"] = false,
["Name"] = "Flash the nameplates of enemies that are casting a spell or ability targeting me.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When an enemy is targetting you with a cast, this option will flash the nameplate of that enemy to indicate that cast is targeting you.",
},
{
["Type"] = 4,
["Key"] = "hideNameplateFlashSolo",
["Value"] = true,
["Name"] = "Hide flash effect when not in a party.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing solo.",
},
{
["Type"] = 4,
["Key"] = "hideFlashAsTank",
["Value"] = true,
["Name"] = "Hide flash effect when I'm playing a tank specialization.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "The flash effect will be hidden when you are playing as a tank specialization.",
},
},
["Author"] = "Nimeshady-Zul'jin",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["UID"] = "0x67a463b72e74290",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable) end",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)    \n    modTable.EnhancedCastBar(unitId, unitFrame)\nend",
["Initialization"] = "function (modTable)\n    modTable.reflectableSpells = {}\n    \n    local playerClass = select(3, UnitClass(\"player\"))\n    \n    -- Checks to see if a spell is on cooldown, not counting the 1.5s cooldown from global cooldown.\n    ---@param spellID number\n    ---@return boolean\n    local function IsSpellOnCooldown_IgnoreGCD(spellID)\n        local gcdInfo = C_Spell.GetSpellCooldown(61304)\n        local GCD_expirationTime = gcdInfo.startTime + gcdInfo.duration\n        local spellInfo = C_Spell.GetSpellCooldown(spellID)\n        local spellReadyTime = spellInfo.startTime + spellInfo.duration\n        return spellReadyTime > GCD_expirationTime\n    end\n    \n    -- Create a tick if it doesn't already exist. The tick will be used to show when interrupt will be available.\n    local function MaybeCreateTickTexture(castBar)\n        if not castBar.tick then\n            castBar.tick = castBar:CreateTexture(nil, \"overlay\")\n            castBar.tick:SetDrawLayer(\"overlay\", 4)\n            castBar.tick:SetBlendMode(\"DISABLE\")\n            --castBar.tick:SetHeight(castBar:GetHeight())\n            castBar.tick:SetHeight(8)\n            castBar.tick:SetTexture(Plater.SparkTextures[8])\n            castBar.tick:SetWidth(2)\n            castBar.tick:SetVertexColor(Plater:ParseColors(modTable.config.colorTick))\n        end\n    end\n    \n    ---@param unitId string\n    ---@return boolean\n    local function UnitIsStillCasting(unitId)\n        if UnitCastingInfo(unitId) ~= nil then\n            return true\n        end\n        \n        if UnitChannelInfo(unitId) ~= nil then\n            return true\n        end\n        \n        return false\n    end\n    \n    local function DetermineInterruptId()\n        if playerClass == 1 then -- Warrior\n            return function()\n                return 6552 -- Pummel\n            end\n        end\n        \n        if playerClass == 2 then -- Paladin\n            return function()\n                return 96231 -- Rebuke\n            end\n        end\n        \n        if playerClass == 3 then -- Hunter\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 3 then -- survival\n                    return 187707 -- muzzle\n                end\n                \n                return 147362 -- counter shot\n            end\n        end\n        \n        if playerClass == 4 then -- rogue\n            return function()\n                return 1766 -- kick\n            end\n        end\n        \n        if playerClass == 5 then -- priest\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 3 then -- shadow\n                    return 15487 -- silence\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 6 then -- death knight\n            return function()\n                return 47528 -- mind freeze\n            end\n        end\n        \n        if playerClass == 7 then -- shaman\n            return function()\n                return 57994\n            end\n        end\n        \n        if playerClass == 8 then -- mage\n            return function()\n                return 2139 -- counterspell\n            end\n        end\n        \n        if playerClass == 9 then -- warlock\n            return function()\n                if IsSpellKnown(89766, true) then -- felguard: axe toss\n                    return 89766\n                end\n                \n                if IsSpellKnown(19647, true) then -- felhunter: spell lock\n                    return 19647\n                end\n                \n                if C_UnitAuras.GetPlayerAuraBySpellID(196099) ~= nil and IsSpellKnownOrOverridesKnown(132409, false) then -- spell lock via grimoire of sacrifice\n                    return 132409\n                end\n                \n                return nil\n            end\n        end\n        \n        if playerClass == 10 then -- monk\n            return function()\n                return 116705 -- spear hand strike\n            end\n        end\n        \n        if playerClass == 11 then -- druid\n            return function()\n                local spec = GetSpecialization()\n                \n                if spec == 1 then -- balance\n                    return 78675 -- solar beam\n                end\n                \n                return 106839 -- skull bash\n            end\n        end\n        \n        if playerClass == 12 then -- demon hunter\n            return function()\n                return 183752 -- disrupt\n            end\n        end\n        \n        if playerClass == 13 then -- evoker\n            return function()\n                return 351338 -- quell\n            end\n        end\n    end\n    \n    local GetInterruptID = DetermineInterruptId()\n    local playerIsWarlock = playerClass == 9\n    \n    ---@param unitId string\n    ---@param unitFrame Frame\n    function modTable.EnhancedCastBar(unitId, unitFrame)\n        local interruptID = GetInterruptID()\n        \n        local castBar = unitFrame.castBar\n        \n        if castBar.tick ~= nil then\n            castBar.tick:Hide()\n        end\n        \n        if castBar.IsInterrupted or castBar.interrupted or not UnitIsStillCasting(unitId) then\n            return\n        end\n        \n        local targetUnitId = unitId .. \"target\"\n        \n        if not UnitExists(targetUnitId) then\n            return\n        end\n        \n        local targetName = UnitName(targetUnitId)\n        local isTargettingMe = targetName == UnitName(\"player\")\n        castBar.Text:SetText(castBar.SpellName)\n        \n        -- Cast is targetting a specific unit\n        if targetName then\n            -- Nameplate flash options\n            if isTargettingMe and modTable.config.nameplateFlash then\n                -- Default value of true since it is turned on in the options\n                local showNameplateFlash = true\n                \n                if\n                modTable.config.hideNameplateFlashSolo\n                and not UnitInParty(\"player\")\n                and not UnitInRaid(\"player\")\n                then\n                    showNameplateFlash = false\n                end\n                \n                if modTable.config.hideFlashAsTank and GetSpecializationRole(GetSpecialization()) == \"TANK\" then\n                    showNameplateFlash = false\n                end\n                \n                -- Show nameplate flash if conditions met\n                if showNameplateFlash then\n                    Plater.FlashNameplateBody(unitFrame)\n                end\n            end\n            \n            -- Target name in cast bar options\n            if modTable.config.showTargetName then\n                if modTable.config.replaceName and isTargettingMe then\n                    targetName = \"Me\"\n                end\n                \n                local castBarWidth = castBar:GetWidth()\n                -- clip cast name at 60% of cast bar width always\n                DetailsFramework:TruncateText(castBar.Text, castBarWidth * 0.6)\n                \n                -- first, truncate the spell name to make space for the target name\n                local currentText = castBar.Text:GetText()\n                if currentText ~= nil and currentText ~= \"\" then\n                    local castText = currentText .. \" \" .. Plater.SetTextColorByClass(targetUnitId, targetName)\n                    \n                    if\n                    modTable.config.hideNameSolo\n                    and not UnitInParty(\"player\")\n                    and not UnitInRaid(\"player\")\n                    and isTargettingMe\n                    then\n                        castText = currentText\n                    end\n                    \n                    castBar.Text:SetText(castText)\n                    -- now truncate again to ensure the target name doesn't overlap with the cast duration\n                    DetailsFramework:TruncateText(castBar.Text, castBarWidth * 0.9)\n                end\n            end\n        end\n        \n        if interruptID == nil or not modTable.config.showInterruptColor then\n            return\n        end\n        \n        -- Interrupt bar color options\n        local canInterrupt = castBar.canInterrupt\n        local castEndTime = castBar.spellEndTime\n        \n        local interruptInfo = C_Spell.GetSpellCooldown(interruptID)\n        local interruptReadyTime = interruptInfo.startTime + interruptInfo.duration\n        \n        local nextColor = modTable.config.colorProtected\n        \n        if canInterrupt then\n            -- Check to see if the spell is known/talented\n            if IsSpellKnown(interruptID, playerIsWarlock) or IsSpellKnownOrOverridesKnown(interruptID, false)  then\n                if interruptReadyTime == 0 then\n                    nextColor = modTable.config.colorInterruptAvailable\n                elseif\n                modTable.config.showSecondaryInterrupts\n                and playerClass == 2 -- paladin\n                and IsSpellKnown(31935) -- avenger's shield\n                and not IsSpellOnCooldown_IgnoreGCD(31935)\n                then\n                    nextColor = modTable.config.colorSecondaryInterrupt\n                elseif interruptReadyTime < (castEndTime - 0.25) then\n                    MaybeCreateTickTexture(castBar)\n                    castBar.tick:Show()\n                    local tickLocation = (interruptInfo.startTime + interruptInfo.duration - castBar.spellStartTime)\n                    / castBar.maxValue -- castBar.spellStartTime + 0.25\n                    if castBar.channeling then\n                        tickLocation = 1 - tickLocation\n                    end\n                    castBar.tick:SetPoint(\"center\", castBar, \"left\", tickLocation * castBar:GetWidth(), 0)\n                    \n                    nextColor = modTable.config.colorInterruptSoon\n                elseif interruptReadyTime >= (castEndTime - 0.25) then\n                    nextColor = modTable.config.colorNoInterrupt\n                end\n            else\n                nextColor = modTable.config.colorNoInterrupt\n            end\n        end\n        \n        -- Spell Reflection coloring\n        if\n        modTable.config.showSecondaryInterrupts\n        and isTargettingMe\n        and playerClass == 1\n        and IsSpellKnown(23920) -- spell reflect\n        and not IsSpellOnCooldown_IgnoreGCD(23920)\n        and modTable.reflectableSpells[castBar.SpellID] == true\n        then\n            -- Color the bar if the spell is reflectable\n            nextColor = modTable.config.colorSecondaryInterrupt\n        end\n        \n        local currentR, currentG, currentB, currentA = castBar:GetColor()\n        local nextR, nextG, nextB, nextA = unpack(nextColor)\n        \n        if currentR ~= nextR or currentG ~= nextG or currentB ~= nextB or currentA ~= nextA then\n            Plater.SetCastBarColor(unitFrame, nextColor)\n        end\n    end\n    \n    if playerClass == 1 then\n        \n        --TWW Dungeons\n        \n        local operationFloodgate = {\n            473112, -- Mudslide - Boss\n            469721, -- Backwash\n            465871, -- Blood Bolt\n            465666, -- Sparkslam\n            1214468, -- Trickshot\n            465754, -- Flamethrower - Unsure if targetted \n            465595, -- Lightning Bolt\n            462771, -- Surveying Beam\n        }\n        \n        local araKara = {\n            436322, -- Poison bolt - atik\n            434786, -- Web bolt\n        }\n        \n        local cityOfThreads = {\n            442536, -- Grimweave Blast\n            443427, -- Web Bolt\n            439341, -- Splice - Izo\n            446717, -- Umbral Weave\n            438860, -- Umbral Weave - Izo\n        }\n        \n        local theDawnbreaker = {\n            428086, -- Shadow bolt\n            451114, -- Congealed Shadow\n            432448, -- Stygian Seed\n            431495, -- Black Edge\n            451113, -- Web Bolt\n            431303, -- Night Bolt\n            431494, -- Black Edge\n        }\n        \n        local theStonevault = {\n            429422, -- Stone Bolt\n            426283, -- Arcing Void\n            429110, --Alloy Bolt\n            429545, -- Censoring Gear\n            459210, -- Shadow Claw\n            430097, -- Molten Metal - Speaker Brokk\n        }\n        \n        local cinderbrewMeadery = {\n            453989, -- Boiling Flames\n            454318, -- Boiling Flames\n            454319, -- Boiling Flames\n            437721, -- Boiling Flames\n        }\n        \n        local darkflameCleft = {\n            421817, --Wicklighter Barrage\n            421910, -- Extinguishing Gust\n            423479, -- Wickligher Bolt\n            426677, -- Candleflame Bolt\n            428563, -- Flame Bolt\n        }\n        \n        local prioryOfTheSacredFlame = {\n            424420, -- Cinderblast - Boss\n            424421, --Fireball - Boss\n            423015, -- Castigator's Shield - Boss\n            423536, --Holy Smite - Boss\n            427357, -- Holy Smite \n            427469, -- Fireball\n            427950, -- Seal of Flame\n        }\n        \n        local theRookery = {\n            430805, -- Arcing Void\n            430179, -- Seeping Corruption\n            430109, -- Lightning Bolt\n        }\n        \n        --DF Dungeons\n        \n        local murozondsRise = {\n            400165, -- Epoch Bolt\n            413607, -- Corroding Volley\n            418202, -- Temporal Blast\n            417030, -- Fireball\n            411763, -- Infinite Blast\n            407121, -- Immolate\n        }\n        \n        local galakrondsFall = {\n            415435, -- Infinite Bolt\n            413590, -- Noxious Ejection\n            411958, -- Stonebolt\n        }\n        \n        local rubyLifePools = {\n            373803, -- Cold Claws boss adds\n            372683, -- Cold Claws trash\n            372808, -- Frigid Shard\n            373693, -- Living Bomb\n            371984, -- Icebolt\n            384197, -- Cinderbolt\n            384194, -- Cinderbolt\n            392576, -- Thunderbolt\n            385310, -- Lightning Bolt\n            385536, -- Flame Dance\n        }\n        \n        local azureVault = {\n            374789, -- Infused Strike\n            373932, -- Illusionary Bolt\n            384978, -- Dragon Strike\n            377503, -- Condensed Frost\n            389804, -- Heavy Tome\n            371306, -- Arcane Bolt\n        }\n        \n        local brackenhideHollow = {\n            382249, -- Earth Bolt\n            381694, -- Decayed Senses\n            378155, -- Earth Bolt (boss)\n            382474, -- Decay Surge\n        }\n        \n        local hallsOfInfusion = {\n            374020, -- Containment Beam\n            389443, -- Purifying Blast\n            374706, -- Pyretic Burst\n            375950, -- Ice Shard\n            385963, -- Frost Shock\n            395690, -- Lightning Blast\n            387504, -- Squall Buffet\n            387571, -- Focused Deluge\n        }\n        \n        local uldaman = {\n            369674, -- Stone Spike\n            369675, -- Chain Lightning\n            372718, -- Earthen Shards\n            369399, -- Stone Bolt\n            369365, -- Curse of Stone\n            377395, -- Time Sink\n        }\n        \n        local neltharus = {\n            378818, -- Magma Conflagration\n            372538, -- Melt\n            383231, -- Lava Bolt\n        }\n        \n        local nokhudOffensive = {\n            387125, -- Thunderstrike\n            387127, -- Chain Lightning\n            386012, -- Stormbolt\n            387613, -- Death Bolt\n            382670, -- Gale Arrow\n            376827, -- Conductive Strike\n            384761, -- Wind Burst\n            396206, -- Storm Shock\n            381530, -- Storm Shock\n        }\n        \n        local algetharAcademy = {\n            388862, -- Surge\n            377991, -- Storm Slash\n            387975, -- Arcane Missiles\n        }\n        \n        --Shadowlands Dungeons\n        \n        local theaterOfPain = {\n            1216475, -- Necrotic Bolt - Boss\n            1217138, -- Necrotic Bolt - Sathel\n            319669, -- Spectral Reach - Boss\n            324589, -- Death Bolt - Boss add\n            324079, -- Reaping Scythe - Boss\n            341969, -- Withering Discharge\n            330697, -- Decaying Strike\n            330784, -- Necrotic Bolt\n            330810, -- Bind Soul\n            333299, -- Curse of Desolation\n            330875, -- Spirit Frost\n        }\n        \n        local mistsOfTirnaScithe = {\n            332767, --Spirit Bolt\n            323057, --Spirit Bolt - Boss\n            332557, --Soul Split\n            463217, --Anima Slash\n            325223, --Anima Injection\n            332486, --Overgrowth\n        }\n        \n        local theNecroticWake = {\n            328667, --Frostbolt Volley\n            333623, --Frostbolt Volley\n            326574, --Noxious Fog\n            320788, --Frozen Binds\n            322274, --Enfeeble\n            334748, --Drain Fluids\n            320462, --Necrotic Bolt\n            333479, --Spew Disease\n            323347, --Clinging Darkness\n            333602, --Frostbolt\n        }\n        \n        --BFA Dungeons\n        \n        local mechagonWorkshop = {\n            291878, -- Pulse Blast - 4th boss\n            294860, -- Blossom Blast - 3rd Boss\n            294195, -- Arcing Zap\n            293827, -- Giga-Wallop\n        }\n        \n        local theMotherlode = {\n            263202, -- Rock Lance\n            263628, -- Charged Shield\n            280604, -- Iced Spritzer\n            262268, -- Caustic Compound\n            268846, -- Echo Blade\n        }\n        \n        local siegeOfBoralus = {\n            272581, -- Water bolt\n            257063, -- Brackish bolt\n        }\n        \n        local waycrestManor = {\n            265372, -- Shadow Cleave\n            263943, -- Etch\n            264105, -- Runic Mark\n            260701, -- Bramble Bolt\n            260699, -- Soul Bolt\n            260700, -- Ruinous Bolt\n            266036, -- Drain Essence\n            264024, -- Soul Bolt\n            426541, -- Runic Bolt\n            264556, -- Tearing Strike\n            264153, -- Spit\n            278444, -- Infest\n            265881, -- Decaying Touch\n            265880, -- Dread Mark\n            268278, -- Wracking Chord\n            261438, -- Wasting Strike\n            261440, -- Virulent Pathogen\n        }\n        \n        local atalDazar = {\n            253562, -- Wildfire\n            254959, -- Soul Burn\n            252923, -- Venom Blast\n            252687, -- Venomfang Strike\n            250096, -- Wracking Pain\n        }\n        \n        local underrot = {\n            265084, -- Blood Bolt\n            260879, -- Blood Bolt (boss)\n            278961, -- Decaying Mind\n            266265, -- Wicked Embrace\n            272180, -- Void Spit\n        }\n        \n        local freehold = {\n            259092, -- Lightning Bolt\n            257908, -- Oiled Blade\n            281420, -- Water Bolt\n        }\n        \n        --Legion Dungeons\n        \n        local darkheartThicket = {\n            204243, -- Tormenting Eye\n            200238, -- Feed on the Weak\n            200185, -- Nightmare Bolt\n            200684, -- Nightmare Toxin\n            200642, -- Despair\n            201411, -- Firebolt\n            201837, -- Shadow Bolt\n        }\n        \n        local blackRookHold = {\n            199663, -- Soul Blast\n            200248, -- Arcane Blitz\n        }\n        \n        local neltharionsLair = {\n            186269, -- Stone Bolt\n            198496, -- Sunder\n            210150, -- Toxic Retch\n            200732, -- Molten Crash\n        }\n        \n        local hallsOfValor = {\n            198595, -- Thunderous Bolt\n            198962, -- Shattered Rune\n            198959, -- Etch\n            191976, -- Arcing Bolt\n            192288, -- Searing Light\n        }\n        \n        local courtOfStars = {\n            209036, -- Throw Torch\n            209413, -- Suppress\n            211406, -- Firebolt\n            211473, -- Shadow Slash\n            373364, -- Vampiric Claws\n        }\n        \n        --WoD Dungeons\n        \n        local everbloom = {\n            169657, -- Poisonous Claws\n            168040, -- Nature's Wrath\n            168092, -- Water Bolt\n            169840, -- Frostbolt\n            169841, -- Arcane Blast\n            169839, -- Pyroblast\n            427858, -- Fireball\n            164965, -- Choking Vines\n        }\n        \n        local shadowmoonBurialGrounds = {\n            152814, -- Shadow Bolt\n            152819, -- Shadow Word: Frailty\n            156776, -- Rending Voidlash\n            398206, -- Death Blast\n            153067, -- Void Devastation\n            153524, -- Plague Spit\n        }\n        \n        --MoP Dungeons\n        \n        local templeOfTheJadeSerpent = {\n            397888, -- Hydrolance\n            114803, -- Throw Torch\n            114571, -- Agony\n            397914, -- Defiling Mist\n            397931, -- Dark Claw\n            106823, -- Serpent Strike\n        }\n        \n        --Cata Dungeons\n        \n        local throneOfTheTides = {\n            426731, -- Water Bolt\n            428542, -- Crushing Depths\n            426768, -- Lightning Bolt\n            75992, -- Lightning Surge\n            428374, -- Focused Tempest\n            426783, -- Mind Flay\n            429048, -- Flame Shock\n            429173, -- Mind Rot\n            429176, -- Aquablast\n            428526, -- Ink Blast\n            428889, -- Foul Bolt\n        }\n        \n        local vortexPinnacle = {\n            410873, -- Rushing Wind\n            86331, -- Lightning Bolt\n            411019, -- Starlight\n            87762, -- Lightning Lash\n            87622, -- Chain Lightning\n        }\n        \n        local grimBatol = {\n            447966, --Shadowflame bolt (Boss)\n            76369, --Shadowflame bolt (adds)\n            450087, --Depth's Grasp\n            451971, --Lava Fist\n            451241, --Shadowflame Slash\n        }\n        \n        -- Raids\n        local liberationOfUndermine = {\n            460847, --Electric Blast - Reel Assistant - One-armed bandit\n            1219384, -- Scrap Rockets - Scrapmaster - Stix Bunkjunker\n        }\n        \n        local nerubarPalace = {\n            438807, --Vicious Bite - Broodtwister\n            441362, --Volatile Concoction - Broodtwister\n            441772, --Void Bolt - Silken Court\n            438200, --Poison Bolt - Silken Court\n        }\n        \n        local amidrassil = {\n            431302, -- Fyr'alath's Flame, Fyrakk\n            421284, -- Coiling Flames, Volcoross\n        }\n        \n        local aberrus = {\n            403203, -- Flame Slash, Amalgamation Chamber\n            403699, -- Shadow Spike\n            397386, -- Lava Bolt, trash\n            410351, -- Flaming Cudgel, Assault\n        }\n        \n        local vault = {\n            396040, -- Pyroblast, Eranog\n            372394, -- Lightning Bolt, Council\n            372315, -- Frost Spike\n            372275, -- Chain Lightning\n            385812, -- Aerial Slash, Dathea\n            375716, -- Ice Barrage, Diurna\n            385553, -- Storm Bolt\n            375653, -- Static Jolt\n        }\n        \n        local zones = {\n            liberationOfUndermine,\n            operationFloodgate,\n            theaterOfPain,\n            theMotherlode,\n            mechagonWorkshop,\n            nerubarPalace,\n            araKara,\n            cityOfThreads,\n            grimBatol,\n            mistsOfTirnaScithe,\n            siegeOfBoralus,\n            theDawnbreaker,\n            theNecroticWake,\n            theStonevault,\n            cinderbrewMeadery,\n            darkflameCleft,\n            prioryOfTheSacredFlame,\n            theRookery,\n            rubyLifePools,\n            azureVault,\n            brackenhideHollow,\n            uldaman,\n            neltharus,\n            algetharAcademy,\n            nokhudOffensive,\n            hallsOfInfusion,\n            darkheartThicket,\n            everbloom,\n            throneOfTheTides,\n            waycrestManor,\n            atalDazar,\n            blackRookHold,\n            vortexPinnacle,\n            underrot,\n            freehold,\n            neltharionsLair,\n            templeOfTheJadeSerpent,\n            courtOfStars,\n            shadowmoonBurialGrounds,\n            hallsOfValor,\n            murozondsRise,\n            galakrondsFall,\n            amidrassil,\n            aberrus,\n            vault,\n        }\n        \n        for i = 1, #zones do\n            local zone = zones[i]\n            \n            for k = 1, #zone do\n                local id = zone[k]\n                modTable.reflectableSpells[id] = true\n            end\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.tick then\n        unitFrame.castBar.tick:Hide()\n    end\nend",
},
["Prio"] = 99,
["Time"] = 1739453586,
["PlaterCore"] = 1,
["Desc"] = "Shows who a cast is targeting in the cast bar as well as other configurable options.",
["Name"] = "Enhanced Castbar - Jundies",
["Icon"] = 429383,
["LastHookEdited"] = "Initialization",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1741123345,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 133004,
["Enabled"] = true,
["Revision"] = 108,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Cast Update",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
},
["Time"] = 1741124745,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = true,
["Revision"] = 908,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 99,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "qwdqwd",
["Value"] = 0,
["Key"] = "qweqew",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Interrupt ready color",
["Value"] = {
0,
1,
0,
1,
},
["Key"] = "readyColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Name"] = "Will be ready color",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Key"] = "willBeReadyColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Name"] = "Reaction time",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "reactionTime",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Name"] = "Border thickness",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "borderThickness",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Enable default border",
["Value"] = false,
["Key"] = "defaultBorderToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Name"] = "Default Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "defaultColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Exact indicator in cast bar",
["Value"] = true,
["Key"] = "castBarIndicatorToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Name"] = "Indicator color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "interruptIndicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
},
["version"] = -1,
},
},
["script_banned_user"] = {
["Player-3674-08A5D7A3"] = true,
},
["auras_per_row_auto"] = false,
["cast_statusbar_fadeout_time"] = 0.4999999701976776,
["aura_stack_size"] = 8,
["auras_per_row_amount2"] = 2,
["range_check_power_bar_alpha"] = 0.8999999761581421,
["range_check_health_bar_alpha"] = 0.75,
["bossmod_support_enabled"] = false,
["health_statusbar_bgcolor"] = {
0.21176472306252,
0.21176472306252,
0.21176472306252,
1,
},
["aura_show_crowdcontrol"] = true,
["blizzard_nameplate_large_font_size"] = 9,
["cast_colors"] = {
[358320] = {
false,
"white",
"",
},
},
["extra_icon_timer_outline"] = "OUTLINE",
["aura_border_colors"] = {
["enrage"] = {
0.70196078431373,
0,
0.054901960784314,
},
["steal_or_purge"] = {
nil,
0.92549019607843,
1,
},
["crowdcontrol"] = {
1,
1,
1,
},
["is_show_all"] = {
0.70196080207825,
0.10196079313755,
0.10196079313755,
},
["offensive"] = {
nil,
0.65098039215686,
0.10196078431373,
0,
},
["is_buff"] = {
nil,
0,
0,
},
},
["castbar_target_anchor"] = {
["y"] = -1.5,
["x"] = -13,
},
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_timer_size"] = 11,
["target_highlight_color"] = {
0.9921568627451,
1,
0.97254901960784,
},
["cast_statusbar_color_channeling"] = {
1,
nil,
0.035294119268656,
1,
},
["extra_icon_anchor"] = {
["x"] = -1,
},
["extra_icon_wide_icon"] = false,
["extra_icon_stack_outline"] = "OUTLINE",
["range_check_alpha"] = 0.8999999761581421,
["click_space"] = {
141,
21,
},
["extra_icon_auras"] = {
328501,
328986,
204490,
"Rescind",
409463,
"Breath of Eons",
278431,
323059,
438706,
372824,
388523,
114404,
22703,
164275,
77505,
255941,
200672,
377014,
451026,
440179,
273721,
76151,
456252,
456245,
1330,
423246,
439208,
448977,
423839,
460156,
296080,
434743,
434745,
460603,
1215595,
256493,
1215194,
},
["aura2_grow_direction"] = 3,
["semver"] = "11.1.0",
["bossmod_aura_glow_expiring"] = false,
["aura_frame2_anchor"] = {
["y"] = 1.5,
["x"] = -1.199996948242188,
["side"] = 1,
},
["use_name_translit"] = true,
["cast_statusbar_texture"] = "You Are Beautiful!",
["cast_statusbar_spark_texture"] = "Interface\\AddOns\\Plater\\images\\spark2",
["auto_toggle_friendly"] = {
["arena"] = true,
},
["indicator_faction"] = false,
["show_softinteract_icons"] = false,
["extra_icon_height"] = 21,
["aura_x_offset"] = 1.199996948242188,
["range_check_alpha_friendlies"] = 1,
["transparency_behavior"] = 2,
["spell_animations"] = false,
["ui_parent_scale_tune"] = 0.300000011920929,
["debuff_show_cc_border"] = {
1,
1,
1,
},
["aura_stack_color"] = {
nil,
0,
0.062745098039216,
},
["aura_consolidate"] = true,
["indicator_raidmark_anchor"] = {
["y"] = 7.819999694824219,
["x"] = 0,
["side"] = 12,
},
["extra_icon_width"] = 22,
["aura_show_enrage"] = true,
["aura_tracker"] = {
["debuff_banned"] = {
["353354"] = true,
["444736"] = true,
["461498"] = false,
["444834"] = false,
["374557"] = false,
["331016"] = false,
["392388"] = true,
["443404"] = false,
["458169"] = false,
["295367"] = true,
["204167"] = false,
["269576"] = true,
["424965"] = true,
["453599"] = false,
["370898"] = false,
["417490"] = true,
["394021"] = true,
["394453"] = false,
["394255"] = true,
["273836"] = true,
["452229"] = false,
["314113"] = true,
["294909"] = true,
["281242"] = true,
["206760"] = true,
["381628"] = true,
["279416"] = true,
["390271"] = false,
["321330"] = true,
["294934"] = true,
["388550"] = true,
["324260"] = true,
["204206"] = false,
["426339"] = true,
["391568"] = true,
["454025"] = false,
["356372"] = false,
["360277"] = true,
["403391"] = true,
["345466"] = true,
["382426"] = true,
["378983"] = true,
["211793"] = false,
["255909"] = true,
["389788"] = false,
["354052"] = true,
["429750"] = true,
["356995"] = false,
["410790"] = false,
["463192"] = true,
["455366"] = true,
["397712"] = true,
["352534"] = true,
["394328"] = true,
["256148"] = true,
["331653"] = true,
["204242"] = true,
["397478"] = true,
["449217"] = true,
["205027"] = false,
["358379"] = true,
["420144"] = true,
["457928"] = false,
["169623"] = true,
["286581"] = true,
["356329"] = true,
["406770"] = true,
["244813"] = false,
["443541"] = true,
["373281"] = false,
["392490"] = false,
["5760"] = true,
["6343"] = true,
["461981"] = false,
["457133"] = false,
["377359"] = false,
},
["buff_banned"] = {
["318486"] = true,
["323961"] = true,
["333553"] = true,
["422682"] = false,
["396106"] = true,
["236502"] = true,
["5760"] = true,
["396098"] = true,
["343553"] = true,
["396109"] = true,
["343613"] = false,
["216777"] = true,
["327416"] = false,
["302564"] = true,
["417039"] = false,
["292664"] = true,
["61574"] = true,
["303380"] = true,
["333575"] = true,
["317602"] = true,
["286145"] = true,
["425565"] = false,
["268710"] = true,
["333579"] = true,
["441394"] = false,
["61573"] = true,
["206150"] = true,
["311571"] = true,
["209746"] = true,
["284882"] = true,
["284471"] = true,
["422067"] = false,
["266499"] = true,
["396113"] = true,
},
["buff"] = {
273607,
283928,
311975,
343208,
197862,
66235,
344548,
189949,
343196,
317929,
259895,
290494,
327993,
322540,
332672,
321708,
305395,
41450,
200327,
290583,
320407,
236801,
194223,
333920,
74001,
212753,
175395,
197874,
200816,
196718,
173898,
315948,
122783,
322108,
343150,
296497,
344363,
205202,
255016,
289626,
337851,
228048,
341857,
23333,
198144,
292152,
321702,
29166,
197061,
215776,
209194,
272682,
212640,
216451,
79542,
187827,
124974,
207812,
212295,
34976,
196555,
129035,
316849,
265314,
69369,
321745,
316828,
278454,
285272,
279043,
203048,
198817,
316834,
344878,
320379,
335255,
231627,
328767,
198111,
125174,
317138,
322110,
284508,
236439,
328682,
325208,
185422,
317138,
213602,
323048,
},
["debuff_tracked"] = {
["409990"] = true,
["335372"] = false,
["323059"] = false,
},
["debuff"] = {
315341,
207756,
280322,
340075,
316220,
280321,
319504,
256495,
190533,
345569,
347037,
},
["buff_tracked"] = {
["227931"] = true,
["365338"] = true,
["368364"] = true,
["389808"] = true,
["233210"] = true,
["338510"] = false,
["1221063"] = false,
["438706"] = true,
["256493"] = false,
["385528"] = true,
["460603"] = false,
["343502"] = false,
["209859"] = true,
["297133"] = true,
["440177"] = false,
["343503"] = true,
["163689"] = true,
["465420"] = false,
["434745"] = false,
},
},
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Execute Range"] = 1,
["Attacking Specific Unit"] = 2,
["Extra Border"] = 2,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Combo Points"] = 6,
["Monk Statue"] = 2,
},
["extra_icon_border_color"] = {
1,
1,
1,
},
["update_throttle"] = 0.24999998509884,
["target_highlight_texture"] = "Interface\\AddOns\\Plater\\images\\selection_indicator2",
["minor_width_scale"] = 0.99999994039536,
["blizzard_nameplate_large_font"] = "Expressway",
["indicator_elite"] = false,
["auras_per_row_amount"] = 4,
["bossmod_aura_width"] = 33,
["indicator_pet"] = false,
["castbar_icon_size"] = "same as castbar plus healthbar",
["aura_frame1_anchor"] = {
["y"] = 1.5,
["x"] = 1.199996948242188,
["side"] = 7,
},
["npc_colors"] = {
[99358] = {
true,
false,
"fuchsia",
},
[198716] = {
true,
false,
"blue",
},
[196798] = {
true,
false,
"deepskyblue",
},
[186696] = {
true,
false,
"fuchsia",
},
[194241] = {
true,
false,
"blue",
},
[205622] = {
true,
false,
"mediumpurple",
},
[231325] = {
true,
false,
"mediumpurple",
},
[95842] = {
true,
false,
"deepskyblue",
},
[211121] = {
true,
false,
"mediumpurple",
},
[216364] = {
true,
false,
"fuchsia",
},
[221863] = {
true,
false,
"deepskyblue",
},
[184140] = {
true,
false,
"fuchsia",
},
[99359] = {
true,
false,
"mediumpurple",
},
[180432] = {
true,
false,
"blue",
},
[173655] = {
true,
false,
"mediumpurple",
},
[95779] = {
true,
false,
"mediumpurple",
},
[129602] = {
true,
false,
"mediumpurple",
},
[180433] = {
true,
false,
"fuchsia",
},
[231839] = {
true,
false,
"deepskyblue",
},
[208438] = {
true,
false,
"mediumpurple",
},
[212786] = {
true,
false,
"mediumpurple",
},
[197697] = {
true,
false,
"fuchsia",
},
[212403] = {
true,
false,
"blue",
},
[164578] = {
true,
false,
"mediumpurple",
},
[197698] = {
true,
false,
"fuchsia",
},
[175576] = {
true,
false,
"fuchsia",
},
[208440] = {
true,
false,
"mediumpurple",
},
[126918] = {
true,
false,
"blue",
},
[196548] = {
true,
false,
"deepskyblue",
},
[135552] = {
true,
false,
"blue",
},
[218671] = {
true,
false,
"deepskyblue",
},
[130435] = {
true,
false,
"mediumpurple",
},
[186191] = {
true,
false,
"blue",
},
[135169] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[83761] = {
true,
false,
"mediumpurple",
},
[98275] = {
true,
false,
"blue",
},
[221102] = {
true,
false,
"deepskyblue",
},
[178392] = {
true,
false,
"fuchsia",
},
[40634] = {
true,
false,
"deepskyblue",
},
[200387] = {
true,
false,
"mediumpurple",
},
[221103] = {
true,
false,
"mediumpurple",
},
[199748] = {
true,
false,
"deepskyblue",
},
[165222] = {
true,
false,
"blue",
},
[198214] = {
true,
false,
"fuchsia",
},
[184020] = {
true,
false,
"mediumpurple",
},
[220976] = {
true,
false,
"fuchsia",
},
[223150] = {
true,
false,
"deepskyblue",
},
[199749] = {
true,
false,
"mediumpurple",
},
[168420] = {
true,
false,
"blue",
},
[165479] = {
true,
false,
"mediumpurple",
},
[212793] = {
true,
false,
"fuchsia",
},
[178139] = {
true,
false,
"mediumpurple",
},
[83763] = {
true,
false,
"deepskyblue",
},
[184022] = {
true,
false,
"deepskyblue",
},
[220978] = {
true,
false,
"fuchsia",
},
[75899] = {
true,
false,
"fuchsia",
},
[210109] = {
true,
false,
"mediumpurple",
},
[212411] = {
true,
false,
"mediumpurple",
},
[199368] = {
true,
false,
"fuchsia",
},
[168934] = {
true,
false,
"fuchsia",
},
[211261] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[190034] = {
true,
false,
"mediumpurple",
},
[83892] = {
true,
false,
"deepskyblue",
},
[188244] = {
true,
false,
"mediumpurple",
},
[178142] = {
true,
false,
"deepskyblue",
},
[157810] = {
true,
false,
"deepskyblue",
},
[208193] = {
true,
false,
"blue",
},
[200137] = {
true,
false,
"deepskyblue",
},
[165483] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"fuchsia",
},
[168425] = {
true,
false,
"fuchsia",
},
[208450] = {
true,
false,
"mediumpurple",
},
[83893] = {
true,
false,
"blue",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"blue",
},
[227632] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"deepskyblue",
},
[217658] = {
true,
false,
"fuchsia",
},
[177889] = {
true,
false,
"fuchsia",
},
[187224] = {
true,
false,
"blue",
},
[211904] = {
true,
false,
"fuchsia",
},
[134284] = {
true,
false,
"deepskyblue",
},
[194897] = {
true,
false,
"fuchsia",
},
[217531] = {
true,
false,
"fuchsia",
},
[167532] = {
true,
false,
"mediumpurple",
},
[114584] = {
true,
false,
"mediumpurple",
},
[98280] = {
true,
false,
"deepskyblue",
},
[167533] = {
true,
false,
"mediumpurple",
},
[177891] = {
true,
false,
"mediumpurple",
},
[172265] = {
true,
false,
"deepskyblue",
},
[227635] = {
true,
false,
"deepskyblue",
},
[217533] = {
true,
false,
"fuchsia",
},
[167534] = {
true,
false,
"mediumpurple",
},
[177892] = {
true,
false,
"blue",
},
[220986] = {
true,
false,
"fuchsia",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"deepskyblue",
},
[131858] = {
true,
false,
"mediumpurple",
},
[168942] = {
true,
false,
"blue",
},
[45912] = {
true,
false,
"deepskyblue",
},
[207177] = {
true,
false,
"mediumpurple",
},
[127757] = {
true,
false,
"mediumpurple",
},
[208456] = {
true,
false,
"blue",
},
[220988] = {
true,
false,
"fuchsia",
},
[190426] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"blue",
},
[162038] = {
true,
false,
"mediumpurple",
},
[98538] = {
true,
false,
"fuchsia",
},
[150146] = {
true,
false,
"fuchsia",
},
[137103] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"blue",
},
[162039] = {
true,
false,
"deepskyblue",
},
[156157] = {
true,
false,
"blue",
},
[167538] = {
true,
false,
"mediumpurple",
},
[75713] = {
true,
false,
"deepskyblue",
},
[180070] = {
true,
false,
"fuchsia",
},
[198868] = {
true,
false,
"deepskyblue",
},
[229686] = {
true,
false,
"deepskyblue",
},
[199124] = {
true,
false,
"deepskyblue",
},
[208459] = {
true,
false,
"deepskyblue",
},
[52019] = {
true,
false,
"fuchsia",
},
[83578] = {
true,
false,
"mediumpurple",
},
[198869] = {
true,
false,
"deepskyblue",
},
[195928] = {
true,
false,
"mediumpurple",
},
[97197] = {
true,
false,
"deepskyblue",
},
[203857] = {
true,
false,
"deepskyblue",
},
[198870] = {
true,
false,
"blue",
},
[195929] = {
true,
false,
"mediumpurple",
},
[221760] = {
true,
false,
"blue",
},
[231223] = {
true,
false,
"deepskyblue",
},
[75459] = {
true,
false,
"deepskyblue",
},
[195930] = {
true,
false,
"mediumpurple",
},
[170483] = {
true,
false,
"fuchsia",
},
[39392] = {
true,
false,
"mediumpurple",
},
[193373] = {
true,
false,
"fuchsia",
},
[190688] = {
true,
false,
"mediumpurple",
},
[168310] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"blue",
},
[136470] = {
true,
false,
"deepskyblue",
},
[208208] = {
true,
false,
"mediumpurple",
},
[75652] = {
true,
false,
"fuchsia",
},
[197595] = {
true,
false,
"mediumpurple",
},
[203861] = {
true,
false,
"mediumpurple",
},
[190690] = {
true,
false,
"mediumpurple",
},
[179821] = {
true,
false,
"fuchsia",
},
[83389] = {
true,
false,
"mediumpurple",
},
[157571] = {
true,
false,
"deepskyblue",
},
[173044] = {
true,
false,
"deepskyblue",
},
[154758] = {
true,
false,
"fuchsia",
},
[193760] = {
true,
false,
"mediumpurple",
},
[118491] = {
true,
false,
"deepskyblue",
},
[115486] = {
true,
false,
"mediumpurple",
},
[220742] = {
true,
false,
"fuchsia",
},
[215755] = {
true,
false,
"fuchsia",
},
[157572] = {
true,
false,
"deepskyblue",
},
[164861] = {
true,
false,
"blue",
},
[114783] = {
true,
false,
"deepskyblue",
},
[105704] = {
true,
false,
"blue",
},
[166396] = {
true,
false,
"blue",
},
[166524] = {
true,
false,
"deepskyblue",
},
[215756] = {
true,
false,
"fuchsia",
},
[187240] = {
true,
false,
"mediumpurple",
},
[129553] = {
true,
false,
"fuchsia",
},
[180335] = {
true,
false,
"deepskyblue",
},
[202969] = {
true,
false,
"fuchsia",
},
[214350] = {
true,
false,
"deepskyblue",
},
[168443] = {
true,
false,
"blue",
},
[77700] = {
true,
false,
"deepskyblue",
},
[84989] = {
true,
false,
"deepskyblue",
},
[184300] = {
true,
false,
"mediumpurple",
},
[180336] = {
true,
false,
"deepskyblue",
},
[170234] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"deepskyblue",
},
[168572] = {
true,
false,
"blue",
},
[191206] = {
true,
false,
"deepskyblue",
},
[184301] = {
true,
false,
"deepskyblue",
},
[202971] = {
true,
false,
"deepskyblue",
},
[225605] = {
true,
false,
"deepskyblue",
},
[115488] = {
true,
false,
"blue",
},
[214608] = {
true,
false,
"deepskyblue",
},
[84990] = {
true,
false,
"blue",
},
[81985] = {
true,
false,
"deepskyblue",
},
[122969] = {
true,
false,
"deepskyblue",
},
[100527] = {
true,
false,
"deepskyblue",
},
[191847] = {
true,
false,
"deepskyblue",
},
[163459] = {
true,
false,
"blue",
},
[217039] = {
true,
false,
"mediumpurple",
},
[225479] = {
true,
false,
"blue",
},
[197219] = {
true,
false,
"mediumpurple",
},
[165762] = {
true,
false,
"fuchsia",
},
[122970] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"blue",
},
[76104] = {
true,
false,
"blue",
},
[165763] = {
true,
false,
"deepskyblue",
},
[135329] = {
true,
false,
"fuchsia",
},
[81603] = {
true,
false,
"mediumpurple",
},
[210264] = {
true,
false,
"blue",
},
[196198] = {
true,
false,
"blue",
},
[174843] = {
true,
false,
"mediumpurple",
},
[198500] = {
true,
false,
"deepskyblue",
},
[122971] = {
true,
false,
"mediumpurple",
},
[166276] = {
true,
false,
"mediumpurple",
},
[168578] = {
true,
false,
"deepskyblue",
},
[150292] = {
true,
false,
"fuchsia",
},
[218961] = {
true,
false,
"fuchsia",
},
[45917] = {
true,
false,
"mediumpurple",
},
[220368] = {
true,
false,
"yellow",
},
[211289] = {
true,
false,
"fuchsia",
},
[150165] = {
true,
false,
"deepskyblue",
},
[186226] = {
true,
false,
"fuchsia",
},
[122972] = {
true,
false,
"deepskyblue",
},
[207198] = {
true,
false,
"deepskyblue",
},
[92538] = {
true,
false,
"fuchsia",
},
[170882] = {
true,
false,
"blue",
},
[99891] = {
true,
false,
"mediumpurple",
},
[218324] = {
true,
false,
"fuchsia",
},
[211291] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"blue",
},
[212826] = {
true,
false,
"fuchsia",
},
[164873] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"blue",
},
[75979] = {
true,
false,
"fuchsia",
},
[213338] = {
true,
false,
"deepskyblue",
},
[164461] = {
true,
false,
"deepskyblue",
},
[150168] = {
true,
false,
"fuchsia",
},
[80816] = {
true,
false,
"deepskyblue",
},
[180091] = {
true,
false,
"mediumpurple",
},
[129559] = {
true,
false,
"fuchsia",
},
[132126] = {
true,
false,
"blue",
},
[223423] = {
true,
false,
"mediumpurple",
},
[186741] = {
true,
false,
"deepskyblue",
},
[162047] = {
true,
false,
"mediumpurple",
},
[150169] = {
true,
false,
"blue",
},
[150297] = {
true,
false,
"blue",
},
[180429] = {
true,
false,
"mediumpurple",
},
[151657] = {
true,
false,
"deepskyblue",
},
[189555] = {
true,
false,
"deepskyblue",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"deepskyblue",
},
[182778] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"mediumpurple",
},
[229069] = {
true,
false,
"deepskyblue",
},
[164707] = {
true,
false,
"mediumpurple",
},
[185032] = {
true,
false,
"mediumpurple",
},
[196671] = {
true,
false,
"mediumpurple",
},
[163086] = {
true,
false,
"mediumpurple",
},
[203230] = {
true,
false,
"blue",
},
[227514] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"deepskyblue",
},
[183497] = {
true,
false,
"blue",
},
[200126] = {
true,
false,
"blue",
},
[150253] = {
true,
false,
"mediumpurple",
},
[173189] = {
true,
false,
"deepskyblue",
},
[178171] = {
true,
false,
"fuchsia",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"fuchsia",
},
[129369] = {
true,
false,
"fuchsia",
},
[97720] = {
true,
false,
"fuchsia",
},
[212831] = {
true,
false,
"fuchsia",
},
[223777] = {
true,
false,
"blue",
},
[45919] = {
true,
false,
"mediumpurple",
},
[115407] = {
true,
false,
"blue",
},
[187768] = {
true,
false,
"deepskyblue",
},
[122973] = {
true,
false,
"blue",
},
[205623] = {
true,
false,
"mediumpurple",
},
[171384] = {
true,
false,
"blue",
},
[228514] = {
true,
false,
"deepskyblue",
},
[222167] = {
true,
false,
"deepskyblue",
},
[176974] = {
true,
false,
"fuchsia",
},
[153882] = {
true,
false,
"deepskyblue",
},
[179841] = {
true,
false,
"deepskyblue",
},
[187897] = {
true,
false,
"fuchsia",
},
[180864] = {
true,
false,
"fuchsia",
},
[151325] = {
true,
false,
"fuchsia",
},
[120651] = {
true,
false,
"gold",
},
[190174] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"mediumpurple",
},
[213217] = {
true,
false,
"deepskyblue",
},
[189816] = {
true,
false,
"deepskyblue",
},
[44404] = {
true,
false,
"deepskyblue",
},
[188026] = {
true,
false,
"fuchsia",
},
[168717] = {
true,
false,
"deepskyblue",
},
[144293] = {
true,
false,
"mediumpurple",
},
[194895] = {
true,
false,
"deepskyblue",
},
[183423] = {
true,
false,
"deepskyblue",
},
[165137] = {
true,
false,
"mediumpurple",
},
[187771] = {
true,
false,
"blue",
},
[176598] = {
true,
false,
"blue",
},
[183033] = {
true,
false,
"mediumpurple",
},
[168718] = {
true,
false,
"blue",
},
[144294] = {
true,
false,
"deepskyblue",
},
[184319] = {
true,
false,
"blue",
},
[165010] = {
true,
false,
"mediumpurple",
},
[200943] = {
true,
false,
"mediumpurple",
},
[216621] = {
true,
false,
"fuchsia",
},
[150142] = {
true,
false,
"deepskyblue",
},
[214066] = {
true,
false,
"blue",
},
[191225] = {
true,
false,
"mediumpurple",
},
[206698] = {
true,
false,
"blue",
},
[234443] = {
true,
false,
"fuchsia",
},
[183425] = {
true,
false,
"blue",
},
[105715] = {
true,
false,
"blue",
},
[154014] = {
true,
false,
"deepskyblue",
},
[212453] = {
true,
false,
"deepskyblue",
},
[129372] = {
true,
false,
"blue",
},
[210269] = {
true,
false,
"mediumpurple",
},
[144296] = {
true,
false,
"mediumpurple",
},
[205804] = {
true,
false,
"mediumpurple",
},
[179334] = {
true,
false,
"fuchsia",
},
[206696] = {
true,
false,
"mediumpurple",
},
[230740] = {
true,
false,
"fuchsia",
},
[84400] = {
true,
false,
"mediumpurple",
},
[164737] = {
true,
false,
"fuchsia",
},
[187969] = {
true,
false,
"blue",
},
[191739] = {
true,
false,
"mediumpurple",
},
[224219] = {
true,
false,
"deepskyblue",
},
[190588] = {
true,
false,
"mediumpurple",
},
[135474] = {
true,
false,
"blue",
},
[186208] = {
true,
false,
"mediumpurple",
},
[224731] = {
true,
false,
"mediumpurple",
},
[179847] = {
true,
false,
"fuchsia",
},
[170850] = {
true,
false,
"fuchsia",
},
[211816] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"blue",
},
[223773] = {
true,
false,
"blue",
},
[191230] = {
true,
false,
"fuchsia",
},
[176523] = {
true,
false,
"mediumpurple",
},
[133685] = {
true,
false,
"fuchsia",
},
[198326] = {
true,
false,
"mediumpurple",
},
[190206] = {
true,
false,
"blue",
},
[180104] = {
true,
false,
"deepskyblue",
},
[224221] = {
true,
false,
"mediumpurple",
},
[114796] = {
true,
false,
"blue",
},
[184580] = {
true,
false,
"deepskyblue",
},
[102232] = {
true,
false,
"blue",
},
[96574] = {
true,
false,
"mediumpurple",
},
[210539] = {
true,
false,
"mediumpurple",
},
[190207] = {
true,
false,
"deepskyblue",
},
[169875] = {
true,
false,
"blue",
},
[195927] = {
true,
false,
"mediumpurple",
},
[184023] = {
true,
false,
"blue",
},
[206064] = {
true,
false,
"blue",
},
[170480] = {
true,
false,
"mediumpurple",
},
[104247] = {
true,
false,
"deepskyblue",
},
[130909] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"deepskyblue",
},
[206704] = {
true,
false,
"mediumpurple",
},
[180473] = {
true,
false,
"blue",
},
[212775] = {
true,
false,
"deepskyblue",
},
[133432] = {
true,
false,
"deepskyblue",
},
[154020] = {
true,
false,
"deepskyblue",
},
[168658] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"blue",
},
[191232] = {
true,
false,
"blue",
},
[98813] = {
true,
false,
"deepskyblue",
},
[165913] = {
true,
false,
"fuchsia",
},
[45922] = {
true,
false,
"deepskyblue",
},
[206066] = {
true,
false,
"deepskyblue",
},
[115019] = {
true,
false,
"deepskyblue",
},
[221667] = {
true,
false,
"deepskyblue",
},
[173714] = {
true,
false,
"mediumpurple",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"deepskyblue",
},
[115757] = {
true,
false,
"mediumpurple",
},
[155812] = {
true,
false,
"blue",
},
[133430] = {
true,
false,
"mediumpurple",
},
[224609] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"mediumpurple",
},
[178141] = {
true,
false,
"blue",
},
[186220] = {
true,
false,
"deepskyblue",
},
[196044] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"deepskyblue",
},
[154744] = {
true,
false,
"fuchsia",
},
[230748] = {
true,
false,
"fuchsia",
},
[166299] = {
true,
false,
"blue",
},
[129788] = {
true,
false,
"deepskyblue",
},
[56792] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"blue",
},
[190340] = {
true,
false,
"blue",
},
[229537] = {
true,
false,
"yellow",
},
[204918] = {
true,
false,
"blue",
},
[196045] = {
true,
false,
"deepskyblue",
},
[84520] = {
true,
false,
"mediumpurple",
},
[223844] = {
true,
false,
"deepskyblue",
},
[130400] = {
true,
false,
"mediumpurple",
},
[171799] = {
true,
false,
"fuchsia",
},
[165471] = {
true,
false,
"blue",
},
[184331] = {
true,
false,
"mediumpurple",
},
[212389] = {
true,
false,
"blue",
},
[180495] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"deepskyblue",
},
[59555] = {
true,
false,
"fuchsia",
},
[40936] = {
true,
false,
"mediumpurple",
},
[231197] = {
true,
false,
"mediumpurple",
},
[199549] = {
true,
false,
"fuchsia",
},
[98368] = {
true,
false,
"mediumpurple",
},
[122984] = {
true,
false,
"fuchsia",
},
[41096] = {
true,
false,
"blue",
},
[166302] = {
true,
false,
"deepskyblue",
},
[97068] = {
true,
false,
"mediumpurple",
},
[234557] = {
true,
false,
"fuchsia",
},
[228015] = {
true,
false,
"mediumpurple",
},
[167965] = {
true,
false,
"blue",
},
[165919] = {
true,
false,
"mediumpurple",
},
[40357] = {
true,
false,
"fuchsia",
},
[195842] = {
true,
false,
"blue",
},
[174197] = {
true,
false,
"deepskyblue",
},
[104251] = {
true,
false,
"fuchsia",
},
[173720] = {
true,
false,
"mediumpurple",
},
[163618] = {
true,
false,
"blue",
},
[168318] = {
true,
false,
"mediumpurple",
},
[101438] = {
true,
false,
"blue",
},
[168988] = {
true,
false,
"fuchsia",
},
[40925] = {
true,
false,
"mediumpurple",
},
[196576] = {
true,
false,
"blue",
},
[220060] = {
true,
false,
"blue",
},
[152033] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"deepskyblue",
},
[167967] = {
true,
false,
"blue",
},
[184335] = {
true,
false,
"deepskyblue",
},
[189706] = {
true,
false,
"yellow",
},
[206074] = {
true,
false,
"deepskyblue",
},
[98370] = {
true,
false,
"deepskyblue",
},
[165410] = {
true,
false,
"mediumpurple",
},
[205435] = {
true,
false,
"mediumpurple",
},
[163620] = {
true,
false,
"mediumpurple",
},
[205691] = {
true,
false,
"blue",
},
[83025] = {
true,
false,
"blue",
},
[157017] = {
true,
false,
"blue",
},
[81212] = {
true,
false,
"mediumpurple",
},
[171805] = {
true,
false,
"blue",
},
[179733] = {
true,
false,
"fuchsia",
},
[80938] = {
true,
false,
"mediumpurple",
},
[163621] = {
true,
false,
"mediumpurple",
},
[227513] = {
true,
false,
"deepskyblue",
},
[168992] = {
true,
false,
"deepskyblue",
},
[205152] = {
true,
false,
"mediumpurple",
},
[208244] = {
true,
false,
"deepskyblue",
},
[164510] = {
true,
false,
"blue",
},
[196102] = {
true,
false,
"deepskyblue",
},
[177816] = {
true,
false,
"deepskyblue",
},
[98243] = {
true,
false,
"mediumpurple",
},
[188302] = {
true,
false,
"yellow",
},
[83026] = {
true,
false,
"mediumpurple",
},
[114803] = {
true,
false,
"deepskyblue",
},
[239836] = {
true,
false,
"fuchsia",
},
[130404] = {
true,
false,
"mediumpurple",
},
[81236] = {
true,
false,
"deepskyblue",
},
[177817] = {
true,
false,
"blue",
},
[220730] = {
true,
false,
"mediumpurple",
},
[190686] = {
true,
false,
"blue",
},
[198502] = {
true,
false,
"deepskyblue",
},
[82579] = {
true,
false,
"deepskyblue",
},
[200836] = {
true,
false,
"mediumpurple",
},
[213751] = {
true,
false,
"yellow",
},
[165414] = {
true,
false,
"deepskyblue",
},
[155824] = {
true,
false,
"blue",
},
[193291] = {
true,
false,
"fuchsia",
},
[151476] = {
true,
false,
"mediumpurple",
},
[175517] = {
true,
false,
"blue",
},
[114804] = {
true,
false,
"blue",
},
[220401] = {
true,
false,
"fuchsia",
},
[136643] = {
true,
false,
"mediumpurple",
},
[205384] = {
true,
false,
"deepskyblue",
},
[224962] = {
true,
false,
"deepskyblue",
},
[187154] = {
true,
false,
"fuchsia",
},
[98081] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"deepskyblue",
},
[135365] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[114542] = {
true,
false,
"blue",
},
[129552] = {
true,
false,
"mediumpurple",
},
[176521] = {
true,
false,
"blue",
},
[187155] = {
true,
false,
"blue",
},
[210812] = {
true,
false,
"deepskyblue",
},
[163882] = {
true,
false,
"mediumpurple",
},
[169893] = {
true,
false,
"fuchsia",
},
[167116] = {
true,
false,
"fuchsia",
},
[95834] = {
true,
false,
"fuchsia",
},
[201222] = {
true,
false,
"mediumpurple",
},
[173729] = {
true,
false,
"fuchsia",
},
[194317] = {
true,
false,
"mediumpurple",
},
[84499] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"mediumpurple",
},
[86526] = {
true,
false,
"blue",
},
[198501] = {
true,
false,
"deepskyblue",
},
[201223] = {
true,
false,
"blue",
},
[188673] = {
true,
false,
"mediumpurple",
},
[227300] = {
true,
false,
"mediumpurple",
},
[134012] = {
true,
false,
"mediumpurple",
},
[115765] = {
true,
false,
"fuchsia",
},
[200840] = {
true,
false,
"mediumpurple",
},
[228463] = {
true,
false,
"deepskyblue",
},
[199595] = {
true,
false,
"mediumpurple",
},
[156212] = {
true,
false,
"deepskyblue",
},
[100485] = {
true,
false,
"mediumpurple",
},
[131821] = {
true,
false,
"blue",
},
[116549] = {
true,
false,
"deepskyblue",
},
[214012] = {
true,
false,
"mediumpurple",
},
[214140] = {
true,
false,
"mediumpurple",
},
[136139] = {
true,
false,
"fuchsia",
},
[182045] = {
true,
false,
"fuchsia",
},
[81432] = {
true,
false,
"deepskyblue",
},
[133835] = {
true,
false,
"blue",
},
[222964] = {
true,
false,
"deepskyblue",
},
[213885] = {
true,
false,
"fuchsia",
},
[41139] = {
true,
false,
"blue",
},
[155830] = {
true,
false,
"deepskyblue",
},
[95769] = {
true,
false,
"deepskyblue",
},
[183707] = {
true,
false,
"deepskyblue",
},
[210818] = {
true,
false,
"blue",
},
[163121] = {
true,
false,
"blue",
},
[187160] = {
true,
false,
"blue",
},
[165805] = {
true,
false,
"mediumpurple",
},
[155221] = {
true,
false,
"deepskyblue",
},
[155831] = {
true,
false,
"fuchsia",
},
[59553] = {
true,
false,
"mediumpurple",
},
[206214] = {
true,
false,
"mediumpurple",
},
[101637] = {
true,
false,
"mediumpurple",
},
[187033] = {
true,
false,
"mediumpurple",
},
[168747] = {
true,
false,
"fuchsia",
},
[102404] = {
true,
false,
"mediumpurple",
},
[167113] = {
true,
false,
"blue",
},
[100486] = {
true,
false,
"deepskyblue",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"blue",
},
[92610] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"blue",
},
[168109] = {
true,
false,
"deepskyblue",
},
[189235] = {
true,
false,
"mediumpurple",
},
[135245] = {
true,
false,
"mediumpurple",
},
[76446] = {
true,
false,
"blue",
},
[162099] = {
true,
false,
"fuchsia",
},
[194315] = {
true,
false,
"mediumpurple",
},
[196115] = {
true,
false,
"fuchsia",
},
[45704] = {
true,
false,
"dimgray",
},
[115640] = {
true,
false,
"fuchsia",
},
[138187] = {
true,
false,
"fuchsia",
},
[96587] = {
true,
false,
"deepskyblue",
},
[82597] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"blue",
},
[168007] = {
true,
false,
"blue",
},
[131666] = {
true,
false,
"blue",
},
[196856] = {
true,
false,
"mediumpurple",
},
[212739] = {
true,
false,
"mediumpurple",
},
[192791] = {
true,
false,
"fuchsia",
},
[189466] = {
true,
false,
"mediumpurple",
},
[45928] = {
true,
false,
"mediumpurple",
},
[227573] = {
true,
false,
"mediumpurple",
},
[176551] = {
true,
false,
"deepskyblue",
},
[219983] = {
true,
false,
"mediumpurple",
},
[144071] = {
true,
false,
"deepskyblue",
},
[227575] = {
true,
false,
"blue",
},
[190362] = {
true,
false,
"blue",
},
[224249] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"blue",
},
[136549] = {
true,
false,
"fuchsia",
},
[59547] = {
true,
false,
"mediumpurple",
},
[196117] = {
true,
false,
"mediumpurple",
},
[213893] = {
true,
false,
"deepskyblue",
},
[223994] = {
true,
false,
"deepskyblue",
},
[213892] = {
true,
false,
"deepskyblue",
},
[186420] = {
true,
false,
"deepskyblue",
},
[213913] = {
true,
false,
"deepskyblue",
},
[163126] = {
true,
false,
"deepskyblue",
},
[193944] = {
true,
false,
"blue",
},
[220946] = {
true,
false,
"mediumpurple",
},
[165556] = {
true,
false,
"fuchsia",
},
[115642] = {
true,
false,
"blue",
},
[209801] = {
true,
false,
"fuchsia",
},
[163894] = {
true,
false,
"blue",
},
[228424] = {
true,
false,
"deepskyblue",
},
[167963] = {
true,
false,
"blue",
},
[176573] = {
true,
false,
"fuchsia",
},
[129370] = {
true,
false,
"deepskyblue",
},
[169905] = {
true,
false,
"blue",
},
[188703] = {
true,
false,
"yellow",
},
[162744] = {
true,
false,
"mediumpurple",
},
[189470] = {
true,
false,
"deepskyblue",
},
[171184] = {
true,
false,
"mediumpurple",
},
[163128] = {
true,
false,
"deepskyblue",
},
[175992] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"deepskyblue",
},
[168627] = {
true,
false,
"deepskyblue",
},
[204560] = {
true,
false,
"yellow",
},
[94224] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"blue",
},
[227578] = {
true,
false,
"deepskyblue",
},
[186658] = {
true,
false,
"deepskyblue",
},
[168882] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"deepskyblue",
},
[223822] = {
true,
false,
"fuchsia",
},
[216326] = {
true,
false,
"deepskyblue",
},
[199717] = {
true,
false,
"mediumpurple",
},
[167876] = {
true,
false,
"fuchsia",
},
[133463] = {
true,
false,
"mediumpurple",
},
[115388] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"deepskyblue",
},
[197145] = {
true,
false,
"mediumpurple",
},
[236033] = {
true,
false,
"blue",
},
[218884] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[199703] = {
true,
false,
"fuchsia",
},
[207199] = {
true,
false,
"blue",
},
[216340] = {
true,
false,
"fuchsia",
},
[197146] = {
true,
false,
"mediumpurple",
},
[156226] = {
true,
false,
"deepskyblue",
},
[153285] = {
false,
false,
"yellow",
},
[131586] = {
true,
false,
"mediumpurple",
},
[168886] = {
true,
false,
"deepskyblue",
},
[134232] = {
true,
false,
"blue",
},
[45930] = {
true,
false,
"fuchsia",
},
[216328] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"mediumpurple",
},
[196203] = {
true,
false,
"deepskyblue",
},
[40943] = {
true,
false,
"deepskyblue",
},
[183671] = {
true,
false,
"fuchsia",
},
[190370] = {
true,
false,
"mediumpurple",
},
[166969] = {
true,
false,
"deepskyblue",
},
[220815] = {
true,
false,
"blue",
},
[192800] = {
true,
false,
"deepskyblue",
},
[220974] = {
true,
false,
"fuchsia",
},
[221945] = {
true,
false,
"fuchsia",
},
[168594] = {
true,
false,
"mediumpurple",
},
[180348] = {
true,
false,
"blue",
},
[168153] = {
true,
false,
"fuchsia",
},
[166970] = {
true,
false,
"blue",
},
[82590] = {
true,
false,
"blue",
},
[163862] = {
true,
false,
"blue",
},
[131677] = {
true,
false,
"fuchsia",
},
[197149] = {
true,
false,
"deepskyblue",
},
[102287] = {
true,
false,
"mediumpurple",
},
[198503] = {
true,
false,
"deepskyblue",
},
[172981] = {
true,
false,
"mediumpurple",
},
[166971] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[152905] = {
true,
false,
"fuchsia",
},
[216338] = {
true,
false,
"mediumpurple",
},
[164414] = {
true,
false,
"deepskyblue",
},
[197406] = {
true,
false,
"fuchsia",
},
[128434] = {
true,
false,
"blue",
},
[190373] = {
true,
false,
"deepskyblue",
},
[164926] = {
true,
false,
"fuchsia",
},
[199325] = {
true,
false,
"deepskyblue",
},
[166589] = {
true,
false,
"fuchsia",
},
[206230] = {
true,
false,
"fuchsia",
},
[114624] = {
true,
false,
"mediumpurple",
},
[167612] = {
true,
false,
"blue",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"mediumpurple",
},
[214287] = {
true,
false,
"yellow",
},
[198047] = {
true,
false,
"blue",
},
[168384] = {
true,
false,
"blue",
},
[164702] = {
true,
false,
"fuchsia",
},
[144295] = {
true,
false,
"blue",
},
[177716] = {
true,
false,
"deepskyblue",
},
[167998] = {
true,
false,
"mediumpurple",
},
[86684] = {
true,
false,
"deepskyblue",
},
[76518] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"deepskyblue",
},
[205337] = {
true,
false,
"fuchsia",
},
[189227] = {
true,
false,
"fuchsia",
},
[101326] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"blue",
},
[40167] = {
true,
false,
"blue",
},
[118489] = {
true,
false,
"fuchsia",
},
[192934] = {
true,
false,
"blue",
},
[179842] = {
true,
false,
"fuchsia",
},
[214673] = {
true,
false,
"deepskyblue",
},
[190377] = {
true,
false,
"blue",
},
[229251] = {
true,
false,
"mediumpurple",
},
[180015] = {
true,
false,
"blue",
},
[208698] = {
true,
false,
"fuchsia",
},
[195876] = {
true,
false,
"deepskyblue",
},
[84767] = {
true,
false,
"fuchsia",
},
[184107] = {
true,
false,
"mediumpurple",
},
[163524] = {
true,
false,
"fuchsia",
},
[114626] = {
true,
false,
"fuchsia",
},
[229252] = {
true,
false,
"blue",
},
[210966] = {
true,
false,
"blue",
},
[98810] = {
true,
false,
"mediumpurple",
},
[195877] = {
true,
false,
"fuchsia",
},
[214419] = {
true,
false,
"blue",
},
[205212] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"mediumpurple",
},
[113537] = {
true,
false,
"mediumpurple",
},
[163520] = {
true,
false,
"mediumpurple",
},
[152898] = {
true,
false,
"fuchsia",
},
[101008] = {
true,
false,
"fuchsia",
},
[102095] = {
true,
false,
"blue",
},
[227581] = {
true,
false,
"deepskyblue",
},
[131685] = {
true,
false,
"deepskyblue",
},
[198308] = {
true,
false,
"mediumpurple",
},
[114627] = {
true,
false,
"blue",
},
[167607] = {
true,
false,
"mediumpurple",
},
[233474] = {
true,
false,
"deepskyblue",
},
[169861] = {
true,
false,
"blue",
},
[216339] = {
true,
false,
"blue",
},
[214421] = {
true,
false,
"mediumpurple",
},
[155090] = {
true,
false,
"deepskyblue",
},
[196263] = {
true,
false,
"deepskyblue",
},
[157634] = {
true,
false,
"blue",
},
[190381] = {
true,
false,
"fuchsia",
},
[180474] = {
true,
false,
"fuchsia",
},
[188067] = {
true,
false,
"deepskyblue",
},
[115395] = {
true,
false,
"mediumpurple",
},
[206697] = {
true,
false,
"deepskyblue",
},
[104270] = {
true,
false,
"mediumpurple",
},
[80805] = {
true,
false,
"mediumpurple",
},
[198424] = {
true,
false,
"blue",
},
[205727] = {
true,
false,
"blue",
},
[197671] = {
true,
false,
"blue",
},
[197799] = {
true,
false,
"deepskyblue",
},
[144298] = {
true,
false,
"fuchsia",
},
[59552] = {
true,
false,
"blue",
},
[192796] = {
true,
false,
"blue",
},
[198311] = {
true,
false,
"mediumpurple",
},
[130485] = {
true,
false,
"fuchsia",
},
[224732] = {
true,
false,
"deepskyblue",
},
[189265] = {
true,
false,
"blue",
},
[206705] = {
false,
false,
"blue",
},
[211262] = {
true,
false,
"fuchsia",
},
[175550] = {
true,
false,
"fuchsia",
},
[173190] = {
true,
false,
"deepskyblue",
},
[126919] = {
true,
false,
"deepskyblue",
},
[231176] = {
true,
false,
"yellow",
},
[169924] = {
true,
false,
"mediumpurple",
},
[224271] = {
true,
false,
"deepskyblue",
},
[167111] = {
true,
false,
"deepskyblue",
},
[211228] = {
true,
false,
"blue",
},
[114629] = {
true,
false,
"blue",
},
[151127] = {
true,
false,
"fuchsia",
},
[162763] = {
true,
false,
"mediumpurple",
},
[189234] = {
true,
false,
"fuchsia",
},
[129527] = {
true,
false,
"blue",
},
[203812] = {
true,
false,
"fuchsia",
},
[179388] = {
true,
false,
"deepskyblue",
},
[101075] = {
true,
false,
"fuchsia",
},
[176575] = {
true,
false,
"deepskyblue",
},
[87252] = {
true,
false,
"mediumpurple",
},
[131819] = {
true,
false,
"deepskyblue",
},
[176959] = {
true,
false,
"deepskyblue",
},
[80935] = {
true,
false,
"deepskyblue",
},
[189464] = {
true,
false,
"blue",
},
[169159] = {
true,
false,
"gold",
},
[131436] = {
true,
false,
"mediumpurple",
},
[194990] = {
true,
false,
"deepskyblue",
},
[156244] = {
true,
false,
"mediumpurple",
},
[96664] = {
true,
false,
"blue",
},
[212765] = {
true,
false,
"mediumpurple",
},
[169927] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"blue",
},
[185528] = {
true,
false,
"deepskyblue",
},
[185656] = {
true,
false,
"deepskyblue",
},
[131587] = {
true,
false,
"mediumpurple",
},
[156245] = {
true,
false,
"mediumpurple",
},
[59873] = {
true,
false,
"mediumpurple",
},
[135241] = {
true,
false,
"deepskyblue",
},
[80936] = {
true,
false,
"blue",
},
[164557] = {
true,
false,
"mediumpurple",
},
[185529] = {
true,
false,
"fuchsia",
},
[165197] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"mediumpurple",
},
[199233] = {
true,
false,
"mediumpurple",
},
[114334] = {
true,
false,
"mediumpurple",
},
[129529] = {
true,
false,
"fuchsia",
},
[223253] = {
true,
false,
"deepskyblue",
},
[45935] = {
true,
false,
"deepskyblue",
},
[178165] = {
true,
false,
"fuchsia",
},
[189878] = {
true,
false,
"yellow",
},
[192767] = {
true,
false,
"mediumpurple",
},
[114266] = {
true,
false,
"deepskyblue",
},
[114632] = {
true,
false,
"deepskyblue",
},
[205735] = {
true,
false,
"blue",
},
[198702] = {
true,
false,
"mediumpurple",
},
[223774] = {
true,
false,
"blue",
},
[208165] = {
true,
false,
"deepskyblue",
},
[168396] = {
true,
false,
"mediumpurple",
},
[86372] = {
true,
false,
"mediumpurple",
},
[133870] = {
true,
false,
"deepskyblue",
},
[179010] = {
true,
false,
"deepskyblue",
},
[95771] = {
true,
false,
"blue",
},
[228540] = {
true,
false,
"deepskyblue",
},
[199547] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"deepskyblue",
},
[211290] = {
true,
false,
"fuchsia",
},
[213806] = {
true,
false,
"deepskyblue",
},
[171376] = {
true,
false,
"blue",
},
[114633] = {
true,
false,
"mediumpurple",
},
[231312] = {
true,
false,
"deepskyblue",
},
[88163] = {
true,
false,
"fuchsia",
},
[166301] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"deepskyblue",
},
[170572] = {
true,
false,
"blue",
},
[164562] = {
true,
false,
"fuchsia",
},
[167964] = {
true,
false,
"fuchsia",
},
[198577] = {
true,
false,
"blue",
},
[85194] = {
true,
false,
"fuchsia",
},
[180323] = {
true,
false,
"fuchsia",
},
[162133] = {
true,
false,
"fuchsia",
},
[40166] = {
true,
false,
"mediumpurple",
},
[150160] = {
true,
false,
"mediumpurple",
},
[164563] = {
true,
false,
"blue",
},
[221979] = {
true,
false,
"fuchsia",
},
[114544] = {
true,
false,
"fuchsia",
},
[179269] = {
true,
false,
"fuchsia",
},
[40577] = {
true,
false,
"mediumpurple",
},
[171341] = {
true,
false,
"deepskyblue",
},
[178630] = {
true,
false,
"deepskyblue",
},
[223770] = {
true,
false,
"blue",
},
[81984] = {
true,
false,
"mediumpurple",
},
[83894] = {
true,
false,
"mediumpurple",
},
[194487] = {
true,
false,
"blue",
},
[226200] = {
true,
false,
"blue",
},
[165076] = {
true,
false,
"blue",
},
[194894] = {
true,
false,
"blue",
},
[204206] = {
true,
false,
"blue",
},
[177808] = {
true,
false,
"mediumpurple",
},
[175861] = {
true,
false,
"fuchsia",
},
[45915] = {
true,
false,
"mediumpurple",
},
[214761] = {
true,
false,
"mediumpurple",
},
[168156] = {
true,
false,
"fuchsia",
},
[185537] = {
true,
false,
"blue",
},
[171343] = {
true,
false,
"fuchsia",
},
[155908] = {
true,
false,
"fuchsia",
},
[223772] = {
true,
false,
"blue",
},
[191164] = {
true,
false,
"fuchsia",
},
[184131] = {
true,
false,
"fuchsia",
},
[179852] = {
true,
false,
"blue",
},
[198709] = {
true,
false,
"mediumpurple",
},
[114316] = {
true,
false,
"deepskyblue",
},
[75506] = {
true,
false,
"deepskyblue",
},
[129367] = {
true,
false,
"blue",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"deepskyblue",
},
[184132] = {
true,
false,
"blue",
},
[198263] = {
true,
false,
"mediumpurple",
},
[129374] = {
true,
false,
"mediumpurple",
},
[83390] = {
true,
false,
"deepskyblue",
},
[167536] = {
true,
false,
"mediumpurple",
},
[162040] = {
true,
false,
"fuchsia",
},
[115020] = {
true,
false,
"mediumpurple",
},
[127111] = {
true,
false,
"blue",
},
[130635] = {
true,
false,
"blue",
},
[166275] = {
true,
false,
"deepskyblue",
},
[197985] = {
true,
false,
"deepskyblue",
},
[114317] = {
true,
false,
"deepskyblue",
},
[150143] = {
true,
false,
"blue",
},
[186229] = {
true,
false,
"mediumpurple",
},
[223775] = {
true,
false,
"blue",
},
[164451] = {
true,
false,
"mediumpurple",
},
[65317] = {
true,
false,
"mediumpurple",
},
[168418] = {
true,
false,
"deepskyblue",
},
[220195] = {
true,
false,
"deepskyblue",
},
[183495] = {
true,
false,
"mediumpurple",
},
[163458] = {
true,
false,
"deepskyblue",
},
[214441] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"blue",
},
[214697] = {
true,
false,
"fuchsia",
},
[205618] = {
true,
false,
"mediumpurple",
},
[201288] = {
true,
false,
"fuchsia",
},
[220196] = {
true,
false,
"fuchsia",
},
[233623] = {
true,
false,
"fuchsia",
},
[178008] = {
true,
false,
"yellow",
},
[213343] = {
true,
false,
"mediumpurple",
},
[205363] = {
true,
false,
"deepskyblue",
},
[180431] = {
true,
false,
"deepskyblue",
},
[205619] = {
true,
false,
"mediumpurple",
},
[219046] = {
true,
false,
"deepskyblue",
},
[220197] = {
true,
false,
"mediumpurple",
},
[127106] = {
true,
false,
"fuchsia",
},
[213954] = {
true,
false,
"mediumpurple",
},
[173016] = {
true,
false,
"deepskyblue",
},
[192333] = {
true,
false,
"mediumpurple",
},
[150250] = {
true,
false,
"deepskyblue",
},
[205620] = {
true,
false,
"mediumpurple",
},
[190403] = {
true,
false,
"mediumpurple",
},
[129600] = {
true,
false,
"deepskyblue",
},
[114319] = {
true,
false,
"blue",
},
[115406] = {
true,
false,
"deepskyblue",
},
[104300] = {
true,
false,
"deepskyblue",
},
[195135] = {
true,
false,
"fuchsia",
},
[150251] = {
true,
false,
"blue",
},
[207796] = {
true,
false,
"fuchsia",
},
},
["tocversion"] = 110007,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["target_highlight"] = false,
["disable_omnicc_on_auras"] = true,
["aura_width"] = 19,
["aura_show_debuffs_personal"] = false,
["aura_timer_text_font"] = "Expressway",
["aura_alpha"] = 1,
["extra_icon_timer_font"] = "Expressway",
["pet_width_scale"] = 0.99999994039536,
["not_affecting_combat_alpha"] = 1,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[980] = true,
[172] = true,
},
},
},
},
["cast_statusbar_color_finished"] = {
0.27843137254902,
0.75294117647059,
0.23529411764706,
},
["extra_icon_stack_font"] = "Expressway",
["tank"] = {
["colors"] = {
["pulling_from_tank"] = {
0.54117647058824,
0.43137254901961,
},
["anothertank"] = {
0.50196078431373,
0.50196078431373,
},
["aggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
["noaggro"] = {
0.8666667342186,
0.43529415130615,
},
["nocombat"] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
["pulling"] = {
nil,
0.91372549019608,
0.22745098039216,
},
},
},
["target_shady_combat_only"] = false,
["non_targeted_alpha_enabled"] = true,
["castbar_target_font"] = "Expressway",
["target_highlight_alpha"] = 1,
["aura2_x_offset"] = -1.199996948242188,
["target_indicator"] = "Double Arrows",
["aura_width2"] = 19,
["resources"] = {
["scale"] = 0.75,
["y_offset"] = 51.58999633789063,
["y_offset_target"] = 0,
},
["range_check_in_range_or_target_alpha_friendlies"] = 1,
["cast_statusbar_use_fade_effects"] = false,
["range_check_cast_bar_alpha"] = 0.8999999761581421,
["extra_icon_caster_font"] = "Expressway",
["color_override_colors"] = {
[3] = {
0.74509803921569,
0.18823529411765,
0.11372549019608,
},
[4] = {
1,
0.79607850313187,
0.20784315466881,
},
},
["target_shady_alpha"] = 0,
["target_shady_enabled"] = false,
["tap_denied_color"] = {
0.46666666666667,
0.46666666666667,
0.46666666666667,
},
["pet_height_scale"] = 0.99999994039536,
["range_check_buffs_alpha"] = 0.75,
["version"] = 112,
["target_highlight_height"] = 10,
["show_health_prediction"] = false,
["patch_version"] = 39,
["login_counter"] = 55476,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
120,
1,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n        \n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 144244 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(282801))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 3 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["Time"] = 1739452862,
["Icon"] = "524354",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    local color = \"gray\"\n    \n    function envTable.updateNameplateColor(unitFrame)\n        if not InCombatLockdown() then\n            return\n        end\n        \n        -- Hardened Carapace stacks on Shattereshell Scarab\n        if unitFrame.namePlateNpcId == 144244 then\n            local auraInfo = C_UnitAuras.GetAuraDataBySpellName(unitId, C_Spell.GetSpellName(282801))\n            \n            if auraInfo and auraInfo.applications and auraInfo.applications <= 3 then\n                Plater.SetNameplateColor(unitFrame) -- omitting a color should reset it\n                return\n            end\n        end\n        \n        Plater.SetNameplateColor(unitFrame, color)\n    end\nend",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 676,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable) end",
["Name"] = "Invalidate Unit - Jundies",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
350857,
352016,
235308,
235089,
367573,
362020,
232156,
374779,
113309,
117665,
379256,
396734,
406730,
403049,
410631,
410654,
403284,
421013,
425794,
260923,
264027,
75683,
336499,
335141,
256957,
440177,
438706,
451026,
325697,
442611,
458199,
457877,
469981,
282801,
467117,
465420,
1219283,
1222948,
471660,
1213817,
260189,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.updateNameplateColor(unitFrame)\nend",
["Temp_Initialization"] = "function (self, unitId, unitFrame, envTable) end",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable) end",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
["fontColor"] = {
1,
1,
1,
1,
},
["fontSize"] = 12,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Time"] = 1739456807,
["Icon"] = 136048,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 14, \"orange\");\n    envTable.EnergyAmount:SetPoint (\"top\", unitFrame, \"left\", -8, 20);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend",
["NpcNames"] = {
"171557",
"162060",
"168318",
"184140",
"182169",
"196482",
"186120",
"186116",
"189901",
"197025",
"190496",
"189813",
"190245",
"184972",
"184986",
"164558",
"186737",
"186616",
"186615",
"131383",
"133007",
"202375",
"201320",
"201579",
"189340",
"131817",
"209333",
"122967",
"206172",
"200927",
"208367",
"208363",
"218523",
"208743",
"209230",
"162329",
"144248",
"230583",
"228458",
"229181",
"229177",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 625,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Key"] = "fontSize",
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Name"] = "Show Energy - Jundies",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1739453001,
["Icon"] = 413591,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.options = {\n        color = \"yellow\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1.\n        N = 6, -- number of lines. Defaul value is 8;\n        frequency = 0.5, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = 4, -- length of lines. Default value depends on region size and number of lines;\n        th = 2, -- thickness of lines. Default value is 2;\n        xOffset = 0.5,\n        yOffset = 0.5, -- offset of glow relative to region border;\n        border = false, -- set to true to create border under lines;\n        key = \"pandemicGlow\",\n    }\n    \nend\n\n\n",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 369,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    --insert code here\n    envTable.pandemicTime = envTable.pandemicTime or {}\n    envTable.pandemicTime[self.spellId..unitId] = envTable._RemainingTime * 0.3\nend\n\n\n",
["Name"] = "Pandemic Glow - Jundies",
["Author"] = "Viash-Thrall",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Adds a configurable pixel border glow to the buff/debuff if the remaining duration is less than 30% of its total duration.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
292711,
278946,
212463,
284402,
284401,
2818,
703,
1943,
295425,
283668,
316220,
258179,
207690,
315341,
1822,
1079,
106830,
202347,
204213,
391191,
980,
172,
445468,
445465,
316099,
383346,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --if (timeLeft < (envTable.pandemicTime[self.spellId..unitId] or (envTable._Duration*0.3))) then\n    if (timeLeft < (envTable._Duration*0.3)) then\n        if not self.glowStarted then\n            self.glowStarted = true\n            Plater.StartPixelGlow(self.Cooldown, nil, envTable.options, envTable.options.key)\n        end\n    else\n        if self.glowStarted then\n            self.glowStarted = false\n            Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.StopPixelGlow(self.Cooldown, envTable.options.key)\n    self.glowStarted = false\n    \n    envTable.pandemicTime[self.spellId..unitId] = nil\n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
["useCastbarColor"] = false,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741123143,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["NpcNames"] = {
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 1347,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.56470588235294,
0.56470588235294,
0.56470588235294,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.41176470588235,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Name"] = "Important Casts - Jundies",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
3636,
376171,
350687,
372735,
373017,
392488,
268030,
257784,
337943,
320822,
333292,
341840,
324987,
333478,
178072,
330438,
329423,
350287,
334928,
348428,
330532,
358980,
351073,
358026,
351603,
356023,
330513,
334076,
237946,
237952,
312262,
242733,
362628,
316443,
356031,
356011,
356001,
355642,
355644,
355782,
355057,
356133,
357260,
357284,
347015,
355139,
336451,
364240,
364241,
361923,
368063,
356407,
363024,
355584,
334664,
340300,
366288,
232120,
228554,
228009,
228025,
228019,
227977,
228278,
228280,
228567,
29339,
169341,
162415,
340037,
373513,
373618,
167232,
227646,
375606,
386549,
385568,
385393,
388211,
211464,
215433,
371983,
373405,
391599,
387627,
375653,
388392,
387862,
392457,
396812,
383823,
371624,
393309,
393296,
391268,
393429,
374623,
390548,
391019,
387615,
152818,
225100,
210261,
212784,
392486,
397889,
395859,
385331,
388804,
156718,
398206,
106856,
106864,
397394,
367500,
377488,
377612,
385574,
215204,
212773,
397382,
257426,
265540,
265542,
278961,
403978,
403671,
257397,
278755,
413044,
265511,
183528,
193803,
193585,
410870,
87779,
374045,
374699,
385029,
373897,
378282,
384161,
369675,
369465,
369365,
411302,
274400,
400296,
405433,
408805,
411994,
413607,
412922,
417481,
418200,
411300,
412378,
412233,
407124,
415304,
412012,
421029,
421031,
420525,
425816,
265368,
264390,
264407,
263959,
253583,
252781,
255041,
256849,
200630,
204243,
201399,
168082,
427459,
164965,
164887,
169839,
200345,
76813,
429176,
76820,
200248,
225562,
436841,
334748,
324293,
434802,
322938,
256957,
275826,
446700,
257169,
272571,
449455,
429109,
443430,
451871,
76711,
338353,
432967,
433841,
452162,
431309,
450756,
451097,
462508,
429428,
407120,
386024,
444743,
427609,
432959,
424420,
440687,
448248,
429545,
447950,
447411,
445021,
333623,
257732,
460092,
330868,
342675,
474337,
280604,
267433,
269302,
293827,
301088,
441627,
460582,
448791,
428169,
427601,
428066,
1220752,
341969,
263628,
1215741,
441351,
1219041,
448492,
268702,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["url"] = "",
},
{
["ConstructorCode"] = "function()\nend",
["OnHideCode"] = "function()\nend",
["OptionsValues"] = {
["debuffed"] = 0.79999995231628,
["casting"] = 1.1999999284744,
["hide"] = true,
},
["Temp_OnShowCode"] = "function()\nend\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    local isDebuffed = scriptTable.isDebuffed(unitFrame)\n    \n    if isDebuffed then\n        if scriptTable.config.hide then\n            scriptTable.hide(unitFrame)\n            return\n        end\n        \n        Plater.SetNameplateScale(unitFrame, scriptTable.config.debuffed)\n        -- instantly ccd enemies (e.g. freeze trap) never had the animation start\n        if unitFrame.healthBar.HealthFlashFrame then\n            unitFrame.healthBar.HealthFlashFrame:StopAnimating()\n        end\n        \n        return\n    end\n    scriptTable.show(unitFrame)\n    \n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Time"] = 1739070487,
["Icon"] = 298642,
["Temp_ConstructorCode"] = "function()\nend",
["NpcNames"] = {
"204560",
},
["semver"] = "1.0.6",
["Enabled"] = false,
["Revision"] = 264,
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "nameplate scale while debuffed",
["Min"] = 0,
["Key"] = "debuffed",
["Value"] = 0.8,
["Name"] = "Debuffed Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "nameplate scale while casting",
["Min"] = 0,
["Key"] = "casting",
["Value"] = 1.4,
["Name"] = "Casting Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "hide",
["Value"] = false,
["Name"] = "Hide Nameplate when ccd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["OnShowCode"] = "function()\nend\n\n\n\n",
["Name"] = "Incorporeal - Jundies",
["Author"] = "Ququlcoatl-Blackmoore",
["Initialization"] = "function (scriptTable)\n    -- taken from https://github.com/Tercioo/Plater-Nameplates/blob/master/libs/DF/spells.lua#L916\n    -- but trimmed to only include ccs that would deal with it for good\n    local spells = {\n        [118699] = \"WARLOCK\", -- Fear (debuff spellid)\n        [710] = \"WARLOCK\", -- Banish\n        [118] = \"MAGE\", -- Polymorph\n        [61305] = \"MAGE\", -- Polymorph (black cat)\n        [28271] = \"MAGE\", -- Polymorph Turtle\n        [161354] = \"MAGE\", -- Polymorph Monkey\n        [161353] = \"MAGE\", -- Polymorph Polar Bear Cub\n        [126819] = \"MAGE\", -- Polymorph Porcupine\n        [277787] = \"MAGE\", -- Polymorph Direhorn\n        [61721] = \"MAGE\", -- Polymorph Rabbit\n        [28272] = \"MAGE\", -- Polymorph Pig\n        [277792] = \"MAGE\", -- Polymorph Bumblebee\n        [391622] = \"MAGE\", -- Polymorph Duck\n        [9484] = \"PRIEST\", -- Shackle Undead\n        [2094] = \"ROGUE\", -- Blind\n        [427773] = \"ROGUE\", -- Blind\n        [20066] = \"PALADIN\", -- Repentance (talent)\n        [10326] = \"PALADIN\", -- Turn Evil\n        [2637] = \"DRUID\", -- Hibernate\n        [115078] = \"MONK\", -- Paralysis\n        [51514] = \"SHAMAN\", -- Hex\n        [210873] = \"SHAMAN\", -- Hex (Compy)\n        [211004] = \"SHAMAN\", -- Hex (Spider)\n        [211010] = \"SHAMAN\", -- Hex (Snake)\n        [211015] = \"SHAMAN\", -- Hex (Cockroach)\n        [269352] = \"SHAMAN\", -- Hex (Skeletal Hatchling)\n        [277778] = \"SHAMAN\", -- Hex (Zandalari Tendonripper)\n        [277784] = \"SHAMAN\", -- Hex (Wicker Mongrel)\n        [309328] = \"SHAMAN\", -- Hex (Living Honey)\n        [217832] = \"DEMONHUNTER\", -- Imprison\n        [360806] = \"EVOKER\", -- Sleep Walk\n        [3355] = \"HUNTER\", -- Freezing Trap\n        [1513] = \"HUNTER\" -- Scare Beast\n    }\n    \n    --- @return boolean\n    scriptTable.isDebuffed = function(unitFrame)\n        for spellId in pairs(spells) do\n            if Plater.UnitHasAura(unitFrame, spellId) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    scriptTable.hide = function(unitFrame)\n        -- no check whether its already hidden as it may reappear for whichever\n        -- reason when you turn camera away and back to it again\n        Plater.HideHealthBar(unitFrame)\n        Plater.DisableHighlight(unitFrame)\n        unitFrame._isHidden = true\n    end\n    \n    scriptTable.show = function(unitFrame)\n        if not unitFrame._isHidden then\n            return\n        end\n        \n        Plater.ShowHealthBar(unitFrame)\n        Plater.EnableHighlight(unitFrame)\n        unitFrame._isHidden = false\n    end\nend",
["Desc"] = "conditionally scales the nameplate of Incorporeal Beings when not ccd",
["version"] = 7,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    local isDebuffed = scriptTable.isDebuffed(unitFrame)\n    \n    if isDebuffed then\n        if scriptTable.config.hide then\n            scriptTable.hide(unitFrame)\n            return\n        end\n        \n        Plater.SetNameplateScale(unitFrame, scriptTable.config.debuffed)\n        -- instantly ccd enemies (e.g. freeze trap) never had the animation start\n        if unitFrame.healthBar.HealthFlashFrame then\n            unitFrame.healthBar.HealthFlashFrame:StopAnimating()\n        end\n        \n        return\n    end\n    scriptTable.show(unitFrame)\n    \n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Temp_Initialization"] = "function (scriptTable)\n    -- taken from https://github.com/Tercioo/Plater-Nameplates/blob/master/libs/DF/spells.lua#L916\n    -- but trimmed to only include ccs that would deal with it for good\n    local spells = {\n        [118699] = \"WARLOCK\", -- Fear (debuff spellid)\n        [710] = \"WARLOCK\", -- Banish\n        [118] = \"MAGE\", -- Polymorph\n        [61305] = \"MAGE\", -- Polymorph (black cat)\n        [28271] = \"MAGE\", -- Polymorph Turtle\n        [161354] = \"MAGE\", -- Polymorph Monkey\n        [161353] = \"MAGE\", -- Polymorph Polar Bear Cub\n        [126819] = \"MAGE\", -- Polymorph Porcupine\n        [277787] = \"MAGE\", -- Polymorph Direhorn\n        [61721] = \"MAGE\", -- Polymorph Rabbit\n        [28272] = \"MAGE\", -- Polymorph Pig\n        [277792] = \"MAGE\", -- Polymorph Bumblebee\n        [391622] = \"MAGE\", -- Polymorph Duck\n        [9484] = \"PRIEST\", -- Shackle Undead\n        [2094] = \"ROGUE\", -- Blind\n        [427773] = \"ROGUE\", -- Blind\n        [20066] = \"PALADIN\", -- Repentance (talent)\n        [10326] = \"PALADIN\", -- Turn Evil\n        [2637] = \"DRUID\", -- Hibernate\n        [115078] = \"MONK\", -- Paralysis\n        [51514] = \"SHAMAN\", -- Hex\n        [210873] = \"SHAMAN\", -- Hex (Compy)\n        [211004] = \"SHAMAN\", -- Hex (Spider)\n        [211010] = \"SHAMAN\", -- Hex (Snake)\n        [211015] = \"SHAMAN\", -- Hex (Cockroach)\n        [269352] = \"SHAMAN\", -- Hex (Skeletal Hatchling)\n        [277778] = \"SHAMAN\", -- Hex (Zandalari Tendonripper)\n        [277784] = \"SHAMAN\", -- Hex (Wicker Mongrel)\n        [309328] = \"SHAMAN\", -- Hex (Living Honey)\n        [217832] = \"DEMONHUNTER\", -- Imprison\n        [360806] = \"EVOKER\", -- Sleep Walk\n        [3355] = \"HUNTER\", -- Freezing Trap\n        [1513] = \"HUNTER\" -- Scare Beast\n    }\n    \n    --- @return boolean\n    scriptTable.isDebuffed = function(unitFrame)\n        for spellId in pairs(spells) do\n            if Plater.UnitHasAura(unitFrame, spellId) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    scriptTable.hide = function(unitFrame)\n        -- no check whether its already hidden as it may reappear for whichever\n        -- reason when you turn camera away and back to it again\n        Plater.HideHealthBar(unitFrame)\n        Plater.DisableHighlight(unitFrame)\n        unitFrame._isHidden = true\n    end\n    \n    scriptTable.show = function(unitFrame)\n        if not unitFrame._isHidden then\n            return\n        end\n        \n        Plater.ShowHealthBar(unitFrame)\n        Plater.EnableHighlight(unitFrame)\n        unitFrame._isHidden = false\n    end\nend",
["Temp_OnHideCode"] = "function()\nend",
["url"] = "https://wago.io/8_ULM1VxI/7",
},
{
["ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local araKara = {\n        [214840] = { 30 }, --Engorged Crawler\n    }\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 60 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n        [206710] = { 25 }, -- Lightspawn\n    }\n    \n    local darkflameCleft = {\n        [208747] = { 55 }, -- The Darkness\n    }\n    \n    local cinderbrewMeadery = {\n        [210271] = { 66, 33 },    \n    }\n    \n    \n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n        [164929] = { 20 }, --Tirnenn Villager\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n        [129232] = { 50 }, -- Mogul Razdunk\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local liberationOfUndermine = {\n        [231531] = { 75 }, -- Territorial Bombshell\n        [229953] = { 40 }, -- Mug'Zee\n        [230316] = { 80 }, -- MK II Electro Shocker\n    }\n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        liberationOfUndermine,\n        cinderbrewMeadery,\n        araKara,\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
["indicatorAlpha"] = 0.75,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1739456827,
["NpcNames"] = {
"81236",
"77803",
"150276",
"152009",
"175806",
"114790",
"81297",
"79545",
"177269",
"133345",
"164926",
"114265",
"114261",
"114783",
"180013",
"179931",
"193532",
"116410",
"190485",
"193435",
"188252",
"186738",
"186125",
"186122",
"186124",
"184422",
"96574",
"114312",
"164804",
"164267",
"164967",
"169861",
"162061",
"144298",
"181548",
"181551",
"181546",
"181549",
"183501",
"180906",
"185421",
"163121",
"175730",
"176523",
"175725",
"176929",
"166969",
"166970",
"166971",
"167406",
"173162",
"175732",
"183671",
"114260",
"184581",
"184582",
"184580",
"185534",
"190407",
"194816",
"186151",
"59544",
"186121",
"197697",
"194990",
"76057",
"56732",
"95676",
"94960",
"104215",
"95674",
"189492",
"190484",
"97087",
"184020",
"201261",
"91005",
"113537",
"126983",
"185508",
"186206",
"185528",
"189719",
"129732",
"199659",
"201773",
"201774",
"164218",
"164501",
"162099",
"164451",
"164463",
"164461",
"165946",
"201754",
"203230",
"199000",
"201792",
"198997",
"207639",
"20763",
"129699",
"198933",
"98542",
"98965",
"99192",
"40586",
"40825",
"208445",
"207638",
"131527",
"201668",
"200912",
"200913",
"126832",
"204931",
"189729",
"164929",
"224249",
"219984",
"211087",
"129208",
"164517",
"40320",
"207940",
"213937",
"231531",
"208747",
"229953",
"230316",
"206710",
"129232",
"210271",
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 872,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Prio"] = 99,
["Author"] = "Duracell",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Health Markers - Jundies",
["Enabled"] = true,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (_, _, _, envTable, scriptTable)\n    \n    \n    --TWW Dungeons\n    \n    local araKara = {\n        [214840] = { 30 }, --Engorged Crawler\n    }\n    \n    local cityOfThreads = {\n        [219984] = { 50 }, --Xeph'itik\n    }\n    \n    local dawnbreaker = {\n        [211087] = { 50 }, --Speaker Shadowcrown\n        [213937] = { 60 }, --Rasha'nan\n    }\n    \n    local prioryOfTheSacredFlame = {\n        [207940] = { 50 }, --Prioress Murrpray\n        [206710] = { 25 }, -- Lightspawn\n    }\n    \n    local darkflameCleft = {\n        [208747] = { 55 }, -- The Darkness\n    }\n    \n    local cinderbrewMeadery = {\n        [210271] = { 66, 33 },    \n    }\n    \n    \n    \n    --DF Dungeons\n    \n    local dawnOfTheInfinite = {\n        [207638] = { 80 }, -- Blight of Galakrond\n        [207639] = { 80 }, -- Blight of Galakrond\n        [198997] = { 80 }, -- Blight of Galakrond\n        [201792] = { 50 }, -- Ahnzon\n        [199000] = { 20 }, -- Deios\n        [198933] = { 90, 85 }, -- Iridikron\n    }\n    \n    local rubyLifePools = {\n        [190485] = { 50 }, -- Stormvein\n        [190484] = { 50 }, -- Kyrakka\n        [193435] = { 50 }, -- Kyrakka\n        [188252] = { 75, 45 }, -- Melidrussa Chillworn\n        [197697] = { 50 }, -- Flamegullet\n    }\n    \n    local azureVault = {\n        [186738] = { 75, 50, 25 }, -- Umbrelskul\n    }\n    \n    local brackenhideHollow = {\n        [186125] = { 15 }, -- Tricktotem\n        [186122] = { 15 }, -- Rira Hackclaw\n        [186124] = { 15 }, -- Gashtooth\n        [185534] = { 15 }, -- Bonebolt Hunter\n        [186206] = { 15 }, -- Cruel Bonecrusher\n        [185508] = { 15 }, -- Claw Fighter\n        [185528] = { 15 }, -- Trickclaw Mystic\n        [186121] = { 4 }, -- Decatriarch Wratheye\n        [186227] = { 20 }, -- Monstrous Decay\n    }\n    \n    local neltharus = {\n        [194816] = { 10 }, -- Forgewrought Monstrosity\n    }\n    \n    local hallsOfInfusion = {\n        [189719] = { 15 }, -- Watcher Irideus\n        [190407] = { 20 }, -- Aqua Rager\n        [189729] = { 60 }, -- Primal Tsunami\n    }\n    \n    local nokhudOffensive = {\n        [186151] = { 60 }, --Balakar Khan\n    }\n    \n    local uldaman = {\n        [184020] = { 40 }, -- Hulking Berserker\n        [184580] = { 10 }, -- Olaf\n        [184581] = { 10 }, -- Baelog\n        [184582] = { 10 }, -- Eric \"The Swift\"\n        [184125] = { 1 }, -- Chrono-Lord Deios\n    }\n    \n    --SL Dungeons\n    \n    local theaterOfPain = {\n        [164451] = { 40 }, -- Dessia the Decapitator\n        [164463] = { 40 }, -- Paceran the Virulent\n        [164461] = { 40 }, -- Sathel the Accursed\n        [165946] = { 50 }, -- Mordretha\n    }\n    \n    local mistsOfTirnaScithe = {\n        [164501] = { 70, 40, 10 }, -- Mistcaller\n        [164926] = { 50 }, --Drust Boughbreaker\n        [164804] = { 20 }, -- Droman Oulfarran\n        [164517] = { 70, 40 }, --Tred'ova\n        [164929] = { 20 }, --Tirnenn Villager\n    }\n    \n    local plaguefall = {\n        [164267] = { 66, 33 }, -- Magrave Stradama\n        [164967] = { 66, 33 }, -- Doctor ickus\n        [169861] = { 66, 33 }, -- Ickor Bileflesh\n    }\n    \n    local hallsOfAtonement = {\n        [164218] = { 70, 40 }, --Lord Chamberlain\n    }\n    \n    local sanguineDepths = {\n        [162099] = { 50 }, -- General Kaal Boss fight\n    }\n    \n    local spiresOfAscension = {\n        [162061] = { 70, 30 }, --Devos\n    }\n    \n    local necroticWake = {\n        [163121] = { 70 }, -- Stitched Vanguard\n    }\n    \n    local deOtherSide = {\n        [164558] = { 80, 60, 40, 20 }, -- Hakkar the Soulflayer\n    }\n    \n    local tazaveshGambit = {\n        [177269] = { 40 }, -- So'leah\n    }\n    \n    local tazaveshStreets = {\n        [175806] = { 66, 33 }, -- So'azmi\n    }\n    \n    --BFA Dungeons\n    \n    local freehold = {\n        [126983] = { 60, 30 }, -- Harlan Sweete - Freehold\n        [126832] = { 75 }, -- Skycap'n Kragg - Freehold\n        [129699] = { 90, 70, 50, 30 }, -- Ludwig von Tortollan - Freehold\n    }\n    \n    local waycrest = {\n        [131527] = { 30 }, -- Lord Waycrest\n    }\n    \n    local siegeOfBoralus = {\n        [129208] = { 66, 33 }, -- Dread Captain Lockwood\n    }\n    \n    local motherlode = {\n        [133345] = { 20 }, -- Feckless Assistant\n        [129232] = { 50 }, -- Mogul Razdunk\n    }\n    \n    local junkyard = {\n        [150276] = { 50 }, -- Heavy Scrapbot\n        [152009] = { 30 }, -- Malfunctioning Scrapbots\n        [144298] = { 30 }, -- Defense Bot Mk III (Workshop)\n    }\n    \n    local workshop = {\n        [144298] = { 30 }, -- Defense Bot Mk III (casts a shield)\n    }\n    \n    --Legion Dungeons\n    \n    local karazhanUpper = {\n        [114790] = { 66, 33 }, -- Viz'aduum\n    }\n    \n    local karazhanLower = {\n        [114261] = { 50 }, -- Toe Knee\n        [114260] = { 50 }, -- Mrrgria\n        [114265] = { 50 }, -- Gang Ruffian\n        [114783] = { 50 }, -- Reformed Maiden\n        [114312] = { 60 }, -- Moroes\n    }\n    \n    local hallsOfValor = {\n        [96574] = { 30 }, -- Stormforged Sentinel\n        [95674] = { 60.5 }, -- Fenryr P1\n        [94960] = { 10.5 }, -- Hymdall\n        [95676] = { 80, 5 }, -- Odyn\n    }\n    \n    local courtOfStars = {\n        [104215] = { 25 }, -- Patrol Captain Gerdo\n    }\n    \n    local neltharionsLair = {\n        [91005] = { 20 }, -- Naraxas\n    }\n    \n    local blackRookHold = {\n        [98542] = { 50 }, -- Amalgam of Souls\n        [98965] = { 20 }, -- Kur'talos Ravencrest\n    }\n    \n    local darkheartThicket = {\n        [99192] = { 50 }, -- Shade of Xavius\n    }\n    \n    --WoD Dungeons\n    \n    local grimrailDepot = {\n        [81236] = { 50 }, -- Grimrail Technician\n        [79545] = { 60 }, -- Nitrogg Thundertower\n        [77803] = { 20 }, -- Railmaster Rocketspark\n    }\n    \n    local ironDocks = {\n        [81297] = { 50 }, -- Dreadfang -> Fleshrender Nok'gar\n    }\n    \n    local shadowmoonBurialGrounds = {\n        [76057] = { 20.5 }, -- Carrion Worm\n    }\n    \n    --MoP Dungeons\n    \n    local templeOfTheJadeSerpent = {\n        [59544] = { 50 }, --The Nodding Tiger\n        [56732] = { 70, 30 }, -- Liu Flameheart\n    }\n    \n    --Cata Dungeons\n    \n    local throneOfTheTides = {\n        [40586] = { 60, 30 }, -- Lady Naz'jar\n        [40825] = { 25 }, -- Erunak Stonespeaker\n    }\n    \n    local grimBatol = {\n        [224249] = { 50 }, --Twilight Lavabender\n        [40320] = { 50 }, --Valiona\n    }\n    \n    \n    --Raids \n    \n    local liberationOfUndermine = {\n        [231531] = { 75 }, -- Territorial Bombshell\n        [229953] = { 40 }, -- Mug'Zee\n        [230316] = { 80 }, -- MK II Electro Shocker\n    }\n    \n    local amirdrassil = {\n        [208445] = { 35 }, -- Larodar\n        [204931] = { 70 }, -- Fyrakk\n    }\n    \n    local aberrus = {\n        [201261] = { 80, 60, 40 }, -- Kazzara\n        [201773] = { 50 }, -- Moltannia (Eternal Blaze)\n        [201774] = { 50 }, -- Krozgoth (Essence of Shadow)\n        [201668] = { 60, 35 }, -- Neltharion\n        [200912] = { 50 }, -- Neldris, Experiment\n        [200913] = { 50 }, -- Thadrion, Experiment\n        [199659] = { 25 }, -- Warlord Kagni, Assault of the Zaqali\n        [201754] = { 65, 40 }, -- Sarkareth\n        [203230] = { 50 }, -- Dragonfire Golem, Zskarn\n    }\n    \n    local vault = {\n        [181378] = { 66, 33 }, -- Kurog Grimtotem\n        [194990] = { 50 }, -- Stormseeker Acolyte\n        [189492] = { 65 }, -- Raszageth\n    }\n    \n    local sepulcher = {\n        [181548] = { 40 }, -- Absolution: Prototype Pantheon\n        [181551] = { 40 }, -- Duty: Prototype Pantheon\n        [181546] = { 40 }, -- Renewal: Prototype Pantheon\n        [181549] = { 40 }, -- War: Prototype Pantheon\n        [183501] = { 75, 50 }, --Xymox\n        [180906] = { 78, 45 }, --Halondrus\n        [183671] = { 40 }, -- Monstrous Soul - Anduin\n        [185421] = { 15 }, -- The Jailer\n    }\n    \n    local sanctumOfDomination = {\n        [175730] = { 70, 40 }, -- Fatescribe Roh-Kalo\n        [176523] = { 70, 40 }, -- Painsmith\n        [175725] = { 66, 33 }, -- Eye of the Jailer\n        [176929] = { 60, 20 }, -- Remnant of Kel'Thuzad\n        [175732] = { 83, 50 }, -- Sylvanas Windrunner\n    }\n    \n    local nathria = {\n        [166969] = { 50 }, -- Council of Blood - Frieda\n        [166970] = { 50 }, -- Council of Blood - Stavros\n        [166971] = { 50 }, -- Council of Blood - Niklaus\n        [167406] = { 70.5, 37.5 }, -- Sire Denathrius\n        [173162] = { 66, 33 }, -- Lord Evershade\n    }\n    \n    local openWorld = {\n        [180013] = { 20 }, -- Escaped Wilderling, Shadowlands - Korthia\n        [179931] = { 80, 60 }, -- Relic Breaker krelva, Shadowlands - Korthia\n        [193532] = { 40 }, -- Bazual, The Dreaded Flame, Dragonflight\n    }\n    \n    local mageTower = {\n        [116410] = { 33 }, -- Karam Magespear\n    }\n    \n    envTable.lifePercent = {}\n    \n    local zones = {\n        liberationOfUndermine,\n        cinderbrewMeadery,\n        araKara,\n        darkflameCleft,\n        prioryOfTheSacredFlame,\n        cityOfThreads,\n        dawnbreaker,\n        rubyLifePools,\n        azureVault,\n        brackenhideHollow,\n        neltharus,\n        hallsOfInfusion,\n        nokhudOffensive,\n        uldaman,\n        theaterOfPain,\n        mistsOfTirnaScithe,\n        plaguefall,\n        hallsOfAtonement,\n        sanguineDepths,\n        spiresOfAscension,\n        necroticWake,\n        deOtherSide,\n        tazaveshGambit,\n        tazaveshStreets,\n        freehold,\n        waycrest,\n        siegeOfBoralus,\n        motherlode,\n        junkyard,\n        workshop,\n        karazhanUpper,\n        karazhanLower,\n        hallsOfValor,\n        courtOfStars,\n        neltharionsLair,\n        blackRookHold,\n        darkheartThicket,\n        grimrailDepot,\n        ironDocks,\n        shadowmoonBurialGrounds,\n        templeOfTheJadeSerpent,\n        throneOfTheTides,\n        grimBatol,\n        amirdrassil,\n        aberrus,\n        vault,\n        sepulcher,\n        sanctumOfDomination,\n        nathria,\n        openWorld,\n        mageTower,\n        dawnOfTheInfinite,\n    }\n    \n    for i = 1, #zones do\n        local zone = zones[i]\n        \n        for id, thresholds in pairs(zone) do\n            envTable.lifePercent[id] = thresholds\n        end\n    end\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        \n        if not markersTable then\n            return\n        end\n        \n        local unitLifePercent = envTable._HealthPercent / 100\n        \n        for _, percent in ipairs(markersTable) do\n            percent = percent / 100\n            if unitLifePercent > percent then\n                if not unitFrame.healthMarker then\n                    envTable.CreateMarker(unitFrame)\n                end\n                \n                unitFrame.healthMarker:Show()\n                local width = unitFrame.healthBar:GetWidth()\n                unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width * percent, 0)\n                \n                local overlaySize = width * (unitLifePercent - percent)\n                unitFrame.healthOverlay:SetWidth(overlaySize)\n                unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                \n                unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                \n                unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                \n                return\n            end\n        end\n        \n        if unitFrame.healthMarker and unitFrame.healthMarker:IsShown() then\n            unitFrame.healthMarker:Hide()\n            unitFrame.healthOverlay:Hide()\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["OptionsValues"] = {
["dotsColor"] = {
0,
1,
0.0078431377187371,
1,
},
["outline"] = true,
["nameplateColor"] = {
0.8666667342186,
0.43529415130615,
0,
1,
},
["changeNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["UID"] = "0x669cfe742d32773",
["UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1739456795,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"top\", unitFrame.HealthBar, -22, 15);   \n    envTable.FixateTarget.outline = scriptTable.config.outline\n    envTable.FixateTarget:Hide()\nend\n\n--MISC\n--174773 - Spiteful Shade\n\n--The War Within\n\n--220626 - Parasite\n\n--Ara Kara\n--218961 - Starved Crawler\n\n\n--Dragonflight\n\n--Brackenhide\n--194745 - Rotfang Hyena\n\n--Halls of Infusion\n--190366, 195399 - Curious Swoglet\n\n\n--Shadowlands\n\n--Halls of Atonement\n--165913 - Ghastly Parishioner\n--167898 - Manifestation of Envy\n\n--Necrotic Wake\n--164702 - Carrion Worm\n--167731 - Surgeons before 3rd boss\n\n\n--BFA\n\n--Freehold\n--129529 - Blacktooth Scrapper\n\n--Underrot\n--133835 - Feral Bloodswarmer\n\n--Siege of Boredom\n--128649 - 1st boss\n\n\n--LEGION\n\n--Nelth's Lair\n--101476 - Molten Charskin - Dargrul Encounter\n\n--Blackrook hold\n--102781 - Fel Bat Pup\n\n\n--OLD SHIT\n\n--Throne of the tides\n--212681 - Vicious Snap Dragon\n\n--Temple of the Jade Serpent\n--56792 - Figment of Doubt\n\n\n\n--87329 - test dummy \n\n\n",
["Icon"] = "4630415",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    envTable.FixateTarget:Hide()\n    \n    \nend\n\n\n\n\n",
["Revision"] = 1184,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.8666667342186,
0.43529415130615,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
0,
1,
0.0078431377187371,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Outline Test",
},
},
["NpcNames"] = {
"174773",
"164702",
"165913",
"167898",
"56792",
"194745",
"129529",
"133835",
"101476",
"190366",
"195399",
"212681",
"102781",
"Shattershell Scarab",
"220626",
"218961",
"165251",
"162689",
"167731",
"128649",
"144160",
"40357",
"231014",
"129802",
"235631",
"133482",
"231028",
"231027",
"228502",
"231788",
"235187",
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.colorchanged = false\nend\n\n\n\n\n\n\n\n",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Changes nameplate color to Orange and adds glow to npcs that are fixated on you",
["ScriptType"] = 3,
["Prio"] = 99,
["Name"] = "Fixate - Jundies",
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (_, unitId, unitFrame, envTable, scriptTable)\n    --check if can change the nameplate color\n    local targetName = UnitName(unitId .. \"target\")\n    \n    if not targetName then\n        return\n    end\n    \n    local role = UnitGroupRolesAssigned(unitId .. \"target\")\n    \n    -- ignore temporary fixates if the unit is targeting the tank (again)\n    if role == \"TANK\" then\n        Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n        envTable.FixateTarget:Hide()\n        \n        return\n    end\n    \n    if UnitIsUnit(targetName, \"player\") then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n        \n        if not envTable.colorchanged then\n            Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n            unitFrame.healthBar.MainTargetDotAnimation =\n            Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4)\n            \n            envTable.colorchanged = true\n        end\n    end\n    \n    targetName = Plater.SetTextColorByClass(unitId .. \"target\", targetName)\n    envTable.FixateTarget.text = targetName\n    envTable.FixateTarget:Show()\nend\n\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function()\nend",
["OnHideCode"] = "function()\nend",
["OptionsValues"] = {
["casting"] = 1.1999999284744,
},
["Temp_OnShowCode"] = "function()\nend\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Time"] = 1739452996,
["Icon"] = 132090,
["Temp_ConstructorCode"] = "function()\nend",
["NpcNames"] = {
"214287",
"220368",
"213751",
},
["semver"] = "",
["Enabled"] = true,
["Revision"] = 357,
["Options"] = {
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Key"] = "casting",
["Value"] = 1.2,
["Name"] = "Casting Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["OnShowCode"] = "function()\nend\n\n\n\n",
["Name"] = "Must Die - Jundies",
["Author"] = "Ququlcoatl-Blackmoore",
["Initialization"] = "function (scriptTable)        \nend",
["Desc"] = "conditionally scales the nameplate of Incorporeal Beings when not ccd",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (_, _, unitFrame, _, scriptTable)\n    Plater.SetNameplateScale(unitFrame, scriptTable.config.casting)\n    Plater.FlashNameplateBorder(unitFrame)\nend",
["Temp_Initialization"] = "function (scriptTable)        \nend",
["Temp_OnHideCode"] = "function()\nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Time"] = 1739452797,
["Icon"] = 644389,
["Options"] = {
},
["url"] = "https://wago.io/Haq3jHDkU/2",
["NpcNames"] = {
"167966",
"199220",
"199916",
"225601",
"39450",
"233956",
"233955",
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Enabled"] = true,
["Revision"] = 187,
["semver"] = "1.0.1",
["skipWagoUpdate"] = 3,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame:Hide()\nend",
["Author"] = "Briarbreed-Area 52",
["Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
["Desc"] = "Hide nameplates based on the unit's NPC ID.",
["version"] = 2,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Hide Nameplate - Jundies",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\nend",
["Temp_Initialization"] = "function (scriptTable)\nend\n\n-- 167966: Experimental Sludge (De Other Side)\n-- 199220 - Stagbeetle (Valdrakken)\n-- 199916 - Bridge Slimes (Brackenhide Hollow)",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.ChangeColor = False\n    envTable.CastbarColor = \"mediumvioletred\"\n    envTable.GlowOptions = {\n        glowType = \"pixel\",\n        xOffset = 2,\n        yOffset = 2,\n        key = \"\",\n    }\n    --number of lines\n    envTable.GlowOptions.N = scriptTable.config.glowOptionsN\n    --frequency of lines\n    envTable.GlowOptions.frequency = scriptTable.config.glowOptionsFrequency\n    --length of lines\n    envTable.GlowOptions.length = scriptTable.config.glowOptionsLength\n    --line thickness\n    envTable.GlowOptions.th = scriptTable.config.glowOptionsTh\n    --pixel glow color\n    envTable.GlowOptions.color = scriptTable.config.glowOptionsColor\n    --add glow to castbar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --restore the cast bar to its original height\n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --stop glow effect\n    Plater.StopGlow(self, \"pixel\")\nend",
["OptionsValues"] = {
["castBarHeight"] = 0,
["glowOptionsFrequency"] = 0.5,
["glowOptionsLength"] = 6,
["glowOptionsColor"] = {
0.97254908084869,
1,
0,
1,
},
["glowOptionsTh"] = 1.9999998807907,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --change castbar color\n    if (envTable.ChangeColor) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    Plater.StartGlow(self, color, envTable.GlowOptions)\n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1739453330,
["Icon"] = 132298,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.ChangeColor = False\n    envTable.CastbarColor = \"mediumvioletred\"\n    envTable.GlowOptions = {\n        glowType = \"pixel\",\n        xOffset = 2,\n        yOffset = 2,\n        key = \"\",\n    }\n    --number of lines\n    envTable.GlowOptions.N = scriptTable.config.glowOptionsN\n    --frequency of lines\n    envTable.GlowOptions.frequency = scriptTable.config.glowOptionsFrequency\n    --length of lines\n    envTable.GlowOptions.length = scriptTable.config.glowOptionsLength\n    --line thickness\n    envTable.GlowOptions.th = scriptTable.config.glowOptionsTh\n    --pixel glow color\n    envTable.GlowOptions.color = scriptTable.config.glowOptionsColor\n    --add glow to castbar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\nend",
["NpcNames"] = {
},
["semver"] = "1.0.0",
["Enabled"] = true,
["Revision"] = 394,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Sets a glow for casts you should stops on",
["Name"] = "Description",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Add new spells by entering spell ID, then click \"Add\"",
["Name"] = "Instructins",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increase the cast bar height value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Name"] = "Cast Bar Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Increase number Pixel glow lines",
["Min"] = 1,
["Key"] = "glowOptionsN",
["Value"] = 8,
["Name"] = "Pixel Glow Lines",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Increase pixel glow frequency",
["Min"] = -2,
["Key"] = "glowOptionsFrequency",
["Value"] = 0.5,
["Name"] = "Pixel Glow Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Increase pixel glow length",
["Min"] = 1,
["Key"] = "glowOptionsLength",
["Value"] = 6,
["Name"] = "Pixel Glow Length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Increase pixel glow thickness",
["Min"] = 0.05,
["Key"] = "glowOptionsTh",
["Value"] = 2,
["Name"] = "Pixel Glow Thickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "glowOptionsColor",
["Value"] = {
0.97254908084869,
1,
0,
1,
},
["Name"] = "Pixel Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the color of the glow",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --change castbar color\n    if (envTable.ChangeColor) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    Plater.StartGlow(self, color, envTable.GlowOptions)\n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\nend",
["Name"] = "Use Stops - Jundies",
["Author"] = "Takeover-Kel'Thuzad",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "",
["version"] = 1,
["Prio"] = 99,
["SpellIds"] = {
427342,
461796,
294855,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --restore the cast bar to its original height\n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --stop glow effect\n    Plater.StopGlow(self, \"pixel\")\nend",
["url"] = "https://wago.io/64ZDvEqn7/1",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = true,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["NpcNames"] = {
},
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Tankbuster [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
},
["cast_statusbar_color"] = {
nil,
1,
nil,
1,
},
["bossmod_aura_height"] = 32.105155944824,
["extra_icon_use_blizzard_border_color"] = false,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["extra_icon_auras_mine"] = {
["Serrated Bone Spike"] = true,
["209859"] = false,
["Violent Detonation"] = false,
["Plague Bomb"] = false,
},
["extra_icon_show_offensive_border"] = {
nil,
0.65098039215686,
0.10196078431373,
},
["aura_stack_font"] = "Expressway",
["cast_statusbar_color_interrupted"] = {
0.8,
0.30196078431373,
0.30196078431373,
},
["blizzard_nameplate_font"] = "Expressway",
["range_check_in_range_or_target_alpha"] = 1,
["aura_timer_text_size"] = 9,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "0",
["nameplateOverlapV"] = "1.5",
["nameplateLargeTopInset"] = "0.03999999910593",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "0",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateNotSelectedAlpha"] = "1",
["nameplateLargerScale"] = "1",
["nameplateMaxDistance"] = "60",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "0.99779832363129",
["nameplateTargetBehindMaxDistance"] = "15",
["SoftTargetInteract"] = "0",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "1",
["nameplateMotionSpeed"] = "0.048449993133545",
["nameplateGlobalScale"] = "1",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowEnemyPets"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "0.99656772613525",
["nameplateOverlapH"] = "0.75",
["nameplateSelfTopInset"] = "0.48",
["nameplateShowAll"] = "1",
["nameplateOccludedAlphaMult"] = "0.5",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMotion"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplateMinScale"] = "1",
["nameplateShowEnemyTotems"] = "1",
["nameplateOtherTopInset"] = "0.03999999910593",
["nameplateOtherAtBase"] = "0",
["nameplateSelfBottomInset"] = "0.2",
["SoftTargetNameplateInteract"] = "0",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.89999997615814",
["nameplateShowFriends"] = "1",
["SoftTargetIconGameObject"] = "0",
["ShowNamePlateLoseAggroFlash"] = "1",
["ShowClassColorInNameplate"] = "1",
},
["aura_stack_anchor"] = {
["y"] = 2.5,
["x"] = 8,
["side"] = 12,
},
["number_region_first_run"] = true,
["aura_grow_direction"] = 1,
["extra_icon_stack_size"] = 11,
["extra_icon_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\cooldown_edge_1",
["indicator_rare"] = false,
["last_news_time"] = 1738611270,
["hide_friendly_castbars"] = true,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.2000000476837,
},
},
["bossmod_cooldown_text_enabled"] = false,
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Unit - Show Energy"] = 11,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Blink by Time Left"] = 1,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Cast - On Going Cast [P]"] = 2,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Fixate"] = 11,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Cast - Tank Interrupt"] = 12,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - AoE With Range [P]"] = 2,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Cast - Stop Casting"] = 4,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Unit - Health Markers"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Quick Flash"] = 2,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Color Change"] = 1,
["Cast - Shield Interrupt"] = 2,
["Spiteful Affix"] = 3,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Add - Warning [P]"] = 5,
["Cast - Watch Step [P]"] = 1,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Important by Color [P]"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Aura - Buff Alert"] = 15,
["Auto Set Skull"] = 11,
["Cast - AoE Hit All [P]"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Unit - Important"] = 11,
["Aura Border Color"] = 1,
["Countdown"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - Glowing [P]"] = 10,
["Explosion Affix M+"] = 14,
["Fixate On You"] = 12,
},
["show_healthbars_on_softinteract"] = false,
["dps"] = {
["colors"] = {
["aggro"] = {
0.86666666666667,
0.43529411764706,
},
["noaggro"] = {
0.74509805440903,
0.18823531270027,
0.11372549831867,
},
["notontank"] = {
0.50196078431373,
0.50196078431373,
},
},
},
["first_run3"] = true,
["range_check_enabled"] = false,
["cast_statusbar_bgcolor"] = {
0.21176470588235,
0.21176470588235,
0.21176470588235,
0.90000000596046,
},
["extra_icon_show_purge_border"] = {
nil,
0.92549019607843,
},
["castbar_target_text_size"] = 9,
["bossmod_castrename_enabled"] = false,
["auto_toggle_stacking"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
["auto_toggle_friendly_enabled"] = true,
["cast_statusbar_spark_width"] = 9,
["auto_toggle_enemy"] = {
["party"] = false,
["raid"] = false,
["arena"] = false,
["world"] = false,
},
},
["Default"] = {
["use_ui_parent"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["hook_auto_imported"] = {
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Color Automation"] = 1,
["Extra Border"] = 2,
["Cast Bar Icon Config"] = 2,
["Execute Range"] = 1,
["Hide Neutral Units"] = 1,
["Attacking Specific Unit"] = 2,
["Target Color"] = 3,
["Aura Reorder"] = 3,
["Combo Points"] = 6,
},
["expansion_triggerwipe"] = {
[8] = true,
[10] = true,
[9] = true,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1670201853,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = false,
["Revision"] = 533,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
389446,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Explosion Affix M+ [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 368,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Debuff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203758,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1213,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["version"] = -1,
["Name"] = "Cast - Alert + Timer [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670790652,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = false,
["Revision"] = 694,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
255041,
428926,
76634,
200050,
197546,
198079,
199193,
266181,
253544,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1669325410,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 662,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
200658,
266036,
265407,
164965,
429176,
428526,
418200,
407124,
200630,
415437,
264050,
267824,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Small Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = true,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Blink by Time Left [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 3,
["Key"] = "timeleftToBlink",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "blinkSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "blinkMaxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Warning",
["Value"] = 8,
["Key"] = "timeLeftWarning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Name"] = "Time Left Critical",
["Value"] = 3,
["Key"] = "timeLeftCritical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1669339628,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 878,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important Target [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 14,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Name"] = "Frame Width",
["Value"] = 90,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Key"] = "targetFrameHeight",
["Value"] = 20,
["Name"] = "Frame Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1673994690,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = false,
["Revision"] = 828,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["SpellIds"] = {
259572,
255371,
427460,
429172,
426500,
413607,
412922,
417481,
201399,
411994,
415770,
260907,
260703,
260741,
265876,
263959,
266225,
253517,
377488,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Name"] = "Cast - Very Important [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1725033998,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 83,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["Name"] = "Aura is Shield [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670203603,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = false,
["Revision"] = 1194,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
225573,
278444,
164887,
168082,
76813,
227913,
265368,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Name"] = "Cast - Big Alert [Plater]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.spitefulTexture) then\n        unitFrame.spitefulTexture = unitFrame.healthBar:CreateTexture(nil, \"overlay\", nil, 6)\n        unitFrame.spitefulTexture:SetPoint('right', 0, 0)\n        unitFrame.spitefulTexture:SetSize(27, 14)\n        unitFrame.spitefulTexture:SetColorTexture(.3, .3, 1, .7)\n        \n        unitFrame.spitefulText = unitFrame.healthBar:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)\n        DetailsFramework:SetFontFace (unitFrame.spitefulText, \"2002\")\n        unitFrame.spitefulText:SetPoint(\"right\", unitFrame.spitefulTexture, \"right\", -2, 0)\n        unitFrame.spitefulText:SetJustifyH(\"right\")\n        \n        unitFrame.roleIcon = unitFrame:CreateTexture(nil, \"overlay\")\n        unitFrame.roleIcon:SetPoint(\"left\", unitFrame.healthBar, \"left\", 2, 0)\n        unitFrame.targetName = unitFrame:CreateFontString(nil, \"overlay\", \"GameFontNormal\")\n        unitFrame.targetName:SetPoint(\"left\", unitFrame.roleIcon, \"right\", 2, 0)\n        \n        unitFrame.spitefulTexture:Hide()\n        unitFrame.spitefulText:Hide()\n    end\n    \n    function envTable.UpdateSpitefulWidget(unitFrame)\n        \n        local r, g, b, a = Plater:ParseColors(scriptTable.config.bgColor)\n        unitFrame.spitefulTexture:SetColorTexture(r, g, b, a)\n        unitFrame.spitefulTexture:SetSize(scriptTable.config.bgWidth, unitFrame.healthBar:GetHeight())   \n        Plater:SetFontSize(unitFrame.spitefulText, scriptTable.config.textSize)\n        Plater:SetFontColor(unitFrame.spitefulText, scriptTable.config.textColor)\n        \n        local currentHealth = unitFrame.healthBar.CurrentHealth\n        local maxHealth = unitFrame.healthBar.CurrentHealthMax\n        \n        local healthPercent = currentHealth / maxHealth * 100\n        local timeToDie = format(\"%.1fs\", healthPercent / 8)\n        unitFrame.spitefulText:SetText(timeToDie)\n        \n        unitFrame.spitefulText:Show()\n        unitFrame.spitefulTexture:Show()\n        \n        if scriptTable.config.switchTargetName then\n            local plateFrame = unitFrame.PlateFrame\n            \n            local target = UnitName(unitFrame.namePlateUnitToken .. \"target\") or UnitName(unitFrame.namePlateUnitToken)\n            \n            if (target and target ~= \"\") then\n                local _, class = UnitClass(unitFrame.namePlateUnitToken .. \"target\")\n                if (class) then\n                    target = DetailsFramework:AddClassColorToText(target, class)\n                end\n                \n                local role = UnitGroupRolesAssigned(unitFrame.namePlateUnitToken .. \"target\")\n                if (role and role ~= \"NONE\") then\n                    target = DetailsFramework:AddRoleIconToText(target, role)\n                end\n                \n                plateFrame.namePlateUnitName = target\n                Plater.UpdateUnitName(plateFrame)\n            end\n        end\n        \n        if scriptTable.config.useTargetingColor then\n            local targeted = UnitIsUnit(unitFrame.namePlateUnitToken .. \"target\", \"player\")\n            if targeted then\n                Plater.SetNameplateColor (unitFrame, scriptTable.config.targetingColor)\n            else\n                Plater.RefreshNameplateColor(unitFrame)\n            end\n        end\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    if (unitFrame.spitefulTexture) then\n        unitFrame.spitefulText:Hide()\n        unitFrame.spitefulTexture:Hide()    \n        unitFrame.roleIcon:Hide()\n        unitFrame.targetName:Hide()\n    end\nend\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
["Time"] = 1611844883,
["url"] = "",
["Icon"] = 135945,
["Enabled"] = true,
["Revision"] = 186,
["semver"] = "",
["Author"] = "Symantec-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Time to die Spiteful affix",
["NpcNames"] = {
"174773",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "M+ Spiteful",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Time to Die",
["Name"] = "Time to Die",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 50,
["Desc"] = "",
["Min"] = 10,
["Key"] = "bgWidth",
["Value"] = 27,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 1,
["Key"] = "bgColor",
["Value"] = {
0.5058823529411764,
0.07058823529411765,
1,
1,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 24,
["Desc"] = "",
["Min"] = 7,
["Key"] = "textSize",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option11",
["Value"] = "Targeting",
["Name"] = "Targeting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Target instead of Name",
["Value"] = true,
["Key"] = "switchTargetName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Color if targeting You",
["Value"] = true,
["Key"] = "useTargetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Color if targeting You",
["Value"] = {
0.07058823529411765,
0.6196078431372549,
0,
1,
},
["Key"] = "targetingColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "Option 11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateSpitefulWidget(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1669327144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 632,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Aura - Buff Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1604357453,
["url"] = "",
["Icon"] = 136048,
["Enabled"] = true,
["Revision"] = 233,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Unit - Show Energy [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.803921568627451,
0.803921568627451,
0.803921568627451,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Time"] = 1729585139,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 234,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Countdown",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1668886509,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 33,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["SpellIds"] = {
426662,
426663,
},
["PlaterCore"] = 1,
["Name"] = "Fixate by Unit Buff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 754,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
201226,
204667,
198379,
200768,
253239,
250258,
255567,
194956,
427510,
426645,
412505,
412129,
419351,
401482,
404916,
200345,
200261,
198641,
265372,
271174,
264694,
264923,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Time"] = 1604239880,
["url"] = "",
["Icon"] = 1029718,
["Enabled"] = true,
["Revision"] = 269,
["semver"] = "",
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Desc"] = "Show above the nameplate who is the player fixated",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Fixate [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514190,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = false,
["Revision"] = 547,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
169445,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1604696441,
["url"] = "",
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Enabled"] = false,
["Revision"] = 63,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Auto Set Skull",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1729585422,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 279,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["NpcNames"] = {
"Illusionary Vulpin",
},
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1671066705,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = false,
["Revision"] = 37,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Effect After Cast [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1670428019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = false,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
256882,
172578,
412063,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.15,
["Key"] = "rotationDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Name"] = "Animation Start Duration",
["Value"] = 0.3,
["Key"] = "animStartDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Key"] = "textureStartAlpha",
["Value"] = 1,
["Name"] = "Texture Start Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "textureScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["version"] = -1,
["Name"] = "Cast - Circle AoE [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1719452142,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 156,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"214840",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Health Markers [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 572,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Name"] = "Nameplate Size Offset",
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Alpha",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Name"] = "Scale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "skullScale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["version"] = -1,
["Name"] = "Add - Important [P]",
["NpcNames"] = {
131009,
127315,
133361,
136330,
214117,
212483,
101008,
194745,
190426,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = false,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669324381,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = false,
["Revision"] = 887,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["NpcNames"] = {
},
["SpellIds"] = {
255824,
252781,
250096,
200248,
197797,
264520,
418202,
201839,
412012,
411958,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Quick Flash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1670427654,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 162,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  add",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["version"] = -1,
["Name"] = "Add - Warning [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1670427838,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 111,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Nameplate Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "scale",
},
},
["version"] = -1,
["Name"] = "Add - Non Elite Trash [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669325411,
["url"] = "",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["Enabled"] = true,
["Revision"] = 101,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shield Interrupt [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1672514185,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 506,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
200291,
268202,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["Name"] = "Cast - Stop Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = true,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
135052,
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Explode on Die [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Key"] = "shakeAmplitude",
["Value"] = 0.2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 70,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1673726734,
["url"] = "",
["Icon"] = 236209,
["Enabled"] = true,
["Revision"] = 18,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Options"] = {
},
["version"] = -1,
["Name"] = "Aura While Casting [P]",
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1676905232,
["url"] = "",
["Icon"] = 4038101,
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - On Going Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Key"] = "speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Key"] = "minAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1719711112,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["Enabled"] = true,
["Revision"] = 831,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Important by Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 6,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711125,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Enabled"] = true,
["Revision"] = 873,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Shining Green [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["Enabled"] = true,
["Revision"] = 613,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["NpcNames"] = {
},
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Special Ability [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Width",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["Icon"] = 236171,
["Enabled"] = true,
["Revision"] = 139,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["NpcNames"] = {
},
["SpellIds"] = {
447141,
432967,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heroic Leap [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["Enabled"] = true,
["Revision"] = 75,
["semver"] = "",
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["NpcNames"] = {
},
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Spark Color [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "sparkWithScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Width Scale",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Height Scale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "sparkHeightScale",
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 551,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["NpcNames"] = {
},
["SpellIds"] = {
432520,
320822,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Stun [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["Enabled"] = true,
["Revision"] = 318,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE Hit All [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.05,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.9,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["Enabled"] = true,
["Revision"] = 741,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["NpcNames"] = {
},
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Debuff [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1719711128,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start.",
["NpcNames"] = {
},
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Simple Interrupt [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1723155144,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["Enabled"] = true,
["Revision"] = 158,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["NpcNames"] = {
},
["SpellIds"] = {
431364,
423327,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ongoing Cast [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Name"] = "Dots Y Offset",
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Key"] = "speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "minAlpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Min Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "maxAlpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Enabled"] = true,
["Revision"] = 1254,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Heal Cut [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["Enabled"] = true,
["Revision"] = 220,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["NpcNames"] = {
},
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Voidzone [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 281,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["NpcNames"] = {
},
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["PlaterCore"] = 1,
["Name"] = "Cast - AoE With Range [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.2,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.3,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719788550,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["NpcNames"] = {
},
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["Name"] = "Aura - Is Cast Bar [P]",
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = true,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["version"] = -1,
["Name"] = "Cast - Tankbuster [P]",
["NpcNames"] = {
},
},
},
["aura2_x_offset"] = 0,
["target_indicator"] = "Ornament",
["hook_data"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Nameplate Updated",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Time"] = 1681056777,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Enabled"] = false,
["Revision"] = 53,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Prio"] = 99,
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Initialization"] = "		function (modTable)\n			--insert code here\n			\n		end\n	",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 73,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1541606242,
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Hide Neutral Units [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 1990989,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 93,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["version"] = -1,
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Name"] = "Reorder Nameplate [Plater]",
["Time"] = 1596791840,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 574574,
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        [\"Rupture\"] = true,\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["Time"] = 1681057934,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["261"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 136207,
["Enabled"] = true,
["Revision"] = 101,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Prio"] = 95,
["Name"] = "Don't Have Aura [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --do nothing if the unit is the player it self\n    if (unitFrame.IsSelf) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    else\n        if (envTable.ForceRefreshNameplateColor) then\n            Plater.RefreshNameplateColor (unitFrame) \n        end\n    end    \n    \nend",
["Initialization"] = "		function (modTable)\n			--insert code here\n			\n		end\n	",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --set this to true if you are not using threat colors in the health bar\n    envTable.ForceRefreshNameplateColor = true\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        [\"Rupture\"] = true,\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend",
},
["semver"] = "",
},
{
["Enabled"] = false,
["Revision"] = 182,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Time"] = 1548278227,
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Name"] = "Players Targeting a Target [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 1966587,
["HooksTemp"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 176,
["semver"] = "",
["LastHookEdited"] = "",
["Author"] = "Tecno-Azralon",
["Time"] = 1547409079,
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled) then\n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Name"] = "Extra Border [Plater]",
["version"] = -1,
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 133689,
["HooksTemp"] = {
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Time"] = 1681056292,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 878211,
["Enabled"] = false,
["Revision"] = 96,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Prio"] = 99,
["Name"] = "Current Target Color [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["semver"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1681057981,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 349,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Icon Settings",
["Value"] = "Icon Settings:",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Icon",
["Value"] = true,
["Key"] = "showIcon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Name"] = "Icon on Left Side",
["Value"] = true,
["Key"] = "iconOnLeftSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Icon Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "iconSizeOffset",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Interrupt Texture",
["Value"] = "Can't Interrupt Texture:",
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Texture",
["Value"] = true,
["Key"] = "showTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Name"] = "Texture Path",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Key"] = "iconTexturePath",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Name"] = "Texture Desaturated",
["Value"] = true,
["Key"] = "desaturatedTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
0.3056715726852417,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 10,
["Name"] = "Texture Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureWidth",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Texture Position",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "texturePosition",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
},
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["Name"] = "Cast Bar Icon Settings [P]",
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1681056683,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["role"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 135358,
["Enabled"] = false,
["Revision"] = 85,
["Options"] = {
},
["Author"] = "Ahwa-Azralon",
["Desc"] = "Add extra effects to execute range. See the constructor script for options.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["HooksTemp"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        if (healthBar.CurrentHealth / healthBar.CurrentHealthMax <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end        \n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = false\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * envTable.ExecutePercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["Name"] = "Execute Range [Plater]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1681057934,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 366,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Prio"] = 99,
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 284,
["Options"] = {
},
["HooksTemp"] = {
},
["semver"] = "",
["Author"] = "Izimode-Azralon",
["version"] = -1,
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Name"] = "Combo Points [Plater]",
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["PlaterCore"] = 1,
["url"] = "",
["Icon"] = 135426,
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1681057936,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = false,
["Revision"] = 358,
["Options"] = {
},
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["Name"] = "Aura Reorder [Plater]",
["PlaterCore"] = 1,
["semver"] = "",
["LastHookEdited"] = "",
["version"] = -1,
},
},
["aura_x_offset"] = 0,
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:4587",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:4589",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateLargerScale"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater.lua:2122",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:4588",
},
["resources_settings"] = {
["chr"] = {
["Player-3685-07180DDD"] = "Chi",
["Player-3685-09491807"] = "ComboPoints",
["Player-3685-07F1620A"] = "ArcaneCharges",
["Player-3685-0DFC95BB"] = "Essence",
["Player-3685-0D056B5D"] = "Runes",
["Player-1185-0D61B051"] = "Runes",
["Player-3685-0990B6B7"] = "Runes",
["Player-3685-0722C2B9"] = "HolyPower",
["Player-3685-0DE330E0"] = "ComboPoints",
["Player-3685-0722B5D5"] = "ComboPoints",
["Player-1190-0B9120A7"] = "HolyPower",
["Player-3685-0ACADE27"] = "SoulShards",
},
},
["npc_cache"] = {
[33293] = {
"XT-002 Deconstructor",
"Ulduar",
},
[184335] = {
"Infinite Agent",
"Uldaman: Legacy of Tyr",
},
[201773] = {
"Eternal Blaze",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165556] = {
"Fleeting Manifestation",
"Sanguine Depths",
},
[205478] = {
"Conduit Guardian",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37972] = {
"Prince Keleseth",
"Icecrown Citadel",
},
[180567] = {
"Frenzied Nightclaw",
"Tazavesh, the Veiled Market",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[37030] = {
"Kor'kron Primalist",
"Icecrown Citadel",
},
[24687] = {
"Sunblade Physician",
"Magisters' Terrace",
"enUS",
},
[205671] = {
"Shadow Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37126] = {
"Sister Svalna",
"Icecrown Citadel",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
},
[184018] = {
"Bromach",
"Uldaman: Legacy of Tyr",
},
[33134] = {
"Sara",
"Ulduar",
},
[205672] = {
"Flame Additive",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205736] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33214] = {
"Mechanolift 304-A",
"Ulduar",
},
[162046] = {
"Famished Tick",
"Sanguine Depths",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
},
[36855] = {
"Lady Deathwhisper",
"Icecrown Citadel",
},
[171500] = {
"Shuffling Corpse",
"The Necrotic Wake",
},
[114526] = {
"Ghostly Understudy",
"Return to Karazhan",
},
[171181] = {
"Territorial Bladebeak",
"De Other Side",
},
[184020] = {
"Hulking Berserker",
"Uldaman: Legacy of Tyr",
},
[37973] = {
"Prince Taldaram",
"Icecrown Citadel",
},
[22883] = {
"Aqueous Spawn",
"Black Temple",
"enUS",
},
[37031] = {
"Kor'kron Oracle",
"Icecrown Citadel",
},
[166264] = {
"Spare Parts",
"The Necrotic Wake",
},
[169905] = {
"Risen Warlord",
"De Other Side",
},
[170480] = {
"Atal'ai Deathwalker",
"De Other Side",
},
[58605] = {
"Scarlet Judicator",
"Scarlet Monastery",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[72785] = {
"Twisted Ancient",
"SMV Alliance Garrison Level 1",
},
[24815] = {
"Sunblade Imp",
"Magisters' Terrace",
"enUS",
},
[33772] = {
"Faceless Horror",
"Ulduar",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
},
[37127] = {
"Ymirjar Frostbinder",
"Icecrown Citadel",
},
[171184] = {
"Mythresh, Sky's Talons",
"De Other Side",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
},
[205735] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[171376] = {
"Head Custodian Javlin",
"Sanguine Depths",
},
[164861] = {
"Spriggan Barkbinder",
"De Other Side",
},
[168949] = {
"Risen Bonesoldier",
"De Other Side",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
},
[203825] = {
"Voracious Magma Worm",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[30245] = {
"Nexus Lord",
"The Eye of Eternity",
},
[162051] = {
"Frenzied Ghoul",
"Sanguine Depths",
},
[201774] = {
"Essence of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[36968] = {
"Kor'kron Axethrower",
"Icecrown Citadel",
},
[205673] = {
"Sundered Devourer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[170483] = {
"Atal'ai Deathwalker's Spirit",
"De Other Side",
},
[205734] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33966] = {
"Crusher Tentacle",
"Ulduar",
},
[205737] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33820] = {
"Twilight Pyromancer",
"Ulduar",
},
[23682] = {
"Headless Horseman",
"Scarlet Monastery",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
},
[166396] = {
"Noble Skirmisher",
"Sanguine Depths",
},
[162041] = {
"Grubby Dirtcruncher",
"Sanguine Depths",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
},
[167610] = {
"Stonefiend Anklebiter",
"Halls of Atonement",
},
[114625] = {
"Phantom Guest",
"Return to Karazhan",
},
[32878] = {
"Dark Rune Evoker",
"Ulduar",
},
[162692] = {
"Amarth",
"The Necrotic Wake",
},
[166589] = {
"Animated Weapon",
"Sanguine Depths",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
},
[167994] = {
"Ossified Conscript",
"Theater of Pain",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[167611] = {
"Stoneborn Eviscerator",
"Halls of Atonement",
},
[34014] = {
"Sanctum Sentry",
"Ulduar",
},
[164862] = {
"Weald Shimmermoth",
"De Other Side",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
},
[169912] = {
"Enraged Mask",
"De Other Side",
},
[170486] = {
"Atal'ai Devoted",
"De Other Side",
},
[33823] = {
"Twilight Slayer",
"Ulduar",
},
[15550] = {
"Attumen the Huntsman",
"Karazhan",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
},
[32865] = {
"Thorim",
"Ulduar",
},
[205618] = {
"Thorak Greenscale",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
},
[205619] = {
"Sarek Cinderbreath",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37033] = {
"Kor'kron Invoker",
"Icecrown Citadel",
},
[33983] = {
"Constrictor Tentacle",
"Ulduar",
},
[162056] = {
"Rockbound Sprite",
"Sanguine Depths",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
},
[191311] = {
"Infinite Whelp",
"Uldaman: Legacy of Tyr",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
},
[170488] = {
"Son of Hakkar",
"De Other Side",
},
[37782] = {
"Flesh-eating Insect",
"Icecrown Citadel",
},
[166079] = {
"Brittlebone Crossbowman",
"The Necrotic Wake",
},
[36807] = {
"Deathspeaker Disciple",
"Icecrown Citadel",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[205620] = {
"Malgosa Spellbinder",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167806] = {
"Animated Sin",
"Halls of Atonement",
},
[33136] = {
"Guardian of Yogg-Saron",
"Ulduar",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[167615] = {
"Depraved Darkblade",
"Halls of Atonement",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
},
[202108] = {
"Djaradin Dragonhunter",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[171384] = {
"Research Scribe",
"Sanguine Depths",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[33824] = {
"Twilight Shadowblade",
"Ulduar",
},
[174175] = {
"Loyal Stoneborn",
"Halls of Atonement",
},
[184331] = {
"Infinite Timereaver",
"Uldaman: Legacy of Tyr",
},
[114628] = {
"Skeletal Waiter",
"Return to Karazhan",
},
[205622] = {
"Krono Sandtongue",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[32882] = {
"Jormungar Behemoth",
"Ulduar",
},
[202109] = {
"Djaradin Commander",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33822] = {
"Twilight Guardian",
"Ulduar",
},
[37098] = {
"Val'kyr Herald",
"Icecrown Citadel",
},
[37034] = {
"Kor'kron Templar",
"Icecrown Citadel",
},
[162102] = {
"Grand Proctor Beryllia",
"Sanguine Depths",
},
[162038] = {
"Regal Mistdancer",
"Sanguine Depths",
},
[34234] = {
"Runeforged Sentry",
"Ulduar",
},
[205623] = {
"Drazos Blackwing",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[162763] = {
"Soulforged Bonereaver",
"Theater of Pain",
},
[33819] = {
"Twilight Frost Mage",
"Ulduar",
},
[37146] = {
"Kor'kron Sniper",
"Icecrown Citadel",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
},
[162047] = {
"Insatiable Brute",
"Sanguine Depths",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
},
[34192] = {
"Boomer XP-500",
"Ulduar",
},
[33985] = {
"Corruptor Tentacle",
"Ulduar",
},
[162317] = {
"Gorechop",
"Theater of Pain",
},
[205629] = {
"Crazed Experiment",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[202814] = {
"Twisted Aberration",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[199812] = {
"Zaqali Wallclimber",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[36811] = {
"Deathspeaker Attendant",
"Icecrown Citadel",
},
[37035] = {
"Kor'kron Vanquisher",
"Icecrown Citadel",
},
[200836] = {
"Obsidian Guard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
},
[164873] = {
"Runestag Elderhorn",
"De Other Side",
},
[205306] = {
"Fractured Causality",
"10.1.5 Time Rifts - Demon (Azewrath)",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
},
[36939] = {
"High Overlord Saurfang",
"Icecrown Citadel",
},
[168326] = {
"Shattered Visage",
"De Other Side",
},
[32883] = {
"Captured Mercenary Soldier",
"Ulduar",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
},
[164363] = {
"Undying Stonefiend",
"Halls of Atonement",
},
[164427] = {
"Reanimated Warrior",
"The Necrotic Wake",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
},
[164555] = {
"Millificent Manastorm",
"De Other Side",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
},
[78637] = {
"Felhound Minion",
"SMV Alliance Garrison Level 1",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
},
[162100] = {
"Kryxis the Voracious",
"Sanguine Depths",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
},
[24686] = {
"Sunblade Warlock",
"Magisters' Terrace",
"enUS",
},
[164556] = {
"Millhouse Manastorm",
"De Other Side",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
},
[164558] = {
"Hakkar the Soulflayer",
"De Other Side",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
},
[171455] = {
"Stonewall Gargon",
"Sanguine Depths",
},
[201668] = {
"Neltharion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205820] = {
"Crawling Goo",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
},
[1863] = {
"Vilwyn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
},
[36844] = {
"Risen Deathspeaker Servant",
"Icecrown Citadel",
},
[73465] = {
"Dark Acolyte",
"SMV Alliance Garrison Level 1",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
},
[37970] = {
"Prince Valanar",
"Icecrown Citadel",
},
[37132] = {
"Ymirjar Battle-Maiden",
"Icecrown Citadel",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
},
[163089] = {
"Disgusting Refuse",
"Theater of Pain",
},
[33890] = {
"Brain of Yogg-Saron",
"Ulduar",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
},
[77936] = {
"Greater Storm Elemental",
"Theater of Pain",
},
[170147] = {
"Volatile Memory",
"De Other Side",
},
[37531] = {
"Frostwarden Handler",
"Icecrown Citadel",
},
[203809] = {
"Entropic Hatred",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[200840] = {
"Flamebound Huntsman",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33651] = {
"VX-001",
"Ulduar",
},
[37595] = {
"Darkfallen Blood Knight",
"Icecrown Citadel",
},
[184107] = {
"Runic Protector",
"Uldaman: Legacy of Tyr",
},
[37133] = {
"Ymirjar Warlord",
"Icecrown Citadel",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
},
[201288] = {
"Sundered Champion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33754] = {
"Dark Rune Thunderer",
"Ulduar",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
},
[162133] = {
"General Kaal",
"Sanguine Depths",
},
[37228] = {
"Frostwarden Warrior",
"Icecrown Citadel",
},
[171333] = {
"Atal'ai Devoted",
"De Other Side",
},
[168457] = {
"Stonewall Gargon",
"Sanguine Depths",
},
[201736] = {
"Sundered Arcanist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33722] = {
"Storm Tempered Keeper",
"Ulduar",
},
[202375] = {
"Zskarn",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33236] = {
"Steelforged Defender",
"Ulduar",
},
[36829] = {
"Deathspeaker High Priest",
"Icecrown Citadel",
},
[15547] = {
"Spectral Charger",
"Karazhan",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
},
[116550] = {
"Spectral Patron",
"Return to Karazhan",
},
[15551] = {
"Spectral Stable Hand",
"Karazhan",
},
[165905] = {
"Son of Hakkar",
"De Other Side",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
},
[36957] = {
"Kor'kron Reaver",
"Icecrown Citadel",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
},
[37038] = {
"Vengeful Fleshreaper",
"Icecrown Citadel",
},
[184300] = {
"Ebonstone Golem",
"Uldaman: Legacy of Tyr",
},
[32933] = {
"Left Arm",
"Ulduar",
},
[202824] = {
"Erratic Remnant",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164563] = {
"Vicious Gargon",
"Halls of Atonement",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
},
[186664] = {
"Stonevault Ambusher",
"Uldaman: Legacy of Tyr",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
},
[37117] = {
"Kor'kron Battle-Mage",
"Icecrown Citadel",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
},
[33572] = {
"Steelforged Defender",
"Ulduar",
},
[33110] = {
"Dark Rune Acolyte",
"Ulduar",
},
[166608] = {
"Mueh'zala",
"De Other Side",
},
[184303] = {
"Skittering Crawler",
"Uldaman: Legacy of Tyr",
},
[32886] = {
"Dark Rune Acolyte",
"Ulduar",
},
[37229] = {
"Frostwarden Sorceress",
"Icecrown Citadel",
},
[37533] = {
"Rimefang",
"Icecrown Citadel",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
},
[24683] = {
"Sunblade Mage Guard",
"Magisters' Terrace",
"enUS",
},
[114541] = {
"Spectral Patron",
"Return to Karazhan",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[33237] = {
"Ulduar Colossus",
"Ulduar",
},
[198869] = {
"Sundered Devastator",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37868] = {
"Risen Archmage",
"Icecrown Citadel",
},
[171805] = {
"Research Scribe",
"Sanguine Depths",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
},
[164185] = {
"Echelon",
"Halls of Atonement",
},
[200918] = {
"Rionthus",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[37534] = {
"Spinestalker",
"Icecrown Citadel",
},
[17252] = {
"Krimthun",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[205638] = {
"Sundered Flame Banner",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37501] = {
"Nerub'ar Champion",
"Icecrown Citadel",
},
[38028] = {
"Web Wrap",
"Icecrown Citadel",
},
[32934] = {
"Right Arm",
"Ulduar",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
},
[33988] = {
"Immortal Guardian",
"Ulduar",
},
[200912] = {
"Neldris",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[33525] = {
"Mangrove Ent",
"Ulduar",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
},
[37134] = {
"Ymirjar Huntress",
"Icecrown Citadel",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[38125] = {
"Ymirjar Deathbringer",
"Icecrown Citadel",
},
[37662] = {
"Darkfallen Commander",
"Icecrown Citadel",
},
[200913] = {
"Thadrion",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[28859] = {
"Malygos",
"The Eye of Eternity",
},
[198873] = {
"Sundered Edgelord",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
},
[34196] = {
"Rune Etched Sentry",
"Ulduar",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
},
[114318] = {
"Baron Rafe Dreuger",
"Return to Karazhan",
},
[198874] = {
"Sundered Siegemaster",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[198870] = {
"Sundered Preserver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
},
[33350] = {
"Mimiron",
"Ulduar",
},
[198871] = {
"Sundered Scaleguard",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[171341] = {
"Bladebeak Hatchling",
"De Other Side",
},
[37025] = {
"Stinky",
"Icecrown Citadel",
},
[167892] = {
"Tormented Soul",
"Halls of Atonement",
},
[33430] = {
"Guardian Lasher",
"Ulduar",
},
[37023] = {
"Plague Scientist",
"Icecrown Citadel",
},
[114319] = {
"Lady Keira Berrybuck",
"Return to Karazhan",
},
[33527] = {
"Nature's Blade",
"Ulduar",
},
[198872] = {
"Sundered Manaweaver",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[171342] = {
"Juvenile Runestag",
"De Other Side",
},
[33526] = {
"Ironroot Lasher",
"Ulduar",
},
[32873] = {
"Ancient Rune Giant",
"Ulduar",
},
[165913] = {
"Ghastly Parishioner",
"Halls of Atonement",
},
[202258] = {
"Djaradin Skullcrusher",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[201753] = {
"Sundered Destroyer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167962] = {
"Defunct Dental Drill",
"De Other Side",
},
[34133] = {
"Champion of Hodir",
"Ulduar",
},
[171343] = {
"Bladebeak Matriarch",
"De Other Side",
},
[205644] = {
"Oozing Sludge",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33670] = {
"Aerial Command Unit",
"Ulduar",
},
[55659] = {
"Wild Imp",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[202259] = {
"Djaradin Wallclimber",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[23775] = {
"Head of the Horseman",
"Scarlet Monastery",
},
[143622] = {
"Wild Imp",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[89] = {
"Infernal",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[34134] = {
"Winter Revenant",
"Ulduar",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
},
[36880] = {
"Decaying Colossus",
"Icecrown Citadel",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
},
[30249] = {
"Scion of Eternity",
"The Eye of Eternity",
},
[167964] = {
"4.RF-4.RF",
"De Other Side",
},
[164702] = {
"Carrion Worm",
"The Necrotic Wake",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
},
[32904] = {
"Dark Rune Commoner",
"Ulduar",
},
[33431] = {
"Forest Swarmer",
"Ulduar",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
},
[114321] = {
"Lord Crispin Ference",
"Return to Karazhan",
},
[165597] = {
"Patchwerk Soldier",
"The Necrotic Wake",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
},
[23694] = {
"Pulsing Pumpkin",
"Scarlet Monastery",
},
[184124] = {
"Sentinel Talondras",
"Uldaman: Legacy of Tyr",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
},
[37663] = {
"Darkfallen Noble",
"Icecrown Citadel",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[36626] = {
"Festergut",
"Icecrown Citadel",
},
[37232] = {
"Nerub'ar Broodling",
"Icecrown Citadel",
},
[167898] = {
"Manifestation of Envy",
"Halls of Atonement",
},
[34198] = {
"Iron Mender",
"Ulduar",
},
[114801] = {
"Spectral Apprentice",
"Return to Karazhan",
},
[15548] = {
"Spectral Stallion",
"Karazhan",
},
[205968] = {
"Fragment of Shadow",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
},
[114802] = {
"Spectral Journeyman",
"Return to Karazhan",
},
[166302] = {
"Corpse Harvester",
"Zereth Mortis",
},
[33288] = {
"Yogg-Saron",
"Ulduar",
},
[165408] = {
"Halkias",
"Halls of Atonement",
},
[164450] = {
"Dealer Xy'exa",
"De Other Side",
},
[205651] = {
"Bubbling Slime",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
},
[170838] = {
"Unyielding Contender",
"Theater of Pain",
},
[165410] = {
"High Adjudicator Aleez",
"Halls of Atonement",
},
[163622] = {
"Goregrind Bits",
"The Necrotic Wake",
},
[33432] = {
"Leviathan Mk II",
"Ulduar",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
},
[179334] = {
"Portalmancer Zo'nyy",
"Tazavesh, the Veiled Market",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
},
[169753] = {
"Famished Tick",
"Sanguine Depths",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
},
[33528] = {
"Guardian of Life",
"Ulduar",
},
[203927] = {
"Failed Prototype",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[37664] = {
"Darkfallen Archmage",
"Icecrown Citadel",
},
[34135] = {
"Winter Rumbler",
"Ulduar",
},
[205971] = {
"Fragment of Fire",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33113] = {
"Flame Leviathan",
"Ulduar",
},
[37217] = {
"Precious",
"Icecrown Citadel",
},
[167966] = {
"Experimental Sludge",
"De Other Side",
},
[186107] = {
"Vault Keeper",
"Uldaman: Legacy of Tyr",
},
[34199] = {
"Lightning Charged Iron Dwarf",
"Ulduar",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[16389] = {
"Spectral Apprentice",
"Karazhan",
},
[163623] = {
"Rotspew Leftovers",
"The Necrotic Wake",
},
[33768] = {
"Rubble",
"Ulduar",
},
[162729] = {
"Patchwerk Soldier",
"Zereth Mortis",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
},
[16151] = {
"Midnight",
"Karazhan",
},
[33271] = {
"General Vezax",
"Ulduar",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[202971] = {
"Null Glimmer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[32874] = {
"Iron Ring Guard",
"Ulduar",
},
[32845] = {
"Hodir",
"Ulduar",
},
[32906] = {
"Freya",
"Ulduar",
},
[33433] = {
"Suit of Armor",
"Ulduar",
},
[32938] = {
"Flash Freeze",
"Ulduar",
},
[24685] = {
"Sunblade Magister",
"Magisters' Terrace",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
},
[168986] = {
"Skeletal Raptor",
"De Other Side",
},
[37122] = {
"Captain Arnath",
"Icecrown Citadel",
},
[36627] = {
"Rotface",
"Icecrown Citadel",
},
[37665] = {
"Darkfallen Lieutenant",
"Icecrown Citadel",
},
[202264] = {
"Primal Lava Elemental",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
},
[98035] = {
"Dreadstalker",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
},
[205656] = {
"Sundered Chemist",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[202262] = {
"Blazing Dreadsquall",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[24684] = {
"Sunblade Blood Knight",
"Magisters' Terrace",
"enUS",
},
[184131] = {
"Earthen Guardian",
"Uldaman: Legacy of Tyr",
},
[32872] = {
"Runic Colossus",
"Ulduar",
},
[201754] = {
"Sarkareth",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203230] = {
"Dragonfire Golem",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[34197] = {
"Chamber Overseer",
"Ulduar",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
},
[199703] = {
"Magma Mystic",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[34069] = {
"Molten Colossus",
"Ulduar",
},
[32875] = {
"Iron Honor Guard",
"Ulduar",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
},
[32907] = {
"Captured Mercenary Captain",
"Ulduar",
},
[37011] = {
"The Damned",
"Icecrown Citadel",
},
[203806] = {
"Whisper in the Dark",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37502] = {
"Nerub'ar Webweaver",
"Icecrown Citadel",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
},
[202256] = {
"Djaradin Lavamancer",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167955] = {
"Sanguine Cadet",
"Sanguine Depths",
},
[36612] = {
"Lord Marrowgar",
"Icecrown Citadel",
},
[37022] = {
"Blighted Abomination",
"Icecrown Citadel",
},
[37666] = {
"Darkfallen Tactician",
"Icecrown Citadel",
},
[202257] = {
"Djaradin Magmashaper",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37007] = {
"Deathbound Ward",
"Icecrown Citadel",
},
[34137] = {
"Winter Jormungar",
"Ulduar",
},
[184134] = {
"Scavenging Leaper",
"Uldaman: Legacy of Tyr",
},
[36724] = {
"Servant of the Throne",
"Icecrown Citadel",
},
[37149] = {
"Kor'kron Necrolyte",
"Icecrown Citadel",
},
[114264] = {
"Midnight",
"Return to Karazhan",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
},
[114328] = {
"Coggleston",
"Return to Karazhan",
},
[168591] = {
"Ravenous Dreadbat",
"Sanguine Depths",
},
[184582] = {
"Eric \"The Swift\"",
"Uldaman: Legacy of Tyr",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
},
[37532] = {
"Frostwing Whelp",
"Icecrown Citadel",
},
[33699] = {
"Storm Tempered Keeper",
"Ulduar",
},
[33818] = {
"Twilight Adherent",
"Ulduar",
},
[177237] = {
"Chains of Damnation",
"Tazavesh, the Veiled Market",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
},
[38154] = {
"Warhawk",
"Icecrown Citadel",
},
[162099] = {
"General Kaal",
"Sanguine Depths",
},
[32876] = {
"Dark Rune Champion",
"Ulduar",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
},
[168934] = {
"Enraged Spirit",
"De Other Side",
},
[37012] = {
"Ancient Skeletal Soldier",
"Icecrown Citadel",
},
[37028] = {
"Kor'kron Stalker",
"Icecrown Citadel",
},
[114329] = {
"Luminore",
"Return to Karazhan",
},
[37571] = {
"Darkfallen Advisor",
"Icecrown Citadel",
},
[163122] = {
"Brittlebone Warrior",
"The Necrotic Wake",
},
[33515] = {
"Auriaya",
"Ulduar",
},
[36597] = {
"The Lich King",
"Icecrown Citadel",
},
[165260] = {
"Oozing Leftovers",
"Theater of Pain",
},
[199659] = {
"Warlord Kagni",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203811] = {
"Incarnation of Entropy",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[201320] = {
"Rashok",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[203939] = {
"Animation Fluid",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[114312] = {
"Moroes",
"Return to Karazhan",
},
[36725] = {
"Nerub'ar Broodkeeper",
"Icecrown Citadel",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
},
[184019] = {
"Burly Rock-Thrower",
"Uldaman: Legacy of Tyr",
},
[203812] = {
"Voice From Beyond",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[114330] = {
"Babblet",
"Return to Karazhan",
},
[36805] = {
"Deathspeaker Servant",
"Icecrown Citadel",
},
[33755] = {
"Dark Rune Ravager",
"Ulduar",
},
[166266] = {
"Spare Parts",
"The Necrotic Wake",
},
[36853] = {
"Sindragosa",
"Icecrown Citadel",
},
[171448] = {
"Dreadful Huntmaster",
"Sanguine Depths",
},
[114522] = {
"Mrs. Cauldrons",
"Return to Karazhan",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
},
[37955] = {
"Blood-Queen Lana'thel",
"Icecrown Citadel",
},
[162103] = {
"Executor Tarvold",
"Sanguine Depths",
},
[32877] = {
"Dark Rune Warbringer",
"Ulduar",
},
[10404] = {
"Pustulating Horror",
"Icecrown Citadel",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
},
[37032] = {
"Kor'kron Defender",
"Icecrown Citadel",
},
[37029] = {
"Kor'kron Reaver",
"Icecrown Citadel",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
},
[186696] = {
"Quaking Totem",
"Uldaman: Legacy of Tyr",
},
[201579] = {
"Magmorax",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[37125] = {
"Captain Rupert",
"Icecrown Citadel",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
},
[34190] = {
"Hardened Iron Golem",
"Ulduar",
},
[162049] = {
"Vestige of Doubt",
"Sanguine Depths",
},
[36678] = {
"Professor Putricide",
"Icecrown Citadel",
},
[36808] = {
"Deathspeaker Zealot",
"Icecrown Citadel",
},
[37813] = {
"Deathbringer Saurfang",
"Icecrown Citadel",
},
[73805] = {
"Corrupted Toad",
"SMV Alliance Garrison Level 1",
},
[205611] = {
"Molten Hound",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[164857] = {
"Spriggan Mendbender",
"De Other Side",
},
[201261] = {
"Kazzara, the Hellforged",
"Aberrus, the Shadowed Crucible",
"enUS",
},
[33838] = {
"Enslaved Fire Elemental",
"Ulduar",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[16407] = {
"Spectral Servant",
"Karazhan",
},
[73101] = {
"Cursed Wolf",
"SMV Alliance Garrison Level 1",
},
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Add - Important [P]"] = 4,
["Unit - Show Energy"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Circular Swipe"] = 4,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - Tank Interrupt"] = 12,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Fixate"] = 11,
["Cast - Tankbuster [P]"] = 1,
["Unit - Important"] = 11,
["Cast - Stop Casting"] = 4,
["Fixate by Unit Buff [P]"] = 2,
["Cast - On Going Cast [P]"] = 2,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Countdown"] = 12,
["Cast - Quick Flash"] = 2,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Spiteful Affix"] = 3,
["Cast - Alert + Timer [P]"] = 4,
["Add - Non Elite Trash [P]"] = 4,
["Cast - Debuff [P]"] = 2,
["Cast - Shining Green [P]"] = 3,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Aura - Is Cast Bar [P]"] = 1,
["Relics 9.2 M Dungeons"] = 2,
["Fixate On You"] = 12,
},
["ui_parent_scale_tune"] = 1.428571452899855,
["patch_version"] = 39,
["saved_cvars"] = {
["nameplateMinAlpha"] = "0.90135484",
["nameplateShowFriends"] = "0",
["nameplateSelectedAlpha"] = "1",
["nameplateLargeTopInset"] = "0.1",
["nameplateLargerScale"] = "1",
["nameplateMotionSpeed"] = "0.025",
["nameplateSelfScale"] = "1",
["nameplateGlobalScale"] = "1",
["nameplateSelfAlpha"] = "1",
["nameplateSelectedScale"] = "1",
["nameplateShowEnemies"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateTargetBehindMaxDistance"] = "40",
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["script_data_trash"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1625793282,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1154,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["Name"] = "Cast - Alert + Timer [P]",
["SpellIds"] = {
350421,
355787,
348513,
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1667140958,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1660511537,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 341,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1668047102,
["NpcNames"] = {
},
["SpellIds"] = {
373429,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetFromScale(0.2, 1)\n        texture.scale:SetToScale(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Time"] = 1605214963,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 607,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
323149,
324392,
340544,
342189,
333227,
163689,
227931,
233210,
300207,
301629,
297133,
},
["Name"] = "Aura - Buff Alert [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1604454032,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 351,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Desc"] = "Add the debuff name in the trigger box.",
["NpcNames"] = {
},
["SpellIds"] = {
337220,
337253,
337251,
},
["Name"] = "Aura - Debuff Alert [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0.016\n    \n    --update the health bar color coloring from yellow to red\n    --Plater.SetNameplateColor (unitFrame, max (envTable._CastPercent/100, .66), abs (envTable._CastPercent/100 - 1), 0, 1)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.HealthBarColor)\nend\n\n\n",
["Time"] = 1604617977,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 513,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["NpcNames"] = {
},
["SpellIds"] = {
332329,
320103,
321406,
335817,
321061,
320141,
326171,
163966,
227966,
},
["Name"] = "Cast - Ultra Important [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Health Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the health bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \nend",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["Time"] = 1604617585,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["Enabled"] = true,
["Revision"] = 595,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
320170,
320171,
320462,
330712,
332170,
333875,
326836,
342135,
333861,
341969,
317963,
327481,
328331,
322614,
325701,
326438,
323538,
321764,
296523,
330755,
295929,
296019,
335685,
170751,
342207,
350554,
348513,
351779,
328180,
319898,
166335,
172810,
172943,
173148,
163376,
228011,
228277,
29928,
228559,
230050,
374743,
227615,
229716,
229083,
299525,
300514,
285388,
294324,
294180,
293827,
297128,
294015,
291865,
},
["Name"] = "Cast - Small Alert [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a small animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n\n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1666836560,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 346,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
373429,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["Time"] = 1625696653,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["Enabled"] = true,
["Revision"] = 836,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["NpcNames"] = {
},
["SpellIds"] = {
354173,
},
["Name"] = "Cast - Important Target [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Shows the target name in a separate box",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Key"] = "option27",
["Value"] = 0,
["Name"] = "Option 27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option28",
["Value"] = "Target Options",
["Name"] = "Option 28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 14,
["Key"] = "targetNameSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Text Size",
},
{
["Type"] = 4,
["Key"] = "colorByClass",
["Value"] = true,
["Name"] = "Use Class Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "textColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Text Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgColor",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Name"] = "Background Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "targetBgBorderColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 90,
["Key"] = "targetFrameWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Frame Width",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Frame Height",
["Value"] = 20,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameHeight",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1626467946,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1162,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["NpcNames"] = {
},
["SpellIds"] = {
350421,
355787,
348513,
},
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
{
"350421",
"5",
},
{
"355787",
"15",
},
{
"348513",
"14",
},
{
"348513",
"14",
},
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1660259323,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 52,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
227548,
},
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996691,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1060,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
338353,
334748,
334749,
320784,
341352,
341520,
341522,
336005,
339777,
331933,
326617,
324914,
324776,
326046,
340634,
319070,
328295,
317936,
327413,
319654,
323821,
320772,
324293,
330562,
330868,
341902,
342139,
342675,
323190,
332836,
327648,
328217,
322938,
340544,
325876,
325700,
323552,
332666,
332612,
332706,
340026,
294171,
292910,
294165,
338871,
330813,
335694,
327461,
329787,
304946,
15245,
276754,
304831,
277036,
320657,
294362,
270248,
292926,
350421,
352158,
349985,
329239,
328400,
164192,
176032,
166335,
166387,
162066,
163689,
227592,
228254,
227999,
227987,
232115,
29580,
227616,
241828,
228606,
227800,
228239,
229706,
294884,
301629,
284219,
301689,
300650,
297835,
300171,
300087,
300414,
300436,
301088,
293729,
291928,
},
["Name"] = "Cast - Big Alert [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    envTable.HealthBarColor = scriptTable.config.healthBarColor\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n\nend\n\n\n",
["Time"] = 1604698647,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 462,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["NpcNames"] = {
},
["SpellIds"] = {
240446,
},
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "arrowHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\nend\n\n\n\n\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1660340256,
["url"] = "",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["Enabled"] = true,
["Revision"] = 25,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["NpcNames"] = {
},
["SpellIds"] = {
285388,
},
["Name"] = "Fixate by Unit Buff [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend",
["Time"] = 1604599443,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 460,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
323489,
323496,
319941,
319592,
334266,
325258,
334913,
326221,
322936,
323236,
321834,
336752,
325418,
324667,
327233,
324368,
324205,
323943,
319713,
320596,
320729,
323608,
330614,
320063,
332708,
334023,
317231,
317943,
320966,
334053,
328458,
321968,
331718,
325793,
330453,
326997,
334051,
292903,
330843,
294173,
189200,
352833,
330403,
166675,
176127,
166380,
162058,
167516,
166923,
178299,
172982,
163390,
173384,
173514,
29513,
227672,
228603,
227339,
227493,
241774,
229611,
229151,
300188,
299475,
299502,
300777,
301681,
298946,
298940,
300424,
283422,
294290,
291973,
293986,
291878,
292264,
},
["Name"] = "Cast - Frontal Cone [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.275,
["Key"] = "arrowAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Name"] = "Animation Speed",
["Value"] = 0.2,
["Key"] = "animSpeed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996917,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 717,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["NpcNames"] = {
},
["SpellIds"] = {
321247,
334522,
320232,
319962,
325879,
324427,
322999,
325360,
322903,
324103,
333294,
333540,
319521,
326021,
326450,
322711,
329104,
295000,
242391,
320197,
329608,
350687,
161090,
156301,
166341,
163379,
166923,
172952,
164426,
163665,
227578,
228528,
227789,
227779,
229608,
227925,
300129,
296522,
294349,
293854,
297834,
299588,
302682,
291946,
295169,
285440,
291613,
283551,
},
["Name"] = "Cast - Very Important [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n        end\n    end\n    \nend\n\n\n",
["__TrashAt"] = 1669398712,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (you may need /reload if some configs isn't applied immediately)    \n    --change the nameplate color to this if allowed\n    envTable.CanChangeNameplateColor = scriptTable.config.changeNameplateColor --\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset --\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/skullbones_128]])\n    unitFrame.UnitImportantSkullTexture:SetPoint(\"center\", unitFrame.healthBar, \"center\", 0, -5)\n    \n    unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n    unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n    unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n164362 - smily morsel - plaguefall\n168882 - fleeting manifestation - sanguine depths\n170234 - oppressive banner - theater of pain\n168988 - overgrowth - Mists of Tirna Scithe\n170452 - essesnce orb - torghast\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can change the nameplate color\n    if (envTable.CanChangeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604599472,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 355,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Unit - Important [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "nameplateSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137254901960784,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Skull Texture",
["Name"] = "Skull Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Skull Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "",
["Min"] = 0,
["Name"] = "Alpha",
["Value"] = 0.2,
["Key"] = "skullAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "",
["Min"] = 0.4,
["Key"] = "skullScale",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\nend\n\n\n\n\n",
["__TrashAt"] = 1669684921,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1618996775,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tank",
["Enabled"] = true,
["Revision"] = 843,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Cast alert for abilities which only the tank can interrupt.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Cast - Tank Interrupt [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Name"] = "Shake Amplitude",
["Value"] = 25,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 30,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1669684921,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.lifePercent = {\n        --npcId         percent divisions\n        [154564] = {80, 30},   --debug\n        [164451] = {40}, --dessia the decapirator - theater of pain\n        [164463] = {40}, --Paceran the Virulent - theater of pain\n        [164461] = {40}, -- Sathel the Accursed - theater of pain\n        [165946]= {50}, -- ~mordretha - thather of pain\n        [164501] = {70, 40, 10}, --mistcaller - tina scythe\n        [164218] = {70, 40}, --Lord Chamberlain - Halls of Atonement\n    }\n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1606506781,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 109,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Unit - Health Markers [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["__TrashAt"] = 1669684921,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n--[=[\n\n154564 - debug\n\n168098 - empowered coldheart agent\n156212 - coldheart agent\n\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1604607993,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 406,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Unit - Main Target [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 0,
["Name"] = "Nameplate Size Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.7137254901960784,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.healthBar, unitFrame.healthBar.MainTargetDotAnimation)\n    \n    unitFrame.healthBar.MainTargetDotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + scriptTable.config.nameplateSizeOffset)\n    \nend\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1669684921,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    function envTable.CheckUnit(unitFrame, envTable)\n        if (envTable._NpcID == 185680) then\n            --haste\n            envTable.SetColor(unitFrame, \"haste\")\n            \n        elseif (envTable._NpcID == 185683) then\n            --movement speed\n            envTable.SetColor(unitFrame, \"ms\")\n            \n        elseif (envTable._NpcID == 185685) then\n            --cooldown reduction\n            envTable.SetColor(unitFrame, \"cdr\")\n            \n        end\n    end\n    \n    function envTable.SetColor(unitFrame, bonusType)\n        \n        local r, g, b, a, name\n        \n        if (bonusType == \"haste\") then\n            name = scriptTable.config.hasteName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.hasteColor)\n            \n        elseif (bonusType == \"ms\") then\n            name = scriptTable.config.msName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.msColor)\n            \n        elseif (bonusType == \"cdr\") then\n            name = scriptTable.config.cdrName\n            r, g, b, a = DetailsFramework:ParseColors(scriptTable.config.cdrColor)\n        end\n        \n        Plater.SetNameplateColor(unitFrame, r, g, b, a)\n        if (scriptTable.config.canChangeSize) then\n            Plater.SetNameplateSize(unitFrame, scriptTable.config.width, scriptTable.config.height)\n        end\n        \n        --border\n        if (scriptTable.config.showBorder) then\n            r, g, b, a = r+0.2, g+0.2, b+0.2\n            Plater.SetBorderColor(unitFrame, r, g, b)\n        end\n        \n        --name\n        unitFrame.healthBar.unitName:SetText(name)\n    end\nend\n\n\n--185685 cooldown reduction\n--185680 haste\n--185683 movement speed\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckUnit(unitFrame, envTable)\nend\n\n\n",
["Time"] = 1647994498,
["url"] = "",
["Icon"] = 4263293,
["Enabled"] = true,
["Revision"] = 70,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Make more easy to distinguish relics within dungeons in 9.2 patch",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Relics 9.2 M Dungeons",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "ColorSettingsAnchor",
["Value"] = "Color Settings",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Adjust the nameplate color for each mob",
},
{
["Type"] = 1,
["Name"] = "Haste Color",
["Value"] = {
0.4549019607843137,
0.2156862745098039,
0.5490196078431373,
1,
},
["Key"] = "hasteColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "haste color",
},
{
["Type"] = 1,
["Key"] = "msColor",
["Value"] = {
0.3098039215686275,
0.5215686274509804,
0.2588235294117647,
1,
},
["Name"] = "Moviment Speep Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "moviment speep color",
},
{
["Type"] = 1,
["Name"] = "Cooldown Reduction Color",
["Value"] = {
0.1725490196078431,
0.2823529411764706,
0.5215686274509804,
1,
},
["Key"] = "cdrColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "cooldown reduction color",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "SizeSettingsAnchor",
["Value"] = "Size Settings",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "canChangeSize",
["Value"] = false,
["Name"] = "Change Nameplate Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If this is checked, the nameplate size is changed to the values below",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "total width of the nameplate",
["Min"] = 50,
["Key"] = "width",
["Value"] = 100,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Width",
},
{
["Type"] = 2,
["Max"] = 40,
["Desc"] = "total height of the nameplate",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 12,
["Name"] = "Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "height",
},
{
["Type"] = 6,
["Name"] = "Option 9",
["Value"] = 0,
["Key"] = "option9",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "BorderSettingsAnchor",
["Value"] = "Border Settings",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Paint Border",
["Value"] = true,
["Key"] = "showBorder",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, the color of the border will have the same color as the nameplate",
},
{
["Type"] = 6,
["Name"] = "Option 12",
["Value"] = 0,
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "NameSettings",
["Value"] = "Name Settings",
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 3,
["Name"] = "Haste Name",
["Value"] = "HASTE",
["Key"] = "hasteName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
{
["Type"] = 3,
["Key"] = "cdrName",
["Value"] = "CDR",
["Name"] = "Cooldown Reduction Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
{
["Type"] = 3,
["Name"] = "Movement Speed Name",
["Value"] = "MS",
["Key"] = "msName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckUnit(unitFrame, envTable)\n    \nend",
["__TrashAt"] = 1669684921,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1669326597,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["Enabled"] = true,
["Revision"] = 143,
["semver"] = "",
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Circle AoE [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.15,
["Key"] = "rotationDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Rotation Duration",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.5,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 0.6,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Alpha",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    Plater.SetNameplateColor(unitFrame, scriptTable.config.healthBarColor)\n    \nend\n\n\n",
["Time"] = 1669326367,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 641,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Ultra Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Health Bar Height Mod",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Health Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the health bar color to this one.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.168627455830574,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetNameplateColor (unitFrame, scriptTable.config.healthBarColor)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1669340396,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["Enabled"] = true,
["Revision"] = 515,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Important [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "changeNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Extra Texture",
["Value"] = "Extra Texture",
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Key"] = "showExtraTexture",
["Value"] = false,
["Name"] = "Show Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Key"] = "skullColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"chocolate",
},
{
"195820",
"chocolate",
},
{
"195821",
"chocolate",
},
{
"189886",
"firebrickdark",
},
{
"75966",
"midnightblue",
},
{
"102019 ",
"chocolate",
},
{
"187159",
"darkmagenta",
},
{
"194897",
"darkmagenta",
},
{
"104251",
"cornflowerblue",
},
},
["Name"] = "Npc Color By NpcID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1669326364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 453,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669339757,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1207,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Cast - Alert + Timer [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Cast start animation settings",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 7,
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Value"] = {
},
["Key"] = "timerList",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1669340472,
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Enabled"] = true,
["Revision"] = 122,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Change the color of  adds",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Warning [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 4,
["Key"] = "useFlash",
["Value"] = true,
["Name"] = "Flash Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Key"] = "npcColor",
["Value"] = {
{
"189893",
"firebrickdark",
},
{
"190187",
"firebrickdark",
},
{
"99922",
"saddlebrown",
},
{
"153285",
"firebrickdark",
},
{
"104822",
"firebrickdark",
},
},
["Name"] = "NpcID to Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    Plater.DenyColorChange(unitFrame, true)\n    \n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\nend\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669327145,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Enabled"] = true,
["Revision"] = 1183,
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
396640,
372743,
377389,
396812,
388392,
387955,
386546,
377503,
384808,
386024,
387615,
387606,
225100,
211401,
211470,
215433,
192563,
198959,
152818,
156776,
398206,
153524,
396073,
396018,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Big Alert [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    Plater.SetNameplateColor(unitFrame, scriptTable.config.healthBarColor)\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n",
["Time"] = 1669249865,
["url"] = "",
["Icon"] = 2175503,
["Enabled"] = true,
["Revision"] = 509,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
},
["PlaterCore"] = 1,
["Name"] = "Explosion Affix M+ [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Health Bar",
["Name"] = "Health Bar Title",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Health Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n        Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n      Plater.SetNameplateColor (unitFrame, scriptTable.config.nameplateColor)\n    \nend\n\n\n",
["Time"] = 1669340403,
["url"] = "",
["Icon"] = "interface/addons/plater/media/duck_64",
["Enabled"] = true,
["Revision"] = 36,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Name"] = "Add - Non Elite Trash [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, true)\n    \n    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\nend",
["Time"] = 1669257042,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 416,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Stop Casting [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Amount of Segments",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\nend\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow = envTable.movingArrow or Plater:CreateImage (self, [[Interface\\PETBATTLES\\PetBattle-StatIcons]], 16, self:GetHeight(), \"background\", {0, 15/32, 18/32, 30/32})\n    \n    --envTable.movingArrow.color = scriptTable.config.arrowColor\n    envTable.movingArrow:SetAlpha (scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (envTable.movingArrow, \n        function() \n            envTable.movingArrow:Show() \n            envTable.movingArrow:SetPoint(\"left\", 0, 0)\n        end, \n        function() envTable.movingArrow:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.movingArrow:SetAlpha(scriptTable.config.arrowAlpha)\n    \nend",
["Time"] = 1669339586,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 560,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
375943,
385958,
388623,
377034,
374361,
372107,
381525,
386660,
385578,
384699,
153501,
153686,
154442,
192018,
219488,
372087,
391726,
391723,
377383,
388976,
370764,
387067,
391118,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
153395,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Frontal Cone [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.275,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    \n    envTable.movingArrow:SetAlpha(scriptTable.config.arrowAlpha)\n    envTable.movingArrow:SetHeight(self:GetHeight() - 2)\n    envTable.movingArrow:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.movingArrow:SetDesaturated (scriptTable.config.desaturateArrow)\n    \n    envTable.movingAnimation:Play()\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1669326503,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 786,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["__TrashAt"] = 1670554937,
["NpcNames"] = {
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Very Important [Plater]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Key"] = "flashDuration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Key"] = "shakeAmplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            texture:Hide()\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        textureStretched:Hide()  \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        print(\"is channeling\")\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        print(\"no envTable.NextPercent\")\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670428059,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 497,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1670795579,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Glowing [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Fraction"] = false,
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["version"] = -1,
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n        end)\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340966,
["url"] = "",
["Icon"] = 134229,
["Enabled"] = true,
["Revision"] = 21,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["NpcNames"] = {
},
["Name"] = "Cast - Effect After Cast [P]",
["SpellIds"] = {
191284,
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1671598987,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["Enabled"] = true,
["Revision"] = 687,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a special animation showing the explosion time.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = true,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
1,
0.168627455830574,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showArrow",
["Value"] = true,
["Name"] = "Show Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Name"] = "Color List by SpellId",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
209410,
211464,
361180,
156718,
395859,
358320,
374045,
386757,
367500,
370225,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Ultra Important [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1671598987,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["Enabled"] = true,
["Revision"] = 161,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["Name"] = "Add - Tag Number [P]",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["__TrashAt"] = 1671598987,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            texture:Hide()\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        textureStretched:Hide()  \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        print(\"no envTable.NextPercent\")\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670623964,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 498,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Glowing [P]",
["NpcNames"] = {
},
["__TrashAt"] = 1671598987,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1671311518,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Enabled"] = true,
["Revision"] = 511,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["__TrashAt"] = 1676261576,
["NpcNames"] = {
},
["SpellIds"] = {
376644,
373017,
386781,
384823,
372735,
385536,
392398,
375596,
387135,
209033,
360850,
212784,
207980,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Glowing [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Name"] = "Cast Color by SpellID",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Key"] = "castColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, scriptTable.config.segmentsAmount do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \nend",
["Time"] = 1670202019,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["Enabled"] = true,
["Revision"] = 468,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Just stop casting",
["__TrashAt"] = 1676261576,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Stop Casting [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 5,
["Key"] = "segmentsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["version"] = -1,
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1670202618,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["Enabled"] = true,
["Revision"] = 798,
["semver"] = "",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["__TrashAt"] = 1676261576,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\nend",
["Name"] = "Cast - Very Important [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
388886,
387145,
384365,
152964,
398150,
152801,
397878,
397914,
183263,
3636,
376171,
},
["NpcNames"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1669340967,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 137,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
"197697",
"59544",
},
["SpellIds"] = {
},
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["__TrashAt"] = 1689117019,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [197697] = {50}, --Flamegullet\n        [59544] = {50}, --The Nodding Tiger\n        [186227] = {20}, --Monstrous Decay\n        [184020] = {40}, -- Hulking Berserker\n        [91005] = {20}, --Naraxas\n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1683596223,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Revision"] = 146,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Key"] = "indicatorAlpha",
["Value"] = 0.79,
["Name"] = "Vertical Line Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Name"] = "Fill Alpha",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fillAlpha",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["__TrashAt"] = 1740110978,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    repeat    \n        slots = { UnitAuraSlots(unitId, \"HELPFUL\", BUFF_MAX_DISPLAY, continuationToken) }\n        continuationToken = slots[1]\n        numSlots = #slots\n        \n        for i = 2, numSlots do\n            local slot = slots[i]\n            local name, texture, count, actualAuraType, duration, expirationTime, caster, canStealOrPurge, nameplateShowPersonal, spellId, canApplyAura, isBossDebuff, isCastByPlayer, nameplateShowAll, timeMod, auraAmount = UnitAuraBySlot(unitId, slot) \n            \n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        end\n        \n    until continuationToken == nil\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1669327146,
["url"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Revision"] = 65,
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["__TrashAt"] = 1740110978,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604354364,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Enabled"] = true,
["Revision"] = 206,
["semver"] = "",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["NpcNames"] = {
},
["SpellIds"] = {
},
["Name"] = "Countdown",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                local _, _, _, _, duration, expirationTime = AuraUtil.FindAuraByName(name, unitId, \"DEBUFF\")\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["__TrashAt"] = 1740110978,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1670202265,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["Enabled"] = true,
["Revision"] = 620,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Name"] = "Cast - Frontal Cone [Plater]",
["NpcNames"] = {
},
["__TrashAt"] = 1740110978,
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        \n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    for debuffId = 1, 40 do\n        local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (\"player\", debuffId)\n        \n        --cancel the loop if there's no more debuffs on the player\n        if (not name) then \n            break \n        end\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1604087921,
["url"] = "",
["Icon"] = 841383,
["Enabled"] = true,
["Revision"] = 266,
["semver"] = "",
["Author"] = "Tecno-Azralon",
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["NpcNames"] = {
},
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Name"] = "Fixate On You [Plater]",
["PlaterCore"] = 1,
["version"] = -1,
["Options"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["__TrashAt"] = 1740110978,
},
},
["aura2_y_offset"] = 5,
["login_counter"] = 362,
["health_selection_overlay_alpha"] = 0.199999988079071,
["first_run3"] = true,
["aura_tracker"] = {
["buff_tracked"] = {
[227931] = true,
[233210] = true,
[209859] = true,
[163689] = true,
[297133] = true,
},
},
["plate_config"] = {
["global_health_height"] = 12,
["global_health_width"] = 112,
},
["number_region_first_run"] = true,
["aura_y_offset"] = 5,
},
["Quazii TWW 11.1 Plater"] = {
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1737945840,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --flash duration\n    local CONFIG_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --manually create a new texture for the flash animation\n    if (not envTable.SmallFlashTexture) then\n        envTable.SmallFlashTexture = envTable.SmallFlashTexture or Plater:CreateImage (unitFrame.castBar)\n        envTable.SmallFlashTexture:SetColorTexture (1, 1, 1)\n        envTable.SmallFlashTexture:SetAllPoints()\n    end\n    \n    --manually create a flash animation using the framework\n    if (not envTable.SmallFlashAnimationHub) then \n        \n        local onPlay = function()\n            envTable.SmallFlashTexture:Show()\n        end\n        \n        local onFinished = function()\n            envTable.SmallFlashTexture:Hide()\n        end\n        \n        local animationHub = Plater:CreateAnimationHub (envTable.SmallFlashTexture, onPlay, onFinished)\n        envTable.flashIn = Plater:CreateAnimation (animationHub, \"Alpha\", 1, CONFIG_FLASH_DURATION/2, 0, .6)\n        envTable.flashOut = Plater:CreateAnimation (animationHub, \"Alpha\", 2, CONFIG_FLASH_DURATION/2, 1, 0)\n        \n        envTable.SmallFlashAnimationHub = animationHub\n    end\n    \n    envTable.flashIn:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.flashOut:SetDuration(scriptTable.config.flashDuration / 2)\n    envTable.SmallFlashTexture:SetColorTexture (Plater:ParseColors(scriptTable.config.flashColor))\n    \nend\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Play()\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.SmallFlashAnimationHub:Stop()\n    \nend\n\n\n",
["Revision"] = 665,
["semver"] = "",
["Name"] = "Cast - Small Alert [Plater]",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Flashes the Cast Bar when a spell in the trigger list is Cast. Add spell in the Add Trigger field.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
["SpellIds"] = {
376851,
396044,
373932,
397801,
208165,
392576,
198750,
387843,
387411,
211299,
198595,
198934,
198962,
156722,
377991,
281420,
274383,
259092,
367521,
374544,
385039,
382474,
369823,
377500,
260879,
186269,
378818,
371875,
372225,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a small animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.6,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1739959468,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 113,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1740112052,
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 637,
["semver"] = "",
["Name"] = "Aura - Buff Alert [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1702402951,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\nend",
["Enabled"] = false,
["Revision"] = 838,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a big animation when the cast start.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot X Offset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "yOffset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["SpellIds"] = {
373046,
372863,
164686,
153072,
153680,
196497,
387145,
384365,
152964,
398150,
152801,
397878,
183263,
3636,
376171,
350687,
372735,
373017,
392488,
257732,
256060,
257899,
384633,
374339,
395694,
391634,
372701,
369328,
265487,
183526,
88194,
87762,
413385,
411001,
378282,
384161,
253517,
377488,
},
["Prio"] = 91,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Name"] = "Cast - Very Important [Plater]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_darkorange",
["url"] = "",
["semver"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1739959468,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 372,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Glow Enabled",
["Value"] = false,
["Key"] = "glowEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Glow Color",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Dots Enabled",
["Value"] = true,
["Key"] = "dotsEnabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Name"] = "Dots Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["url"] = "",
["Author"] = "Tercioo-Sylvanas",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["semver"] = "",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1739959479,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.BuffFrame, \"top\", 0, 10);    \n    \n    envTable.FixateIcon = Plater:CreateImage (unitFrame, 236188, 16, 16, \"overlay\");\n    envTable.FixateIcon:SetPoint (\"bottom\", envTable.FixateTarget, \"top\", 0, 4);    \n    \n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n--165560 = Gormling Larva - MTS\n\n\n\n\n\n\n",
["Icon"] = 1029718,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:Hide()\n    envTable.FixateIcon:Hide()\nend\n\n\n",
["Revision"] = 270,
["semver"] = "",
["Enabled"] = false,
["NpcNames"] = {
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Fixate [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    local targetName = UnitName (unitId .. \"target\");\n    if (targetName) then\n        local _, class = UnitClass (unitId .. \"target\");\n        targetName = Plater.SetTextColorByClass (unitId .. \"target\", targetName);\n        envTable.FixateTarget.text = targetName;\n        \n        envTable.FixateTarget:Show();\n        envTable.FixateIcon:Show();\n    end    \nend\n\n\n",
["SpellIds"] = {
},
["Desc"] = "Show above the nameplate who is the player fixated",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1739959443,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Enabled"] = true,
["Revision"] = 141,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Desc"] = "Show the energy amount above the nameplate",
["Icon"] = 136048,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
},
{
["ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1739959483,
["url"] = "",
["NpcNames"] = {
"Illusionary Vulpin",
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.FixateTarget:SetText (\"\")\n    envTable.FixateTarget:Hide()\n    \n    envTable.IsFixated = false\n    \n    Plater.RefreshNameplateColor (unitFrame)\nend\n\n\n",
["Revision"] = 280,
["Options"] = {
},
["Enabled"] = false,
["Temp_ConstructorCode"] = "--todo: add npc ids for multilanguage support\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.TextAboveNameplate = \"** On You **\"\n    envTable.NameplateColor = \"green\"\n    \n    --label to show the text above the nameplate\n    envTable.FixateTarget = Plater:CreateLabel (unitFrame);\n    envTable.FixateTarget:SetPoint (\"bottom\", unitFrame.healthBar, \"top\", 0, 30);\n    \n    --compat\n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end\n    \n    --the spell casted by the npc in the trigger list needs to be in the list below as well\n    local spellList = {\n        [321891] = \"Freeze Tag Fixation\", --Illusionary Vulpin - MTS\n        --[167385] = \"Uber Strike\", --tank dummy\n    }\n    \n    --build the list with localized spell names\n    envTable.FixateDebuffs = {}\n    for spellID, enUSSpellName in pairs (spellList) do\n        local localizedSpellName = GetSpellInfo (spellID)\n        envTable.FixateDebuffs [localizedSpellName or enUSSpellName] = true\n    end\n    \n    --debug - smuggled crawg\n    envTable.FixateDebuffs [\"Jagged Maw\"] = true\n    \nend\n\n--[=[\nNpcIDs:\n136461: Spawn of G'huun (mythic uldir G'huun)\n\n--]=]\n\n\n\n\n",
["Author"] = "Tecno-Azralon",
["Icon"] = 841383,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Prio"] = 99,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --swap this to true when it is fixated\n    local isFixated = false\n    \n    --check the debuffs the player has and see if any of these debuffs has been placed by this unit\n    local auras = Plater.GetUnitAuras(unitFrame)\n    for id, aura in pairs(auras) do\n        local name, caster = aura.name, aura.sourceUnit\n        \n        --check if the owner of the debuff is this unit\n        if (envTable.FixateDebuffs [name] and caster and UnitIsUnit (caster, unitId)) then\n            --the debuff the player has, has been placed by this unit, set the name above the unit name\n            envTable.FixateTarget:SetText (envTable.TextAboveNameplate)\n            envTable.FixateTarget:Show()\n            Plater.SetNameplateColor (unitFrame,  envTable.NameplateColor)\n            isFixated = true\n            \n            if (not envTable.IsFixated) then\n                envTable.IsFixated = true\n                Plater.FlashNameplateBody (unitFrame, \"fixate\", .2)\n            end\n            break\n        end\n        \n    end\n    \n    --check if the nameplate color is changed but isn't fixated any more\n    if (not isFixated and envTable.IsFixated) then\n        --refresh the nameplate color\n        Plater.RefreshNameplateColor (unitFrame)\n        --reset the text\n        envTable.FixateTarget:SetText (\"\")\n        \n        envTable.IsFixated = false\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Fixate On You [Plater]",
["SpellIds"] = {
"spawn of g'huun",
"smuggled crawg",
"sergeant bainbridge",
"blacktooth scrapper",
"irontide grenadier",
"feral bloodswarmer",
"earthrager",
"crawler mine",
"rezan",
},
["Desc"] = "When an enemy places a debuff and starts to chase you. This script changes the nameplate color and place your name above the nameplate as well.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["Time"] = 1739959483,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"pink\" \n    \nend\n\n\n",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 47,
["Options"] = {
},
["Author"] = "抹了油的大叔-白银之手",
["Desc"] = "NameplaterColor with Special Buff ID",
["Prio"] = 99,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    \nend\n\n\n",
["SpellIds"] = {
277242,
},
["PlaterCore"] = 1,
["Icon"] = "INTERFACE\\ICONS\\Achievement_PVP_P_01",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "NameplaterColor with Special Buff ID",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castBarHeight"] = 6,
["useNameplateColor"] = true,
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1739959484,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["Icon"] = 2175503,
["Desc"] = "Apply several animations when the explosion orb cast starts on a Mythic Dungeon with Explosion Affix",
["Enabled"] = false,
["Revision"] = 552,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowWidth",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Key"] = "arrowHeight",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Height",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dot Y Offset",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["SpellIds"] = {
240446,
385339,
198077,
210261,
360857,
273577,
382712,
389446,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Explosion Affix M+ [Plater]",
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Time"] = 1739959487,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    do\n        \n        --change the nameplate color to this color\n        --can use color names: \"red\", \"yellow\"\n        --can use color hex: \"#FF0000\", \"#FFFF00\"\n        --con use color table: {1, 0, 0}, {1, 1, 0}\n        \n        envTable.Color = \"green\"\n        \n        --if true, it'll replace the health info with the unit name\n        envTable.ReplaceHealthWithName = false\n        \n        --use flash when the unit is shown in the screen\n        envTable.FlashNameplate = true\n        \n    end\n    \n    --private:\n    do\n        --create a flash for when the unit if shown\n        envTable.smallFlash = envTable.smallFlash or Plater.CreateFlash (unitFrame.healthBar, 0.15, 1, envTable.Color)\n        \n    end\n    \nend\n\n--[=[\n\nNpc IDS:\n\n141851: Spawn of G'Huun on Mythic Dungeons\n\n\n--]=]\n\n\n\n\n",
["Icon"] = 135024,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --make plater refresh the nameplate color\n    Plater.RefreshNameplateColor (unitFrame)\n    \n        envTable.smallFlash:Stop()\n    \nend\n\n\n",
["Revision"] = 73,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can flash the nameplate\n    if (envTable.FlashNameplate) then\n        envTable.smallFlash:Play()\n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"141851",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --adjust the nameplate color\n    Plater.SetNameplateColor (unitFrame, envTable.Color)\n    \n    --check if can replace the health amount with the unit name\n    if (envTable.ReplaceHealthWithName) then\n        \n        local healthPercent = format (\"%.1f\", unitFrame.healthBar.CurrentHealth / unitFrame.healthBar.CurrentHealthMax *100)\n        \n        unitFrame.healthBar.lifePercent:SetText (unitFrame.namePlateUnitName .. \"  (\" .. healthPercent  .. \"%)\")\n        \n    end\n    \nend\n\n\n",
["Name"] = "Color Change [Plater]",
["PlaterCore"] = 1,
["Enabled"] = false,
["Desc"] = "Add a unitID or unit name in 'Add Trigger' entry. See the constructor script for options.",
["Prio"] = 99,
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Time"] = 1620152446,
["Temp_ConstructorCode"] = "--gray lines are comments and doesn't affect the code\n\n--1) add the aura you want by typing its name or spellID into the \"Add Trigger\" and click the \"Add\" button.\n--2) the border will use the default color set below, to a custom color type aura name and the color you want in the BorderColorByAura table.\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --default color if the aura name isn't found in the Color By Aura table below\n    envTable.DefaultBorderColor = \"orange\"\n    \n    --transparency, affect all borders\n    envTable.BorderAlpha = 1.0\n    \n    --add the aura name and the color, \n    envTable.BorderColorByAura = {\n        \n        --examples:\n        --[\"Aura Name\"] = \"yellow\", --using regular aura name | using the name of the color\n        --[\"aura name\"] = \"#FFFF00\", --using lower case in the aura name |using html #hex for the color\n        --[54214] = {1, 1, 0}, --using the spellID instead of the name | using rgb table (0 to 1) for the color\n        --color table uses zero to one values: 255 = 1.0, 127 = 0.5, orange color = {1, 0.7, 0}\n        \n        --add your custom border colors below:\n        \n        [\"Aura Name\"] = {1, .5, 0}, --example to copy/paste\n        \n    }\n    \n    \nend\n\n\n\n\n",
["Icon"] = 133006,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the border color\n    self:SetBackdropBorderColor (0, 0, 0, 0)\n    \nend\n\n\n",
["Revision"] = 48,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the aura name in lower case\n    local auraLowerName = string.lower (envTable._SpellName)\n    \n    --attempt to get a custom color added by the user in the constructor script\n    local hasCustomBorderColor = envTable.BorderColorByAura [auraLowerName] or envTable.BorderColorByAura [envTable._SpellName] or envTable.BorderColorByAura [envTable._SpellID]\n    \n    --save the custom color\n    envTable.CustomBorderColor = hasCustomBorderColor\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --get the custom color added by the user or the default color\n    local color = envTable.CustomBorderColor or envTable.DefaultBorderColor\n    --parse the color since it can be a color name, hex or color table\n    local r, g, b = DetailsFramework:ParseColors (color)\n    \n    --set the border color\n    self:SetBackdropBorderColor (r, g, b, envTable.BorderAlpha)\n    \nend\n\n\n\n\n",
["Name"] = "Aura - Border Color [Plater]",
["PlaterCore"] = 1,
["Enabled"] = false,
["Desc"] = "Add a border to an aura icon. Add the aura into the Add Trigger entry. You can customize the icon color at the constructor script.",
["Prio"] = 99,
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings (require a /reload after editing any setting)\n    do\n        --blink and glow\n        envTable.BlinkEnabled = scriptTable.config.blinkEnabled\n        envTable.GlowEnabled = scriptTable.config.glowEnabled \n        envTable.ChangeNameplateColor = scriptTable.config.changeNameplateColor;\n        envTable.TimeLeftToBlink = scriptTable.config.timeleftToBlink;\n        envTable.BlinkSpeed = scriptTable.config.blinkSpeed; \n        envTable.BlinkColor = scriptTable.config.blinkColor; \n        envTable.BlinkMaxAlpha = scriptTable.config.blinkMaxAlpha; \n        envTable.NameplateColor = scriptTable.config.nameplateColor; \n        \n        --text color\n        envTable.TimerColorEnabled = scriptTable.config.timerColorEnabled \n        envTable.TimeLeftWarning = scriptTable.config.timeLeftWarning;\n        envTable.TimeLeftCritical = scriptTable.config.timeLeftCritical;\n        envTable.TextColor_Warning = scriptTable.config.warningColor; \n        envTable.TextColor_Critical = scriptTable.config.criticalColor; \n        \n        --list of spellIDs to ignore\n        envTable.IgnoredSpellID = {\n            [12] = true, --use a simple comma here\n            [13] = true,\n        }\n    end\n    \n    \n    --private\n    do\n        --if not envTable.blinkTexture then\n        envTable.blinkTexture = Plater:CreateImage (self, \"\", 1, 1, \"overlay\")\n        envTable.blinkTexture:SetPoint ('center', 0, 0)\n        envTable.blinkTexture:Hide()\n        \n        local onPlay = function()\n            envTable.blinkTexture:Show() \n            envTable.blinkTexture.color = envTable.BlinkColor\n        end\n        local onStop = function()\n            envTable.blinkTexture:Hide()  \n        end\n        envTable.blinkAnimation = Plater:CreateAnimationHub (envTable.blinkTexture, onPlay, onStop)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 1, envTable.BlinkSpeed / 2, 0, envTable.BlinkMaxAlpha)\n        Plater:CreateAnimation (envTable.blinkAnimation, \"ALPHA\", 2, envTable.BlinkSpeed / 2, envTable.BlinkMaxAlpha, 0)\n        --end\n        \n        envTable.glowEffect = envTable.glowEffect or self.overlay or Plater.CreateIconGlow (self)\n        --envTable.glowEffect = envTable.glowEffect or Plater.CreateIconGlow (self)\n        --envTable.glowEffect:Show() --envTable.glowEffect:Hide()\n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.blinkAnimation:Stop()\n    envTable.blinkTexture:Hide()\n    envTable.blinkAnimation:Stop()\n    envTable.glowEffect:Stop()\n    Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local timeLeft = envTable._RemainingTime\n    \n    --check if the spellID isn't being ignored\n    if (envTable.IgnoredSpellID [envTable._SpellID]) then\n        return\n    end\n    \n    --check the time left and start or stop the blink animation and also check if the time left is > zero\n    if ((envTable.BlinkEnabled or envTable.GlowEnabled) and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftToBlink) then\n            --blink effect\n            if (envTable.BlinkEnabled) then\n                if (not envTable.blinkAnimation:IsPlaying()) then\n                    envTable.blinkAnimation:Play()\n                end\n            end\n            --glow effect\n            if (envTable.GlowEnabled) then\n                envTable.glowEffect:Show()\n            end\n            --nameplate color\n            if (envTable.ChangeNameplateColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n            end\n        else\n            --blink effect\n            if (envTable.blinkAnimation:IsPlaying()) then\n                envTable.blinkAnimation:Stop()\n            end\n            --glow effect\n            if (envTable.GlowEnabled and envTable.glowEffect:IsShown()) then\n                envTable.glowEffect:Hide()\n            end\n        end\n    end\n    \n    --timer color\n    if (envTable.TimerColorEnabled and timeLeft > 0) then\n        if (timeLeft < envTable.TimeLeftCritical) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Critical)\n        elseif (timeLeft < envTable.TimeLeftWarning) then\n            Plater:SetFontColor (self.Cooldown.Timer, envTable.TextColor_Warning)        \n        else\n            Plater:SetFontColor (self.Cooldown.Timer, Plater.db.profile.aura_timer_text_color)\n        end\n    end\n    \nend",
["Time"] = 1626382829,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_blink",
["Enabled"] = false,
["Revision"] = 375,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Blink, change the number and nameplate color. Add the debuffs int he trigger box. Set settings on constructor script.",
["NpcNames"] = {
},
["Name"] = "Aura - Blink by Time Left [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option10",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Enter the spell name or spellID in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "blinkEnabled",
["Value"] = true,
["Name"] = "Blink Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable blink",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = true,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable glows",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = false,
["Name"] = "Change NamePlate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'true' to enable nameplate color change",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the blink effect only",
["Min"] = 1,
["Key"] = "timeleftToBlink",
["Value"] = 3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Timeleft to Blink",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "time to complete a blink loop",
["Min"] = 0.5,
["Key"] = "blinkSpeed",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "max transparency in the animation loop (1.0 is full opaque)",
["Min"] = 0.1,
["Key"] = "blinkMaxAlpha",
["Value"] = 0.6,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Blink Max Alpha",
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color of the blink",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
0.2862745098039216,
0.00392156862745098,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "nameplate color if ChangeNameplateColor is true",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option10",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "timerColorEnabled",
["Value"] = true,
["Name"] = "Timer Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "set to 'false' to disable changes in the color of the time left text",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftWarning",
["Value"] = 8,
["Name"] = "Time Left Warning",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "in seconds, affects the color of the text",
["Min"] = 1,
["Key"] = "timeLeftCritical",
["Value"] = 3,
["Name"] = "Time Left Critical",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "warningColor",
["Value"] = {
1,
0.8705882352941177,
0,
1,
},
["Name"] = "Warning Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left entered in a warning zone",
},
{
["Type"] = 1,
["Key"] = "criticalColor",
["Value"] = {
1,
0.07450980392156863,
0,
1,
},
["Name"] = "Critical Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "color when the time left is critical",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.blinkTexture:SetSize (self:GetSize())\n    \nend\n\n\n",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["Time"] = 1739959483,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
"surf darter",
},
["Enabled"] = false,
["Revision"] = 7,
["Options"] = {
},
["Author"] = "Kastfall-Azralon",
["OnShowCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Prio"] = 99,
["Name"] = "New Script",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    local isTanking = UnitDetailedThreatSituation (\"player\", unitId)\n    if (not isTanking) then \n        Plater.SetNameplateColor (unitFrame, \"pink\") \n    end\n    \nend\n\n\n\n\n",
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable)\n			\n		end\n	",
["Desc"] = "",
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1739959479,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CastbarColor = \"orangered\"\n    \n    --settings (you may need /reload if some configs isn't applied immediately)\n    local CONFIG_BACKGROUND_FLASH_DURATION = 0.8 --0.8\n    local CONFIG_BORDER_GLOW_ALPHA = 0 --0.3\n    local CONFIG_SHAKE_DURATION = 0.2 --0.2\n    local CONFIG_SHAKE_AMPLITUDE = 5 --5\n    \n    envTable.CastBarHeightAdd = 1.5\n    \n    --create a glow effect in the border of the cast bar\n    envTable.glowEffect = envTable.glowEffect or Plater.CreateNameplateGlow (self)\n    envTable.glowEffect:SetOffset (-22, 20, 8, -11)\n    envTable.glowEffect:SetAlpha (CONFIG_BORDER_GLOW_ALPHA)\n    --envTable.glowEffect:Show() --envTable.glowEffect:Hide() \n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+20, self:GetHeight()+30, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (self, CONFIG_SHAKE_DURATION, CONFIG_SHAKE_AMPLITUDE, 35, false, false, 0, 1, 0.05, 0.1, true)    \n    \n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)\n    fadeOut:SetDuration (CONFIG_BACKGROUND_FLASH_DURATION/2)    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = CONFIG_SHAKE_AMPLITUDE\n    envTable.FrameShake.OriginalDuration = CONFIG_SHAKE_DURATION  \n    \nend",
["Icon"] = "INTERFACE\\ICONS\\Spell_Fire_FelFlameStrike",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    envTable.glowEffect:Hide()\n    \n    envTable.BackgroundFlash:Stop()\n    \n    self:StopFrameShake (envTable.FrameShake)    \n    \n    --restore the cast bar to its original height\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n        envTable.OriginalHeight = nil\n        envTable.OriginalWidth = nil\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Revision"] = 1386,
["Options"] = {
},
["Author"] = "Tercioo-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    envTable.glowEffect:Show()\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    self:PlayFrameShake (envTable.FrameShake)\n    \n    if (envTable._CanInterrupt) then\n        self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n    end\n    \n    Plater.SetCastBarBorderColor (self, 1, 0, 0, 0.4)\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetWidth (envTable.OriginalWidth)\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    \n    --increase the cast bar size\n    envTable.OriginalHeight = self:GetHeight()\n    envTable.OriginalWidth = self:GetWidth()\n    local width = Plater.db.profile.plate_config.enemynpc.cast_incombat[1]\n    local height = Plater.db.profile.plate_config.enemynpc.cast_incombat[2]\n    \n    self:SetWidth (width)\n    self:SetHeight (height * envTable.CastBarHeightAdd)\n    \n    print (envTable.glowEffect:GetAlpha())\n    \nend",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "M+ Important Spells [Plater]",
["PlaterCore"] = 1,
["Enabled"] = false,
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Prio"] = 99,
["SpellIds"] = {
258153,
258313,
274569,
278020,
261635,
272700,
268030,
265368,
264520,
265407,
278567,
278602,
258128,
257791,
258938,
265089,
272183,
256060,
257397,
269972,
270901,
270492,
263215,
268797,
262554,
255041,
252781,
250368,
258777,
278504,
266106,
257732,
268309,
269302,
263202,
257784,
278755,
272180,
263066,
267273,
265912,
274438,
268317,
268375,
276767,
264105,
265876,
270464,
278961,
265468,
256897,
280604,
268702,
255824,
253583,
250096,
278456,
262092,
257270,
267818,
265091,
262540,
263318,
263959,
257069,
256849,
267459,
253544,
268008,
267981,
272659,
264396,
257736,
264390,
257426,
274400,
272609,
269843,
269029,
272827,
269266,
263912,
264923,
258864,
256955,
265540,
260793,
270003,
270507,
257337,
268415,
275907,
268865,
260669,
260280,
253239,
265541,
250258,
256709,
277596,
276268,
265372,
263905,
265781,
257170,
268846,
270514,
258622,
258199,
256627,
257870,
259711,
258917,
263891,
268027,
268348,
269313,
272711,
271174,
268260,
269399,
268239,
264574,
261563,
257288,
257757,
267899,
255741,
264757,
260894,
263583,
276292,
272874,
264101,
264407,
271456,
262515,
275192,
270084,
257785,
267237,
266951,
267433,
255577,
255371,
270891,
267357,
258338,
257169,
270927,
273995,
260926,
264027,
267257,
253721,
265019,
260924,
263309,
266206,
268187,
260067,
274507,
276068,
263278,
258317,
256594,
268391,
268230,
260852,
267763,
268706,
264734,
288693,
288694,
270590,
290787,
72286,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734765,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Used on casts that make the mob explode or transform if the cast passes.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 695,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation showing the explosion time.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Name"] = "Health Bar Height Mod",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Arrow:",
["Name"] = "Arrow:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Name"] = "Arrow Alpha",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Key"] = "arrowWidth",
["Value"] = 8,
["Name"] = "Arrow Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Name"] = "Arrow Height",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 4,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"200682",
"darkslateblue",
},
{
"192307",
"goldenrod",
},
{
"196838",
"maroon",
},
{
"193827",
"darkgreen",
},
{
"194043",
"darkgreen",
},
{
"156718",
"DRUID",
},
{
"395859",
"ROGUE",
},
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["SpellIds"] = {
383823,
382670,
388537,
372851,
200682,
192307,
196838,
193827,
194043,
211464,
361180,
156718,
358320,
386757,
370225,
376200,
372107,
388923,
376934,
384899,
373960,
374724,
385551,
259732,
373424,
373084,
87618,
426905,
253544,
},
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    else\n        envTable.topArrow:Hide()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Name"] = "Cast - Ultra Important [P]",
["PlaterCore"] = 1,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_red",
["url"] = "",
["semver"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Time"] = 1694734910,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Enabled"] = false,
["Revision"] = 67,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Auto set a raid target Skull on the unit.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "onlyInCombat",
["Value"] = false,
["Name"] = "Only in Combat",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Set the mark only if the unit is in combat.",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Auto set skull marker",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.CheckMark (unitId, unitFrame)\nend\n\n\n",
["Name"] = "Auto Set Skull",
["PlaterCore"] = 1,
["Icon"] = "Interface\\Worldmap\\GlowSkull_64Grey",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    --check for marks\n    function  envTable.CheckMark (unitId, unitFrame)\n        if (not GetRaidTargetIndex(unitId)) then\n            if (scriptTable.config.onlyInCombat) then\n                if (not UnitAffectingCombat(unitId)) then\n                    return\n                end                \n            end\n            \n            SetRaidTarget(unitId, 8)\n        end       \n    end\nend\n\n\n--163520 - forsworn squad-leader\n--163618 - zolramus necromancer - The Necrotic Wake\n--164506 - anciet captain - theater of pain\n\n\n",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1739959486,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local GetSpellInfo = GetSpellInfo or function(spellID) if not spellID then return nil end local si = C_Spell.GetSpellInfo(spellID) if si then return si.name, nil, si.iconID, si.castTime, si.minRange, si.maxRange, si.spellID, si.originalIconID end end --compatibility\n    \n    envTable.npcInfo = {\n        [164427] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"1\", name = \"Boom!\"}, --reanimated warrior - plaguefall\n        \n        [164414] = {secondCastBar = true, timer = 20, timerId = 321247, altCastId = \"2\", name = \"Boom!\"}, --reanimated mage - plaguefall\n        \n        [164185] = {secondCastBar = true, timer = 20, timerId = 319941, altCastId = \"3\", remaining = 5, name = GetSpellInfo(319941)}, --Echelon - Halls of Atonement\n        \n        [164567] = {secondCastBar = true, altCastId = \"dromanswrath\", debuffTimer = 323059, name = GetSpellInfo(323059), spellIcon = 323059}, --Ingra Maloch -- tirna scythe\n        \n        [165408] = {secondCastBar = true, timer = 20, timerId = 322711, altCastId = \"4\", remaining = 5, name = GetSpellInfo(322711)}, --Halkias - Refracted Sinlight - Halls of Atonement\n        \n        --[225976] = {secondCastBar = true, altCastId = \"Uber Strike\",  debuffTimer = 167385, name = GetSpellInfo(167385), spellIcon = 167385}, --tank dummy        \n        --[154564] = {secondCastBar = true, timerId = \"Test Bar\", altCastId = \"debugcast\", remaining = 5, name = GetSpellInfo(319941), spellIcon = 319941}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n        --[154580] = {secondCastBar = true, altCastId = \"debugcast\", debuffTimer = 204242, name = GetSpellInfo(81297), spellIcon = 81297}, --debug \"Test (1)\" BW \"Test Bar\" DBM --DEBUG\n    }\n    \n    --set the castbar config\n    local config = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        config.text = npcInfo.name\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end\n        \n        DetailsFramework:TruncateText(unitFrame.castBar2.Text, unitFrame.castBar2:GetWidth() - 16)\n    end\nend",
["NpcNames"] = {
"164427",
"164414",
"164185",
"164567",
"165408",
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend",
["Revision"] = 235,
["Options"] = {
},
["Enabled"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\Images\\countdown_bar_icon",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                local name = npcInfo.name\n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                \n                envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, expirationTime-duration)\n            else\n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        else\n            envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n        end\n    end\nend",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local npcInfo = envTable.npcInfo[envTable._NpcID]\n    \n    if (npcInfo and npcInfo.secondCastBar) then\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                if (altCastId ~= npcInfo.altCastId or not unitFrame.castBar2:IsShown()) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId)\n                end\n            end \n            \n        elseif (npcInfo.debuffTimer) then\n            if (Plater.NameplateHasAura (unitFrame, npcInfo.debuffTimer)) then\n                \n                --get the debuff timeleft\n                local name = npcInfo.name\n                local auras = Plater.GetUnitAuras(unitFrame)\n                local duration, expirationTime\n                for _, aura in pairs(auras) do\n                    if aura.name == name then\n                        duration = aura.duration\n                        expirationTime = aura.expirationTime\n                        break\n                    end\n                end\n                local startTime = expirationTime - duration\n                \n                if (not unitFrame.castBar2:IsShown() or unitFrame.castBar2.spellStartTime < startTime) then\n                    envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, duration, startTime)\n                end\n                \n            else \n                if (unitFrame.castBar2:IsShown()) then\n                    local altCastId = Plater.GetAltCastBarAltId(unitFrame.PlateFrame)\n                    if (altCastId == npcInfo.altCastId) then\n                        Plater.ClearAltCastBar(unitFrame.PlateFrame)\n                    end                   \n                end                              \n            end\n        end\n    end\nend",
["Name"] = "Countdown",
["Desc"] = "Some units has special events without a clear way to show. This script adds a second cast bar to inform the user about it.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1739959448,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Enabled"] = true,
["Revision"] = 249,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Show the power of the unit above the nameplate.",
["Name"] = "script desc",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Name"] = "add trigger",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showLater",
["Value"] = true,
["Name"] = "Show at 80% of Energy",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "fontColor",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Name"] = "Font Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Key"] = "outline",
["Value"] = true,
["Name"] = "Enable Text Outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["Icon"] = 136048,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["timerList"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1694734898,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \n    --check if there's a timer for this spell\n    local timer = scriptTable.config.timerList[tostring(envTable._SpellID)]\n    \n    if (timer) then\n        --insert code here\n        \n        --set the castbar config\n        local config = {\n            iconTexture = \"\",\n            iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n            iconAlpha = 1,\n            iconSize = 14,\n            \n            text = \"Spikes Incoming!\",\n            textSize = 8,\n            \n            texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n            color = {.6, .6, .6, 0.8},\n            \n            isChanneling = false,\n            canInterrupt = false,\n            \n            height = 5,\n            width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n            \n            spellNameAnchor = {side = 3, x = 0, y = -2},\n            timerAnchor = {side = 5, x = 0, y = -2},\n        }\n        \n        Plater.SetAltCastBar(unitFrame.PlateFrame, config, timer, nil, nil)\n        local castBar2 = unitFrame.castBar2\n        castBar2.Text:ClearAllPoints()\n        castBar2.Text:SetPoint (\"topleft\", castBar2, \"bottomleft\", 0, 0)\n        castBar2.percentText:ClearAllPoints()\n        castBar2.percentText:SetPoint (\"topright\", castBar2, \"bottomright\", 0, 0)\n        Plater:SetFontSize(castBar2.percentText, 8)\n    end\n    \nend\n\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_orange",
["Desc"] = "Player an animation when the cast start. Start a timer when the cast finishes. Set the time in the options.",
["Enabled"] = false,
["Revision"] = 1216,
["semver"] = "",
["SpellIds"] = {
},
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Cast - Alert + Timer [P]",
["PlaterCore"] = 1,
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Cast start animation settings",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
{
["Type"] = 7,
["Key"] = "timerList",
["Value"] = {
},
["Name"] = "Timer (Key is SpellId and Value is Time)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the spellId and value is the amount of time of the Timer",
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734852,
["Enabled"] = false,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_target",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable.UpdateTargetBox(unitFrame, unitId)) then\n        \n        envTable.BackgroundFlash:Play()\n        \n        Plater.FlashNameplateBorder (unitFrame, 0.05)   \n        Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n        \n        unitFrame:PlayFrameShake (envTable.FrameShake)\n        \n        if (envTable._CanInterrupt) then\n            if (scriptTable.config.useCastbarColor) then\n                self:SetStatusBarColor (Plater:ParseColors (scriptTable.config.castBarColor))\n            end\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.targetBox, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \n    unitFrame.targetBox:Hide()\nend\n\n\n",
["Revision"] = 885,
["semver"] = "",
["Name"] = "Cast - Important Target [P]",
["Prio"] = 99,
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Highlight the target name",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a texture to use for a flash behind the cast bar\n    \n    if (not unitFrame.backGroundFlashTextureImpTarget) then\n        unitFrame.backGroundFlashTextureImpTarget =  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    end\n    \n    local backGroundFlashTexture = unitFrame.backGroundFlashTextureImpTarget\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    --create the target unit name box\n    if (not unitFrame.targetBox) then\n        unitFrame.targetBox = CreateFrame(\"frame\", unitFrame:GetName() .. \"ScriptImportantTarget\", unitFrame, \"BackdropTemplate\")\n        unitFrame.targetBox:SetSize(80, 20)\n        unitFrame.targetBox:SetFrameStrata(\"TOOLTIP\")\n        unitFrame.targetBox:Hide()\n        unitFrame.targetBox:SetPoint(\"left\", unitFrame, \"right\", 0, 0)\n        \n        unitFrame.targetBox:SetBackdrop({edgeFile = [[Interface\\Buttons\\WHITE8X8]], edgeSize = 1, bgFile = [[Interface\\AddOns\\Details\\images\\background]], tile = true, tileSize = 16})\n        unitFrame.targetBox:SetBackdropColor(.2, .2, .2, .8)\n        unitFrame.targetBox:SetBackdropBorderColor(0, 0, 0, 1)\n        \n        unitFrame.targetBoxName = unitFrame.targetBox:CreateFontString(nil, \"artwork\", \"GameFontNormal\")\n        unitFrame.targetBoxName:SetPoint(\"center\")\n    end\n    \n    function envTable.UpdateTargetBox(unitFrame, unitId)\n        local targetUnitId = unitId .. \"target\"\n        local unitName = UnitName(targetUnitId)\n        \n        if (unitName) then\n            if (scriptTable.config.colorByClass) then\n                Plater:SetFontColor(unitFrame.targetBoxName, \"white\")\n                unitName = Plater.SetTextColorByClass(targetUnitId, unitName)\n            else\n                Plater:SetFontColor(unitFrame.targetBoxName, scriptTable.config.textColor)\n            end\n            \n            unitFrame.targetBoxName:SetText(unitName)\n            Plater:SetFontSize(unitFrame.targetBoxName, scriptTable.config.targetNameSize)\n            unitFrame.targetBox:SetBackdropColor(Plater:ParseColors(scriptTable.config.targetBgColor))\n            unitFrame.targetBox:SetBackdropBorderColor(Plater:ParseColors(scriptTable.config.targetBgBorderColor))\n            unitFrame.targetBox:Show()\n            \n            unitFrame.targetBox:SetWidth(scriptTable.config.targetFrameWidth)\n            unitFrame.targetBox:SetHeight(scriptTable.config.targetFrameHeight)\n            \n            if (not Plater.HasDotAnimationPlaying(unitFrame.targetBox)) then\n                envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.targetBox, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n            end\n            \n            unitFrame.backGroundFlashTextureImpTarget:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n            \n            return true\n            \n        end\n    end\n    \nend",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shows the target name in a separate box",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Flash:",
["Name"] = "Flash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.8,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Key"] = "flashColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Flash Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Shake",
["Value"] = "Shake:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option14",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option19",
["Value"] = "Cast Bar",
["Name"] = "Option 19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Use Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Key"] = "castBarColor",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
{
["Type"] = 6,
["Name"] = "Option 27",
["Value"] = 0,
["Key"] = "option27",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 28",
["Value"] = "Target Options",
["Key"] = "option28",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 14,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetNameSize",
},
{
["Type"] = 4,
["Name"] = "Use Class Color",
["Value"] = true,
["Key"] = "colorByClass",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Text Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Background Color",
["Value"] = {
0,
0,
0,
0.9846720322966576,
},
["Key"] = "targetBgColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Border Color",
["Value"] = {
0,
0,
0,
1,
},
["Key"] = "targetBgBorderColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 160,
["Desc"] = "",
["Min"] = 30,
["Fraction"] = false,
["Value"] = 90,
["Name"] = "Frame Width",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "targetFrameWidth",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "",
["Min"] = 8,
["Name"] = "Frame Height",
["Value"] = 20,
["Key"] = "targetFrameHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.UpdateTargetBox(unitFrame, unitId) \n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1739959455,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Revision"] = 92,
["semver"] = "",
["SpellIds"] = {
343470,
423228,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Icon"] = 610472,
["url"] = "",
["Options"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1739959479,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = "Interface\\ICONS\\Ability_Fixated_State_Red",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Revision"] = 34,
["semver"] = "",
["Enabled"] = false,
["NpcNames"] = {
},
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Alert about a unit fixated on the player by using a buff on the enemy unit.",
["Name"] = "Fixate by Unit Buff [P]",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (UnitIsUnit(unitId .. \"target\", \"player\")) then\n        Plater.SetNameplateColor(unitFrame, scriptTable.config.nameplateColor)\n    else\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0,
0.5568627450980392,
0.03529411764705882,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Change the enemy nameplate color to this color when fixating you!",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["castColor"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1741123461,
["Enabled"] = false,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_glow",
["Desc"] = "Show a different animation for the cast bar.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Revision"] = 550,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Name"] = "Amount of Segments",
["Value"] = 7,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "segmentsAmount",
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
{
"385536",
"maroon",
},
{
"198750",
"midnightblue",
},
{
"360850",
"lime",
},
{
"212784",
"deepskyblue",
},
{
"207980",
"midnightblue",
},
{
"199033",
"gold",
},
{
"199034",
"gold",
},
{
"200969",
"orange",
},
{
"394512",
"indigo",
},
{
"397881",
"deepskyblue",
},
{
"396020",
"khaki",
},
},
["Name"] = "Cast Color by SpellID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the Spell ID in the to Key and a color name into the Value",
},
},
["Name"] = "Cast - Glowing [P]",
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
376644,
386781,
384823,
385536,
392398,
387135,
360850,
212784,
199033,
199034,
200969,
394512,
397881,
396020,
374430,
373201,
384353,
265376,
193941,
411002,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then --eeror here, compare with nil\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734866,
["Enabled"] = false,
["url"] = "",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable._SpellID == 191284) then\n        Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.70, GetTime(), 191284)\n        \n        C_Timer.After(4.75, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 5.30, GetTime(), 191284)\n        end)\n        \n        C_Timer.After(4.75 + 5.30, function()\n                Plater.SetAltCastBar(unitFrame.PlateFrame, envTable.configAltCastBar, 4.30, GetTime(), 191284)\n                C_Timer.After(4.50, function() unitFrame.castBar2:Hide() end)\n        end)\n    end\n    \nend",
["Revision"] = 39,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Start extra cast bars for effects after the cast is done. Setup the effect on On Hide script.",
["SpellIds"] = {
191284,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Cast - Effect After Cast [P]",
["PlaterCore"] = 1,
["Icon"] = 134229,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    \n    --set the castbar config\n    envTable.configAltCastBar = {\n        iconTexture = \"\",\n        iconTexcoord = {0.1, 0.9, 0.1, 0.9},\n        iconAlpha = 1,\n        iconSize = 14,\n        \n        text = \"Boom!\",\n        textSize = 9,\n        \n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        color = \"silver\",\n        \n        isChanneling = false,\n        canInterrupt = false,\n        \n        height = 2,\n        width = Plater.db.profile.plate_config.enemynpc.health_incombat[1],\n        \n        spellNameAnchor = {side = 3, x = 0, y = -2},\n        timerAnchor = {side = 5, x = 0, y = -2},\n    }    \n    \n    function envTable.ShowAltCastBar(npcInfo, unitFrame, unitId, customTime, customStart)\n        --show the cast bar\n        if (npcInfo.timerId) then\n            local barObject = Plater.GetBossTimer(npcInfo.timerId)\n            if (barObject) then\n                if (npcInfo.remaining) then\n                    local timeLeft = barObject.timer + barObject.start - GetTime()\n                    if (timeLeft > npcInfo.remaining) then\n                        return\n                    end\n                end\n                \n                config.text = npcInfo.name\n                \n                if (npcInfo.spellIcon) then\n                    local _, _, iconTexture = GetSpellInfo(npcInfo.spellIcon)\n                    config.iconTexture = iconTexture\n                else\n                    config.iconTexture = \"\"\n                end\n                \n                Plater.SetAltCastBar(unitFrame.PlateFrame, config, barObject.timer, customStart or barObject.start, npcInfo.altCastId)\n            end\n        else\n            Plater.SetAltCastBar(unitFrame.PlateFrame, config, customTime or npcInfo.timer, customStart, npcInfo.altCastId)            \n        end    \n        \n        \n    end\nend\n\n\n\n\n",
["semver"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1694734891,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["Revision"] = 163,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Key"] = "rotationDuration",
["Value"] = 0.15,
["Name"] = "Rotation Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Key"] = "animStartDuration",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Start Duration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Name"] = "Texture Start Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureStartAlpha",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Key"] = "textureScale",
["Value"] = 0.8,
["Name"] = "Texture Scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Key"] = "textureAlpha",
["Value"] = 1,
["Name"] = "Texture Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Name"] = "Texture Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "textureColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["SpellIds"] = {
385916,
386063,
388822,
373087,
397785,
106864,
193660,
198263,
387910,
370766,
375591,
384336,
209404,
209378,
210875,
396001,
397899,
386559,
382555,
258672,
258777,
257756,
256405,
256589,
393793,
388046,
375079,
390290,
369811,
369703,
226287,
410999,
372561,
},
["Prio"] = 99,
["Author"] = "Butazzul-Valdrakken",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["Name"] = "Cast - Circle AoE [P]",
["Temp_UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["version"] = -1,
["PlaterCore"] = 1,
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["url"] = "",
["semver"] = "",
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1739959478,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 157,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Enabled"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Name"] = "Add - Health Markers [P]",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.NameplateColor = scriptTable.config.nameplateColor\n    envTable.NameplateSizeOffset = scriptTable.config.nameplateSizeOffset\n    \n    unitFrame.UnitImportantSkullTexture = unitFrame.UnitImportantSkullTexture or unitFrame:CreateTexture(nil, \"background\")\n    \n    unitFrame.UnitImportantSkullTexture:Hide()\nend\n\n--[=[\n\n154564 - debug\n\nUsing spellIDs for multi-language support\n\n196548 = ancient branch (academy dungeon)\n195580, 195821, 195820 = nokhub saboteur\n189886 = blazebound firestorm\n75966 = Defiled Spirit\n102019 = Stormforged Obliterator\n    187159 = Shrieking Whelp\n194897 = stormsurge totem\n104251 = duskwatch sentry\n101326 = honored ancestor\n189669 = binding speakl netharius\n192464 = raging ember neltharius\n--]=]\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)   \n    \n    --restore the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)    \n    \n    unitFrame.UnitImportantSkullTexture:Hide()\n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --check if can change the nameplate color\n    if (scriptTable.config.changeNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n",
["Time"] = 1670423785,
["url"] = "",
["NpcNames"] = {
"196548",
"195580",
"195820",
"195821",
"189886",
"75966",
"102019",
"187159",
"194897",
"104251",
"101326",
"189669",
"192464",
190381,
92538,
192464,
194745,
190426,
},
["Enabled"] = false,
["Revision"] = 572,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option6",
["Value"] = "Enter the npc name or npcId in the \"Add Trigger\" box and hit \"Add\".",
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "change to true to change the color",
},
{
["Type"] = 1,
["Key"] = "nameplateColor",
["Value"] = {
1,
0,
0.5254901960784314,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "increase the nameplate height by this value",
["Min"] = 0,
["Key"] = "nameplateSizeOffset",
["Value"] = 3,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate Size Offset",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotsColor",
["Value"] = {
1,
0.7137255072593689,
0,
0.5631310641765594,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dot Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option10",
["Value"] = "Extra Texture",
["Name"] = "Extra Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "Extra Texture",
},
{
["Type"] = 4,
["Name"] = "Show Extra Texture",
["Value"] = false,
["Key"] = "showExtraTexture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Extra Texture",
},
{
["Type"] = 1,
["Key"] = "skullColor",
["Value"] = {
1,
0.4627450980392157,
0,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Alpha",
["Min"] = 0,
["Key"] = "skullAlpha",
["Value"] = 0.2,
["Name"] = "Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Scale",
["Min"] = 0.4,
["Fraction"] = true,
["Value"] = 0.6,
["Key"] = "skullScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Scale",
},
{
["Type"] = 7,
["Name"] = "Npc Color By NpcID",
["Value"] = {
{
"196548",
"forestgreen",
},
{
"195580",
"forestgreen",
},
{
"195820",
"forestgreen",
},
{
"195821",
"forestgreen",
},
{
"189886",
"forestgreen",
},
{
"75966",
"forestgreen",
},
{
"102019 ",
"forestgreen",
},
{
"187159",
"forestgreen",
},
{
"194897",
"forestgreen",
},
{
"104251",
"forestgreen",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Key is the npcID, value is the color name",
},
},
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (envTable.dotAnimation) then\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    end\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotsColor, 3, 4) \n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    unitFrame.UnitImportantSkullTexture:Show()\n    \n    --color priority:\n    local npcIdString = tostring(envTable._NpcID)\n    envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)    \n    \n    if (scriptTable.config.showExtraTexture) then\n        unitFrame.UnitImportantSkullTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.skullColor))\n        unitFrame.UnitImportantSkullTexture:SetAlpha(scriptTable.config.skullAlpha)\n        unitFrame.UnitImportantSkullTexture:SetScale(scriptTable.config.skullScale)\n        unitFrame.UnitImportantSkullTexture:SetTexture([[Interface/AddOns/Plater/media/x_64]])\n        unitFrame.UnitImportantSkullTexture:ClearAllPoints()\n        unitFrame.UnitImportantSkullTexture:SetPoint(\"right\", unitFrame.healthBar, \"left\", -2, 0)\n        unitFrame.UnitImportantSkullTexture:SetSize(28, 28)\n        unitFrame.UnitImportantSkullTexture:Show()\n    else\n        unitFrame.UnitImportantSkullTexture:Hide()\n    end\n    \n    --rules for some npcs\n    if (envTable._NpcID == 194895) then --unstable squall (explode at dying\n        unitFrame.UnitImportantSkullTexture:Hide()\n        Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation) \n    end\n    \n    if (scriptTable.config.changeNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        \n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.nameplateColor)        \n        \n        Plater.DenyColorChange(unitFrame, true)\n    end\n    \nend\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\media\\skullbones_64",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Change the color and highlight a nameplate of an important Add. Add the unit name or NpcID into the trigger box to add more.",
["version"] = -1,
["Name"] = "Add - Important [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1669340442,
["url"] = "",
["NpcNames"] = {
"195138",
"192955",
"190294",
"76518",
},
["Enabled"] = false,
["Revision"] = 161,
["Options"] = {
},
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    \n    scriptTable.allAdds = {} \n    scriptTable.nextAddWave = 0\n    scriptTable.waveTime = 20\n    \n    function scriptTable.ArrangeNpcNumbers(GUID)\n        local spawnId = select(7, strsplit (\"-\", GUID))\n        spawnId = tonumber(spawnId, 16)\n        \n        if (spawnId) then\n            --check if this is a new wave of adds\n            if (GetTime() > scriptTable.nextAddWave) then\n                scriptTable.nextAddWave = GetTime() + scriptTable.waveTime\n                scriptTable.allAdds = {}\n            end\n            \n            local bIsAlreadyOnTheList = false\n            \n            for o = 1, #scriptTable.allAdds do\n                if (scriptTable.allAdds[o][1] == GUID) then\n                    bIsAlreadyOnTheList = true\n                end\n            end\n            \n            if (not bIsAlreadyOnTheList) then\n                scriptTable.allAdds[#scriptTable.allAdds+1] = {GUID, spawnId}\n            end\n        end\n        \n        table.sort(scriptTable.allAdds, function(t1, t2) return t1[2] < t2[2] end)\n        \n        --this is a \"loop\" because this is running each time a nameplate is added!\n        \n        for namePlateIndex, plateFrame in ipairs(Plater.GetAllShownPlates()) do\n            local unitFrame = plateFrame.unitFrame\n            \n            --get the unit GUID\n            local unitGUID = unitFrame.namePlateUnitGUID\n            \n            for addId = 1, #scriptTable.allAdds do\n                local addTable = scriptTable.allAdds[addId]\n                local addGUID = addTable[1]\n                \n                if (unitGUID == addGUID) then\n                    scriptTable.TagNameplate(unitFrame, unitGUID, addId)\n                    break\n                end\n            end\n            \n        end\n    end\n    \n    function scriptTable.TagNameplate(unitFrame, GUID, addId)\n        scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        \n        if (addId and addId >= 1 and addId <= 8) then\n            unitFrame.AddSpawnIDTexture:Show()\n            unitFrame.AddIcon:Show()\n            unitFrame.AddNumber:Show()\n            \n            local addTexture = \"Interface\\\\TargetingFrame\\\\UI-RaidTargetingIcon_\" .. addId\n            \n            unitFrame.AddIcon:SetTexture(addTexture)\n            unitFrame.AddNumber:SetText(addId)\n        end\n    end\n    \n    function scriptTable.CreateAddWidgetsForNameplate(unitFrame, GUID, addId)\n        if (not unitFrame.AddSpawnIDTexture) then\n            local healthBar = unitFrame.healthBar\n            \n            local textureBackground = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n            local addIcon = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 6)\n            local addNumber = healthBar.FrameOverlay:CreateFontString(nil, \"overlay\", \"GameFontNormal\", 6)           \n            \n            unitFrame.AddSpawnIDTexture = textureBackground\n            unitFrame.AddIcon = addIcon\n            unitFrame.AddNumber = addNumber\n        end\n    end    \nend\n\n--Creature-0-2085-1-11042-153285-0002F8DB2B --training dummy for testing\n--195138 Detonating Crystal\n--192955 dracomoc illusion\n--190294 nokhub stormcaster\n--76518 ritual of bones\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.AddSpawnIDTexture) then\n        unitFrame.AddSpawnIDTexture:Hide()\n        unitFrame.AddIcon:Hide()\n        unitFrame.AddNumber:Hide()\n    end\n    \n    scriptTable.ArrangeNpcNumbers(unitFrame.namePlateUnitGUID)\n    \n    local textureBackground = unitFrame.AddSpawnIDTexture\n    textureBackground:SetSize(22, 10)\n    textureBackground:ClearAllPoints()\n    textureBackground:SetPoint(\"bottomright\", unitFrame.healthBar, \"topright\", 0, 1)\n    \n    textureBackground:SetMask([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetTexture([[Interface\\AddOns\\Plater\\masks\\mask_smallrectangle_rounded1]])\n    textureBackground:SetVertexColor(0.1215, 0.1176, 0.1294, 1)\n    \n    \n    --textureBackground:SetMask([[Interface/ChatFrame/UI-ChatIcon-HotS]])\n    --    \"Interface/ChatFrame/UI-ChatIcon-HotS\"\n    \n    local addIcon = unitFrame.AddIcon\n    addIcon:ClearAllPoints()\n    addIcon:SetPoint(\"left\", textureBackground, \"left\", 2, 0)\n    addIcon:SetSize(10, 10)\n    \n    local addNumber = unitFrame.AddNumber\n    addNumber:ClearAllPoints()\n    addNumber:SetPoint(\"right\", textureBackground, \"right\", -2, 0)\n    DetailsFramework:SetFontSize(addNumber, 10)\n    \nend\n\n\n",
["Icon"] = "interface/addons/plater/images/add_id_icon",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Put a number above multiples adds, numbers follow their respawn id.",
["Name"] = "Add - Tag Number [P]",
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1741123442,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Revision"] = 889,
["semver"] = "",
["Name"] = "Cast - Quick Flash [P]",
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Play a very fast flash when the cast start",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
392640,
397888,
381517,
209033,
385029,
374563,
377341,
369675,
369411,
278961,
202108,
88186,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Key"] = "shakeAmplitude",
["Value"] = 25,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 30,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
["npcColor"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["Time"] = 1721885429,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.onShowAddToKillFlash:Stop()\n    \nend\n\n\n",
["url"] = "",
["Icon"] = "interface/addons/plater/media/exclamation_64",
["Desc"] = "Change the color of  add",
["Enabled"] = false,
["Revision"] = 163,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = true,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
1,
0.4392157196998596,
0.458823561668396,
1,
},
["Key"] = "healthBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Flash Nameplate",
["Value"] = true,
["Key"] = "useFlash",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Flash Nameplate",
},
{
["Type"] = 7,
["Name"] = "NpcID to Color",
["Value"] = {
{
"189893",
"olivedrab",
},
{
"190187",
"olivedrab",
},
{
"99922",
"olivedrab",
},
{
"153285",
"olivedrab",
},
{
"104822",
"olivedrab",
},
},
["Key"] = "npcColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If the npc isn't on this list, use the default color set in the Health Bar Color",
},
},
["Name"] = "Add - Warning [P]",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame.onShowAddToKillFlash = unitFrame.onShowAddToKillFlash or Plater.CreateFlash (unitFrame.healthBar, 0.25, 1, \"white\")\n    \n    if (scriptTable.config.useFlash) then\n        unitFrame.onShowAddToKillFlash:Play()\n    end\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.npcColor[npcIdString], scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end\nend\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\nend\n\n\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["NpcNames"] = {
"190187",
"189893",
"99922",
"104822",
129758,
186696,
101075,
100818,
98081,
52019,
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n--190187 draconic image\n--189893 infused whelp\n--99922 Ebonclaw Packmate\n--104822 flames of woe",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["Time"] = 1694740636,
["Enabled"] = false,
["url"] = "",
["NpcNames"] = {
"194622",
"190205",
"197398",
"77006",
},
["Desc"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --restoring and color state and scale even if disabled, maybe the player disabled during the combat\n    Plater.DenyColorChange(unitFrame, false)\n    unitFrame.healthBar:SetScale(unitFrame.healthBar._savedOriginalScale)\n    \nend\n\n\n\n\n",
["Revision"] = 113,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Name"] = "Nameplate Color",
["Value"] = {
0.062745101749897,
0.062745101749897,
0.0941176563501358,
1,
},
["Key"] = "nameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Scale",
["Value"] = true,
["Key"] = "useNameplateScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Scale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Nameplate Scale",
["Min"] = 0,
["Name"] = "Nameplate Scale",
["Value"] = 0.8,
["Key"] = "scale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["SpellIds"] = {
},
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.nameplateColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end    \n    \n    unitFrame.healthBar._savedOriginalScale = unitFrame.healthBar:GetScale()\n    \n    if (scriptTable.config.useNameplateScale) then\n        unitFrame.healthBar:SetScale(scriptTable.config.scale)\n    end\n    \nend\n\n\n\n\n",
["Name"] = "Add - Non Elite Trash [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Icon"] = "interface/addons/plater/media/duck_64",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n\n--Scorchling 194622\n--Scorchling 190205\n--197398  Hungry Lasher\n--77006 corpse skitterling\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1741123440,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (not healthBar.absorbBar) then\n        healthBar.absorbBar = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n        healthBar.absorbBar:Hide()\n    end\n    \n    if (not healthBar.absorbSpark) then\n        healthBar.absorbSpark = healthBar.FrameOverlay:CreateTexture(nil, \"overlay\")\n        healthBar.absorbSpark:SetTexture([[Interface\\CastingBar\\UI-CastingBar-Spark]])\n        healthBar.absorbSpark:SetBlendMode(\"ADD\")\n        healthBar.absorbSpark:Hide()\n    end\n    \nend\n\n\n\n\n",
["Icon"] = "interface/addons/plater/images/cast_bar - absorb",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    healthBar.absorbBar:SetTexture([[Interface\\RaidFrame\\Shield-Fill]])\n    \n    healthBar.absorbBar:ClearAllPoints()    \n    healthBar.absorbBar:SetPoint(\"topleft\", healthBar, \"topleft\", 0, 0)\n    healthBar.absorbBar:SetPoint(\"bottomleft\", healthBar, \"bottomleft\", 0, 0)\n    \n    healthBar.absorbBar:SetAlpha(1)\n    \n    healthBar.absorbBar.MaxValue = UnitGetTotalAbsorbs(unitId) or 0\n    healthBar.absorbBar.MinValue = 0\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Hide()    \n    healthBar.absorbSpark:Hide()\n    \nend\n\n\n",
["Revision"] = 105,
["semver"] = "",
["Name"] = "Cast - Shield Interrupt [P]",
["Prio"] = 99,
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "When the caster has a shield and only when the shield is removed the cast can be interrupted",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
373688,
391050,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not UnitGetTotalAbsorbs) then\n        return\n    end\n    \n    local healthBar = unitFrame.healthBar\n    \n    healthBar.absorbBar:Show()\n    healthBar.absorbSpark:Show()\n    \n    local maxValue = healthBar.absorbBar.MaxValue\n    local currentValue = UnitGetTotalAbsorbs(unitId) or 0\n    \n    if (currentValue > 0) then\n        local minValue = 0\n        \n        local percent = currentValue / maxValue\n        healthBar.absorbBar:SetTexCoord(0, percent, 0, 1)\n        healthBar.absorbBar:SetWidth(percent * healthBar:GetWidth())\n        \n        healthBar.absorbSpark:SetPoint(\"left\", healthBar, \"left\", percent * healthBar:GetWidth() - 16, 0)\n        \n    else\n        healthBar.absorbBar:Hide()    \n        healthBar.absorbSpark:Hide()\n    end\n    \n    self.ThrottleUpdate = 0\n    \nend\n\n\n\n\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1694734893,
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["Desc"] = "Just stop casting",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["Revision"] = 508,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["SpellIds"] = {
377004,
381516,
196543,
199726,
},
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Stop Casting [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["url"] = "",
["semver"] = "",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.CreateWidgets()\n        --create a camera shake for the nameplate\n        if (not unitFrame.AddExplosionOnDieShake) then\n            unitFrame.AddExplosionOnDieShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n        end\n        \n        if (not unitFrame.AddExplosionOnDieBackground) then\n            unitFrame.AddExplosionOnDieBackground = unitFrame.healthBar:CreateTexture(nil, \"background\")\n            unitFrame.AddExplosionOnDieBackground:SetAllPoints(unitFrame.healthBar)\n            unitFrame.AddExplosionOnDieBackground:SetColorTexture(1, 0, 0, 1)\n        end\n    end\n    \nend\n\n--194895 = unstable squall\n--105703 = mana wyrm\n--59598 = lesser sha\n--58319 = lesser sha\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    healthBar:SetReverseFill(false)\n    \n    if (unitFrame.AddExplosionOnDieShake) then\n        unitFrame:StopFrameShake (unitFrame.AddExplosionOnDieShake)    \n    end\n    \n    if (unitFrame.AddExplosionOnDieBackground) then\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (envTable._HealthPercent < 50) then\n        local alpha = DetailsFramework:MapRangeClamped(0, 50, 0.5, 0, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieBackground:SetAlpha(alpha)\n    else\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    end\n    \n    if (envTable._HealthPercent < 15 and scriptTable.config.useShake) then\n        local shakeAmpliture = DetailsFramework:MapRangeClamped(0.001, 15, 10, 1, envTable._HealthPercent)\n        \n        unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude * shakeAmpliture\n        unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n        \n        unitFrame:PlayFrameShake (unitFrame.AddExplosionOnDieShake)\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Time"] = 1669340350,
["url"] = "",
["Icon"] = "interface/addons/plater/media/radio_64",
["Enabled"] = false,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Huugg-Valdrakken",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "",
["NpcNames"] = {
"194895",
"105703",
"59598",
"58319",
200388,
189299,
131402,
},
["Name"] = "Add - Explode on Die [P]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "useReverse",
["Value"] = false,
["Name"] = "Reverse Health Bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Option 6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useShake",
["Value"] = false,
["Name"] = "Enable Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "How strong is the shake.",
["Min"] = 0.05,
["Name"] = "Shake Amplitude",
["Value"] = 0.2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 70,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useBackground",
["Value"] = true,
["Name"] = "Show Red Background",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show Red Background",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local healthBar = unitFrame.healthBar\n    \n    if (scriptTable.config.useReverse) then\n        healthBar:SetReverseFill(true)\n    end\n    \n    --unitFrame.AddExplosionOnDieShake\n    \n    envTable.CreateWidgets()\n    \n    unitFrame.AddExplosionOnDieShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    unitFrame.AddExplosionOnDieShake.OriginalDuration = 0.120\n    unitFrame.AddExplosionOnDieShake.OriginalFrequency = scriptTable.config.shakeFrequency\n    \n    if (scriptTable.config.useBackground) then\n        unitFrame.AddExplosionOnDieBackground:Show()\n        unitFrame.AddExplosionOnDieBackground:SetAlpha(0)\n    else\n        unitFrame.AddExplosionOnDieBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1739959462,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Icon"] = 236209,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = true,
["Revision"] = 27,
["semver"] = "",
["SpellIds"] = {
372743,
372749,
384933,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Aura While Casting [P]",
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1741123443,
["Enabled"] = false,
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["Revision"] = 75,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Key"] = "xOffset",
["Value"] = 0,
["Name"] = "Dots X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Name"] = "Blink Speed",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Min Alpha",
["Value"] = 0,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Key"] = "maxAlpha",
["Value"] = 0.5,
["Name"] = "Blink Max Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.01960784383118153,
0,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["Name"] = "Cast - On Going Cast [P]",
["Prio"] = 99,
["Author"] = "Ditador-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.3\n    \n    envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \nend",
["SpellIds"] = {
388886,
209676,
377912,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["Icon"] = 4038101,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["semver"] = "",
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
["castColor"] = {
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Time"] = 1741123452,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_important_bycolor.png",
["url"] = "",
["NpcNames"] = {
},
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    self.BigSparkle:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["Revision"] = 832,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Plays a special animation changing the cast bar color.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "To get a list of color names, use: /plater colors",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the health bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Health Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 4,
["Key"] = "useNameplateColor",
["Value"] = false,
["Name"] = "Change Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate Color",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above Use Cast Bar Color",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.431372,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option12",
["Value"] = "Dot Animation:",
["Name"] = "Dot Animation:",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "dotColor",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Name"] = "Dot Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 6,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 7,
["Key"] = "castColor",
["Value"] = {
},
["Name"] = "Color List by SpellId",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "Insert the spellId in the Key, and the color name in the Value",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.overlaySpark:Show()\n    \n    self.BigSparkle:Show()\n    self.BigSparkle:SetWidth(8)\n    self.BigSparkle:SetHeight(self:GetHeight() + unitFrame.healthBar:GetHeight())\n    self.BigSparkle:SetScale(1)\n    self.BigSparkle:SetVertexColor(1,1, 1, 1)\n    envTable.overlaySpark:Hide()\n    \n    self.Spark:Hide()\n    \n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.dotAnimation:SetPoint(\"bottomright\", self, \"bottomright\", scriptTable.config.xOffset, -scriptTable.config.yOffset)\n    \n    \n    local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, customColor or scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        local npcIdString = tostring(envTable._NpcID)\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)        \n        Plater.DenyColorChange(unitFrame, true)            \n    end\n    \nend",
["SpellIds"] = {
432967,
446717,
451379,
451067,
448013,
448057,
322486,
341709,
321226,
429428,
},
["Author"] = "Bombad�o-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Used on casts that make the mob explode, summon or transform if the cast passes.",
["Name"] = "Cast - Important by Color [P]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    self.BigSparkle:ClearAllPoints()\n    self.BigSparkle:SetPoint (\"topleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 0)\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --forces the script to update on a 60Hz base\n    self.ThrottleUpdate = 0\nend\n\n\n\n\n",
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage(unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    self.BigSparkle = self.BigSparkle or Plater:CreateImage(self.FrameOverlay)\n    self.BigSparkle.texture = [[Interface\\AddOns\\Plater\\images\\cast_bar_vertical_spark.png]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))    \n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend\n\n\n\n\n\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741123438,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    Plater.StopDotAnimation(unitFrame.castBar, envTable.dotAnimation)    \n    \n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame:StopFrameShake (envTable.FrameShake)    \n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+40, self:GetHeight()+20, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\")\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.flashColor))\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    local fadeIn = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, scriptTable.config.flashDuration/2, 0, 1)\n    local fadeOut = Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, scriptTable.config.flashDuration/2, 1, 0)\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --update the config for the flash here so it wont need a /reload\n    fadeIn:SetDuration (scriptTable.config.flashDuration/2)\n    fadeOut:SetDuration (scriptTable.config.flashDuration/2)\n    \n    --update the config for the skake here so it wont need a /reload\n    envTable.FrameShake.OriginalAmplitude = scriptTable.config.shakeAmplitude\n    envTable.FrameShake.OriginalDuration = scriptTable.config.shakeDuration\n    envTable.FrameShake.OriginalFrequency = scriptTable.config.shakeFrequency\nend",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_shining_green.png",
["Desc"] = "Highlight a very important cast applying several effects into the Cast Bar. Add spell in the Add Trigger field.",
["Enabled"] = false,
["Revision"] = 875,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Plays a big animation when the cast start.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 4",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Flash",
["Value"] = "Flash:",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "How long is the flash played when the cast starts.",
["Min"] = 0.1,
["Name"] = "Flash Duration",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 1,
["Name"] = "Flash Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "flashColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the Flash",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Shake:",
["Name"] = "Shake",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 0.5,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "How strong is the shake.",
["Min"] = 1,
["Name"] = "Shake Amplitude",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation",
["Value"] = "Dot Animation:",
["Key"] = "option14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
0.5647058823529412,
0.5647058823529412,
0.5647058823529412,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dots around the nameplate",
},
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Adjust the width of the dots to better fit in your nameplate.",
["Min"] = -10,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Dot X Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Adjust the height of the dots to better fit in your nameplate.",
["Min"] = -10,
["Name"] = "Dot Y Offset",
["Value"] = 3,
["Key"] = "yOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank",
["Value"] = 0,
["Key"] = "option18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "blank",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 19",
["Value"] = "Cast Bar",
["Key"] = "option19",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Use Cast Bar Color",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Use cast bar color.",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
0.4117647058823529,
1,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast bar color.",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.castBar, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    envTable.BackgroundFlash:Play()\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    --Dominator on Shadowmoon Burial Grounds\n    if (envTable._SpellID == 154327) then\n        if (UnitHealth(unitId) == UnitHealthMax(unitId)) then\n            if (envTable._Duration == 604800) then\n                Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, {1, 0, 0, 1}, envTable)\n            end\n        end\n    end\n    \nend",
["Name"] = "Cast - Shining Green [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
434802,
448248,
453840,
337249,
324293,
49184,
449455,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --settings\n    envTable.NameplateSizeOffset = scriptTable.config.castBarHeight\n    envTable.ShowArrow = scriptTable.config.showArrow\n    envTable.ArrowAlpha = scriptTable.config.arrowAlpha\n    \n    --creates the spark to show the cast progress inside the health bar\n    envTable.overlaySpark = envTable.overlaySpark or Plater:CreateImage (unitFrame.healthBar)\n    envTable.overlaySpark:SetBlendMode (\"ADD\")\n    envTable.overlaySpark.width = 16\n    envTable.overlaySpark.height = 36\n    envTable.overlaySpark.alpha = .9\n    envTable.overlaySpark.texture = [[Interface\\AddOns\\Plater\\images\\spark3]]\n    \n    envTable.topArrow = envTable.topArrow or Plater:CreateImage (unitFrame.healthBar)\n    envTable.topArrow:SetBlendMode (\"ADD\")\n    envTable.topArrow.width = scriptTable.config.arrowWidth\n    envTable.topArrow.height = scriptTable.config.arrowHeight\n    envTable.topArrow.alpha = envTable.ArrowAlpha\n    envTable.topArrow.texture = [[Interface\\BUTTONS\\Arrow-Down-Up]]\n    \n    --scale animation\n    envTable.smallScaleAnimation = envTable.smallScaleAnimation or Plater:CreateAnimationHub (unitFrame.healthBar)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 1, 0.075, 1, 1, 1.08, 1.08)\n    Plater:CreateAnimation (envTable.smallScaleAnimation, \"SCALE\", 2, 0.075, 1, 1, 0.95, 0.95)    \n    --envTable.smallScaleAnimation:Play() --envTable.smallScaleAnimation:Stop()\n    \nend\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    Plater.StopDotAnimation(unitFrame.healthBar, envTable.dotAnimation)\n    \n    envTable.overlaySpark:Hide()\n    envTable.topArrow:Hide()\n    \n    Plater.RefreshNameplateColor (unitFrame)\n    \n    envTable.smallScaleAnimation:Stop()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight)\n    \n    Plater.DenyColorChange(unitFrame, false)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --update the percent\n    envTable.overlaySpark:SetPoint (\"left\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100)-9, 0)\n    \n    envTable.topArrow:SetPoint (\"bottomleft\", unitFrame.healthBar, \"topleft\", unitFrame.healthBar:GetWidth() * (envTable._CastPercent / 100) - 4, 2 )\n    \n    --forces the script to run the update as fast as the game framerate\n    self.ThrottleUpdate = 0\n    \n    if (scriptTable.config.useNameplateColor) then\n        Plater.SetNameplateColor(unitFrame, envTable.NameplateColor)\n    end\n    \n    --local dotSpeed = abs(envTable._Duration - envTable._RemainingTime) + 1.5\n    --envTable.dotAnimation.textureInfo.speedMultiplier = dotSpeed\nend\n\n\n\n\n",
["Time"] = 1719788204,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 613,
["Options"] = {
{
["Type"] = 2,
["Max"] = 6,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 3,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.5843137254901961,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Changes the cast bar color to this one.",
},
{
["Type"] = 6,
["Name"] = "Option 7",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Arrow:",
["Value"] = "Arrow:",
["Key"] = "option6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show Arrow",
["Value"] = true,
["Key"] = "showArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show an arrow above the nameplate showing the cast bar progress.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Arrow alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Width.",
["Min"] = 4,
["Name"] = "Arrow Width",
["Value"] = 8,
["Key"] = "arrowWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "Arrow Height.",
["Min"] = 4,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Arrow Height",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowHeight",
},
{
["Type"] = 6,
["Name"] = "Option 13",
["Value"] = 0,
["Key"] = "option13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Dot Animation:",
["Value"] = "Dot Animation:",
["Key"] = "option12",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dot Color",
["Value"] = {
1,
0.615686274509804,
0,
1,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Adjust the color of the dot animation.",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot X Offset",
["Min"] = -10,
["Name"] = "Dot X Offset",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "xOffset",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dot Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 3,
["Name"] = "Dot Y Offset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option18",
["Value"] = 0,
["Name"] = "Option 18",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option17",
["Value"] = "Nameplate Color",
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Change Nameplate Color",
["Value"] = false,
["Key"] = "useNameplateColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change Nameplate Color",
},
{
["Type"] = 1,
["Key"] = "healthBarColor",
["Value"] = {
1,
0.1843137294054031,
0,
1,
},
["Name"] = "Nameplate Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Health Bar Color",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "For unique abilities that are an important part of the fight against a bosses or mini bosse.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_special_ability.png",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.overlaySpark:Show()\n    \n    if (envTable.ShowArrow) then\n        envTable.topArrow:Show()\n    end\n    \n    Plater.FlashNameplateBorder (unitFrame, 0.05)   \n    Plater.FlashNameplateBody (unitFrame, \"\", 0.075)\n    \n    envTable.smallScaleAnimation:Play()\n    \n    --increase the nameplate size\n    local nameplateHeight = Plater.db.profile.plate_config.enemynpc.health_incombat [2]\n    unitFrame.healthBar:SetHeight (nameplateHeight + envTable.NameplateSizeOffset)\n    \n    envTable.overlaySpark.height = nameplateHeight + 5\n    \n    envTable.dotAnimation = Plater.PlayDotAnimation(unitFrame.healthBar, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    \n    Plater.SetCastBarColorForScript(self, true, scriptTable.config.castBarColor, envTable)\n    \n    if (scriptTable.config.useNameplateColor) then\n        envTable.NameplateColor = Plater.GetColorByPriority(unitFrame, scriptTable.config.healthBarColor)\n        Plater.DenyColorChange(unitFrame, true)\n    end       \nend\n\n\n\n\n\n\n",
["SpellIds"] = {
451026,
452127,
446615,
433766,
432117,
448560,
440218,
441289,
447146,
438860,
448847,
449687,
456751,
449939,
336499,
322550,
320208,
321894,
276068,
423200,
},
["Name"] = "Cast - Special Ability [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not self.FrameOverlay.LeapArrow1) then\n        \n        self.FrameOverlay.LeapArrow1 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow2 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        self.FrameOverlay.LeapArrow3 = self.FrameOverlay:CreateTexture(nil, \"overlay\")\n        \n        local onPlayFunc = function()\n            --self.FrameOverlay.LeapArrow1:Show()\n            --self.FrameOverlay.LeapArrow2:Show()\n            --self.FrameOverlay.LeapArrow3:Show()            \n        end\n        local onStopFunc = function()\n            self.FrameOverlay.LeapArrow1:Hide()\n            self.FrameOverlay.LeapArrow2:Hide()\n            self.FrameOverlay.LeapArrow3:Hide()\n        end\n        \n        --first arrow animation\n        local animHub1 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow1, onPlayFunc, onStopFunc)\n        animHub1.alpha1 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub1.trans1 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub1.alpha2 = DetailsFramework:CreateAnimation (animHub1, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub1.trans2 = DetailsFramework:CreateAnimation (animHub1, \"translation\", 2, 0.3, 8, 8)        \n        \n        self.FrameOverlay.LeapArrow1.animation = animHub1\n        \n        --second arrow animation\n        local animHub2 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow2, onPlayFunc, onStopFunc)\n        animHub2.alpha1 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub2.trans1 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub2.alpha2 = DetailsFramework:CreateAnimation (animHub2, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub2.trans2 = DetailsFramework:CreateAnimation (animHub2, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow2.animation = animHub2\n        \n        --third arrow animation\n        local animHub3 = DetailsFramework:CreateAnimationHub (self.FrameOverlay.LeapArrow3, onPlayFunc, onStopFunc)\n        animHub3.alpha1 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 1, 0.3, 0, 0.8)\n        animHub3.trans1 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 1, 0.3, 8, 8)\n        \n        animHub3.alpha2 = DetailsFramework:CreateAnimation (animHub3, \"alpha\", 2, 0.3, 0.8, 0)\n        animHub3.trans2 = DetailsFramework:CreateAnimation (animHub3, \"translation\", 2, 0.3, 8, 8)\n        \n        self.FrameOverlay.LeapArrow3.animation = animHub3\n        \n        self.FrameOverlay.LeapArrowTextures = {\n            self.FrameOverlay.LeapArrow1,\n            self.FrameOverlay.LeapArrow2,\n            self.FrameOverlay.LeapArrow3\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations = {\n            alpha1Anim = {},\n            alpha2Anim = {},\n            trans1Anim = {},\n            trans2Anim = {},\n        }\n        \n        self.FrameOverlay.LeapArrowAnimations.alpha1Anim = {animHub1.alpha1, animHub2.alpha1, animHub3.alpha1}\n        self.FrameOverlay.LeapArrowAnimations.alpha2Anim = {animHub1.alpha2, animHub2.alpha2, animHub3.alpha2}\n        self.FrameOverlay.LeapArrowAnimations.trans1Anim = {animHub1.trans1, animHub2.trans1, animHub3.trans1}\n        self.FrameOverlay.LeapArrowAnimations.trans2Anim = {animHub1.trans2, animHub2.trans2, animHub3.trans2}        \n        \n    end\n    \nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Hide()\n        local animation = texture.animation\n        animation:Stop()\n    end    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1724073562,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 139,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Play an animation when the cast is a Heroic Leap",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option2",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bRenameSpell",
["Value"] = true,
["Name"] = "Rename Spell",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Rename the name of the spell.",
},
{
["Type"] = 3,
["Key"] = "spellName",
["Value"] = "Heroic Leap",
["Name"] = "Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Name to show in the spell cast bar.",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bUseCastbarColor",
["Value"] = false,
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the cast bar color to the color selected below.",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
0.364705890417099,
0.1058823615312576,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Cast Bar Color",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.bUseCastbarColor) then\n        Plater.SetCastBarColor (unitFrame, DetailsFramework:ParseColors(scriptTable.config.castbarColor))\n    end\n    \n    \n    if (scriptTable.config.bRenameSpell) then\n        self.Text:SetText(scriptTable.config.spellName) \n    end\n    \n    ---@type texture[]\n    local leapTextures = self.FrameOverlay.LeapArrowTextures\n    for i, texture in ipairs(leapTextures) do\n        texture:SetTexture([[Interface\\AddOns\\Plater\\media\\arrow_right_64.tga]])\n        texture:ClearAllPoints()\n        texture:SetSize(self:GetHeight()*1.5, self:GetHeight()*1.5)\n        texture:SetRotation(math.pi - math.pi*0.75)        \n    end\n    \n    local startX = -10\n    leapTextures[1]:SetPoint(\"left\", self, \"left\", startX, -8)\n    leapTextures[2]:SetPoint(\"center\", self, \"center\", startX, -8)\n    leapTextures[3]:SetPoint(\"right\", self, \"right\", startX, -8)\n    \n    local animations = self.FrameOverlay.LeapArrowAnimations\n    local alpha1Animations = animations.alpha1Anim\n    local alpha2Animations = animations.alpha2Anim    \n    local trans1Animations = animations.trans1Anim\n    local trans2Animations = animations.trans2Anim    \n    \n    local castTime = envTable._Duration\n    \n    --on fade in\n    local fadeInDuration =  castTime/6\n    \n    C_Timer.After(fadeInDuration, function()\n            for i, texture in ipairs(leapTextures) do\n                texture:SetRotation(-math.pi*0.25)\n                --texture:Show()\n            end            \n    end)\n    \n    for i, alphaAnim in ipairs(alpha1Animations) do\n        alphaAnim:SetDuration(fadeInDuration)\n        alphaAnim:SetFromAlpha(0.3)\n        alphaAnim:SetToAlpha(1)\n    end\n    \n    for i, transAnim in ipairs(trans1Animations) do\n        transAnim:SetDuration(fadeInDuration)\n        transAnim:SetOffset(8, 20)\n    end\n    \n    --on fade out\n    local fadeOutDuration = castTime/2\n    \n    for i, alphaAnim in ipairs(alpha2Animations) do\n        alphaAnim:SetDuration(fadeOutDuration)\n        alphaAnim:SetFromAlpha(1)\n        alphaAnim:SetToAlpha(0.3)\n    end\n    \n    for i, transAnim in ipairs(trans2Animations) do\n        transAnim:SetDuration(fadeOutDuration)\n        transAnim:SetOffset(8, -16)\n    end    \n    \n    for i, texture in ipairs(leapTextures) do\n        texture:Show()\n        local animation = texture.animation\n        animation:Play()\n    end\n    \n    \n    --DetailsFramework:DebugVisibility(self.FrameOverlay.LeapArrow1)\nend",
["Icon"] = 236171,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Modify a cast bar when the unit casts a spell with the same effect of the Warrior's Heroic Leap spell.",
["SpellIds"] = {
447141,
432967,
},
["Name"] = "Cast - Heroic Leap [P]",
},
{
["ConstructorCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.Spark:SetVertexColor( unpack(Plater.db.profile.cast_statusbar_spark_color) )\n    PixelUtil.SetSize( self.Spark, Plater.db.profile.cast_statusbar_spark_width, self:GetHeight() )\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "		function (self, unitId, unitFrame, envTable, scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1719711134,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 75,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "In the box at right, add the spell id and the color.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "To get a list of colors, use: /plater colors",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Name"] = "Spark Width Scale",
["Value"] = 1,
["Key"] = "sparkWithScale",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 3,
["Desc"] = "Spark Scale",
["Min"] = 1,
["Key"] = "sparkHeightScale",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Spark Height Scale",
},
{
["Type"] = 7,
["Key"] = "sparkColor",
["Value"] = {
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "",
},
},
["Author"] = "Tennah-These Go To Eleven",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Change the spark color to differentiate a cast from another.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_spark.png",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the spark color\n    local sparkColor = scriptTable.config.sparkColor[tostring(envTable._SpellID)]\n    \n    self.Spark:SetVertexColor(DetailsFramework:ParseColors(sparkColor))\n    \n    self.Spark:SetWidth( self.Spark:GetWidth() * scriptTable.config.sparkWithScale )\n    self.Spark:SetHeight( self.Spark:GetHeight() * scriptTable.config.sparkHeightScale )\n    \nend\n\n\n",
["SpellIds"] = {
453140,
456713,
450088,
322614,
323730,
257348,
272422,
429427,
},
["Name"] = "Cast - Spark Color [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.stopCastingX) then\n        unitFrame.stopCastingX = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 7)\n        unitFrame.stopCastingX:SetPoint(\"center\", unitFrame.castBar.Spark, \"center\", 0, 0)\n        unitFrame.stopCastingX:SetTexture([[Interface\\AddOns\\Plater\\Media\\stop_64]])\n        unitFrame.stopCastingX:SetSize(16, 16)\n        unitFrame.stopCastingX:Hide()\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        texture:Hide()\n    end\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Hide()    \n    unitFrame.stopCastingX:Hide()\n    \n    self.Text:SetDrawLayer(\"overlay\", 0)\n    self.Spark:SetDrawLayer(\"overlay\", 3)\n    self.Spark:Show()\n    \nend\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100 / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        \n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        --print(envTable.NextPercent, envTable.CurrentTexture)\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.001, 1)\n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719679972,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 551,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 20,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "sparkColor",
["Value"] = {
0.9568627450980391,
1,
0.9882352941176471,
1,
},
["Name"] = "Spark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.8588235294117647,
0.4313725490196079,
1,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Healing effect that cannot be interrupted.",
["Icon"] = "Interface\\AddOns\\Plater\\media\\stop_64",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    textureStretched:SetHeight(castBar:GetHeight())\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion + 5, castBar:GetHeight() + math.random(1, 5))\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        \n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2 + math.random(-2, 2))\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        --local duration = 0.6 --debug\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(1)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration + 0.5) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(1)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    unitFrame.stopCastingX:Show()\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    self.Text:SetDrawLayer(\"artwork\", 7)\n    self.Spark:SetDrawLayer(\"artwork\", 7)\n    self.Spark:Hide()\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432520,
320822,
},
["Name"] = "Cast - Heal Stun [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local DF = DetailsFramework\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture2:Show()\n        unitFrame.CastSwipeAnimation2:Play()\n        unitFrame.StartSwipeAnimation2:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation2:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation2:Stop()\n                unitFrame.CastSwipeTexture2:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture2) then\n            return\n        end\n        \n        local circularTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n        circularTexture:SetPoint(\"center\", 0, 0)\n        circularTexture:SetSize(64, 64)\n        circularTexture:Hide()\n        \n        unitFrame.CastSwipeTexture2 = circularTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation2 = DF:CreateAnimationHub(circularTexture)\n        unitFrame.CastSwipeAnimation2:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation2.Rotation = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"rotation\", 1, 1, 360)\n        unitFrame.CastSwipeAnimation2.Trans = DF:CreateAnimation(unitFrame.CastSwipeAnimation2, \"TRANSLATION\", 1, 1, 2, 2)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, function()circularTexture:Show() end)\n        \n        unitFrame.StartSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.StartSwipeAnimation2, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation2 = DF:CreateAnimationHub(circularTexture, nil, function()circularTexture:Hide() end)\n        \n        unitFrame.EndSwipeAnimation2.Alpha = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"alpha\", 1, 0.2, 1, 0)\n        \n        unitFrame.EndSwipeAnimation2.Scale = DF:CreateAnimation(unitFrame.EndSwipeAnimation2, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n        \n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719757483,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 318,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "How much time takes for one revolution.",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.05,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 1,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.9,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.6392157077789307,
0.6392157077789307,
0.6392157077789307,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2_icon.png",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    \n    local targetScale = options.textureScale\n    \n    local circularTexture = unitFrame.CastSwipeTexture2\n    \n    --texture settings\n    circularTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\cast_bar_circular_swipe2.png]])\n    circularTexture:SetPoint(\"center\", 0, 0)\n    circularTexture:SetSize(64, 64)    \n    circularTexture:SetBlendMode(\"ADD\")\n    circularTexture:SetVertexColor(DetailsFramework:ParseColors(options.textureColor))\n    circularTexture:SetScale(targetScale)\n    circularTexture:SetAlpha(options.textureAlpha)\n    \n    --animations    \n    unitFrame.CastSwipeAnimation2.Rotation:SetDuration(options.rotationDuration)\n    unitFrame.CastSwipeAnimation2.Trans:SetDuration(options.rotationDuration)\n    \n    local randomOffset = 5\n    unitFrame.CastSwipeAnimation2.Trans:SetOffset(math.random(-randomOffset, randomOffset), math.random(-randomOffset, randomOffset))\n    \n    \n    unitFrame.StartSwipeAnimation2.Alpha:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Alpha:SetFromAlpha(options.textureStartAlpha)\n    unitFrame.StartSwipeAnimation2.Alpha:SetToAlpha(options.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation2.Scale:SetDuration(options.animStartDuration)\n    unitFrame.StartSwipeAnimation2.Scale:SetScaleTo(targetScale, targetScale)\n    \n    unitFrame.EndSwipeAnimation2.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation2.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)     \n    \nend\n\n\n\n\n",
["SpellIds"] = {
451102,
426787,
448888,
439811,
434796,
434793,
438879,
438473,
434252,
434829,
440468,
436205,
436246,
441395,
437533,
451965,
456902,
456900,
451996,
451939,
450077,
450079,
324909,
324922,
460092,
272711,
269266,
425974,
424879,
426771,
426786,
423324,
428879,
},
["Name"] = "Cast - AoE Hit All [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local castBar = unitFrame.castBar\n    local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n    local castBarHeight = castBar:GetHeight()\n    \n    unitFrame.felAnimation = unitFrame.felAnimation or {}\n    \n    if (not unitFrame.felAnimation.textureStretched) then\n        unitFrame.felAnimation.textureStretched = castBar.FrameOverlay:CreateTexture(nil, \"overlay\", nil, 5)\n    end\n    \n    if (not unitFrame.felAnimation.Textures) then\n        unitFrame.felAnimation.Textures = {}\n        \n        for i = 1, 20 do --max amount of segments is 20\n            local texture = castBar:CreateTexture(nil, \"overlay\", nil, 6)\n            unitFrame.felAnimation.Textures[i] = texture            \n            \n            texture.animGroup = texture.animGroup or texture:CreateAnimationGroup()\n            local animationGroup = texture.animGroup\n            animationGroup:SetToFinalAlpha(true)            \n            animationGroup:SetLooping(\"NONE\")\n            \n            texture:SetTexture([[Interface\\COMMON\\XPBarAnim]])\n            texture:SetTexCoord(0.2990, 0.0010, 0.0010, 0.4159)\n            texture:SetBlendMode(\"ADD\")\n            \n            texture.scale = animationGroup:CreateAnimation(\"SCALE\")\n            texture.scale:SetTarget(texture)\n            \n            texture.alpha = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha:SetTarget(texture)\n            \n            texture.alpha2 = animationGroup:CreateAnimation(\"ALPHA\")\n            texture.alpha2:SetTarget(texture)\n        end\n    end\n    \n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.Textures) then\n        for i = 1, scriptTable.config.segmentsAmount  do\n            local texture = unitFrame.felAnimation.Textures[i]\n            if (texture) then\n                texture:Hide()\n            end\n        end\n    end\n    \n    if (unitFrame.felAnimation and unitFrame.felAnimation.textureStretched) then\n        local textureStretched = unitFrame.felAnimation.textureStretched\n        if (textureStretched) then\n            textureStretched:Hide()\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (not envTable.NextPercent) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    \n    local textures = unitFrame.felAnimation.Textures\n    \n    if (envTable._CastPercent > envTable.NextPercent) then\n        local nextPercent = 100  / scriptTable.config.segmentsAmount\n        \n        textures[envTable.CurrentTexture]:Show()\n        textures[envTable.CurrentTexture].animGroup:Play()\n        envTable.NextPercent = envTable.NextPercent + nextPercent \n        envTable.CurrentTexture = envTable.CurrentTexture + 1\n        \n        if (envTable.CurrentTexture == #textures) then\n            envTable.NextPercent = 98\n        elseif (envTable.CurrentTexture > #textures) then\n            envTable.NextPercent = 999\n        end\n    end\n    \n    local normalizedPercent = envTable._CastPercent / 100\n    local textureStretched = unitFrame.felAnimation.textureStretched\n    local point = DetailsFramework:GetBezierPoint(normalizedPercent, 0, 0.1, 0.5)\n    \n    textureStretched:SetPoint(\"left\", castBar, \"left\", point * envTable.castBarWidth, 0)\n    \n    if (envTable._CanInterrupt) then\n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    else        \n        local newAlpha = min(0.1 + math.sin ( normalizedPercent * math.pi  ), 1)\n        textureStretched:SetAlpha(newAlpha)\n    end    \n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1719694337,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 741,
["Options"] = {
{
["Type"] = 2,
["Max"] = 20,
["Desc"] = "Need a /reload",
["Min"] = 5,
["Key"] = "segmentsAmount",
["Value"] = 7,
["Name"] = "Amount of Segments",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Spark Color",
["Value"] = {
0.9686275124549866,
0.9764706492424011,
1,
1,
},
["Key"] = "sparkColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Trail Color",
["Value"] = {
0.4901961088180542,
0,
0.5490196347236633,
1,
},
["Key"] = "glowColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show a different animation for the cast bar.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_debuff.png",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (self.channeling) then\n        return \n    end\n    \n    if (IsInRaid()) then\n        return\n    end\n    \n    local castBar = unitFrame.castBar\n    envTable.castBarWidth = castBar:GetWidth()\n    castBar.Spark:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.sparkColor))\n    \n    \n    local textureStretched = unitFrame.felAnimation.textureStretched\n    textureStretched:Show()\n    textureStretched:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.glowColor))\n    --textureStretched:SetAtlas(\"XPBarAnim-OrangeTrail\")\n    textureStretched:SetTexture([[Interface\\AddOns\\Plater\\images\\tail_rounded_white.png]])\n    textureStretched:SetHeight(castBar:GetHeight() + 2)\n    textureStretched:SetBlendMode(\"ADD\") \n    textureStretched:SetAlpha(0.5)\n    textureStretched:SetDrawLayer(\"overlay\", 7)\n    \n    textureStretched:ClearAllPoints()\n    textureStretched:SetPoint(\"right\", castBar.Spark, \"center\", 0, 0)\n    \n    --trail\n    for i = 1, scriptTable.config.segmentsAmount  do\n        local texture = unitFrame.felAnimation.Textures[i]\n        --texture:SetVertexColor(DetailsFramework:ParseColors(scriptTable.config.trailColor))\n        texture:SetVertexColor(1, 1, 1, 1)\n        texture:SetDesaturated(true)\n        \n        local castBarPortion = castBar:GetWidth()/scriptTable.config.segmentsAmount\n        \n        texture:SetSize(castBarPortion+5, castBar:GetHeight())\n        texture:SetDrawLayer(\"overlay\", 6)\n        \n        texture:ClearAllPoints()\n        if (i == scriptTable.config.segmentsAmount) then\n            texture:SetPoint(\"right\", castBar, \"right\", 0, 0)\n        else\n            texture:SetPoint(\"left\", castBar, \"left\", (i-1)*castBarPortion, 2)\n        end\n        \n        texture:SetAlpha(0)\n        texture:Hide()\n        \n        texture.scale:SetOrder(1)\n        texture.scale:SetDuration(0.5)\n        texture.scale:SetScaleFrom(0.2, 1)\n        texture.scale:SetScaleTo(1, 1.5)\n        texture.scale:SetOrigin(\"right\", 0, 0)\n        \n        local durationTime = DetailsFramework:GetBezierPoint(i / scriptTable.config.segmentsAmount, 0.2, 0.01, 0.6)\n        local duration = abs(durationTime-0.6)\n        \n        texture.alpha:SetOrder(1)\n        texture.alpha:SetDuration(0.05)\n        texture.alpha:SetFromAlpha(0)\n        texture.alpha:SetToAlpha(0.4)\n        \n        texture.alpha2:SetOrder(1)\n        texture.alpha2:SetDuration(duration) --0.6\n        texture.alpha2:SetStartDelay(duration)\n        texture.alpha2:SetFromAlpha(0.5)\n        texture.alpha2:SetToAlpha(0)\n    end\n    \n    envTable.CurrentTexture = 1\n    envTable.NextPercent  = 100  / scriptTable.config.segmentsAmount\n    \n    --local customColor = scriptTable.config.castColor[tostring(envTable._SpellID)]\n    --Plater.SetCastBarColorForScript(self, true, customColor or scriptTable.config.castBarColor, envTable)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
432448,
431309,
451107,
451119,
438618,
436322,
443507,
443436,
439341,
447261,
449444,
451224,
451241,
450095,
451612,
451395,
324987,
327393,
256709,
268230,
275836,
426308,
449153,
427461,
},
["Name"] = "Cast - Debuff [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1737945832,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end    \n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    self.simpleInterruptFlashAnimHub:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    self.simpleInterruptFlash = self.simpleInterruptFlash or  Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    \n    self.simpleInterruptFlash:SetBlendMode (\"ADD\")\n    self.simpleInterruptFlash:SetDrawLayer(\"OVERLAY\", 7)\n    self.simpleInterruptFlash:SetPoint (\"center\", self, \"center\")\n    self.simpleInterruptFlash:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    self.simpleInterruptFlashAnimHub = self.simpleInterruptFlashAnimHub or Plater:CreateAnimationHub (self.simpleInterruptFlash, \n        function()\n            self.simpleInterruptFlash:Show()\n        end,\n        function()\n            self.simpleInterruptFlash:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    self.simpleInterruptFlashAnimHub.fadeIn = self.simpleInterruptFlashAnimHub.fadeIn or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    self.simpleInterruptFlashAnimHub.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    self.simpleInterruptFlashAnimHub.fadeOut = self.simpleInterruptFlashAnimHub.fadeOut or Plater:CreateAnimation (self.simpleInterruptFlashAnimHub, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    self.simpleInterruptFlashAnimHub.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_quickflash.tga",
["Desc"] = "Play a very fast flash when the cast start.",
["Enabled"] = false,
["Revision"] = 959,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable but fast effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castBarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.2,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 200,
["Desc"] = "How strong is the shake.",
["Min"] = 10,
["Fraction"] = false,
["Value"] = 25,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 30,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if ( not envTable._CanInterrupt ) then\n        return\n    end\n    \n    --don't execute on battlegrounds and arenas\n    if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\") then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    self.simpleInterruptFlash:SetHeight(self:GetHeight() * 2.5 )\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castBarColor, envTable)\n    \n    self.simpleInterruptFlashAnimHub:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Cast - Simple Interrupt [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
431333,
442210,
443430,
443433,
451871,
76711,
334748,
334749,
328667,
338353,
445207,
},
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Time"] = 1741123443,
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_ongoing.png",
["url"] = "",
["NpcNames"] = {
},
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkAnimation:Stop()\n    \n    Plater.StopDotAnimation(self, envTable.dotAnimation1)    \n    Plater.StopDotAnimation(self, envTable.dotAnimation2)   \n    \nend\n\n\n",
["Revision"] = 159,
["Options"] = {
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
1,
1,
0.4166216850280762,
},
["Key"] = "dotColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Dots Color",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots X Offset",
["Min"] = -10,
["Name"] = "Dots X Offset",
["Value"] = 0,
["Key"] = "xOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Dots Y Offset",
["Min"] = -10,
["Key"] = "yOffset",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Dots Y Offset",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust how fast the blinking occurs",
["Min"] = 0.2,
["Fraction"] = true,
["Value"] = 0.4,
["Name"] = "Blink Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "speed",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Min amount of transparency the blink can have",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0,
["Name"] = "Blink Min Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "minAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Max amount of transparency the blink can have",
["Min"] = 0,
["Name"] = "Blink Max Alpha",
["Value"] = 0.5,
["Key"] = "maxAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 1,
["Key"] = "blinkColor",
["Value"] = {
1,
0.5254902243614197,
0.5137255191802979,
1,
},
["Name"] = "Blink Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the blinking texture",
},
},
["Desc"] = "The background of the nameplate blinks a red color indicating the cast is being performed. Useful to indicate channeling spells doing damage overtime.",
["SpellIds"] = {
431364,
423327,
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    self.OGC_BlinkTexture:ClearAllPoints()\n    self.OGC_BlinkTexture:SetPoint(\"topleft\", self, \"topleft\", 0, 0)\n    self.OGC_BlinkTexture:SetPoint(\"bottomright\", self, \"bottomright\", 0, 0)\n    \n    local red, green, blue = Plater:ParseColors(scriptTable.config.blinkColor)\n    self.OGC_BlinkTexture:SetVertexColor(red, green, blue)\n    \n    local blinkSpeed = scriptTable.config.speed\n    \n    self.OGC_BlinkAnimation.In:SetDuration(blinkSpeed)\n    self.OGC_BlinkAnimation.Out:SetDuration(blinkSpeed)\n    \n    local minBlinkAlpha = scriptTable.config.minAlpha\n    local maxBlinkAlpha = scriptTable.config.maxAlpha\n    \n    self.OGC_BlinkAnimation.In:SetFromAlpha(minBlinkAlpha)\n    self.OGC_BlinkAnimation.In:SetToAlpha(maxBlinkAlpha)\n    self.OGC_BlinkAnimation.Out:SetFromAlpha(maxBlinkAlpha)    \n    self.OGC_BlinkAnimation.Out:SetToAlpha(minBlinkAlpha)\n    \n    self.OGC_BlinkAnimation:SetLooping(\"repeat\")\n    self.OGC_BlinkAnimation:Play()\n    \n    envTable.dotAnimation1 = Plater.PlayDotAnimation(self, 5, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    envTable.dotAnimation1.textureInfo.speedMultiplier = 0.9\n    \n    envTable.dotAnimation1.dotTexture:SetVertexColor(unpack(scriptTable.config.dotColor))\n    \n    \n    envTable.dotAnimation1.dotTexture:Show()\n    \n    --envTable.dotAnimation2 = Plater.PlayDotAnimation(self, 2, scriptTable.config.dotColor, scriptTable.config.xOffset, scriptTable.config.yOffset)\n    --envTable.dotAnimation2.textureInfo.speedMultiplier = 1\n    \n    \n    \nend",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Cast - Ongoing Cast [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    --self.Text:Hide() \nend\n\n\n",
["Enabled"] = false,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --create a flash texture which keep blinking while the cast in going on\n    self.OGC_BlinkTexture = self.OGC_BlinkTexture or self:CreateTexture(nil, \"overlay\")\n    self.OGC_BlinkTexture:SetColorTexture(1, 1, 1)\n    self.OGC_BlinkTexture:SetAlpha(0)\n    \n    --create the animation group for the blinking texture\n    self.OGC_BlinkAnimation = self.OGC_BlinkAnimation or Plater:CreateAnimationHub(self.OGC_BlinkTexture, function() self.OGC_BlinkTexture:Show() end, function() self.OGC_BlinkTexture:Hide() end)\n    \n    self.OGC_BlinkAnimation.In = self.OGC_BlinkAnimation.In or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 1, 0.5, 0.3, 1)\n    \n    self.OGC_BlinkAnimation.Out = self.OGC_BlinkAnimation.Out or Plater:CreateAnimation(self.OGC_BlinkAnimation, \"alpha\", 2, 0.5, 1, 0.2)    \n    \n    \nend\n\n\n",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1722866303,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 1254,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_healalert.png",
["Name"] = "Cast - Heal Cut [P]",
["PlaterCore"] = 1,
["semver"] = "",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
450756,
452162,
322938,
322939,
324776,
324914,
326046,
340544,
335143,
327130,
256957,
275826,
429109,
451097,
},
["version"] = -1,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    if (not unitFrame.TextureWatchStep) then\n        \n        unitFrame.TextureWatchStep = true\n        \n        local animationFrame = CreateFrame(\"frame\", nil, unitFrame)\n        \n        \n        --> single animation group\n        local bearTrapAnimation = animationFrame:CreateAnimationGroup(\"beartrapAnimationGroup\")\n        bearTrapAnimation:SetLooping(\"NONE\")\n        \n        --> widgets:\n        \n        ----------------------------------------------\n        \n        local leftTrap  = animationFrame:CreateTexture(\"$parentleftTrapTexture\", \"ARTWORK\")\n        leftTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        leftTrap:SetDrawLayer(\"ARTWORK\", 0)\n        leftTrap:SetPoint(\"center\", animationFrame, \"center\", -48, 0)\n        leftTrap:SetSize(100, 100)\n        leftTrap:SetTexCoord(1, 0.0010000000149012, 0.0010000000149012, 1)\n        \n        --> animations for leftTrap\n        \n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(1)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetStartDelay(0.39999997615814)\n        leftTrap.rotation:SetDegrees(-90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        leftTrap.rotation:SetTarget(leftTrap)\n        leftTrap.rotation:SetOrder(6)\n        leftTrap.rotation:SetDuration(0.195999994874)\n        leftTrap.rotation:SetDegrees(90)\n        leftTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        leftTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        leftTrap.alpha:SetTarget(leftTrap)\n        leftTrap.alpha:SetOrder(6)\n        leftTrap.alpha:SetDuration(0.195999994874)\n        leftTrap.alpha:SetFromAlpha(1)\n        leftTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local rightTrap  = animationFrame:CreateTexture(\"$parentrightTrapTexture\", \"ARTWORK\")\n        rightTrap:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_beartrap_2.png]])\n        rightTrap:SetDrawLayer(\"ARTWORK\", 0)\n        rightTrap:SetPoint(\"center\", animationFrame, \"center\", 0, 0)\n        rightTrap:SetSize(100, 100)\n        \n        --> animations for rightTrap\n        \n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(1)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetStartDelay(0.39999997615814)\n        rightTrap.rotation:SetDegrees(90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        rightTrap.rotation:SetTarget(rightTrap)\n        rightTrap.rotation:SetOrder(6)\n        rightTrap.rotation:SetDuration(0.195999994874)\n        rightTrap.rotation:SetDegrees(-90)\n        rightTrap.rotation:SetOrigin(\"bottom\", 0, 0)\n        rightTrap.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        rightTrap.alpha:SetTarget(rightTrap)\n        rightTrap.alpha:SetOrder(6)\n        rightTrap.alpha:SetDuration(0.195999994874)\n        rightTrap.alpha:SetFromAlpha(1)\n        rightTrap.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        local boots  = animationFrame:CreateTexture(\"$parentbootsTexture\", \"BORDER\")\n        boots:SetTexture([[Interface\\AddOns\\Plater\\images\\icon_shoes.png]])\n        boots:SetDrawLayer(\"BORDER\", 0)\n        boots:SetPoint(\"center\", animationFrame, \"center\", -88, 35)\n        boots:SetSize(50, 50)\n        \n        --> animations for boots\n        \n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(1)\n        boots.alpha:SetDuration(0.31599998474121)\n        boots.alpha:SetFromAlpha(0)\n        boots.alpha:SetToAlpha(1)\n        boots.rotation = bearTrapAnimation:CreateAnimation(\"ROTATION\")\n        boots.rotation:SetTarget(boots)\n        boots.rotation:SetOrder(1)\n        boots.rotation:SetDuration(0.2960000038147)\n        boots.rotation:SetStartDelay(0.19999998807907)\n        boots.rotation:SetDegrees(40)\n        boots.rotation:SetOrigin(\"center\", 0, 0)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(1)\n        boots.translation:SetDuration(0.59599995613098)\n        boots.translation:SetOffset(63, -33)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(2)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(3)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(4)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(3, 3)\n        boots.translation = bearTrapAnimation:CreateAnimation(\"TRANSLATION\")\n        boots.translation:SetTarget(boots)\n        boots.translation:SetOrder(5)\n        boots.translation:SetDuration(0.046000000089407)\n        boots.translation:SetOffset(-3, -3)\n        boots.alpha = bearTrapAnimation:CreateAnimation(\"ALPHA\")\n        boots.alpha:SetTarget(boots)\n        boots.alpha:SetOrder(6)\n        boots.alpha:SetDuration(0.39599999785423)\n        boots.alpha:SetFromAlpha(1)\n        boots.alpha:SetToAlpha(0)\n        \n        ----------------------------------------------\n        \n        unitFrame.BearTrapTextures = {leftTrap, rightTrap, boots}\n        unitFrame.BearTrapAnimationFrame = animationFrame\n        unitFrame.BearTrapAnimation = bearTrapAnimation\n        \n        \n        bearTrapAnimation:SetScript(\"OnPlay\", function()\n                boots:SetAlpha(0)\n                boots:Show()\n                leftTrap:Show()\n                rightTrap:Show()            \n        end)\n        \n        bearTrapAnimation:SetScript(\"OnFinished\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)       \n        \n        bearTrapAnimation:SetScript(\"OnStop\", function()\n                boots:Hide()\n                leftTrap:Hide()\n                rightTrap:Hide()\n        end)           \n        \n        \n    end\n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1720031975,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 220,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Settings for the animation played when the cast creates small void zones in the ground.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
},
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play an animation when the cast creates small zones in the ground that will damage if the player doesn't move.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_voidzone.png",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame.BearTrapAnimationFrame:SetSize(1, 1)\n    unitFrame.BearTrapAnimationFrame:ClearAllPoints()\n    unitFrame.BearTrapAnimationFrame:SetPoint(\"center\", unitFrame, \"center\", 30, 63)\n    unitFrame.BearTrapAnimationFrame:SetScale(0.5)\n    \n    unitFrame.BearTrapAnimation:Play()\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
450784,
451423,
445813,
445838,
438658,
433845,
456696,
451391,
324923,
323138,
340189,
326021,
320571,
321780,
345623,
333479,
334476,
320772,
257882,
424903,
426345,
422233,
445541,
428703,
439559,
},
["Name"] = "Cast - Voidzone [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    function envTable.PlaySwipeAnimation(unitFrame)\n        unitFrame.CastSwipeTexture:Show()\n        unitFrame.CastSwipeAnimation:Play()\n        unitFrame.StartSwipeAnimation:Play()\n    end\n    \n    function envTable.StopSwipeAnimation(unitFrame)\n        unitFrame.EndSwipeAnimation:Play()\n        C_Timer.After(0.21, function()\n                unitFrame.CastSwipeAnimation:Stop()\n                unitFrame.CastSwipeTexture:Hide()\n        end)\n    end\n    \n    function envTable.CreateSwipeTextureAndAnimations(unitFrame)\n        if (unitFrame.CastSwipeTexture) then\n            return\n        end\n        \n        local swipeTexture = unitFrame:CreateTexture(nil, \"overlay\")\n        swipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n        swipeTexture:SetPoint(\"center\", 0, 0)\n        swipeTexture:SetSize(64, 64)\n        swipeTexture:Hide()\n        \n        unitFrame.CastSwipeTexture = swipeTexture\n        \n        --rotation animation\n        unitFrame.CastSwipeAnimation = Plater:CreateAnimationHub(swipeTexture)\n        unitFrame.CastSwipeAnimation:SetLooping(\"repeat\")\n        unitFrame.CastSwipeAnimation.Rotation = Plater:CreateAnimation(unitFrame.CastSwipeAnimation, \"rotation\", 1, 1, 360)\n        \n        --starting animation\n        unitFrame.StartSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, function()swipeTexture:Show() end)\n        unitFrame.StartSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"alpha\", 1, 0.2, 0, 1)\n        unitFrame.StartSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.StartSwipeAnimation, \"scale\", 1, 0.2, 1.3, 1.3, 1, 1)        \n        \n        --finished animation\n        unitFrame.EndSwipeAnimation = Plater:CreateAnimationHub(swipeTexture, nil, function()swipeTexture:Hide() end)\n        unitFrame.EndSwipeAnimation.Alpha = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"alpha\", 1, 0.2, 1, 0)\n        unitFrame.EndSwipeAnimation.Scale = Plater:CreateAnimation(unitFrame.EndSwipeAnimation, \"scale\", 1, 0.2, 1, 1, 1.3, 1.3)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.StopSwipeAnimation(unitFrame)\n    unitFrame.CastSwipeTexture:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1719758013,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 281,
["Options"] = {
{
["Type"] = 2,
["Max"] = 0.3,
["Desc"] = "Rotation Duration",
["Min"] = 0.1,
["Name"] = "Rotation Duration",
["Value"] = 0.15,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "rotationDuration",
},
{
["Type"] = 6,
["Key"] = "option5",
["Value"] = 0,
["Name"] = "Option 5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.5,
["Desc"] = "Animation Start Duration",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Start Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animStartDuration",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha when the animation start playing, this effect in intended to catch the player attention",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.3,
["Key"] = "textureStartAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Texture Start Alpha",
},
{
["Type"] = 6,
["Name"] = "Option 5",
["Value"] = 0,
["Key"] = "option5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1.2,
["Desc"] = "Texture Scale",
["Min"] = 0.6,
["Name"] = "Texture Scale",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureScale",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Texture Alpha",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 0.8,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "textureAlpha",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
0.7411764860153198,
0.7411764860153198,
0.7411764860153198,
1,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Texture Color",
},
},
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Play a animation when the spell effect is an circular AoE around the caster.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\circular_swipe",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.CreateSwipeTextureAndAnimations(unitFrame)\n    \n    local options = scriptTable.config\n    local targetScale = scriptTable.config.textureScale\n    \n    --swipe rotation duration    \n    unitFrame.CastSwipeAnimation.Rotation:SetDuration(scriptTable.config.rotationDuration)\n    \n    unitFrame.CastSwipeTexture:SetTexture([[Interface\\AddOns\\Plater\\images\\circular_swipe.png]])\n    \n    --swipe texture settings\n    unitFrame.CastSwipeTexture:SetVertexColor(Plater:ParseColors(scriptTable.config.textureColor))\n    unitFrame.CastSwipeTexture:SetScale(targetScale)\n    unitFrame.CastSwipeTexture:SetAlpha(scriptTable.config.textureAlpha)  \n    \n    unitFrame.StartSwipeAnimation.Alpha:SetDuration(scriptTable.config.animStartDuration)\n    unitFrame.StartSwipeAnimation.Alpha:SetFromAlpha(scriptTable.config.textureStartAlpha)\n    unitFrame.StartSwipeAnimation.Alpha:SetToAlpha(scriptTable.config.textureAlpha)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetDuration(scriptTable.config.animStartDuration)\n    \n    unitFrame.StartSwipeAnimation.Scale:SetScaleFrom(1.05, 1.05)\n    unitFrame.StartSwipeAnimation.Scale:SetScaleTo(1, 1)    \n    \n    unitFrame.EndSwipeAnimation.Scale:SetDuration(0.1)\n    unitFrame.EndSwipeAnimation.Alpha:SetDuration(0.1)\n    \n    --start playing\n    envTable.PlaySwipeAnimation(unitFrame)    \n    \nend\n\n\n",
["SpellIds"] = {
453212,
451098,
427001,
438622,
446086,
447271,
437700,
439646,
448877,
451387,
331743,
320637,
327240,
257170,
257326,
257169,
423538,
428508,
428520,
},
["Name"] = "Cast - AoE With Range [P]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --get the reference of the arrow texture\n    local movingArrowTexture = unitFrame._movingArrowTexture\n    \n    --if it doesn't exists yet, create now\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    local mAT = movingArrowTexture\n    \n    if (not mAT.movingAnimation) then\n        local onPlay = function()\n            mAT:Show() \n        end\n        \n        local onStop =  function()\n            mAT:Hide() \n        end\n        \n        mAT.movingAnimation = Plater:CreateAnimationHub( mAT, onPlay, onStop )\n        mAT.movingAnimation:SetLooping( \"REPEAT\" )\n    end\n    \n    if (not mAT.arrowAnimation) then\n        local arrowAnimation = Plater:CreateAnimation (mAT.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n        mAT.arrowAnimation = arrowAnimation\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    mAT.movingAnimation:Stop()\n    \nend\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    local maxAlpha = scriptTable.config.arrowAlpha\n    \n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = mAT.movingAnimation:GetProgress()\n    \n    if (percent < 0.20) then\n        local value = DetailsFramework.Math.MapRangeClamped(0, 0.20, 0, maxAlpha, percent)\n        mAT:SetAlpha(value)\n        \n    elseif (percent > 0.8) then\n        local value = DetailsFramework.Math.MapRangeClamped(0.8, 1, maxAlpha, 0, percent)\n        mAT:SetAlpha(value)\n    end\n    \n    self.ThrottleUpdate = 0\n    \n    --mAT:SetAlpha(1)\nend",
["Time"] = 1719788095,
["url"] = "",
["NpcNames"] = {
},
["Enabled"] = false,
["Revision"] = 754,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
{
["Type"] = 6,
["Key"] = "option8",
["Value"] = 0,
["Name"] = "Option 8",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "bChangeSpellName",
["Value"] = true,
["Name"] = "Change Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Change the spell name to the text entered below",
},
{
["Type"] = 3,
["Key"] = "spellNameText",
["Value"] = "Frontal",
["Name"] = "New Spell Name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "The customized spell name",
},
},
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_frontal",
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local mAT = unitFrame._movingArrowTexture\n    \n    mAT:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    mAT:SetSize(16, self:GetHeight())\n    mAT:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    mAT:SetParent(self.FrameOverlay)\n    mAT:SetDrawLayer(\"overlay\",  7)\n    mAT:SetAlpha(scriptTable.config.arrowAlpha)\n    mAT:SetDesaturated(scriptTable.config.desaturateArrow)        \n    \n    mAT:ClearAllPoints()\n    mAT:SetPoint(\"left\", self, \"left\", -16, 0)\n    \n    local arrowAnimation = mAT.arrowAnimation\n    arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    arrowAnimation:SetOffset(self:GetWidth(), 0)\n    \n    mAT.movingAnimation:Play()\n    \n    if (scriptTable.config.bChangeSpellName) then\n        self.Text:SetText(scriptTable.config.spellNameText)\n    end\n    \n    --DetailsFramework:DebugVisibility(mAT)\n\nend\n\n\n\n\n",
["SpellIds"] = {
431494,
426860,
448213,
434407,
439789,
434824,
453161,
435012,
439506,
443500,
434779,
451543,
439621,
441384,
441381,
447395,
456711,
448105,
323137,
321968,
331718,
331721,
325223,
340160,
321834,
320596,
324323,
333488,
323496,
333477,
256627,
257292,
454438,
269029,
257862,
425027,
449130,
428202,
448640,
427869,
},
["Name"] = "Cast - Frontal Cone [Plater]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1739959466,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Desc"] = "Show a castbar for the aura duration.",
["Enabled"] = true,
["Revision"] = 30,
["semver"] = "",
["SpellIds"] = {
438494,
335141,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Aura - Is Cast Bar [P]",
["PlaterCore"] = 1,
["NpcNames"] = {
},
["url"] = "",
["Options"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Time"] = 1741124891,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["NpcNames"] = {
},
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1962,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "interruptSoundToggle",
["Value"] = false,
["Name"] = "Play Sound On Spell Cast",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Key"] = "interruptSound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Name"] = "Choose Sound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["version"] = -1,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
397889,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
450756,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
463058,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
423051,
444743,
437721,
441627,
440687,
427260,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Icon"] = 1305153,
["Enabled"] = true,
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1741123513,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["url"] = "",
["Icon"] = 1958262,
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 1006,
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Prio"] = 67,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Quazii FRONTALS",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = true,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["NpcNames"] = {
},
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Tankbuster [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "flashDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Key"] = "castBarHeight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Key"] = "shakeDuration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Key"] = "shakeAmplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Key"] = "shakeFrequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
},
["saved_cvars_last_change"] = {
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater.lua:4434",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater.lua:4434",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater.lua:4434",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater.lua:4434",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater.lua:4434",
["nameplateShowFriends"] = "[C]: in function 'SetCVar'\n[Interface/AddOns/Blizzard_SharedXMLBase/CvarUtil.lua]:76: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:264: in function 'SetValueDerived'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:110: in function 'ApplyValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Setting.lua]:86: in function 'SetValue'\n[Interface/AddOns/Blizzard_Settings_Shared/Blizzard_Settings.lua]:224: in function 'SetValue'\n[FRIENDNAMEPLATES]:6: in function <[string \"FRIENDNAMEPLATES\"]:1>\n",
},
["aura2_y_offset"] = 0,
["castbar_framelevel"] = 0,
["buffs_on_aura2"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["bossmod_support_bars_enabled"] = false,
["npc_cache"] = {
[156146] = {
"Voidbound Shieldbearer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[37133] = {
"Ymirjar Warlord",
"Icecrown Citadel",
"enUS",
},
[24777] = {
"Sunblade Sentinel",
"Magisters' Terrace",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[10407] = {
"Fleshflayer Ghoul",
"Stratholme",
"enUS",
},
[10439] = {
"Ramstein the Gorger",
"Stratholme",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[76810] = {
"Furnace Engineer",
"Blackrock Foundry",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
"enUS",
},
[159219] = {
"Umbral Seer",
"Ny'alotha, the Waking City",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[127230] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[55689] = {
"Hagara the Stormbinder",
"Dragon Soul",
"enUS",
},
[231906] = {
"Aerial Support Bot",
"The Spiral Weave",
"enUS",
},
[52362] = {
"Tiki Lord Zim'wae",
"Zul'Gurub",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
"enUS",
},
[76811] = {
"Bellows Operator",
"Blackrock Foundry",
"enUS",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
"enUS",
},
[233955] = {
"Charred Fanatic",
"Liberation of Undermine",
"enUS",
},
[37134] = {
"Ymirjar Huntress",
"Icecrown Citadel",
"enUS",
},
[53642] = {
"Cinderweb Spinner",
"Firelands",
"enUS",
},
[239586] = {
"Coagulated Garbage",
"Horrific Vision of Stormwind",
"enUS",
},
[231908] = {
"Bopper Bot",
"The Spiral Weave",
"enUS",
},
[233956] = {
"Wild Thunderbolt",
"Liberation of Undermine",
"enUS",
},
[76812] = {
"Security Guard",
"Blackrock Foundry",
"enUS",
},
[231909] = {
"Underpaid Brute",
"The Spiral Weave",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[186353] = {
"Dominated Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[231910] = {
"Masked Freelancer",
"Sidestreet Sluice",
"enUS",
},
[159224] = {
"Gryth'ax the Executioner",
"Ny'alotha, the Waking City",
"enUS",
},
[101127] = {
"Twilight Bladetwister",
"Tirisfal Glades",
"enUS",
},
[77325] = {
"Blackhand",
"Blackrock Foundry",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
"enUS",
},
[238054] = {
"Void-Scarred Cub",
"Horrific Vision of Orgrimmar",
"enUS",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
"enUS",
},
[116484] = {
"Sigryn",
"Halls of Valor - Scenario",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
"enUS",
},
[76814] = {
"Flamebender Ka'graz",
"Blackrock Foundry",
"enUS",
},
[17356] = {
"Creeping Ooze",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[17420] = {
"Shattered Hand Heathen",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
"enUS",
},
[186357] = {
"Stellar Mote",
"Sepulcher of the First Ones",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
"enUS",
},
[238569] = {
"Mini Amp",
"Liberation of Undermine",
"enUS",
},
[76815] = {
"Primal Elementalist",
"Blackrock Foundry",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[101897] = {
"Borgoth the Master Reaver",
"Tirisfal Glades",
"enUS",
},
[36880] = {
"Decaying Colossus",
"Icecrown Citadel",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[118022] = {
"Infernal Chaosbringer",
"Tomb of Sargeras",
"enUS",
},
[175611] = {
"The Tarragrue",
"Sanctum of Domination",
"enUS",
},
[55308] = {
"Warlord Zon'ozz",
"Dragon Soul",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[237549] = {
"Molten Slag",
"Dastardly Dome",
"enUS",
},
[80400] = {
"Iron Assembly Warden",
"Blackrock Foundry",
"enUS",
},
[10184] = {
"Onyxia",
"Onyxia's Lair",
"enUS",
},
[24715] = {
"High Explosive Sheep",
"Magisters' Terrace",
"enUS",
},
[53901] = {
"Unstable Magma",
"Firelands",
"enUS",
},
[163841] = {
"Amalgamation of Flesh",
"Ny'alotha, the Waking City",
"enUS",
},
[162306] = {
"Aqir Drone",
"Ny'alotha, the Waking City",
"enUS",
},
[17357] = {
"Creeping Oozeling",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[237552] = {
"Sprok",
"Kriegval's Rest",
"enUS",
},
[111370] = {
"Creature in the Shadows",
"The Emerald Nightmare",
"enUS",
},
[235505] = {
"Darkfuse Cackler",
"Fungal Folly",
"enUS",
},
[103692] = {
"Greater Void Ravener",
"Tirisfal Glades",
"enUS",
},
[236529] = {
"Blackwater Swabby",
"Liberation of Undermine",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[229363] = {
"Imperious Soundwave",
"Liberation of Undermine",
"enUS",
},
[117769] = {
"Felborne Spellbreaker",
"Tomb of Sargeras",
"enUS",
},
[18317] = {
"Ethereal Priest",
"Auchindoun: Mana-Tombs",
"enUS",
},
[53134] = {
"Ancient Core Hound",
"Firelands",
"enUS",
},
[237554] = {
"Torque Clankfire",
"Kriegval's Rest",
"enUS",
},
[218103] = {
"Nerubian Lord",
"Earthcrawl Mines",
"enUS",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[236531] = {
"Geargrave",
"The Spiral Weave",
"enUS",
},
[229365] = {
"Imperious Mouthpiece",
"Liberation of Undermine",
"enUS",
},
[177154] = {
"Mawsworn Vanguard",
"Sanctum of Domination",
"enUS",
},
[161286] = {
"Dark Ritualist",
"Ny'alotha, the Waking City",
"enUS",
},
[231925] = {
"Drill Sergeant",
"Sidestreet Sluice",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
"enUS",
},
[93968] = {
"Shadowfel Warden",
"Hellfire Citadel",
"enUS",
},
[229366] = {
"Stagehand",
"Liberation of Undermine",
"enUS",
},
[238068] = {
"Geargrinder Rager",
"Liberation of Undermine",
"enUS",
},
[153097] = {
"Voidbound Shaman",
"Horrific Vision of Orgrimmar",
"enUS",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
"enUS",
},
[155657] = {
"Huffer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[185346] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[56846] = {
"Arm Tentacle",
"Dragon Soul",
"enUS",
},
[36627] = {
"Rotface",
"Icecrown Citadel",
"enUS",
},
[12264] = {
"Shazzrah",
"Molten Core",
"enUS",
},
[37011] = {
"The Damned",
"Icecrown Citadel",
"enUS",
},
[123402] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[230904] = {
"Shadeguard Speaker",
"Nightfall Sanctum",
"enUS",
},
[231928] = {
"Bomb Bot",
"The Spiral Weave",
"enUS",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[102672] = {
"Nythendra",
"The Emerald Nightmare",
"enUS",
},
[137233] = {
"Plague Toad",
"Temple of Sethraliss",
"enUS",
},
[231930] = {
"Obedient-ish Predator",
"The Spiral Weave",
"enUS",
},
[129802] = {
"Earthrager",
"The MOTHERLODE!!",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[57231] = {
"Twilight Portal",
"Dragon Soul",
"enUS",
},
[37012] = {
"Ancient Skeletal Soldier",
"Icecrown Citadel",
"enUS",
},
[161293] = {
"Neglected Guild Bank",
"Horrific Vision of Stormwind",
"enUS",
},
[215040] = {
"Kobyss Bonechewer",
"Tak-Rethan Abyss",
"enUS",
},
[162317] = {
"Gorechop",
"Theater of Pain",
"enUS",
},
[18894] = {
"Felguard Brute",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[112655] = {
"Celestial Acolyte",
"The Nighthold",
"enUS",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[139284] = {
"Plague Doctor",
"Temple of Sethraliss",
"enUS",
},
[19598] = {
"Mutate Fleshlasher",
"Tempest Keep: The Botanica",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
"enUS",
},
[56848] = {
"Twilight Elite Slayer",
"Dragon Soul",
"enUS",
},
[231935] = {
"Junkyard Hyena",
"Liberation of Undermine",
"enUS",
},
[77337] = {
"Aknor Steelbringer",
"Blackrock Foundry",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
"enUS",
},
[10409] = {
"Rockwing Screecher",
"Stratholme",
"enUS",
},
[116496] = {
"Runeseer Faljar",
"Halls of Valor - Scenario",
"enUS",
},
[135192] = {
"Honored Raptor",
"Kings' Rest",
"enUS",
},
[238079] = {
"Void-Forged Stallion",
"Horrific Vision of Stormwind",
"enUS",
},
[80409] = {
"Markog Aba'dir",
"Blackrock Foundry",
"enUS",
},
[117776] = {
"Shadow Council Warlock",
"Tomb of Sargeras",
"enUS",
},
[118032] = {
"Tormenting Eye",
"Artifact - Acquisition - Tank",
"enUS",
},
[10697] = {
"Bile Slime",
"Stratholme",
"enUS",
},
[139800] = {
"Galecaller Apprentice",
"Shrine of the Storm",
"enUS",
},
[236033] = {
"Metal Gunk",
"Operation: Mechagon",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[17871] = {
"Underbog Shambler",
"Coilfang: The Underbog",
"enUS",
},
[26125] = {
"Risen Ghoul",
"Horrific Vision of Stormwind",
"enUS",
},
[52498] = {
"Beth'tilac",
"Firelands",
"enUS",
},
[231939] = {
"Darkfuse Wrenchmonger",
"Liberation of Undermine",
"enUS",
},
[118289] = {
"Maiden of Vigilance",
"Tomb of Sargeras",
"enUS",
},
[216583] = {
"Chittering Fearmonger",
"Skittering Breach",
"enUS",
},
[211977] = {
"Pack Mole",
"Darkflame Cleft",
"enUS",
},
[216584] = {
"Nerubian Captain",
"Skittering Breach",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[80411] = {
"Iron Marksman",
"Blackrock Foundry",
"enUS",
},
[23374] = {
"Ashtongue Stalker",
"Black Temple",
"enUS",
},
[59153] = {
"Rattlegore",
"Dastardly Dome",
"enUS",
},
[159767] = {
"Sanguimar",
"Ny'alotha, the Waking City",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
"enUS",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
"enUS",
},
[19919] = {
"Thorn Lasher",
"Tempest Keep: The Botanica",
"enUS",
},
[159768] = {
"Deresh of the Nothingness",
"Ny'alotha, the Waking City",
"enUS",
},
[129552] = {
"Monzumi",
"Atal'Dazar",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[151579] = {
"Shield Generator",
"Operation: Mechagon",
"enUS",
},
[102679] = {
"Ysondre",
"The Emerald Nightmare",
"enUS",
},
[185363] = {
"Manifestor Krugan",
"Sepulcher of the First Ones",
"enUS",
},
[57746] = {
"Faceless Destroyer",
"Dragon Soul",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[179733] = {
"Invigorating Fish Stick",
"Tazavesh, the Veiled Market",
"enUS",
},
[120851] = {
"Hippogryph Lord Varah",
"Tomb of Sargeras",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[225804] = {
"Geargrinder Biker",
"Liberation of Undermine",
"enUS",
},
[117269] = {
"Kil'jaeden",
"Tomb of Sargeras",
"enUS",
},
[149535] = {
"Icebound Image",
"Battle of Dazar'alor",
"enUS",
},
[53140] = {
"Son of Flame",
"Firelands",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[153119] = {
"Lesser Void Elemental",
"Horrific Vision of Orgrimmar",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
"enUS",
},
[117782] = {
"Eredar Bloodmage",
"Tomb of Sargeras",
"enUS",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[52373] = {
"Florawing Needler",
"Zul'Gurub",
"enUS",
},
[230927] = {
"Darkfuse Shredder Pilot",
"Operation: Floodgate",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[53141] = {
"Molten Surger",
"Firelands",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[102683] = {
"Emeriss",
"The Emerald Nightmare",
"enUS",
},
[16593] = {
"Shattered Hand Brawler",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[112153] = {
"Dire Shaman",
"The Emerald Nightmare",
"enUS",
},
[159266] = {
"Portal Master",
"Horrific Vision of Stormwind",
"enUS",
},
[112665] = {
"Nighthold Protector",
"The Nighthold",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[101148] = {
"Twilight Deacon Farthing",
"Tirisfal Glades",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[122135] = {
"Shatug",
"Antorus, the Burning Throne",
"enUS",
},
[214550] = {
"Deepwater Snapper",
"Tak-Rethan Abyss",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[56341] = {
"Burning Tendons",
"Dragon Soul",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[214551] = {
"Wandering Gutter",
"The Sinkhole",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[57109] = {
"Minion of Doubt",
"Temple of the Jade Serpent",
"enUS",
},
[114714] = {
"Ghostly Steward",
"Return to Karazhan",
"enUS",
},
[238098] = {
"Void-Scarred Wyvern",
"Horrific Vision of Orgrimmar",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[57749] = {
"Faceless Corruptor",
"Dragon Soul",
"enUS",
},
[57877] = {
"Flail of Go'rath",
"Dragon Soul",
"enUS",
},
[87841] = {
"Grom'kar Firemender",
"Blackrock Foundry",
"enUS",
},
[237587] = {
"Mechanized Peacekeeper",
"Liberation of Undermine",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[11658] = {
"Molten Giant",
"Molten Core",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[147498] = {
"Prelate Jakit",
"Battle of Dazar'alor",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[52375] = {
"Florawing Needler",
"Zul'Gurub",
"enUS",
},
[153130] = {
"Greater Void Elemental",
"Horrific Vision of Stormwind",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[93985] = {
"Corrupted Talonpriest",
"Hellfire Citadel",
"enUS",
},
[24656] = {
"Fizzle",
"Magisters' Terrace",
"enUS",
},
[16594] = {
"Shadowmoon Acolyte",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[180773] = {
"Vigilant Guardian",
"Sepulcher of the First Ones",
"enUS",
},
[80677] = {
"Iron Journeyman",
"Blackrock Foundry",
"enUS",
},
[219676] = {
"Nerl'athekk the Skulking",
"Skittering Breach",
"enUS",
},
[159275] = {
"Portal Keeper",
"Horrific Vision of Stormwind",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[129050] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[56471] = {
"Mutated Corruption",
"Dragon Soul",
"enUS",
},
[80422] = {
"Iron Marksman",
"Blackrock Foundry",
"enUS",
},
[56855] = {
"Twilight Assault Drake",
"Dragon Soul",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[225821] = {
"The Geargrinder",
"Liberation of Undermine",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[57751] = {
"Ruin Tentacle",
"Dragon Soul",
"enUS",
},
[223774] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[112671] = {
"Duskwatch Battle-Magus",
"The Nighthold",
"enUS",
},
[225822] = {
"Vexie Fullthrottle",
"Liberation of Undermine",
"enUS",
},
[80423] = {
"Thunderlord Beast-Tender",
"Blackrock Foundry",
"enUS",
},
[157231] = {
"Shad'har the Insatiable",
"Ny'alotha, the Waking City",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[238108] = {
"Cement Shoes",
"Liberation of Undermine",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[220193] = {
"Sureki Venomblade",
"City of Threads",
"enUS",
},
[52377] = {
"Florawing Needler",
"Zul'Gurub",
"enUS",
},
[219682] = {
"Shadow-Crazed Hog",
"Mycomancer Cavern",
"enUS",
},
[180780] = {
"Dreadmaw",
"Sanctum of Domination",
"enUS",
},
[37149] = {
"Kor'kron Necrolyte",
"Icecrown Citadel",
"enUS",
},
[149556] = {
"Eternal Enforcer",
"Battle of Dazar'alor",
"enUS",
},
[37533] = {
"Rimefang",
"Icecrown Citadel",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[180781] = {
"Frothing Hound",
"Sanctum of Domination",
"enUS",
},
[227874] = {
"Web Spreader",
"Earthcrawl Mines",
"enUS",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
"enUS",
},
[17427] = {
"Shattered Hand Archer",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[17491] = {
"Laughing Skull Rogue",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
"enUS",
},
[153141] = {
"Endless Hunger Totem",
"Horrific Vision of Orgrimmar",
"enUS",
},
[240672] = {
"Gamon",
"Horrific Vision of Orgrimmar",
"enUS",
},
[217126] = {
"Over-Indulged Patron",
"Khaz Algar (Surface)",
"enUS",
},
[136250] = {
"Hoodoo Hexer",
"Temple of Sethraliss",
"enUS",
},
[102693] = {
"Amassing Darkness",
"Tirisfal Glades",
"enUS",
},
[123680] = {
"Dark Keeper Aedis",
"Antorus, the Burning Throne",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[37534] = {
"Spinestalker",
"Icecrown Citadel",
"enUS",
},
[37662] = {
"Darkfallen Commander",
"Icecrown Citadel",
"enUS",
},
[241698] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[184880] = {
"Dominated Disrupter",
"Sepulcher of the First Ones",
"enUS",
},
[161334] = {
"Gnashing Terror",
"Ny'alotha, the Waking City",
"enUS",
},
[11659] = {
"Molten Destroyer",
"Molten Core",
"enUS",
},
[240675] = {
"Barkeep Morag",
"Horrific Vision of Orgrimmar",
"enUS",
},
[90409] = {
"Gorebound Felcaster",
"Hellfire Citadel",
"enUS",
},
[161335] = {
"Void Horror",
"Ny'alotha, the Waking City",
"enUS",
},
[112676] = {
"Nobleborn Warpcaster",
"The Nighthold",
"enUS",
},
[52379] = {
"Venomtip Needler",
"Zul'Gurub",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[135231] = {
"Spectral Brute",
"Kings' Rest",
"enUS",
},
[37023] = {
"Plague Scientist",
"Icecrown Citadel",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[37663] = {
"Darkfallen Noble",
"Icecrown Citadel",
"enUS",
},
[241702] = {
"Gamon",
"Horrific Vision of Orgrimmar",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[210478] = {
"Infected Beast",
"Mycomancer Cavern",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[81197] = {
"Iron Raider",
"Blackrock Foundry",
"enUS",
},
[216621] = {
"Nerubian Webspinner",
"Earthcrawl Mines",
"enUS",
},
[151613] = {
"Anti-Personnel Squirrel",
"Operation: Mechagon",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[210479] = {
"Carnivorous Lasher",
"Mycomancer Cavern",
"enUS",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[231978] = {
"Sharpshot Sentry",
"Liberation of Undermine",
"enUS",
},
[167994] = {
"Ossified Conscript",
"Theater of Pain",
"enUS",
},
[52380] = {
"Venomancer Mauri",
"Zul'Gurub",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[37664] = {
"Darkfallen Archmage",
"Icecrown Citadel",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[149569] = {
"Dazari Worshipper",
"Battle of Dazar'alor",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[144963] = {
"Kimbul's Aspect",
"Battle of Dazar'alor",
"enUS",
},
[167998] = {
"Portal Guardian",
"Theater of Pain",
"enUS",
},
[52381] = {
"Venomancer T'Kulu",
"Zul'Gurub",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
"enUS",
},
[37025] = {
"Stinky",
"Icecrown Citadel",
"enUS",
},
[24723] = {
"Selin Fireheart",
"Magisters' Terrace",
"enUS",
},
[10412] = {
"Crypt Crawler",
"Stratholme",
"enUS",
},
[37665] = {
"Darkfallen Lieutenant",
"Icecrown Citadel",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[17429] = {
"Fel Orc Neophyte",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[176703] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[17621] = {
"Heathen Guard",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[234034] = {
"Thrall",
"Horrific Vision of Orgrimmar",
"enUS",
},
[157253] = {
"Ka'zir",
"Ny'alotha, the Waking City",
"enUS",
},
[234035] = {
"Inquisitor Gnshal",
"Horrific Vision of Orgrimmar",
"enUS",
},
[157254] = {
"Tek'ris",
"Ny'alotha, the Waking City",
"enUS",
},
[128551] = {
"Irontide Mastiff",
"Freehold",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[158279] = {
"Haywire Clockwork Rocket Bot",
"Horrific Vision of Stormwind",
"enUS",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[47136] = {
"Unstable Ravager",
"Dastardly Dome",
"enUS",
},
[234037] = {
"Vez'okk the Lightless",
"Horrific Vision of Orgrimmar",
"enUS",
},
[95280] = {
"Kaz'rogal",
"Hellfire Citadel",
"enUS",
},
[237109] = {
"Gallagio Customer Care",
"Liberation of Undermine",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[234038] = {
"Rexxar",
"Horrific Vision of Orgrimmar",
"enUS",
},
[93233] = {
"Lord Aram'el",
"Hellfire Citadel",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[241717] = {
"Vengeful Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[135759] = {
"Earthwall Totem",
"Kings' Rest",
"enUS",
},
[115244] = {
"Archmage Xylem",
"The Eye of Eternity - Scenario",
"enUS",
},
[111405] = {
"Shadow Pounder",
"The Emerald Nightmare",
"enUS",
},
[53791] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[241718] = {
"Vengeful Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[234040] = {
"Oblivion Elemental",
"Horrific Vision of Orgrimmar",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[229434] = {
"Melbo the Magnificent",
"Liberation of Undermine",
"enUS",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
"enUS",
},
[234553] = {
"Dark Walker",
"Excavation Site 9",
"enUS",
},
[95282] = {
"Azgalor",
"Hellfire Citadel",
"enUS",
},
[158284] = {
"Craggle Wobbletop",
"Horrific Vision of Stormwind",
"enUS",
},
[159308] = {
"Zealous Adherent",
"Ny'alotha, the Waking City",
"enUS",
},
[229435] = {
"Gallagio Cocktail",
"Liberation of Undermine",
"enUS",
},
[131667] = {
"Soulbound Goliath",
"Waycrest Manor",
"enUS",
},
[158285] = {
"Tinkered Shieldbot",
"Horrific Vision of Stormwind",
"enUS",
},
[134739] = {
"Purification Construct",
"Kings' Rest",
"enUS",
},
[217151] = {
"Dark Bombardier",
"Nightfall Sanctum",
"enUS",
},
[37028] = {
"Kor'kron Stalker",
"Icecrown Citadel",
"enUS",
},
[111151] = {
"Midnight Siphoner",
"The Nighthold",
"enUS",
},
[103217] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[158286] = {
"Reprogrammed Warbot",
"Horrific Vision of Stormwind",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[229437] = {
"Gallagio Dealer",
"Liberation of Undermine",
"enUS",
},
[135764] = {
"Explosive Totem",
"Kings' Rest",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[207939] = {
"Baron Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[126764] = {
"Bladesworn Ravager",
"Antorus, the Burning Throne",
"enUS",
},
[229438] = {
"Gallagio Jackbot",
"Liberation of Undermine",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[227903] = {
"Darkfuse Growler",
"Liberation of Undermine",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[159312] = {
"Living Blood",
"Ny'alotha, the Waking City",
"enUS",
},
[229439] = {
"Gallagio Security",
"Liberation of Undermine",
"enUS",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[227904] = {
"Darkfuse Shredder",
"Liberation of Undermine",
"enUS",
},
[229440] = {
"Princeguard Muscle",
"Liberation of Undermine",
"enUS",
},
[37029] = {
"Kor'kron Reaver",
"Icecrown Citadel",
"enUS",
},
[10381] = {
"Ravaged Cadaver",
"Stratholme",
"enUS",
},
[10413] = {
"Crypt Beast",
"Stratholme",
"enUS",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[229953] = {
"Mug'Zee",
"Liberation of Undermine",
"enUS",
},
[207943] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[157268] = {
"Crawling Corruption",
"Horrific Vision of Orgrimmar",
"enUS",
},
[124207] = {
"Fel-Charged Obfuscator",
"Antorus, the Burning Throne",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[149591] = {
"Rastari Marksman",
"Battle of Dazar'alor",
"enUS",
},
[118065] = {
"Smoldering Infernal",
"Artifact - Acquisition - Tank",
"enUS",
},
[208457] = {
"Skittering Darkness",
"Darkflame Cleft",
"enUS",
},
[160341] = {
"Sewer Beastling",
"Horrific Vision of Stormwind",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[213577] = {
"Spitfire Charger",
"Kriegval's Rest",
"enUS",
},
[148569] = {
"Breakwater Elemental",
"Battle of Dazar'alor",
"enUS",
},
[23318] = {
"Ashtongue Rogue",
"Black Temple",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[37031] = {
"Kor'kron Oracle",
"Icecrown Citadel",
"enUS",
},
[94777] = {
"Morkronn",
"Hellfire Citadel",
"enUS",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[210510] = {
"Flimflam the Cowardly",
"Darkflame Cleft",
"enUS",
},
[231497] = {
"Bombshell Crab",
"Operation: Floodgate",
"enUS",
},
[152669] = {
"Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[17624] = {
"Laughing Skull Warden",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[234058] = {
"Speaker Wicke",
"Nightfall Sanctum",
"enUS",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[37032] = {
"Kor'kron Defender",
"Icecrown Citadel",
"enUS",
},
[94779] = {
"Sovokk",
"Hellfire Citadel",
"enUS",
},
[103225] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[22871] = {
"Teron Gorefiend",
"Black Temple",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
"enUS",
},
[151649] = {
"Defense Bot Mk I",
"Operation: Mechagon",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
"enUS",
},
[19608] = {
"Frayer Wildling",
"Tempest Keep: The Botanica",
"enUS",
},
[115767] = {
"Mistress Sassz'ine",
"Tomb of Sargeras",
"enUS",
},
[76865] = {
"Beastlord Darmac",
"Blackrock Foundry",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
"enUS",
},
[37033] = {
"Kor'kron Invoker",
"Icecrown Citadel",
"enUS",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
"enUS",
},
[10382] = {
"Mangled Cadaver",
"Stratholme",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[132713] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
"enUS",
},
[123191] = {
"Fel Hound",
"Antorus, the Burning Throne",
"enUS",
},
[136297] = {
"Forgotten Denizen",
"Shrine of the Storm",
"enUS",
},
[219221] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[151654] = {
"Deuce Mecha-Buffer",
"Operation: Mechagon",
"enUS",
},
[164451] = {
"Dessia the Decapitator",
"Theater of Pain",
"enUS",
},
[121400] = {
"Accusator Gnazh",
"Tomb of Sargeras",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[236626] = {
"The Underpin",
"Demolition Dome",
"enUS",
},
[90432] = {
"Felfire Flamebelcher",
"Hellfire Citadel",
"enUS",
},
[127799] = {
"Dazar'ai Honor Guard",
"Atal'Dazar",
"enUS",
},
[207450] = {
"Fungal Stabber",
"Mycomancer Cavern",
"enUS",
},
[237651] = {
"Lit Fuse",
"Nightfall Sanctum",
"enUS",
},
[112955] = {
"Shadescale Wyrm",
"The Nighthold",
"enUS",
},
[126776] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
"enUS",
},
[229462] = {
"Balloon",
"Liberation of Undermine",
"enUS",
},
[160871] = {
"Possessed Package",
"Horrific Vision of Stormwind",
"enUS",
},
[19865] = {
"Mutate Horror",
"Tempest Keep: The Botanica",
"enUS",
},
[228951] = {
"Nerubian Stalker",
"The Spiral Weave",
"enUS",
},
[151658] = {
"Strider Tonk",
"Operation: Mechagon",
"enUS",
},
[112956] = {
"Shimmering Manaspine",
"The Nighthold",
"enUS",
},
[80708] = {
"Iron Taskmaster",
"Blackrock Foundry",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[216155] = {
"Skittering Ambusher",
"The Spiral Weave",
"enUS",
},
[228952] = {
"Nerubian Skulker",
"The Spiral Weave",
"enUS",
},
[151659] = {
"Rocket Tonk",
"Operation: Mechagon",
"enUS",
},
[37035] = {
"Kor'kron Vanquisher",
"Icecrown Citadel",
"enUS",
},
[227929] = {
"Princeguard Demolisher",
"Liberation of Undermine",
"enUS",
},
[183396] = {
"Eternal Forger",
"Sepulcher of the First Ones",
"enUS",
},
[228953] = {
"Skittering Intruder",
"The Spiral Weave",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[227930] = {
"Greater Acid Slime",
"Liberation of Undermine",
"enUS",
},
[17306] = {
"Watchkeeper Gargolmar",
"Dastardly Dome",
"enUS",
},
[228954] = {
"Nerubian Marauder",
"The Spiral Weave",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[111166] = {
"Resolute Courtesan",
"The Nighthold",
"enUS",
},
[17626] = {
"Laughing Skull Legionnaire",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[227931] = {
"Oozing Salvage",
"Liberation of Undermine",
"enUS",
},
[183398] = {
"Ancient Sentinel",
"Sepulcher of the First Ones",
"enUS",
},
[233050] = {
"Giga Controls",
"Liberation of Undermine",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[52392] = {
"Gurubashi Master Chef",
"Zul'Gurub",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[227932] = {
"Volatile Slimeling",
"Liberation of Undermine",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[180840] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[123452] = {
"Fel Lord",
"Antorus, the Burning Throne",
"enUS",
},
[202339] = {
"Ancient Tiger",
"Zul'Gurub",
"enUS",
},
[22873] = {
"Coilskar General",
"Black Temple",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[214625] = {
"Kobyss Necromancer",
"Tak-Rethan Abyss",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[167533] = {
"Advent Nevermore",
"Theater of Pain",
"enUS",
},
[202341] = {
"Ancient Bat",
"Zul'Gurub",
"enUS",
},
[128060] = {
"Priestess of Delirium",
"Antorus, the Burning Throne",
"enUS",
},
[203877] = {
"Kobold Thwacker",
"Kriegval's Rest",
"enUS",
},
[147571] = {
"Pa'kura Priestess",
"Battle of Dazar'alor",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[88902] = {
"Mol'dana Two-Blade",
"Blackrock Foundry",
"enUS",
},
[203878] = {
"Kobold Mystic",
"Kriegval's Rest",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[57384] = {
"Cobalt Globule",
"Dragon Soul",
"enUS",
},
[53545] = {
"Molten Spewer",
"Firelands",
"enUS",
},
[10383] = {
"Broken Cadaver",
"Stratholme",
"enUS",
},
[162417] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[95813] = {
"Weaponlord Mehlkhior",
"Hellfire Citadel",
"enUS",
},
[167536] = {
"Harugia the Bloodthirsty",
"Theater of Pain",
"enUS",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[157811] = {
"Lilliam Sparkspindle",
"Horrific Vision of Stormwind",
"enUS",
},
[21338] = {
"Coilfang Leper",
"Dastardly Dome",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[157812] = {
"Billibub Cogspinner",
"Horrific Vision of Stormwind",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[183406] = {
"Colossal Realmcrafter",
"Sepulcher of the First Ones",
"enUS",
},
[167538] = {
"Dokigg the Brutalizer",
"Theater of Pain",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[157813] = {
"Sprite Jumpsprocket",
"Horrific Vision of Stormwind",
"enUS",
},
[18331] = {
"Ethereal Darkcaster",
"Auchindoun: Mana-Tombs",
"enUS",
},
[175729] = {
"Remnant of Ner'zhul",
"Sanctum of Domination",
"enUS",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[37038] = {
"Vengeful Fleshreaper",
"Icecrown Citadel",
"enUS",
},
[18587] = {
"Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[22874] = {
"Coilskar Harpooner",
"Black Temple",
"enUS",
},
[146553] = {
"Kul Tiran Strongarm",
"Battle of Dazar'alor",
"enUS",
},
[175730] = {
"Fatescribe Roh-Kalo",
"Sanctum of Domination",
"enUS",
},
[129599] = {
"Cutwater Knife Juggler",
"Freehold",
"enUS",
},
[175731] = {
"Guardian of the First Ones",
"Sanctum of Domination",
"enUS",
},
[27737] = {
"Risen Zombie",
"Dastardly Dome",
"enUS",
},
[231014] = {
"Loaderbot",
"Operation: Floodgate",
"enUS",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[175732] = {
"Sylvanas Windrunner",
"Sanctum of Domination",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[57386] = {
"Crimson Globule",
"Dragon Soul",
"enUS",
},
[152699] = {
"Voidbound Berserker",
"Horrific Vision of Orgrimmar",
"enUS",
},
[183412] = {
"Dominated Saboteur",
"Sepulcher of the First Ones",
"enUS",
},
[112709] = {
"Promenade Guard",
"The Nighthold",
"enUS",
},
[156795] = {
"SI:7 Informant",
"Horrific Vision of Stormwind",
"enUS",
},
[228458] = {
"One-Armed Bandit",
"Liberation of Undermine",
"enUS",
},
[127810] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
"enUS",
},
[124227] = {
"Volant Kerapteron",
"Antorus, the Burning Throne",
"enUS",
},
[138369] = {
"Footbomb Hooligan",
"The MOTHERLODE!!",
"enUS",
},
[116549] = {
"Backup Singer",
"Return to Karazhan",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
"enUS",
},
[231531] = {
"Territorial Bombshell",
"Liberation of Undermine",
"enUS",
},
[57259] = {
"Twilight Siege Breaker",
"Dragon Soul",
"enUS",
},
[94283] = {
"Shadow Infuser",
"Hellfire Citadel",
"enUS",
},
[166524] = {
"Deathwalker",
"Theater of Pain",
"enUS",
},
[22939] = {
"Temple Acolyte",
"Black Temple",
"enUS",
},
[116550] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[116806] = {
"Razor Ice",
"The Eye of Eternity - Scenario",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[152704] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[80719] = {
"Iron Smith",
"Blackrock Foundry",
"enUS",
},
[94284] = {
"Fiery Enkindler",
"Hellfire Citadel",
"enUS",
},
[177787] = {
"Mawsworn Hopebreaker",
"Sanctum of Domination",
"enUS",
},
[116295] = {
"Archmage Xylem",
"The Eye of Eternity - Scenario",
"enUS",
},
[108361] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[184954] = {
"Ancient Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[148611] = {
"Yoru'cha",
"Battle of Dazar'alor",
"enUS",
},
[157825] = {
"Crazed Tormenter",
"Horrific Vision of Orgrimmar",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[235631] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[10416] = {
"Bile Spewer",
"Stratholme",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[148613] = {
"Commander Broadside",
"Battle of Dazar'alor",
"enUS",
},
[211062] = {
"Bill",
"Fungal Folly",
"enUS",
},
[17309] = {
"Hellfire Watcher",
"Dastardly Dome",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[148614] = {
"Kul Tiran Cannoneer",
"Battle of Dazar'alor",
"enUS",
},
[17693] = {
"Shattered Hand Scout",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[227955] = {
"Darkfuse Skyfire",
"Liberation of Undermine",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[136330] = {
"Soul Thorns",
"Waycrest Manor",
"enUS",
},
[207481] = {
"Spinshroom",
"Fungal Folly",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
"enUS",
},
[231028] = {
"Fiery Dynamite Booty",
"Liberation of Undermine",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[22876] = {
"Coilskar Soothsayer",
"Black Temple",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[180865] = {
"Twisted Warden",
"Sanctum of Domination",
"enUS",
},
[23196] = {
"Bonechewer Behemoth",
"Black Temple",
"enUS",
},
[76884] = {
"Cruelfang",
"Blackrock Foundry",
"enUS",
},
[158343] = {
"Organ of Corruption",
"Ny'alotha, the Waking City",
"enUS",
},
[114251] = {
"Galindre",
"Return to Karazhan",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[184961] = {
"Gnarled Skitter",
"Sepulcher of the First Ones",
"enUS",
},
[234613] = {
"Shadow Remnant",
"Kriegval's Rest",
"enUS",
},
[103758] = {
"Star Augur Etraeus",
"The Nighthold",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[184962] = {
"Gnarled Scavenger",
"Sepulcher of the First Ones",
"enUS",
},
[161416] = {
"Aqir Shadowcrafter",
"Ny'alotha, the Waking City",
"enUS",
},
[227960] = {
"Mech Jockey",
"Liberation of Undermine",
"enUS",
},
[53167] = {
"Unbound Pyrelord",
"Firelands",
"enUS",
},
[234103] = {
"Bilgewater Assessor",
"Excavation Site 9",
"enUS",
},
[227961] = {
"Mechanized Peacekeeper",
"Liberation of Undermine",
"enUS",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[112973] = {
"Duskwatch Weaver",
"The Nighthold",
"enUS",
},
[148621] = {
"Jek'kwa",
"Battle of Dazar'alor",
"enUS",
},
[240759] = {
"Construct of Soridormi",
"Horrific Vision of Stormwind",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[94802] = {
"Voidscribe Aathalos",
"Hellfire Citadel",
"enUS",
},
[235129] = {
"Mechanized Reinforcement",
"The Spiral Weave",
"enUS",
},
[17694] = {
"Shadowmoon Darkcaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[22877] = {
"Coilskar Wrangler",
"Black Temple",
"enUS",
},
[183432] = {
"Ebon Dominator",
"Sepulcher of the First Ones",
"enUS",
},
[148625] = {
"Echo of Krag'wa",
"Battle of Dazar'alor",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[183945] = {
"Unstable Matter",
"Sepulcher of the First Ones",
"enUS",
},
[19486] = {
"Sunseeker Chemist",
"Tempest Keep: The Botanica",
"enUS",
},
[94804] = {
"Shambling Hulk",
"Hellfire Citadel",
"enUS",
},
[152722] = {
"Fallen Voidspeaker",
"Horrific Vision of Stormwind",
"enUS",
},
[225409] = {
"Surging Totem",
"Theater of Pain",
"enUS",
},
[234623] = {
"Quickhands Pilferer",
"Fungal Folly",
"enUS",
},
[123726] = {
"Fel-Powered Purifier",
"Antorus, the Burning Throne",
"enUS",
},
[10417] = {
"Venom Belcher",
"Stratholme",
"enUS",
},
[37813] = {
"Deathbringer Saurfang",
"Icecrown Citadel",
"enUS",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[90199] = {
"Gorefiend",
"Hellfire Citadel",
"enUS",
},
[148118] = {
"Caravan Brutosaur",
"Battle of Dazar'alor",
"enUS",
},
[156820] = {
"Dod",
"Horrific Vision of Stormwind",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[17695] = {
"Shattered Hand Assassin",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[183438] = {
"Chainbound Construct",
"Sepulcher of the First Ones",
"enUS",
},
[135322] = {
"The Golden Serpent",
"Kings' Rest",
"enUS",
},
[52402] = {
"Venomtooth",
"Zul'Gurub",
"enUS",
},
[52530] = {
"Alysrazor",
"Firelands",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[183439] = {
"Mawsworn Annihilator",
"Sepulcher of the First Ones",
"enUS",
},
[160405] = {
"Angry Treant Chair Spirit",
"Horrific Vision of Stormwind",
"enUS",
},
[136347] = {
"Tidesage Initiate",
"Shrine of the Storm",
"enUS",
},
[22878] = {
"Aqueous Lord",
"Black Temple",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[11665] = {
"Lava Annihilator",
"Molten Core",
"enUS",
},
[94808] = {
"Hellfire Guardian",
"Hellfire Citadel",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[104534] = {
"D'zorykx the Trapper",
"The Nighthold",
"enUS",
},
[181395] = {
"Skolex",
"Sepulcher of the First Ones",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[122450] = {
"Garothi Worldbreaker",
"Antorus, the Burning Throne",
"enUS",
},
[130896] = {
"Blackout Barrel",
"Freehold",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
"enUS",
},
[214668] = {
"Venture Co. Patron",
"Khaz Algar (Surface)",
"enUS",
},
[229513] = {
"Darkfuse Stunner",
"Liberation of Undermine",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[114261] = {
"Toe Knee",
"Return to Karazhan",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
"enUS",
},
[181399] = {
"Kin'tessa",
"Sepulcher of the First Ones",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[114262] = {
"Attumen the Huntsman",
"Return to Karazhan",
"enUS",
},
[230028] = {
"Darkfuse Wretch",
"Liberation of Undermine",
"enUS",
},
[123476] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[22879] = {
"Shadowmoon Reaver",
"Black Temple",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[104537] = {
"Fel Lord Kuraz'mal",
"The Nighthold",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[153760] = {
"Enthralled Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[158367] = {
"Basher Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[122965] = {
"Vol'kaal",
"Atal'Dazar",
"enUS",
},
[164510] = {
"Shambling Arbalest",
"Theater of Pain",
"enUS",
},
[123477] = {
"Antoran Doomguard",
"Antorus, the Burning Throne",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[220305] = {
"Shadow-Crazed Hog",
"Mycomancer Cavern",
"enUS",
},
[180379] = {
"Mawsworn Arbalest",
"Sanctum of Domination",
"enUS",
},
[160416] = {
"Angry Ale Barrel Spirit",
"Horrific Vision of Stormwind",
"enUS",
},
[114264] = {
"Midnight",
"Return to Karazhan",
"enUS",
},
[123478] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[234640] = {
"Globikus",
"Liberation of Undermine",
"enUS",
},
[158371] = {
"Zardeth of the Black Claw",
"Horrific Vision of Stormwind",
"enUS",
},
[114265] = {
"Gang Ruffian",
"Return to Karazhan",
"enUS",
},
[17377] = {
"Keli'dan the Breaker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[122967] = {
"Priestess Alun'za",
"Atal'Dazar",
"enUS",
},
[220309] = {
"Shadow-Crazed Hog",
"Mycomancer Cavern",
"enUS",
},
[160420] = {
"Angry Book Spirit",
"Horrific Vision of Stormwind",
"enUS",
},
[156837] = {
"Valeera Sanguinar",
"Horrific Vision of Stormwind",
"enUS",
},
[235154] = {
"Underpaid Brute",
"The Dread Pit",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[122968] = {
"Yazma",
"Atal'Dazar",
"enUS",
},
[139946] = {
"Heart Guardian",
"Temple of Sethraliss",
"enUS",
},
[123480] = {
"Antoran Champion",
"Antorus, the Burning Throne",
"enUS",
},
[22880] = {
"Shadowmoon Champion",
"Black Temple",
"enUS",
},
[134828] = {
"Aqualing",
"Shrine of the Storm",
"enUS",
},
[180385] = {
"Condemned Soul Remnant",
"Sanctum of Domination",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[235156] = {
"Underpaid Brute",
"The Dread Pit",
"enUS",
},
[11666] = {
"Firewalker",
"Molten Core",
"enUS",
},
[158375] = {
"Corruptor Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
"enUS",
},
[94816] = {
"Togdrov",
"Hellfire Citadel",
"enUS",
},
[178851] = {
"Burning Stygia",
"Sanctum of Domination",
"enUS",
},
[52151] = {
"Bloodlord Mandokir",
"Zul'Gurub",
"enUS",
},
[180387] = {
"Mawsworn Paindrinker",
"Sanctum of Domination",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
"enUS",
},
[235158] = {
"Underpaid Brute",
"The Dread Pit",
"enUS",
},
[235670] = {
"0.H-N.0",
"Skittering Breach",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[232599] = {
"Reel Assistant",
"Liberation of Undermine",
"enUS",
},
[233623] = {
"Pyrotechnics",
"Liberation of Undermine",
"enUS",
},
[157354] = {
"Vexiona",
"Ny'alotha, the Waking City",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[180389] = {
"Mawsworn Rageguard",
"Sanctum of Domination",
"enUS",
},
[92514] = {
"Shao'ghun",
"Hellfire Citadel",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[117852] = {
"Tugar Bloodtotem",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
"enUS",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[226459] = {
"Glowmite",
"Mycomancer Cavern",
"enUS",
},
[232602] = {
"Subwoofer",
"Liberation of Undermine",
"enUS",
},
[104288] = {
"Trilliax",
"The Nighthold",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[226460] = {
"Undercrawler Hatchling",
"The Spiral Weave",
"enUS",
},
[114526] = {
"Ghostly Understudy",
"Return to Karazhan",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
"enUS",
},
[94563] = {
"Gorebound Fanatic",
"Hellfire Citadel",
"enUS",
},
[22881] = {
"Aqueous Surger",
"Black Temple",
"enUS",
},
[22945] = {
"Shadowmoon Blood Mage",
"Black Temple",
"enUS",
},
[47162] = {
"Glubtok",
"Dastardly Dome",
"enUS",
},
[180906] = {
"Halondrus",
"Sepulcher of the First Ones",
"enUS",
},
[79208] = {
"Blackrock Enforcer",
"Blackrock Foundry",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[238237] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[219810] = {
"Nerubian Ritualist",
"Skittering Breach",
"enUS",
},
[234655] = {
"Globlin",
"Liberation of Undermine",
"enUS",
},
[54073] = {
"Flamewaker Hound Master",
"Firelands",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[76906] = {
"Operator Thogar",
"Blackrock Foundry",
"enUS",
},
[178862] = {
"Screamspike",
"Sanctum of Domination",
"enUS",
},
[228514] = {
"Pit Mechanic",
"Liberation of Undermine",
"enUS",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[219301] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[17827] = {
"Claw",
"Coilfang: The Underbog",
"enUS",
},
[56249] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[125535] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[128095] = {
"Sister of the Lash",
"Antorus, the Burning Throne",
"enUS",
},
[22882] = {
"Shadowmoon Deathshaper",
"Black Temple",
"enUS",
},
[22946] = {
"Shadowmoon War Hound",
"Black Temple",
"enUS",
},
[185008] = {
"Volatile Sentry",
"Sepulcher of the First Ones",
"enUS",
},
[148665] = {
"Rastari Royal Guard",
"Battle of Dazar'alor",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[23330] = {
"Dragonmaw Wind Reaver",
"Black Temple",
"enUS",
},
[23394] = {
"Promenade Sentinel",
"Black Temple",
"enUS",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[146107] = {
"Living Bomb",
"Battle of Dazar'alor",
"enUS",
},
[56250] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[148667] = {
"Rastari Punisher",
"Battle of Dazar'alor",
"enUS",
},
[130400] = {
"Irontide Crusher",
"Freehold",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[159417] = {
"Demented Knife-Twister",
"Ny'alotha, the Waking City",
"enUS",
},
[24674] = {
"Phoenix",
"Magisters' Terrace",
"enUS",
},
[53691] = {
"Shannox",
"Firelands",
"enUS",
},
[203951] = {
"Kobold Skullface",
"Kriegval's Rest",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[122467] = {
"Asara, Mother of Night",
"Antorus, the Burning Throne",
"enUS",
},
[17380] = {
"Broggok",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[211119] = {
"Kasthrik",
"Fungal Folly",
"enUS",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
"enUS",
},
[56251] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[180407] = {
"Gorgoan Sentinel",
"Sanctum of Domination",
"enUS",
},
[92523] = {
"Vazeel'fazag",
"Hellfire Citadel",
"enUS",
},
[48445] = {
"Oaf Lackey",
"Dastardly Dome",
"enUS",
},
[122468] = {
"Noura, Mother of Flames",
"Antorus, the Burning Throne",
"enUS",
},
[18404] = {
"Bloodwarder Steward",
"Tempest Keep: The Botanica",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[22883] = {
"Aqueous Spawn",
"Black Temple",
"enUS",
},
[22947] = {
"Mother Shahraz",
"Black Temple",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[122469] = {
"Diima, Mother of Gloom",
"Antorus, the Burning Throne",
"enUS",
},
[23523] = {
"Ashtongue Elementalist",
"Black Temple",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[56252] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[116839] = {
"Corrupting Shadows",
"The Eye of Eternity - Scenario",
"enUS",
},
[52413] = {
"Zulian Gnasher",
"Zul'Gurub",
"enUS",
},
[113512] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[166079] = {
"Brittlebone Crossbowman",
"The Necrotic Wake",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[159425] = {
"Occult Shadowmender",
"Ny'alotha, the Waking City",
"enUS",
},
[136391] = {
"Heart Guardian",
"Temple of Sethraliss",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
"enUS",
},
[217268] = {
"Weeping Shade",
"Nightfall Sanctum",
"enUS",
},
[92526] = {
"Zerik'shekor",
"Hellfire Citadel",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[17381] = {
"The Maker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[111210] = {
"Searing Infernal",
"The Nighthold",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[180415] = {
"Mawsworn Axeguard",
"Sanctum of Domination",
"enUS",
},
[52414] = {
"Tor-Tun",
"Zul'Gurub",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[93295] = {
"Darkcaster Adept",
"Hellfire Citadel",
"enUS",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[18405] = {
"Tempest-Forge Peacekeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[53694] = {
"Riplimb",
"Firelands",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[22948] = {
"Gurtogg Bloodboil",
"Black Temple",
"enUS",
},
[180417] = {
"Loom Artificer",
"Sanctum of Domination",
"enUS",
},
[11668] = {
"Firelord",
"Molten Core",
"enUS",
},
[23524] = {
"Ashtongue Spiritbinder",
"Black Temple",
"enUS",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[19557] = {
"Greater Frayer",
"Tempest Keep: The Botanica",
"enUS",
},
[94832] = {
"Gorebound Assassin",
"Hellfire Citadel",
"enUS",
},
[181954] = {
"Anduin Wrynn",
"Sepulcher of the First Ones",
"enUS",
},
[111980] = {
"Nightmother",
"The Emerald Nightmare",
"enUS",
},
[213179] = {
"Avanoxx",
"Ara-Kara, City of Echoes",
"enUS",
},
[230583] = {
"Sprocketmonger Lockenstock",
"Liberation of Undermine",
"enUS",
},
[114284] = {
"Elfyra",
"Return to Karazhan",
"enUS",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[53695] = {
"Rageface",
"Firelands",
"enUS",
},
[87411] = {
"Workshop Guardian",
"Blackrock Foundry",
"enUS",
},
[37955] = {
"Blood-Queen Lana'thel",
"Icecrown Citadel",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[93298] = {
"Shadowheart Fiend",
"Hellfire Citadel",
"enUS",
},
[158411] = {
"Unstable Servant",
"Horrific Vision of Stormwind",
"enUS",
},
[114541] = {
"Spectral Patron",
"Return to Karazhan",
"enUS",
},
[95602] = {
"Mystic Velruun",
"Hellfire Citadel",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[125547] = {
"Feltouched Skitterer",
"Antorus, the Burning Throne",
"enUS",
},
[145616] = {
"King Rastakhan",
"Battle of Dazar'alor",
"enUS",
},
[162508] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[26532] = {
"Chrono-Lord Epoch",
"Dastardly Dome",
"enUS",
},
[114542] = {
"Ghostly Philanthropist",
"Return to Karazhan",
"enUS",
},
[22885] = {
"Dragon Turtle",
"Black Temple",
"enUS",
},
[22949] = {
"Gathios the Shatterer",
"Black Temple",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[137940] = {
"Safety Shark",
"The MOTHERLODE!!",
"enUS",
},
[122477] = {
"F'harg",
"Antorus, the Burning Throne",
"enUS",
},
[180426] = {
"Feeding Horror",
"Sanctum of Domination",
"enUS",
},
[90485] = {
"Felfire Artillery",
"Hellfire Citadel",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[157904] = {
"Aqir Scarab",
"Horrific Vision of Orgrimmar",
"enUS",
},
[183498] = {
"Illicit Collector",
"Sepulcher of the First Ones",
"enUS",
},
[180427] = {
"Loom Guardian",
"Sanctum of Domination",
"enUS",
},
[52417] = {
"Shredtooth Frenzy",
"Zul'Gurub",
"enUS",
},
[125549] = {
"Hungering Stalker",
"Antorus, the Burning Throne",
"enUS",
},
[211140] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[93813] = {
"Contracted Engineer",
"Hellfire Citadel",
"enUS",
},
[57280] = {
"Twilight Siege Captain",
"Dragon Soul",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[16807] = {
"Grand Warlock Nethekurse",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[183501] = {
"Artificer Xy'mox",
"Sepulcher of the First Ones",
"enUS",
},
[114801] = {
"Spectral Apprentice",
"Return to Karazhan",
"enUS",
},
[156884] = {
"Essence of Vita",
"Ny'alotha, the Waking City",
"enUS",
},
[233154] = {
"Stagehand",
"Liberation of Undermine",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[52418] = {
"Lost Offspring of Gahz'ranka",
"Zul'Gurub",
"enUS",
},
[93303] = {
"Slavering Hound",
"Hellfire Citadel",
"enUS",
},
[36678] = {
"Professor Putricide",
"Icecrown Citadel",
"enUS",
},
[114802] = {
"Spectral Journeyman",
"Return to Karazhan",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
"enUS",
},
[226502] = {
"Toad",
"Mycomancer Cavern",
"enUS",
},
[23398] = {
"Angered Soul Fragment",
"Black Temple",
"enUS",
},
[126832] = {
"Skycap'n Kragg",
"Freehold",
"enUS",
},
[114803] = {
"Spectral Stable Hand",
"Return to Karazhan",
"enUS",
},
[221896] = {
"Web General Ab'enar",
"Earthcrawl Mines",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[184530] = {
"Eternal Sentry",
"Sepulcher of the First Ones",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[84859] = {
"Iron Cleaver",
"Blackrock Foundry",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
"enUS",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[53187] = {
"Flamewaker Animator",
"Firelands",
"enUS",
},
[114804] = {
"Spectral Charger",
"Return to Karazhan",
"enUS",
},
[16808] = {
"Warchief Kargath Bladefist",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[113013] = {
"Felsworn Shadowblade",
"The Nighthold",
"enUS",
},
[121459] = {
"Bile Spitter Egg",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[84860] = {
"Iron Earthbinder",
"Blackrock Foundry",
"enUS",
},
[77182] = {
"Oregorger",
"Blackrock Foundry",
"enUS",
},
[151773] = {
"Junkyard D.0.G.",
"Operation: Mechagon",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[30245] = {
"Nexus Lord",
"The Eye of Eternity",
"enUS",
},
[121460] = {
"Bile Spitter",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[227532] = {
"Faceless Devotee",
"Skittering Breach",
"enUS",
},
[18344] = {
"Nexus-Prince Shaffar",
"Auchindoun: Mana-Tombs",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[233675] = {
"Alleria Windrunner",
"Horrific Vision of Stormwind",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[22887] = {
"High Warlord Naj'entus",
"Black Temple",
"enUS",
},
[22951] = {
"Lady Malande",
"Black Temple",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[222927] = {
"Sacred Flame Vintner",
"Priory of the Sacred Flame",
"enUS",
},
[93308] = {
"Portal Guardian",
"Hellfire Citadel",
"enUS",
},
[23399] = {
"Suffering Soul Fragment",
"Black Temple",
"enUS",
},
[220368] = {
"Failed Batch",
"Cinderbrew Meadery",
"enUS",
},
[120182] = {
"Tormented Priestess",
"Tomb of Sargeras",
"enUS",
},
[148195] = {
"Hateful Shade",
"Battle of Dazar'alor",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
"enUS",
},
[216275] = {
"Brann's Epic Egg",
"Skittering Breach",
"enUS",
},
[233679] = {
"Therum Deepforge",
"Horrific Vision of Stormwind",
"enUS",
},
[111225] = {
"Chaos Mage Beleron",
"The Nighthold",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[10390] = {
"Skeletal Guardian",
"Stratholme",
"enUS",
},
[95613] = {
"Binder Hallaani",
"Hellfire Citadel",
"enUS",
},
[16809] = {
"Warbringer O'mrogg",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[121975] = {
"Aggramar",
"Antorus, the Burning Throne",
"enUS",
},
[10678] = {
"Plagued Hatchling",
"Dastardly Dome",
"enUS",
},
[233681] = {
"Magister Umbric",
"Horrific Vision of Stormwind",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[218325] = {
"Swarming Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[78978] = {
"Darkshard Gnasher",
"Blackrock Foundry",
"enUS",
},
[95614] = {
"Binder Eloah",
"Hellfire Citadel",
"enUS",
},
[11030] = {
"Mindless Undead",
"Stratholme",
"enUS",
},
[52422] = {
"Kaulema the Mover",
"Zul'Gurub",
"enUS",
},
[158437] = {
"Fallen Taskmaster",
"Horrific Vision of Stormwind",
"enUS",
},
[148200] = {
"Restless Bones",
"Battle of Dazar'alor",
"enUS",
},
[111227] = {
"Felweaver Pharamere",
"The Nighthold",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
"enUS",
},
[228053] = {
"Goblin Sapper Bot",
"Liberation of Undermine",
"enUS",
},
[22952] = {
"Veras Darkshadow",
"Black Temple",
"enUS",
},
[120697] = {
"Worshiper of Elune",
"Tomb of Sargeras",
"enUS",
},
[233684] = {
"Overlord Mathias Shaw",
"Horrific Vision of Stormwind",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[23400] = {
"Illidari Archon",
"Black Temple",
"enUS",
},
[233685] = {
"Slavemaster Ul'rok",
"Horrific Vision of Stormwind",
"enUS",
},
[152809] = {
"Alx'kov the Infested",
"Horrific Vision of Stormwind",
"enUS",
},
[222936] = {
"Sweet-Sting Worker",
"Priory of the Sacred Flame",
"enUS",
},
[91521] = {
"Vindicator Bramu",
"Hellfire Citadel",
"enUS",
},
[56262] = {
"Elementium Bolt",
"Dragon Soul",
"enUS",
},
[135406] = {
"Animated Gold",
"Kings' Rest",
"enUS",
},
[131823] = {
"Sister Malady",
"Waycrest Manor",
"enUS",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
"enUS",
},
[57158] = {
"Earthen Destroyer",
"Dragon Soul",
"enUS",
},
[24552] = {
"Sliver",
"Magisters' Terrace",
"enUS",
},
[36939] = {
"High Overlord Saurfang",
"Icecrown Citadel",
"enUS",
},
[131824] = {
"Sister Solena",
"Waycrest Manor",
"enUS",
},
[53575] = {
"Lava Wielder",
"Firelands",
"enUS",
},
[91522] = {
"Protector Bajunt",
"Hellfire Citadel",
"enUS",
},
[131825] = {
"Sister Briar",
"Waycrest Manor",
"enUS",
},
[133361] = {
"Wasting Servant",
"Waycrest Manor",
"enUS",
},
[237272] = {
"Underpin's Friend's Broker",
"Sidestreet Sluice",
"enUS",
},
[102784] = {
"Void Tendril",
"Tirisfal Glades",
"enUS",
},
[235737] = {
"Bomb Tail",
"Liberation of Undermine",
"enUS",
},
[17770] = {
"Hungarfen",
"Coilfang: The Underbog",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[185574] = {
"Dominated Saboteur",
"Sepulcher of the First Ones",
"enUS",
},
[239833] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[57159] = {
"Earthen Soldier",
"Dragon Soul",
"enUS",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[22953] = {
"Wrathbone Flayer",
"Black Temple",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[234204] = {
"Congealed Clot",
"Excavation Site 9",
"enUS",
},
[23337] = {
"Illidari Centurion",
"Black Temple",
"enUS",
},
[23401] = {
"Hungering Soul Fragment",
"Black Temple",
"enUS",
},
[134389] = {
"Venomous Ophidian",
"Temple of Sethraliss",
"enUS",
},
[237276] = {
"Underpin's Friend's Mother",
"Skittering Breach",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[234205] = {
"Corruption Parasite",
"Excavation Site 9",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[134390] = {
"Sand-crusted Striker",
"Temple of Sethraliss",
"enUS",
},
[234206] = {
"Nightmare Crawler",
"Excavation Site 9",
"enUS",
},
[210148] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[126333] = {
"Felseeker Ritualist",
"Antorus, the Burning Throne",
"enUS",
},
[57160] = {
"Ancient Water Lord",
"Dragon Soul",
"enUS",
},
[24553] = {
"Apoko",
"Magisters' Terrace",
"enUS",
},
[234207] = {
"Tainted Feaster",
"Excavation Site 9",
"enUS",
},
[24745] = {
"Pure Energy",
"Magisters' Terrace",
"enUS",
},
[10391] = {
"Skeletal Berserker",
"Stratholme",
"enUS",
},
[120191] = {
"Eternal Soulguard",
"Tomb of Sargeras",
"enUS",
},
[92038] = {
"Salivating Bloodthirster",
"Hellfire Citadel",
"enUS",
},
[234208] = {
"Hideous Amalgamation",
"Excavation Site 9",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[234209] = {
"Coagulated Mass",
"Excavation Site 9",
"enUS",
},
[185581] = {
"Eternal Forger",
"Sepulcher of the First Ones",
"enUS",
},
[17771] = {
"Murkblood Oracle",
"Coilfang: The Underbog",
"enUS",
},
[138489] = {
"Shadow of Zul",
"Kings' Rest",
"enUS",
},
[92039] = {
"Bleeding Grunt",
"Hellfire Citadel",
"enUS",
},
[229603] = {
"Darkfuse Flare",
"Liberation of Undermine",
"enUS",
},
[234210] = {
"Silent Slitherer",
"Excavation Site 9",
"enUS",
},
[185582] = {
"Eternal Assembler",
"Sepulcher of the First Ones",
"enUS",
},
[18155] = {
"Bloodfalcon",
"Tempest Keep: The Botanica",
"enUS",
},
[126847] = {
"Captain Raoul",
"Freehold",
"enUS",
},
[156406] = {
"Voidbound Honor Guard",
"Horrific Vision of Orgrimmar",
"enUS",
},
[210153] = {
"Ol' Waxbeard",
"Darkflame Cleft",
"enUS",
},
[22954] = {
"Illidari Fearbringer",
"Black Temple",
"enUS",
},
[23018] = {
"Shadowmoon Houndmaster",
"Black Temple",
"enUS",
},
[121473] = {
"Coercitor Nixa",
"Tomb of Sargeras",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[23402] = {
"Illidari Battle-mage",
"Black Temple",
"enUS",
},
[142587] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[126848] = {
"Captain Eudora",
"Freehold",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[120194] = {
"Ghostly Acolyte",
"Tomb of Sargeras",
"enUS",
},
[112260] = {
"Dreadsoul Defiler",
"The Emerald Nightmare",
"enUS",
},
[92041] = {
"Bleeding Darkcaster",
"Hellfire Citadel",
"enUS",
},
[117123] = {
"Tidescale Legionnaire",
"Tomb of Sargeras",
"enUS",
},
[214251] = {
"Kobyss Witherer",
"Tak-Rethan Abyss",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
"enUS",
},
[115844] = {
"Goroth",
"Tomb of Sargeras",
"enUS",
},
[112261] = {
"Dreadsoul Corruptor",
"The Emerald Nightmare",
"enUS",
},
[213741] = {
"Voidstone Awakened",
"The Rookery",
"enUS",
},
[125570] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[137473] = {
"Guard Captain Atu",
"Kings' Rest",
"enUS",
},
[30249] = {
"Scion of Eternity",
"The Eye of Eternity",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[170234] = {
"Oppressive Banner",
"Theater of Pain",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[235755] = {
"Bleevus Vermancer",
"Liberation of Undermine",
"enUS",
},
[22955] = {
"Charming Patron",
"Black Temple",
"enUS",
},
[23083] = {
"Shadowmoon Riding Hound",
"Black Temple",
"enUS",
},
[23147] = {
"Shadowmoon Grunt",
"Black Temple",
"enUS",
},
[101002] = {
"Krosus",
"The Nighthold",
"enUS",
},
[125828] = {
"Christoff",
"Atal'Dazar",
"enUS",
},
[23339] = {
"Illidari Heartseeker",
"Black Temple",
"enUS",
},
[23403] = {
"Illidari Assassin",
"Black Temple",
"enUS",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[94604] = {
"Gorebound Corruptor",
"Hellfire Citadel",
"enUS",
},
[218865] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[137989] = {
"Embalming Fluid",
"Kings' Rest",
"enUS",
},
[220401] = {
"Pale Priest",
"City of Threads",
"enUS",
},
[131847] = {
"Waycrest Reveler",
"Waycrest Manor",
"enUS",
},
[186106] = {
"Overthrown Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
"enUS",
},
[130436] = {
"Off-Duty Laborer",
"The MOTHERLODE!!",
"enUS",
},
[114312] = {
"Moroes",
"Return to Karazhan",
"enUS",
},
[24555] = {
"Garaxxas",
"Magisters' Terrace",
"enUS",
},
[24683] = {
"Sunblade Mage Guard",
"UNKNOWN",
"enUS",
},
[94861] = {
"Grim Ambusher",
"Hellfire Citadel",
"enUS",
},
[133384] = {
"Merektha",
"Temple of Sethraliss",
"enUS",
},
[151812] = {
"Detect-o-Bot",
"Operation: Mechagon",
"enUS",
},
[131849] = {
"Crazed Marksman",
"Waycrest Manor",
"enUS",
},
[76946] = {
"Faultline",
"Blackrock Foundry",
"enUS",
},
[130437] = {
"Mine Rat",
"The MOTHERLODE!!",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[131850] = {
"Maddened Survivalist",
"Waycrest Manor",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[95630] = {
"Construct Peacekeeper",
"Hellfire Citadel",
"enUS",
},
[229619] = {
"Blazing Fueldemon",
"Liberation of Undermine",
"enUS",
},
[213751] = {
"Dynamite Mine Cart",
"Darkflame Cleft",
"enUS",
},
[238833] = {
"Reformed Fury",
"Nightfall Sanctum",
"enUS",
},
[56781] = {
"Goriona",
"Dragon Soul",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
"enUS",
},
[94607] = {
"Gorebound Cauterizer",
"Hellfire Citadel",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[120201] = {
"Spectral Guardian",
"Tomb of Sargeras",
"enUS",
},
[22956] = {
"Priestess of Torment",
"Black Temple",
"enUS",
},
[37970] = {
"Prince Valanar",
"Icecrown Citadel",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[133389] = {
"Galvazzt",
"Temple of Sethraliss",
"enUS",
},
[137485] = {
"Bloodsworn Agent",
"Kings' Rest",
"enUS",
},
[95632] = {
"Sargerei Enforcer",
"Hellfire Citadel",
"enUS",
},
[16151] = {
"Midnight",
"Karazhan",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
"enUS",
},
[24556] = {
"Zelfan",
"Magisters' Terrace",
"enUS",
},
[24684] = {
"Sunblade Blood Knight",
"UNKNOWN",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[136976] = {
"T'zala",
"Kings' Rest",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
"enUS",
},
[157452] = {
"Nightmare Antigen",
"Ny'alotha, the Waking City",
"enUS",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
"enUS",
},
[237305] = {
"Underpin's Friend of a Friend",
"Sidestreet Sluice",
"enUS",
},
[100497] = {
"Ursoc",
"The Emerald Nightmare",
"enUS",
},
[80534] = {
"Ornery Ironhoof",
"Blackrock Foundry",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[123532] = {
"Dark Keeper",
"Antorus, the Burning Throne",
"enUS",
},
[57807] = {
"Twilight Frost Evoker",
"Dragon Soul",
"enUS",
},
[158478] = {
"Corruption Tumor",
"Horrific Vision of Stormwind",
"enUS",
},
[22957] = {
"Mistress of Dementia",
"Black Temple",
"enUS",
},
[37972] = {
"Prince Keleseth",
"Icecrown Citadel",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[23469] = {
"Enslaved Soul",
"Black Temple",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[123533] = {
"Tarneth",
"Antorus, the Burning Throne",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[95636] = {
"Sargerei Adjutant",
"Hellfire Citadel",
"enUS",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[52305] = {
"Toxic Husk",
"Zul'Gurub",
"enUS",
},
[20078] = {
"Bloodwarder Reservist",
"Tempest Keep: The Botanica",
"enUS",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[134423] = {
"Abyss Dweller",
"Shrine of the Storm",
"enUS",
},
[24557] = {
"Kagani Nightstrike",
"Magisters' Terrace",
"enUS",
},
[24685] = {
"Sunblade Magister",
"UNKNOWN",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[163089] = {
"Disgusting Refuse",
"Theater of Pain",
"enUS",
},
[120719] = {
"Lunar Priestess",
"Tomb of Sargeras",
"enUS",
},
[37973] = {
"Prince Taldaram",
"Icecrown Citadel",
"enUS",
},
[113041] = {
"Infected Diemetradon",
"The Emerald Nightmare",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[136984] = {
"Reban",
"Kings' Rest",
"enUS",
},
[225539] = {
"Kobold Ambusher",
"Kriegval's Rest",
"enUS",
},
[10809] = {
"Stonespine",
"Stratholme",
"enUS",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[87448] = {
"Ironworker",
"Blackrock Foundry",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[120720] = {
"Lunar Guard",
"Tomb of Sargeras",
"enUS",
},
[52306] = {
"Tangled Vine",
"Zul'Gurub",
"enUS",
},
[52434] = {
"Gurubashi Villager",
"Zul'Gurub",
"enUS",
},
[156949] = {
"Armsmaster Terenson",
"Horrific Vision of Stormwind",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[127119] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[22894] = {
"Cyclone Totem",
"Black Temple",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[120721] = {
"Lunar Archer",
"Tomb of Sargeras",
"enUS",
},
[113043] = {
"Abyss Watcher",
"The Nighthold",
"enUS",
},
[186128] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[11673] = {
"Ancient Core Hound",
"Molten Core",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
"enUS",
},
[118930] = {
"Ixallon the Soulbreaker",
"Tomb of Sargeras",
"enUS",
},
[95640] = {
"Sargerei Soul Cleaver",
"Hellfire Citadel",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[16152] = {
"Attumen the Huntsman",
"Karazhan",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[223497] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[24558] = {
"Ellrys Duskhallow",
"Magisters' Terrace",
"enUS",
},
[24686] = {
"Sunblade Warlock",
"UNKNOWN",
"enUS",
},
[94873] = {
"Felfire Flamebelcher",
"Hellfire Citadel",
"enUS",
},
[231176] = {
"Scaffolding",
"Operation: Floodgate",
"enUS",
},
[223498] = {
"Bee-let",
"Cinderbrew Meadery",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[157467] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
"enUS",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[17264] = {
"Bonechewer Ravener",
"Dastardly Dome",
"enUS",
},
[216333] = {
"Bloodstained Assistant",
"Ara-Kara, City of Echoes",
"enUS",
},
[151325] = {
"Alarm-o-Bot",
"Operation: Mechagon",
"enUS",
},
[94618] = {
"Cattwen",
"Hellfire Citadel",
"enUS",
},
[95642] = {
"Korvos",
"Hellfire Citadel",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[217870] = {
"Devouring Shade",
"Nightfall Sanctum",
"enUS",
},
[163612] = {
"Voidspawn Annihilator",
"Ny'alotha, the Waking City",
"enUS",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[135971] = {
"Faithless Conscript",
"Temple of Sethraliss",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[216336] = {
"Ravenous Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[23215] = {
"Ashtongue Sorcerer",
"Black Temple",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[220432] = {
"Particularly Bad Guy",
"Mycomancer Cavern",
"enUS",
},
[122773] = {
"Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[127124] = {
"Freehold Barhand",
"Freehold",
"enUS",
},
[19632] = {
"Lykul Stinger",
"Coilfang: The Underbog",
"enUS",
},
[215826] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[52437] = {
"Gurubashi Refugee",
"Zul'Gurub",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[184603] = {
"Ancient Bufonid",
"Sepulcher of the First Ones",
"enUS",
},
[24687] = {
"Sunblade Physician",
"UNKNOWN",
"enUS",
},
[24815] = {
"Sunblade Imp",
"UNKNOWN",
"enUS",
},
[10394] = {
"Black Guard Sentry",
"Stratholme",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[125590] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
"enUS",
},
[216341] = {
"Jabbing Flyer",
"Ara-Kara, City of Echoes",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[161571] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[220437] = {
"Overseer Kaskel",
"The Spiral Weave",
"enUS",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[53206] = {
"Hell Hound",
"Firelands",
"enUS",
},
[176929] = {
"Remnant of Kel'Thuzad",
"Sanctum of Domination",
"enUS",
},
[22896] = {
"Ashtongue Searing Totem",
"Black Temple",
"enUS",
},
[22960] = {
"Dragonmaw Wyrmcaller",
"Black Temple",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[23216] = {
"Ashtongue Defender",
"Black Temple",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[81315] = {
"Iron Crack-Shot",
"Blackrock Foundry",
"enUS",
},
[163622] = {
"Goregrind Bits",
"The Necrotic Wake",
"enUS",
},
[19505] = {
"Sunseeker Channeler",
"Tempest Keep: The Botanica",
"enUS",
},
[111004] = {
"Gelatinized Decay",
"The Emerald Nightmare",
"enUS",
},
[19633] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[163623] = {
"Rotspew Leftovers",
"The Necrotic Wake",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[113052] = {
"Dreadguard",
"The Nighthold",
"enUS",
},
[121498] = {
"Twilight Soul",
"Tomb of Sargeras",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[133935] = {
"Animated Guardian",
"Kings' Rest",
"enUS",
},
[77477] = {
"Marak the Blooded",
"Blackrock Foundry",
"enUS",
},
[20465] = {
"Underbog Frenzy",
"Coilfang: The Underbog",
"enUS",
},
[24688] = {
"Wretched Skulker",
"Magisters' Terrace",
"enUS",
},
[37595] = {
"Darkfallen Blood Knight",
"Icecrown Citadel",
"enUS",
},
[236823] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[135472] = {
"Zanazal the Wise",
"Kings' Rest",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[121499] = {
"Fel Surge Totem",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[93858] = {
"Hulking Berserker",
"Hellfire Citadel",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
"enUS",
},
[52440] = {
"Gub",
"Zul'Gurub",
"enUS",
},
[81318] = {
"Iron Gunnery Sergeant",
"Blackrock Foundry",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[241433] = {
"Awakened Attendant",
"The Spiral Weave",
"enUS",
},
[135475] = {
"Kula the Butcher",
"Kings' Rest",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[22897] = {
"Summoned Windfury Totem",
"Black Temple",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[124828] = {
"Argus the Unmaker",
"Antorus, the Burning Throne",
"enUS",
},
[155951] = {
"Ruffer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[235292] = {
"Flinging Flicker",
"Skittering Breach",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[155952] = {
"Suffer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[144691] = {
"Ma'ra Grimfang",
"Battle of Dazar'alor",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[225568] = {
"Kobold Guardian",
"Kriegval's Rest",
"enUS",
},
[52441] = {
"Curious Jungle Monkey",
"Zul'Gurub",
"enUS",
},
[144692] = {
"Anathos Firecaller",
"Battle of Dazar'alor",
"enUS",
},
[133943] = {
"Minion of Zul",
"Kings' Rest",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[36829] = {
"Deathspeaker High Priest",
"Icecrown Citadel",
"enUS",
},
[36957] = {
"Kor'kron Reaver",
"Icecrown Citadel",
"enUS",
},
[24689] = {
"Wretched Bruiser",
"Magisters' Terrace",
"enUS",
},
[181548] = {
"Prototype of Absolution",
"Sepulcher of the First Ones",
"enUS",
},
[235295] = {
"Flinging Flicker",
"Skittering Breach",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[133944] = {
"Aspix",
"Temple of Sethraliss",
"enUS",
},
[87719] = {
"Ogron Hauler",
"Blackrock Foundry",
"enUS",
},
[181549] = {
"Prototype of War",
"Sepulcher of the First Ones",
"enUS",
},
[163122] = {
"Brittlebone Warrior",
"The Necrotic Wake",
"enUS",
},
[17395] = {
"Shadowmoon Summoner",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[156980] = {
"Essence of Void",
"Ny'alotha, the Waking City",
"enUS",
},
[112290] = {
"Horrid Eagle",
"The Emerald Nightmare",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[181551] = {
"Prototype of Duty",
"Sepulcher of the First Ones",
"enUS",
},
[235298] = {
"Flinging Flicker",
"Skittering Breach",
"enUS",
},
[18419] = {
"Bloodwarder Greenkeeper",
"Tempest Keep: The Botanica",
"enUS",
},
[184623] = {
"Ancient Avian",
"Sepulcher of the First Ones",
"enUS",
},
[57817] = {
"Stormborn Myrmidon",
"Dragon Soul",
"enUS",
},
[232228] = {
"Waterworks Bottomfeeder",
"Operation: Floodgate",
"enUS",
},
[22962] = {
"Mistress of Woe",
"Black Temple",
"enUS",
},
[31216] = {
"Wangz",
"Theater of Pain",
"enUS",
},
[112803] = {
"Astrologer Jarin",
"The Nighthold",
"enUS",
},
[117154] = {
"Razorjaw Acolyte",
"Tomb of Sargeras",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[19507] = {
"Sunseeker Gene-Splicer",
"Tempest Keep: The Botanica",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[153401] = {
"K'thir Dominator",
"Horrific Vision of Orgrimmar",
"enUS",
},
[91305] = {
"Fel Iron Summoner",
"Hellfire Citadel",
"enUS",
},
[52059] = {
"High Priestess Kilnara",
"Zul'Gurub",
"enUS",
},
[112804] = {
"Trained Shadescale",
"The Nighthold",
"enUS",
},
[20083] = {
"Bloodwarder Mender",
"Tempest Keep: The Botanica",
"enUS",
},
[52571] = {
"Majordomo Staghelm",
"Firelands",
"enUS",
},
[76973] = {
"Hans'gar",
"Blackrock Foundry",
"enUS",
},
[236838] = {
"Overcharged Bot",
"The Spiral Weave",
"enUS",
},
[184627] = {
"Dominated Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[24690] = {
"Wretched Husk",
"Magisters' Terrace",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[229161] = {
"Darkfuse Brute",
"Liberation of Undermine",
"enUS",
},
[92330] = {
"Soul of Socrethar",
"Hellfire Citadel",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[76974] = {
"Franzok",
"Blackrock Foundry",
"enUS",
},
[216365] = {
"Winged Carrier",
"Ara-Kara, City of Echoes",
"enUS",
},
[229162] = {
"Darkfuse Houndmaster",
"Liberation of Undermine",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[56923] = {
"Twilight Sapper",
"Dragon Soul",
"enUS",
},
[77231] = {
"Enforcer Sorka",
"Blackrock Foundry",
"enUS",
},
[18420] = {
"Sunseeker Geomancer",
"Tempest Keep: The Botanica",
"enUS",
},
[160061] = {
"Crawling Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[176953] = {
"Mawsworn Flamehand",
"Sanctum of Domination",
"enUS",
},
[57819] = {
"Corrupted Fragment",
"Dragon Soul",
"enUS",
},
[112039] = {
"Screeching Spiderling",
"The Emerald Nightmare",
"enUS",
},
[22963] = {
"Bonechewer Worker",
"Black Temple",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[19508] = {
"Sunseeker Herbalist",
"Tempest Keep: The Botanica",
"enUS",
},
[136005] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
"enUS",
},
[137029] = {
"Ordnance Specialist",
"The MOTHERLODE!!",
"enUS",
},
[105322] = {
"Deathglare Tentacle",
"The Emerald Nightmare",
"enUS",
},
[127019] = {
"Training Dummy",
"Freehold",
"enUS",
},
[136006] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
"enUS",
},
[103769] = {
"Xavius",
"The Emerald Nightmare",
"enUS",
},
[120473] = {
"Tidescale Combatant",
"Tomb of Sargeras",
"enUS",
},
[231727] = {
"1500-Pound \"Dud\"",
"Liberation of Undermine",
"enUS",
},
[228144] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[111398] = {
"Nightmare Amalgamation",
"The Emerald Nightmare",
"enUS",
},
[111413] = {
"Dark Devourers",
"The Emerald Nightmare",
"enUS",
},
[156145] = {
"Burrowing Appendage",
"Horrific Vision of Stormwind",
"enUS",
},
[176957] = {
"Shadowsteel Colossus",
"Sanctum of Domination",
"enUS",
},
[37217] = {
"Precious",
"Icecrown Citadel",
"enUS",
},
[158376] = {
"Psychus",
"Ny'alotha, the Waking City",
"enUS",
},
[180990] = {
"The Jailer",
"Sepulcher of the First Ones",
"enUS",
},
[114715] = {
"Ghostly Chef",
"Return to Karazhan",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[156866] = {
"Ra-den",
"Ny'alotha, the Waking City",
"enUS",
},
[53898] = {
"Voracious Hatchling",
"Firelands",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[113321] = {
"Shambling Hungerer",
"The Nighthold",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[106087] = {
"Elerethe Renferal",
"The Emerald Nightmare",
"enUS",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[111933] = {
"Venomous Spiderling",
"The Emerald Nightmare",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
"enUS",
},
[94894] = {
"Keen-Eyed Gronnstalker",
"Hellfire Citadel",
"enUS",
},
[17653] = {
"Shadowmoon Channeler",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[111975] = {
"Shadowfeather",
"The Emerald Nightmare",
"enUS",
},
[17370] = {
"Laughing Skull Enforcer",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[137716] = {
"Bottom Feeder",
"The MOTHERLODE!!",
"enUS",
},
[112162] = {
"Grisly Trapper",
"The Emerald Nightmare",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
"enUS",
},
[182777] = {
"Rygelon",
"Sepulcher of the First Ones",
"enUS",
},
[216337] = {
"Bloodworker",
"Ara-Kara, City of Echoes",
"enUS",
},
[181244] = {
"Domination Core",
"Sepulcher of the First Ones",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[133963] = {
"Test Subject",
"The MOTHERLODE!!",
"enUS",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[18421] = {
"Sunseeker Researcher",
"Tempest Keep: The Botanica",
"enUS",
},
[180348] = {
"Cartel Muscle",
"Tazavesh, the Veiled Market",
"enUS",
},
[244185] = {
"Void Globule",
"Horrific Vision of Orgrimmar",
"enUS",
},
[163836] = {
"Psychophage",
"Ny'alotha, the Waking City",
"enUS",
},
[214840] = {
"Engorged Crawler",
"Ara-Kara, City of Echoes",
"enUS",
},
[186127] = {
"Ebonsteel Construct",
"Sepulcher of the First Ones",
"enUS",
},
[15547] = {
"Spectral Charger",
"Karazhan",
"enUS",
},
[22964] = {
"Priestess of Delight",
"Black Temple",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[37132] = {
"Ymirjar Battle-Maiden",
"Icecrown Citadel",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[165189] = {
"Rudolph",
"Theater of Pain",
"enUS",
},
[116499] = {
"Jarl Velbrand",
"Halls of Valor - Scenario",
"enUS",
},
[163947] = {
"Psychophage",
"Ny'alotha, the Waking City",
"enUS",
},
[93955] = {
"Delusional Zealot",
"Hellfire Citadel",
"enUS",
},
[178163] = {
"Murkbrine Shorerunner",
"Tazavesh, the Veiled Market",
"enUS",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[92961] = {
"Gorebound Brute",
"Hellfire Citadel",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[239412] = {
"Awakened Defensive Construct",
"The Spiral Weave",
"enUS",
},
[95408] = {
"Anetheron",
"Hellfire Citadel",
"enUS",
},
[138061] = {
"Venture Co. Longshoreman",
"The MOTHERLODE!!",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[229175] = {
"Darkfuse Stunner",
"Liberation of Undermine",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[185154] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[157439] = {
"Fury of N'Zoth",
"Ny'alotha, the Waking City",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[53087] = {
"Right Foot",
"Firelands",
"enUS",
},
[134991] = {
"Sandfury Stonefist",
"Temple of Sethraliss",
"enUS",
},
[157461] = {
"Mycelial Cyst",
"Ny'alotha, the Waking City",
"enUS",
},
[185155] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[226617] = {
"Snake",
"Mycomancer Cavern",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[146253] = {
"Brother Joseph",
"Battle of Dazar'alor",
"enUS",
},
[137713] = {
"Big Money Crab",
"The MOTHERLODE!!",
"enUS",
},
[229177] = {
"Torq",
"Liberation of Undermine",
"enUS",
},
[8477] = {
"Skeletal Servant",
"Stratholme",
"enUS",
},
[176956] = {
"Shadowsteel Goliath",
"Sanctum of Domination",
"enUS",
},
[148488] = {
"Unliving Augur",
"Battle of Dazar'alor",
"enUS",
},
[159514] = {
"Blood of Ny'alotha",
"Ny'alotha, the Waking City",
"enUS",
},
[162828] = {
"Corrosive Digester",
"Ny'alotha, the Waking City",
"enUS",
},
[159416] = {
"Spiked Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[148221] = {
"Risen Hulk",
"Battle of Dazar'alor",
"enUS",
},
[134993] = {
"Mchimba the Embalmer",
"Kings' Rest",
"enUS",
},
[17462] = {
"Shattered Hand Zealot",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[111022] = {
"The Demon Within",
"The Nighthold",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[57773] = {
"Kohcrom",
"Dragon Soul",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[136688] = {
"Fanatical Driller",
"The MOTHERLODE!!",
"enUS",
},
[134994] = {
"Spectral Headhunter",
"Kings' Rest",
"enUS",
},
[229691] = {
"Swarmbot",
"Awakening The Machine",
"enUS",
},
[184522] = {
"Vigilant Custodian",
"Sepulcher of the First Ones",
"enUS",
},
[146552] = {
"Kul Tiran Tideweaver",
"Battle of Dazar'alor",
"enUS",
},
[18422] = {
"Sunseeker Botanist",
"Tempest Keep: The Botanica",
"enUS",
},
[117933] = {
"Inquisitor Variss",
"Artifact - Acquisition - Tank",
"enUS",
},
[146256] = {
"Laminaria",
"Battle of Dazar'alor",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[229180] = {
"Darkfuse Gunner",
"Liberation of Undermine",
"enUS",
},
[183500] = {
"Thieving Agent",
"Sepulcher of the First Ones",
"enUS",
},
[162534] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[119469] = {
"Fel Bat Pup",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[57823] = {
"Stormbinder Adept",
"Dragon Soul",
"enUS",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
"enUS",
},
[211777] = {
"Spitfire Fusetender",
"Kriegval's Rest",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[229181] = {
"Flarendo",
"Liberation of Undermine",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[104881] = {
"Spellblade Aluriel",
"The Nighthold",
"enUS",
},
[125612] = {
"Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[105393] = {
"Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[159510] = {
"Eye of the Depths",
"Ny'alotha, the Waking City",
"enUS",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
"enUS",
},
[76874] = {
"Dreadwing",
"Blackrock Foundry",
"enUS",
},
[27636] = {
"Azure Ley-Whelp",
"The Oculus",
"enUS",
},
[126969] = {
"Trothak",
"Freehold",
"enUS",
},
[53127] = {
"Fire Scorpion",
"Firelands",
"enUS",
},
[214338] = {
"Kobyss Spearfisher",
"Tak-Rethan Abyss",
"enUS",
},
[114544] = {
"Skeletal Usher",
"Return to Karazhan",
"enUS",
},
[176940] = {
"Soulember",
"Sanctum of Domination",
"enUS",
},
[184535] = {
"Overthrown Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[181398] = {
"Mal'Ganis",
"Sepulcher of the First Ones",
"enUS",
},
[19958] = {
"White Seedling",
"Tempest Keep: The Botanica",
"enUS",
},
[229695] = {
"Corrupted Machinist",
"Awakening The Machine",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
"enUS",
},
[52577] = {
"Left Foot",
"Firelands",
"enUS",
},
[159405] = {
"Aqir Scarab",
"Ny'alotha, the Waking City",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[105906] = {
"Eye of Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[184533] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[77687] = {
"Grom'kar Man-at-Arms",
"Blackrock Foundry",
"enUS",
},
[184651] = {
"Subjugator Zeltoth",
"Sepulcher of the First Ones",
"enUS",
},
[176973] = {
"Unstoppable Abomination",
"Sanctum of Domination",
"enUS",
},
[226625] = {
"Cave Skipper",
"Tak-Rethan Abyss",
"enUS",
},
[183429] = {
"Ebon Chainguard",
"Sepulcher of the First Ones",
"enUS",
},
[183407] = {
"Eternal Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[180779] = {
"Terrorspine",
"Sanctum of Domination",
"enUS",
},
[16424] = {
"Spectral Sentry",
"Karazhan",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[159303] = {
"Monstrous Behemoth",
"Ny'alotha, the Waking City",
"enUS",
},
[104528] = {
"High Botanist Tel'arn",
"The Nighthold",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
"enUS",
},
[76829] = {
"Slag Elemental",
"Blackrock Foundry",
"enUS",
},
[159764] = {
"Jesh'ra",
"Ny'alotha, the Waking City",
"enUS",
},
[17399] = {
"Seductress",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[183413] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[144941] = {
"Akunda's Aspect",
"Battle of Dazar'alor",
"enUS",
},
[119472] = {
"Felspite Dominator",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[79200] = {
"Blackrock Forge Specialist",
"Blackrock Foundry",
"enUS",
},
[38154] = {
"Warhawk",
"Icecrown Citadel",
"enUS",
},
[175725] = {
"Eye of the Jailer",
"Sanctum of Domination",
"enUS",
},
[220485] = {
"Peculiar Nerubian",
"The Spiral Weave",
"enUS",
},
[139097] = {
"Sandswept Marksman",
"Temple of Sethraliss",
"enUS",
},
[52322] = {
"Witch Doctor Qu'in",
"Zul'Gurub",
"enUS",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[214343] = {
"Kobyss Trickster",
"Tak-Rethan Abyss",
"enUS",
},
[94806] = {
"Fel Hellweaver",
"Hellfire Citadel",
"enUS",
},
[153942] = {
"Annihilator Lak'hal",
"Horrific Vision of Orgrimmar",
"enUS",
},
[52962] = {
"Zandalari Archon",
"Zul'Gurub",
"enUS",
},
[146409] = {
"Lady Jaina Proudmoore",
"Battle of Dazar'alor",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[120153] = {
"Eonic Defender",
"Tomb of Sargeras",
"enUS",
},
[45412] = {
"Lord Aurius Rivendare",
"Stratholme",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[153943] = {
"Decimator Shiq'voth",
"Horrific Vision of Orgrimmar",
"enUS",
},
[15548] = {
"Spectral Stallion",
"Karazhan",
"enUS",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[23030] = {
"Dragonmaw Sky Stalker",
"Black Temple",
"enUS",
},
[148120] = {
"Kul Tiran Marine",
"Battle of Dazar'alor",
"enUS",
},
[157158] = {
"Cultist Slavedriver",
"Horrific Vision of Stormwind",
"enUS",
},
[23222] = {
"Bonechewer Brawler",
"Black Temple",
"enUS",
},
[92527] = {
"Dag'gorath",
"Hellfire Citadel",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[183499] = {
"Hired Muscle",
"Sepulcher of the First Ones",
"enUS",
},
[22959] = {
"Ardent Host",
"Black Temple",
"enUS",
},
[19511] = {
"Nethervine Inciter",
"Tempest Keep: The Botanica",
"enUS",
},
[105299] = {
"Recursive Elemental",
"The Nighthold",
"enUS",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
"enUS",
},
[11661] = {
"Flamewaker",
"Molten Core",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[162647] = {
"Willing Sacrifice",
"Ny'alotha, the Waking City",
"enUS",
},
[204109] = {
"Cavernous Shrieker",
"Kriegval's Rest",
"enUS",
},
[178731] = {
"Bonesteel",
"Sanctum of Domination",
"enUS",
},
[52323] = {
"Chosen of Hethiss",
"Zul'Gurub",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[120463] = {
"Undersea Custodian",
"Tomb of Sargeras",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[158041] = {
"N'Zoth the Corruptor",
"Ny'alotha, the Waking City",
"enUS",
},
[170838] = {
"Unyielding Contender",
"Theater of Pain",
"enUS",
},
[93881] = {
"Contracted Engineer",
"Hellfire Citadel",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
"enUS",
},
[184659] = {
"Dominated Sentinel",
"Sepulcher of the First Ones",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[119475] = {
"Flickering Eye",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[227145] = {
"Waterworks Crocolisk",
"Operation: Floodgate",
"enUS",
},
[223562] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[181859] = {
"Volatile Materium",
"Sepulcher of the First Ones",
"enUS",
},
[176879] = {
"Hollowsoul",
"Sanctum of Domination",
"enUS",
},
[159578] = {
"Exposed Synapse",
"Ny'alotha, the Waking City",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[123451] = {
"Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[216363] = {
"Reinforced Drone",
"Ara-Kara, City of Echoes",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[161251] = {
"Cultist Sycophant",
"Ny'alotha, the Waking City",
"enUS",
},
[156818] = {
"Wrathion",
"Ny'alotha, the Waking City",
"enUS",
},
[94617] = {
"Glynevere",
"Hellfire Citadel",
"enUS",
},
[17400] = {
"Felguard Annihilator",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[229706] = {
"Explosive Bomberbot",
"Awakening The Machine",
"enUS",
},
[148119] = {
"Furious Merchant",
"Battle of Dazar'alor",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[148607] = {
"Kal'ia Pa'kuaya",
"Battle of Dazar'alor",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
"enUS",
},
[124158] = {
"Imonar the Soulhunter",
"Antorus, the Burning Throne",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[48229] = {
"Kobold Digger",
"Dastardly Dome",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[24560] = {
"Priestess Delrissa",
"Magisters' Terrace",
"enUS",
},
[17826] = {
"Swamplord Musel'ek",
"Coilfang: The Underbog",
"enUS",
},
[148673] = {
"Vessel of Bwonsamdi",
"Battle of Dazar'alor",
"enUS",
},
[95603] = {
"Mystic Aaran",
"Hellfire Citadel",
"enUS",
},
[76877] = {
"Gruul",
"Blackrock Foundry",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[164188] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[158690] = {
"Cultist Tormenter",
"Horrific Vision of Stormwind",
"enUS",
},
[122367] = {
"Admiral Svirax",
"Antorus, the Burning Throne",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[207186] = {
"Unruly Stormrook",
"The Rookery",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[24722] = {
"Fel Crystal",
"Magisters' Terrace",
"enUS",
},
[207949] = {
"Zealous Templar",
"Priory of the Sacred Flame",
"enUS",
},
[164189] = {
"Horrific Figment",
"Horrific Vision of Stormwind",
"enUS",
},
[180058] = {
"Shadowsteel Colossus",
"Sanctum of Domination",
"enUS",
},
[23223] = {
"Bonechewer Spectator",
"Black Temple",
"enUS",
},
[239435] = {
"Darkfuse Thug",
"Liberation of Undermine",
"enUS",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[77504] = {
"Slag Behemoth",
"Blackrock Foundry",
"enUS",
},
[163678] = {
"Clotted Corruption",
"Ny'alotha, the Waking City",
"enUS",
},
[19512] = {
"Nethervine Reaper",
"Tempest Keep: The Botanica",
"enUS",
},
[180392] = {
"Gorgoan Souldrinker",
"Sanctum of Domination",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[176880] = {
"Soulscream Tormentor",
"Sanctum of Domination",
"enUS",
},
[146106] = {
"Living Bomb",
"Battle of Dazar'alor",
"enUS",
},
[121004] = {
"Razorjaw Myrmidon",
"Tomb of Sargeras",
"enUS",
},
[116407] = {
"Harjatan",
"Tomb of Sargeras",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
"enUS",
},
[52325] = {
"Gurubashi Blood Drinker",
"Zul'Gurub",
"enUS",
},
[53648] = {
"Inferno Hawk",
"Firelands",
"enUS",
},
[148615] = {
"Div'yane",
"Battle of Dazar'alor",
"enUS",
},
[239437] = {
"Hogger",
"Horrific Vision of Stormwind",
"enUS",
},
[156641] = {
"Enthralled Weaponsmith",
"Horrific Vision of Stormwind",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[139110] = {
"Spark Channeler",
"Temple of Sethraliss",
"enUS",
},
[111164] = {
"Twilight Stardancer",
"The Nighthold",
"enUS",
},
[120449] = {
"Defensive Countermeasure",
"Tomb of Sargeras",
"enUS",
},
[112678] = {
"Shal'dorei Naturalist",
"The Nighthold",
"enUS",
},
[92554] = {
"Mek'barash",
"Hellfire Citadel",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[146251] = {
"Sister Katherine",
"Battle of Dazar'alor",
"enUS",
},
[111226] = {
"Summoner Xiv",
"The Nighthold",
"enUS",
},
[152033] = {
"Inconspicuous Plant",
"Operation: Mechagon",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
"enUS",
},
[148582] = {
"Stormbound Guardian",
"Battle of Dazar'alor",
"enUS",
},
[130485] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[17401] = {
"Felhound Manastalker",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[17465] = {
"Shattered Hand Centurion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[185181] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
"enUS",
},
[12076] = {
"Lava Elemental",
"Molten Core",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[104636] = {
"Cenarius",
"The Emerald Nightmare",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
"enUS",
},
[208728] = {
"Treasure Wraith",
"Sidestreet Sluice",
"enUS",
},
[17977] = {
"Warp Splinter",
"Tempest Keep: The Botanica",
"enUS",
},
[144232] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
"enUS",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[95638] = {
"Sargerei Bannerman",
"Hellfire Citadel",
"enUS",
},
[125545] = {
"Blazing Imp",
"Antorus, the Burning Throne",
"enUS",
},
[170850] = {
"Raging Bloodhorn",
"Theater of Pain",
"enUS",
},
[53094] = {
"Patriarch Fire Turtle",
"Firelands",
"enUS",
},
[53222] = {
"Flamewaker Centurion",
"Firelands",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[210265] = {
"Worker Bee",
"Cinderbrew Meadery",
"enUS",
},
[93023] = {
"Siegemaster Mar'tak",
"Hellfire Citadel",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[121011] = {
"Tidescale Witch",
"Tomb of Sargeras",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[155953] = {
"C'Thuffer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[148199] = {
"Screeching Phantasm",
"Battle of Dazar'alor",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[108360] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[211290] = {
"Elaena Emberlanz",
"Priory of the Sacred Flame",
"enUS",
},
[158567] = {
"Tormented Kor'kron Annihilator",
"Horrific Vision of Orgrimmar",
"enUS",
},
[220504] = {
"Shadow Totem",
"Skittering Breach",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[11667] = {
"Flameguard",
"Molten Core",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[147495] = {
"Rastari Enforcer",
"Battle of Dazar'alor",
"enUS",
},
[158056] = {
"Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[183138] = {
"Inchoate Shadow",
"Sepulcher of the First Ones",
"enUS",
},
[111170] = {
"Astral Farseer",
"The Nighthold",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[52327] = {
"Gurubashi Shadow Hunter",
"Zul'Gurub",
"enUS",
},
[236886] = {
"Hovering Menace",
"Skittering Breach",
"enUS",
},
[53223] = {
"Flamewaker Beast Handler",
"Firelands",
"enUS",
},
[239445] = {
"Awakened Defense Matrix",
"The Spiral Weave",
"enUS",
},
[207197] = {
"Cursed Rookguard",
"The Rookery",
"enUS",
},
[130488] = {
"Mech Jockey",
"The MOTHERLODE!!",
"enUS",
},
[53095] = {
"Matriarch Fire Turtle",
"Firelands",
"enUS",
},
[118715] = {
"Reanimated Templar",
"Tomb of Sargeras",
"enUS",
},
[223181] = {
"Agile Pursuer",
"City of Threads",
"enUS",
},
[24696] = {
"Coilskar Witch",
"Magisters' Terrace",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[145261] = {
"Opulence",
"Battle of Dazar'alor",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[204127] = {
"Kobold Taskfinder",
"Kriegval's Rest",
"enUS",
},
[220507] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[134173] = {
"Animated Droplet",
"Shrine of the Storm",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[156523] = {
"Maut",
"Ny'alotha, the Waking City",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[219996] = {
"Faceless Devotee",
"Skittering Breach",
"enUS",
},
[220508] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[163690] = {
"Shath'Yar Scribe",
"Ny'alotha, the Waking City",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[156524] = {
"Kelsey Steelspark",
"Horrific Vision of Stormwind",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[36807] = {
"Deathspeaker Disciple",
"Icecrown Citadel",
"enUS",
},
[17722] = {
"Coilfang Sorceress",
"Dastardly Dome",
"enUS",
},
[17978] = {
"Thorngrin the Tender",
"Tempest Keep: The Botanica",
"enUS",
},
[220509] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[233306] = {
"The Junkmaker",
"Liberation of Undermine",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[12056] = {
"Baron Geddon",
"Molten Core",
"enUS",
},
[136264] = {
"Half-Finished Mummy",
"Kings' Rest",
"enUS",
},
[94008] = {
"Dark Devourer",
"Hellfire Citadel",
"enUS",
},
[220199] = {
"Battle Scarab",
"City of Threads",
"enUS",
},
[220510] = {
"The Puppetmaster?",
"The Spiral Weave",
"enUS",
},
[53096] = {
"Fire Turtle Hatchling",
"Firelands",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[17976] = {
"Commander Sarannis",
"Tempest Keep: The Botanica",
"enUS",
},
[77692] = {
"Kromog",
"Blackrock Foundry",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[112675] = {
"Duskwatch Sentinel",
"The Nighthold",
"enUS",
},
[22841] = {
"Shade of Akama",
"Black Temple",
"enUS",
},
[144942] = {
"Spark Bot",
"Battle of Dazar'alor",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[37868] = {
"Risen Archmage",
"Icecrown Citadel",
"enUS",
},
[121021] = {
"Shadowsworn Invader",
"Tomb of Sargeras",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[24561] = {
"Yazzai",
"Magisters' Terrace",
"enUS",
},
[120482] = {
"Tidescale Seacaller",
"Tomb of Sargeras",
"enUS",
},
[236892] = {
"Treasure Crab",
"The Waterworks",
"enUS",
},
[134005] = {
"Shalebiter",
"The MOTHERLODE!!",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[90296] = {
"Soulbound Construct",
"Hellfire Citadel",
"enUS",
},
[12057] = {
"Garr",
"Molten Core",
"enUS",
},
[94916] = {
"Fel Touched Seer",
"Hellfire Citadel",
"enUS",
},
[119742] = {
"Felguard Invader",
"Tomb of Sargeras",
"enUS",
},
[235869] = {
"Black Blood Parasite",
"Earthcrawl Mines",
"enUS",
},
[144244] = {
"The Platinum Pummeler",
"Operation: Mechagon",
"enUS",
},
[56168] = {
"Wing Tentacle",
"Dragon Soul",
"enUS",
},
[212835] = {
"Risen Footman",
"Priory of the Sacred Flame",
"enUS",
},
[147827] = {
"7th Legion Marine",
"Battle of Dazar'alor",
"enUS",
},
[113088] = {
"Corrupted Feeler",
"The Emerald Nightmare",
"enUS",
},
[158328] = {
"Il'gynoth",
"Ny'alotha, the Waking City",
"enUS",
},
[121790] = {
"Fleetlord Dominator",
"Tomb of Sargeras",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[126767] = {
"Clubfist Beastlord",
"Antorus, the Burning Throne",
"enUS",
},
[178029] = {
"Mawsworn Wingsoldier",
"Sanctum of Domination",
"enUS",
},
[114624] = {
"Arcane Warden",
"Return to Karazhan",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[16507] = {
"Shattered Hand Sentry",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[37229] = {
"Frostwarden Sorceress",
"Icecrown Citadel",
"enUS",
},
[206694] = {
"Fervent Sharpshooter",
"Priory of the Sacred Flame",
"enUS",
},
[137591] = {
"Healing Tide Totem",
"Kings' Rest",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[10463] = {
"Shrieking Banshee",
"Stratholme",
"enUS",
},
[144246] = {
"K.U.-J.0.",
"Operation: Mechagon",
"enUS",
},
[147829] = {
"Rastari Beastmaster",
"Battle of Dazar'alor",
"enUS",
},
[113089] = {
"Defiled Keeper",
"The Emerald Nightmare",
"enUS",
},
[17083] = {
"Fel Orc Convert",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[212838] = {
"Arathi Neophyte",
"Priory of the Sacred Flame",
"enUS",
},
[147830] = {
"Rastari Flamespeaker",
"Battle of Dazar'alor",
"enUS",
},
[19306] = {
"Mana Leech",
"Auchindoun: Mana-Tombs",
"enUS",
},
[120188] = {
"Wailing Soul",
"Tomb of Sargeras",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[17723] = {
"Bog Giant",
"Coilfang: The Underbog",
"enUS",
},
[112251] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[123760] = {
"Fel-Infused Destructor",
"Antorus, the Burning Throne",
"enUS",
},
[229219] = {
"Junkyard Hobgoblin",
"Liberation of Undermine",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[144248] = {
"Head Machinist Sparkflux",
"Operation: Mechagon",
"enUS",
},
[161140] = {
"Bwemba",
"Horrific Vision of Orgrimmar",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[90378] = {
"Kilrogg Deadeye",
"Hellfire Citadel",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[229220] = {
"Junkyard Shredder",
"Liberation of Undermine",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[148443] = {
"Defense-A-Bot",
"Battle of Dazar'alor",
"enUS",
},
[234339] = {
"Harbinger Ul'thul",
"Excavation Site 9",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[134012] = {
"Taskmaster Askari",
"The MOTHERLODE!!",
"enUS",
},
[15550] = {
"Attumen the Huntsman",
"Karazhan",
"enUS",
},
[90269] = {
"Tyrant Velhari",
"Hellfire Citadel",
"enUS",
},
[119072] = {
"The Desolate Host",
"Tomb of Sargeras",
"enUS",
},
[18105] = {
"Ghaz'an",
"Coilfang: The Underbog",
"enUS",
},
[113091] = {
"Tainted Plainstrider",
"The Emerald Nightmare",
"enUS",
},
[140038] = {
"Abyssal Eel",
"Shrine of the Storm",
"enUS",
},
[206699] = {
"War Lynx",
"Priory of the Sacred Flame",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[220008] = {
"Cragpie",
"The Sinkhole",
"enUS",
},
[148442] = {
"Gnomish Commando",
"Battle of Dazar'alor",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[114883] = {
"Grand Magister Rommath",
"The Nighthold",
"enUS",
},
[10399] = {
"Thuzadin Acolyte",
"Stratholme",
"enUS",
},
[158452] = {
"Mindtwist Tendril",
"Horrific Vision of Stormwind",
"enUS",
},
[94859] = {
"Armored Skullsmasher",
"Hellfire Citadel",
"enUS",
},
[52311] = {
"Venomguard Destroyer",
"Zul'Gurub",
"enUS",
},
[231977] = {
"Darkfuse Technician",
"Liberation of Undermine",
"enUS",
},
[122970] = {
"Shadowblade Stalker",
"Atal'Dazar",
"enUS",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[147835] = {
"Rastari Alpha",
"Battle of Dazar'alor",
"enUS",
},
[113092] = {
"Swarming Dread",
"The Emerald Nightmare",
"enUS",
},
[148441] = {
"Gnomish Gyro-Engineer",
"Battle of Dazar'alor",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[108359] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[229224] = {
"Darkfuse Scrapper",
"Liberation of Undermine",
"enUS",
},
[114628] = {
"Skeletal Waiter",
"Return to Karazhan",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[24698] = {
"Ethereum Smuggler",
"Magisters' Terrace",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[210797] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[166264] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[20923] = {
"Blood Guard Porung",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[80526] = {
"Stubborn Ironhoof",
"Blackrock Foundry",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[113093] = {
"Infected Gazelle",
"The Emerald Nightmare",
"enUS",
},
[227956] = {
"Crawler Mine",
"Liberation of Undermine",
"enUS",
},
[235368] = {
"Amalgamized Mass",
"Skittering Breach",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[150397] = {
"King Mechagon",
"Operation: Mechagon",
"enUS",
},
[208239] = {
"Skittering Menace",
"Skittering Breach",
"enUS",
},
[131009] = {
"Spirit of Gold",
"Atal'Dazar",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[234435] = {
"Xel'anegh the Many",
"Excavation Site 9",
"enUS",
},
[144767] = {
"Gonk's Aspect",
"Battle of Dazar'alor",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[166266] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[120516] = {
"Razorjaw Swiftfin",
"Tomb of Sargeras",
"enUS",
},
[52076] = {
"Gurubashi Cauldron-Mixer",
"Zul'Gurub",
"enUS",
},
[137969] = {
"Interment Construct",
"Kings' Rest",
"enUS",
},
[56427] = {
"Warmaster Blackhorn",
"Dragon Soul",
"enUS",
},
[158315] = {
"Eye of Chaos",
"Horrific Vision of Stormwind",
"enUS",
},
[102263] = {
"Skorpyron",
"The Nighthold",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[215407] = {
"Ki'katal the Harvester",
"Ara-Kara, City of Echoes",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[208241] = {
"Ankle Biter",
"Skittering Breach",
"enUS",
},
[163708] = {
"Umbral Gatekeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[90316] = {
"Shadow-Lord Iskar",
"Hellfire Citadel",
"enUS",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
"enUS",
},
[37232] = {
"Nerub'ar Broodling",
"Icecrown Citadel",
"enUS",
},
[178041] = {
"Mawsworn Shackler",
"Sanctum of Domination",
"enUS",
},
[231788] = {
"Unstable Crawler Mine",
"Liberation of Undermine",
"enUS",
},
[231904] = {
"Punchy Thug",
"The Spiral Weave",
"enUS",
},
[208242] = {
"Nerubian Darkcaster",
"Skittering Breach",
"enUS",
},
[129601] = {
"Cutwater Harpooner",
"Freehold",
"enUS",
},
[52405] = {
"Mor'Lek the Dismantler",
"Zul'Gurub",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[113307] = {
"Chronowraith",
"The Nighthold",
"enUS",
},
[19307] = {
"Nexus Terror",
"Auchindoun: Mana-Tombs",
"enUS",
},
[17735] = {
"Wrathfin Warrior",
"Coilfang: The Underbog",
"enUS",
},
[23419] = {
"Essence of Desire",
"Black Temple",
"enUS",
},
[208243] = {
"Nerubian Slasher",
"Skittering Breach",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
"enUS",
},
[94924] = {
"Iron Peon",
"Hellfire Citadel",
"enUS",
},
[178043] = {
"Mawsworn Lancer",
"Sanctum of Domination",
"enUS",
},
[76945] = {
"Ironcrusher",
"Blackrock Foundry",
"enUS",
},
[135846] = {
"Sand-Crusted Striker",
"Temple of Sethraliss",
"enUS",
},
[52077] = {
"Gurubashi Berserker",
"Zul'Gurub",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
"enUS",
},
[121030] = {
"Fan'verg the Vicious",
"Tomb of Sargeras",
"enUS",
},
[47131] = {
"Frantic Geist",
"Dastardly Dome",
"enUS",
},
[219588] = {
"Yes Man",
"Cinderbrew Meadery",
"enUS",
},
[52436] = {
"Gurubashi Refugee",
"Zul'Gurub",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[163712] = {
"Dying Voidspawn",
"Ny'alotha, the Waking City",
"enUS",
},
[208245] = {
"Skittering Swarmer",
"Skittering Breach",
"enUS",
},
[114632] = {
"Spectral Attendant",
"Return to Karazhan",
"enUS",
},
[12101] = {
"Lava Surger",
"Molten Core",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[10464] = {
"Wailing Banshee",
"Stratholme",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[10400] = {
"Thuzadin Necromancer",
"Stratholme",
"enUS",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[135048] = {
"Gorestained Piglet",
"Waycrest Manor",
"enUS",
},
[10398] = {
"Thuzadin Shadowcaster",
"Stratholme",
"enUS",
},
[53889] = {
"Corrupted Blood",
"Dragon Soul",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[120477] = {
"Deep Stalker",
"Tomb of Sargeras",
"enUS",
},
[132056] = {
"Venture Co. Skyscorcher",
"The MOTHERLODE!!",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[214263] = {
"Waxface",
"The Waterworks",
"enUS",
},
[16700] = {
"Shattered Hand Legionnaire",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[84841] = {
"Iron Dockworker",
"Blackrock Foundry",
"enUS",
},
[160404] = {
"Angry Bear Rug Spirit",
"Horrific Vision of Stormwind",
"enUS",
},
[17725] = {
"Underbog Lurker",
"Coilfang: The Underbog",
"enUS",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
"enUS",
},
[56173] = {
"Deathwing",
"Dragon Soul",
"enUS",
},
[17917] = {
"Coilfang Water Elemental",
"Dastardly Dome",
"enUS",
},
[135562] = {
"Venomous Ophidian",
"Temple of Sethraliss",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[93068] = {
"Xhul'horac",
"Hellfire Citadel",
"enUS",
},
[93391] = {
"Captured Prisoner",
"Hellfire Citadel",
"enUS",
},
[162692] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[236895] = {
"Malfunctioning Pummeler",
"Sidestreet Sluice",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
"enUS",
},
[152331] = {
"Captain Lancy Revshon",
"Horrific Vision of Stormwind",
"enUS",
},
[94995] = {
"Graggra",
"Hellfire Citadel",
"enUS",
},
[234671] = {
"Flame Laser",
"Liberation of Undermine",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[22844] = {
"Ashtongue Battlelord",
"Black Temple",
"enUS",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
"enUS",
},
[93392] = {
"Captured Prisoner",
"Hellfire Citadel",
"enUS",
},
[210810] = {
"Menial Laborer",
"Darkflame Cleft",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[23420] = {
"Essence of Anger",
"Black Temple",
"enUS",
},
[216441] = {
"Pale Illusion",
"Tak-Rethan Abyss",
"enUS",
},
[114320] = {
"Lord Robin Daris",
"Return to Karazhan",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[131669] = {
"Jagged Hound",
"Waycrest Manor",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[17882] = {
"The Black Stalker",
"Coilfang: The Underbog",
"enUS",
},
[17975] = {
"High Botanist Freywinn",
"Tempest Keep: The Botanica",
"enUS",
},
[52079] = {
"Gurubashi Bloodrager",
"Zul'Gurub",
"enUS",
},
[148945] = {
"Ensign Roberts",
"Battle of Dazar'alor",
"enUS",
},
[116939] = {
"Fallen Avatar",
"Tomb of Sargeras",
"enUS",
},
[117230] = {
"Tugar Bloodtotem",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[37146] = {
"Kor'kron Sniper",
"Icecrown Citadel",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[102015] = {
"Faceless Guardian",
"Tirisfal Glades",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[23397] = {
"Illidari Blood Lord",
"Black Temple",
"enUS",
},
[114636] = {
"Phantom Guardsman",
"Return to Karazhan",
"enUS",
},
[158158] = {
"Forge-Guard Hurrul",
"Horrific Vision of Stormwind",
"enUS",
},
[131863] = {
"Raal the Gluttonous",
"Waycrest Manor",
"enUS",
},
[28859] = {
"Malygos",
"The Eye of Eternity",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[161229] = {
"Aqir Venomweaver",
"Ny'alotha, the Waking City",
"enUS",
},
[114626] = {
"Forlorn Spirit",
"Return to Karazhan",
"enUS",
},
[18315] = {
"Ethereal Theurgist",
"Auchindoun: Mana-Tombs",
"enUS",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[220624] = {
"Suspicious Niffen",
"Tak-Rethan Abyss",
"enUS",
},
[52155] = {
"High Priest Venoxis",
"Zul'Gurub",
"enUS",
},
[229364] = {
"Imperious Deathtone",
"Liberation of Undermine",
"enUS",
},
[227843] = {
"Bloodfang Hyena",
"Liberation of Undermine",
"enUS",
},
[129598] = {
"Freehold Pack Mule",
"Freehold",
"enUS",
},
[80676] = {
"Iron Flametwister",
"Blackrock Foundry",
"enUS",
},
[114637] = {
"Spectral Sentry",
"Return to Karazhan",
"enUS",
},
[237432] = {
"Crony",
"Demolition Dome",
"enUS",
},
[106643] = {
"Elisande",
"The Nighthold",
"enUS",
},
[36626] = {
"Festergut",
"Icecrown Citadel",
"enUS",
},
[118044] = {
"Nether Horror",
"Artifact - Acquisition - Tank",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[120012] = {
"Dresanoth",
"Tomb of Sargeras",
"enUS",
},
[22997] = {
"Flame of Azzinoth",
"Black Temple",
"enUS",
},
[146831] = {
"Kul Tiran Stormbringer",
"Battle of Dazar'alor",
"enUS",
},
[17734] = {
"Underbog Lord",
"Coilfang: The Underbog",
"enUS",
},
[176520] = {
"Ocular Commander",
"Sanctum of Domination",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[239585] = {
"Disturbed Trash Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[223613] = {
"Weave Drone",
"The Spiral Weave",
"enUS",
},
[146320] = {
"Prelate Za'lan",
"Battle of Dazar'alor",
"enUS",
},
[36724] = {
"Servant of the Throne",
"Icecrown Citadel",
"enUS",
},
[212831] = {
"Forge Master Damian",
"Priory of the Sacred Flame",
"enUS",
},
[165260] = {
"Oozing Leftovers",
"Theater of Pain",
"enUS",
},
[136083] = {
"Forgotten Denizen",
"Shrine of the Storm",
"enUS",
},
[53616] = {
"Kar the Everburning",
"Firelands",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[22845] = {
"Ashtongue Mystic",
"Black Temple",
"enUS",
},
[37030] = {
"Kor'kron Primalist",
"Icecrown Citadel",
"enUS",
},
[85748] = {
"Iron Mauler",
"Blackrock Foundry",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[113103] = {
"Corrupted Swoop",
"The Emerald Nightmare",
"enUS",
},
[228050] = {
"Mechano Wolf",
"Liberation of Undermine",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[146322] = {
"Siegebreaker Roka",
"Battle of Dazar'alor",
"enUS",
},
[23421] = {
"Ashtongue Channeler",
"Black Temple",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
"enUS",
},
[109038] = {
"Solarist Tel'arn",
"The Nighthold",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[24697] = {
"Sister of Torment",
"Magisters' Terrace",
"enUS",
},
[103224] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[91349] = {
"Mannoroth",
"Hellfire Citadel",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[36968] = {
"Kor'kron Axethrower",
"Icecrown Citadel",
"enUS",
},
[159632] = {
"Cultist Shadowblade",
"Horrific Vision of Stormwind",
"enUS",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[37666] = {
"Darkfallen Tactician",
"Icecrown Citadel",
"enUS",
},
[114317] = {
"Lady Catriona Von'Indi",
"Return to Karazhan",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[36597] = {
"The Lich King",
"Icecrown Citadel",
"enUS",
},
[36725] = {
"Nerub'ar Broodkeeper",
"Icecrown Citadel",
"enUS",
},
[159633] = {
"Cultist Executioner",
"Horrific Vision of Stormwind",
"enUS",
},
[18343] = {
"Tavarok",
"Auchindoun: Mana-Tombs",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[53617] = {
"Molten Erupter",
"Firelands",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[85711] = {
"Aquatic Technician",
"Blackrock Foundry",
"enUS",
},
[19513] = {
"Mutate Fear-Shrieker",
"Tempest Keep: The Botanica",
"enUS",
},
[219066] = {
"Afflicted Civilian",
"The Rookery",
"enUS",
},
[92913] = {
"Gorebound Berserker",
"Hellfire Citadel",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[17726] = {
"Wrathfin Myrmidon",
"Coilfang: The Underbog",
"enUS",
},
[129550] = {
"Bilge Rat Padfoot",
"Freehold",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[146326] = {
"Headhunter Gal'wana",
"Battle of Dazar'alor",
"enUS",
},
[11262] = {
"Onyxian Whelp",
"Onyxia's Lair",
"enUS",
},
[229250] = {
"Venture Co. Contractor",
"Operation: Floodgate",
"enUS",
},
[158565] = {
"Naros",
"Horrific Vision of Orgrimmar",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[17727] = {
"Wrathfin Sentry",
"Coilfang: The Underbog",
"enUS",
},
[24664] = {
"Kael'thas Sunstrider",
"Magisters' Terrace",
"enUS",
},
[241024] = {
"Big Keech",
"Horrific Vision of Orgrimmar",
"enUS",
},
[116689] = {
"Atrigan",
"Tomb of Sargeras",
"enUS",
},
[134691] = {
"Static-charged Dervish",
"Temple of Sethraliss",
"enUS",
},
[113106] = {
"Sickly Cougar",
"The Emerald Nightmare",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[55312] = {
"Yor'sahj the Unsleeping",
"Dragon Soul",
"enUS",
},
[81114] = {
"Gronnling Laborer",
"Blackrock Foundry",
"enUS",
},
[53224] = {
"Flamewaker Taskmaster",
"Firelands",
"enUS",
},
[210267] = {
"I'pa",
"Cinderbrew Meadery",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[161173] = {
"Abyssal Watcher",
"Ny'alotha, the Waking City",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[22846] = {
"Ashtongue Stormcaller",
"Black Temple",
"enUS",
},
[22950] = {
"High Nethermancer Zerevor",
"Black Temple",
"enUS",
},
[23236] = {
"Bonechewer Shield Disciple",
"Black Temple",
"enUS",
},
[112595] = {
"Shal'dorei Archmage",
"The Nighthold",
"enUS",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[57387] = {
"Glowing Globule",
"Dragon Soul",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[92144] = {
"Dia Darkwhisper",
"Hellfire Citadel",
"enUS",
},
[53732] = {
"Unbound Smoldering Elemental",
"Firelands",
"enUS",
},
[53793] = {
"Harbinger of Flame",
"Firelands",
"enUS",
},
[134041] = {
"Infected Peasant",
"Waycrest Manor",
"enUS",
},
[126928] = {
"Irontide Corsair",
"Freehold",
"enUS",
},
[176531] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[234931] = {
"Vindle Snapcrank",
"Sidestreet Sluice",
"enUS",
},
[136139] = {
"Mechanized Peacekeeper",
"The MOTHERLODE!!",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
"enUS",
},
[229433] = {
"Skiggy Muckheimer",
"Liberation of Undermine",
"enUS",
},
[116691] = {
"Belac",
"Tomb of Sargeras",
"enUS",
},
[112596] = {
"Duskwatch Warden",
"The Nighthold",
"enUS",
},
[52339] = {
"Lesser Priest of Bethekk",
"Zul'Gurub",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[144796] = {
"High Tinker Mekkatorque",
"Battle of Dazar'alor",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[36811] = {
"Deathspeaker Attendant",
"Icecrown Citadel",
"enUS",
},
[92911] = {
"Hulking Berserker",
"Hellfire Citadel",
"enUS",
},
[122578] = {
"Kin'garoth",
"Antorus, the Burning Throne",
"enUS",
},
[36855] = {
"Lady Deathwhisper",
"Icecrown Citadel",
"enUS",
},
[147868] = {
"Frenzied Saurid",
"Battle of Dazar'alor",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
"enUS",
},
[152987] = {
"Faceless Willbreaker",
"Horrific Vision of Stormwind",
"enUS",
},
[157594] = {
"Lesser Void Elemental",
"Horrific Vision of Orgrimmar",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[87515] = {
"Iron Flame Binder",
"Blackrock Foundry",
"enUS",
},
[87771] = {
"Slagshop Worker",
"Blackrock Foundry",
"enUS",
},
[234376] = {
"The Biggest Bug",
"Earthcrawl Mines",
"enUS",
},
[242054] = {
"Titanic Storm Crystal",
"The Spiral Weave",
"enUS",
},
[144286] = {
"Asset Manager",
"The MOTHERLODE!!",
"enUS",
},
[152988] = {
"Faceless Shadowcaller",
"Horrific Vision of Stormwind",
"enUS",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[81117] = {
"Karnor the Cruel",
"Blackrock Foundry",
"enUS",
},
[154524] = {
"K'thir Mindcarver",
"Horrific Vision of Orgrimmar",
"enUS",
},
[127879] = {
"Shieldbearer of Zul",
"Atal'Dazar",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[217485] = {
"Nightfall Lookout",
"Nightfall Sanctum",
"enUS",
},
[217658] = {
"Sir Braunpyke",
"Priory of the Sacred Flame",
"enUS",
},
[3887] = {
"Baron Silverlaine",
"Dastardly Dome",
"enUS",
},
[178071] = {
"Maw Assassin",
"Sanctum of Domination",
"enUS",
},
[17728] = {
"Murkblood Tribesman",
"Coilfang: The Underbog",
"enUS",
},
[162715] = {
"Fanatical Cultist",
"Ny'alotha, the Waking City",
"enUS",
},
[144249] = {
"Omega Buster",
"Operation: Mechagon",
"enUS",
},
[230322] = {
"Stix Bunkjunker",
"Liberation of Undermine",
"enUS",
},
[52340] = {
"Tiki Lord Mu'Loa",
"Zul'Gurub",
"enUS",
},
[47231] = {
"Shadowy Attendant",
"Dastardly Dome",
"enUS",
},
[19509] = {
"Sunseeker Harvester",
"Tempest Keep: The Botanica",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
"enUS",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[162716] = {
"Spellbound Ritualist",
"Ny'alotha, the Waking City",
"enUS",
},
[10438] = {
"Maleki the Pallid",
"Stratholme",
"enUS",
},
[176537] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[37098] = {
"Val'kyr Herald",
"Icecrown Citadel",
"enUS",
},
[139626] = {
"Dredged Sailor",
"Shrine of the Storm",
"enUS",
},
[120021] = {
"Kelpfist",
"Tomb of Sargeras",
"enUS",
},
[22847] = {
"Ashtongue Primalist",
"Black Temple",
"enUS",
},
[162717] = {
"Sinister Soulcarver",
"Ny'alotha, the Waking City",
"enUS",
},
[242570] = {
"Haymar the Devout",
"Horrific Vision of Stormwind",
"enUS",
},
[120789] = {
"Lieutenant Silvermight",
"Tomb of Sargeras",
"enUS",
},
[176538] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[156575] = {
"Dark Inquisitor Xanesh",
"Ny'alotha, the Waking City",
"enUS",
},
[241715] = {
"Vengeful Footman",
"Horrific Vision of Stormwind",
"enUS",
},
[182169] = {
"Lihuvim",
"Sepulcher of the First Ones",
"enUS",
},
[12129] = {
"Onyxian Warder",
"Onyxia's Lair",
"enUS",
},
[162718] = {
"Iron-Willed Enforcer",
"Ny'alotha, the Waking City",
"enUS",
},
[156794] = {
"SI:7 Light-Hunter",
"Horrific Vision of Stormwind",
"enUS",
},
[77557] = {
"Admiral Gar'an",
"Blackrock Foundry",
"enUS",
},
[176539] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[158146] = {
"Fallen Riftwalker",
"Horrific Vision of Stormwind",
"enUS",
},
[152993] = {
"Garona Halforcen",
"Horrific Vision of Orgrimmar",
"enUS",
},
[38125] = {
"Ymirjar Deathbringer",
"Icecrown Citadel",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[162719] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
"enUS",
},
[104154] = {
"Gul'dan",
"The Nighthold",
"enUS",
},
[18431] = {
"Ethereal Beacon",
"Auchindoun: Mana-Tombs",
"enUS",
},
[111081] = {
"Fulminant",
"The Nighthold",
"enUS",
},
[218002] = {
"Benk Buzzbee",
"Cinderbrew Meadery",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[118487] = {
"Dread Corruptor",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[229296] = {
"Orb of Ascendance",
"Darkflame Cleft",
"enUS",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
"enUS",
},
[236942] = {
"The Underpin",
"Nightfall Sanctum",
"enUS",
},
[216634] = {
"Swooping Spreader",
"Earthcrawl Mines",
"enUS",
},
[135234] = {
"Diseased Mastiff",
"Waycrest Manor",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[139799] = {
"Ironhull Apprentice",
"Shrine of the Storm",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[56167] = {
"Arm Tentacle",
"Dragon Soul",
"enUS",
},
[134056] = {
"Aqu'sirr",
"Shrine of the Storm",
"enUS",
},
[160704] = {
"Letter Encrusted Void Globule",
"Horrific Vision of Stormwind",
"enUS",
},
[17280] = {
"Shattered Hand Warhound",
"Dastardly Dome",
"enUS",
},
[114584] = {
"Phantom Crew",
"Return to Karazhan",
"enUS",
},
[113113] = {
"Essence of Nightmare",
"The Emerald Nightmare",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[157603] = {
"Void Globule",
"Horrific Vision of Orgrimmar",
"enUS",
},
[53795] = {
"Egg Pile",
"Firelands",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[118488] = {
"Lord Erdris Thorn",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[157604] = {
"Crawling Corruption",
"Horrific Vision of Orgrimmar",
"enUS",
},
[184733] = {
"Dominated Grunt",
"Sepulcher of the First Ones",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[134058] = {
"Galecaller Faye",
"Shrine of the Storm",
"enUS",
},
[178079] = {
"The Jailer",
"Sanctum of Domination",
"enUS",
},
[17729] = {
"Murkblood Spearman",
"Coilfang: The Underbog",
"enUS",
},
[87520] = {
"Animated Slag",
"Blackrock Foundry",
"enUS",
},
[135765] = {
"Torrent Totem",
"Kings' Rest",
"enUS",
},
[37034] = {
"Kor'kron Templar",
"Icecrown Citadel",
"enUS",
},
[184734] = {
"Sacred Matrix Automa",
"Sepulcher of the First Ones",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[52598] = {
"Gurubashi Soul-Eater",
"Zul'Gurub",
"enUS",
},
[157605] = {
"Burrowing Appendage",
"Horrific Vision of Orgrimmar",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[17980] = {
"Laj",
"Tempest Keep: The Botanica",
"enUS",
},
[118489] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[57333] = {
"Acidic Globule",
"Dragon Soul",
"enUS",
},
[184735] = {
"Degeneration Automa",
"Sepulcher of the First Ones",
"enUS",
},
[53494] = {
"Baleroc",
"Firelands",
"enUS",
},
[57388] = {
"Shadowed Globule",
"Dragon Soul",
"enUS",
},
[87521] = {
"Iron Slag-Shaper",
"Blackrock Foundry",
"enUS",
},
[22848] = {
"Storm Fury",
"Black Temple",
"enUS",
},
[134060] = {
"Lord Stormsong",
"Shrine of the Storm",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[112603] = {
"Terrace Grove-Tender",
"The Nighthold",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[234900] = {
"Underpin's Adoring Fan",
"Sidestreet Sluice",
"enUS",
},
[157607] = {
"Faceless Shadowcaller",
"Horrific Vision of Orgrimmar",
"enUS",
},
[157608] = {
"Faceless Willbreaker",
"Horrific Vision of Orgrimmar",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[204188] = {
"Tomb-Raider Drywhisker",
"Kriegval's Rest",
"enUS",
},
[229270] = {
"Darkfuse Destructionist",
"Liberation of Undermine",
"enUS",
},
[184737] = {
"Acquisitions Automa",
"Sepulcher of the First Ones",
"enUS",
},
[144299] = {
"Workshop Defender",
"Operation: Mechagon",
"enUS",
},
[234901] = {
"Underpin's Well-Connected Friend",
"Sidestreet Sluice",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[134686] = {
"Mature Krolusk",
"Temple of Sethraliss",
"enUS",
},
[22875] = {
"Coilskar Sea-Caller",
"Black Temple",
"enUS",
},
[56161] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[184738] = {
"Guardian Automa",
"Sepulcher of the First Ones",
"enUS",
},
[144300] = {
"Mechagon Citizen",
"Operation: Mechagon",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[157609] = {
"K'thir Mindcarver",
"Horrific Vision of Orgrimmar",
"enUS",
},
[53185] = {
"Flamewaker Overseer",
"Firelands",
"enUS",
},
[134063] = {
"Brother Ironhull",
"Shrine of the Storm",
"enUS",
},
[118491] = {
"Corrupted Risen Mage",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[229272] = {
"Darkfuse Machinist",
"Liberation of Undermine",
"enUS",
},
[56162] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[144301] = {
"Living Waste",
"Operation: Mechagon",
"enUS",
},
[220572] = {
"Shadow Elemental",
"Skittering Breach",
"enUS",
},
[157610] = {
"K'thir Dominator",
"Horrific Vision of Orgrimmar",
"enUS",
},
[230316] = {
"Mk II Electro Shocker",
"Liberation of Undermine",
"enUS",
},
[162729] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[217519] = {
"Nightfall Shadeguard",
"Nightfall Sanctum",
"enUS",
},
[104415] = {
"Chronomatic Anomaly",
"The Nighthold",
"enUS",
},
[53244] = {
"Flamewaker Trainee",
"Firelands",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[234904] = {
"Underpin's Bodyguard's Intern",
"The Sinkhole",
"enUS",
},
[93154] = {
"Gorebound Crone",
"Hellfire Citadel",
"enUS",
},
[53116] = {
"Unbound Blazing Elemental",
"Firelands",
"enUS",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[118492] = {
"Corrupted Risen Arbalest",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[233247] = {
"Imperious Mixer",
"Liberation of Undermine",
"enUS",
},
[234393] = {
"Void Aberration",
"Excavation Site 9",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[234905] = {
"Aggressively Lost Hobgoblin",
"Sidestreet Sluice",
"enUS",
},
[157612] = {
"Eye of Drest'agath",
"Ny'alotha, the Waking City",
"enUS",
},
[17730] = {
"Murkblood Healer",
"Coilfang: The Underbog",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[87780] = {
"Slagshop Brute",
"Blackrock Foundry",
"enUS",
},
[23232] = {
"Mutant War Hound",
"Black Temple",
"enUS",
},
[184742] = {
"Dominated Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[230299] = {
"Darkfuse Crossfire",
"Liberation of Undermine",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[217518] = {
"Nightfall Inquisitor",
"Nightfall Sanctum",
"enUS",
},
[130522] = {
"Freehold Shipmate",
"Freehold",
"enUS",
},
[130521] = {
"Freehold Deckhand",
"Freehold",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
"enUS",
},
[234902] = {
"Underpin's Explosive Ally",
"Nightfall Sanctum",
"enUS",
},
[111071] = {
"Pulsauron",
"The Nighthold",
"enUS",
},
[94947] = {
"Fel-Starved Trainee",
"Hellfire Citadel",
"enUS",
},
[17732] = {
"Lykul Wasp",
"Coilfang: The Underbog",
"enUS",
},
[22849] = {
"Ashtongue Feral Spirit",
"Black Temple",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[220575] = {
"Shadow Elemental",
"Skittering Breach",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[93156] = {
"Eredar Faithbreaker",
"Hellfire Citadel",
"enUS",
},
[218016] = {
"Ravenous Cinderbee",
"Cinderbrew Meadery",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[134069] = {
"Vol'zith the Whisperer",
"Shrine of the Storm",
"enUS",
},
[220576] = {
"Shadow Elemental",
"Skittering Breach",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
"enUS",
},
[130653] = {
"Wanton Sapper",
"The MOTHERLODE!!",
"enUS",
},
[17398] = {
"Nascent Fel Orc",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[212383] = {
"Kobold Taskworker",
"Darkflame Cleft",
"enUS",
},
[93162] = {
"Umbral Supplicant",
"Hellfire Citadel",
"enUS",
},
[220577] = {
"Nerl'athekk the Skulking",
"Skittering Breach",
"enUS",
},
[52089] = {
"Gurubashi Worker",
"Zul'Gurub",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[217516] = {
"Nightfall Executor",
"Nightfall Sanctum",
"enUS",
},
[130012] = {
"Irontide Ravager",
"Freehold",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[158774] = {
"Broken Citizen",
"Horrific Vision of Stormwind",
"enUS",
},
[90435] = {
"Kormrok",
"Hellfire Citadel",
"enUS",
},
[234012] = {
"Nimsi Loosefire",
"Nightfall Sanctum",
"enUS",
},
[53369] = {
"Blazing Talon Initiate",
"Firelands",
"enUS",
},
[94693] = {
"Siegeworks Technician",
"Hellfire Citadel",
"enUS",
},
[229281] = {
"Charred Fanatic",
"Liberation of Undermine",
"enUS",
},
[94697] = {
"Siegeworks Technician",
"Hellfire Citadel",
"enUS",
},
[37501] = {
"Nerub'ar Champion",
"Icecrown Citadel",
"enUS",
},
[10435] = {
"Magistrate Barthilas",
"Stratholme",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[234919] = {
"Gold Elemental",
"Sidestreet Sluice",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[220573] = {
"Shadow Elemental",
"Skittering Breach",
"enUS",
},
[229288] = {
"King Flamespite",
"Liberation of Undermine",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[53115] = {
"Molten Lord",
"Firelands",
"enUS",
},
[122847] = {
"Umbral Priestess",
"Tomb of Sargeras",
"enUS",
},
[236982] = {
"Darkfuse Soldier",
"Operation: Floodgate",
"enUS",
},
[238496] = {
"Slots Patron",
"Liberation of Undermine",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[157620] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
"enUS",
},
[17731] = {
"Fen Ray",
"Coilfang: The Underbog",
"enUS",
},
[224164] = {
"Slots Patron",
"Liberation of Undermine",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[52348] = {
"Berserking Boulder Roller",
"Zul'Gurub",
"enUS",
},
[147895] = {
"Rezani Disciple",
"Battle of Dazar'alor",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[92391] = {
"Gorebound Bloodletter",
"Hellfire Citadel",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[23237] = {
"Bonechewer Blood Prophet",
"Black Temple",
"enUS",
},
[229284] = {
"Guk Boomdog",
"Liberation of Undermine",
"enUS",
},
[147896] = {
"Zandalari Crusader",
"Battle of Dazar'alor",
"enUS",
},
[111075] = {
"Chaotoid",
"The Nighthold",
"enUS",
},
[229282] = {
"Wild Thunderbolt",
"Liberation of Undermine",
"enUS",
},
[153527] = {
"Aqir Swarmleader",
"Horrific Vision of Orgrimmar",
"enUS",
},
[37502] = {
"Nerub'ar Webweaver",
"Icecrown Citadel",
"enUS",
},
[113128] = {
"Withered Skulker",
"The Nighthold",
"enUS",
},
[160182] = {
"Void Initiate",
"Ny'alotha, the Waking City",
"enUS",
},
[160183] = {
"Void Fanatic",
"Ny'alotha, the Waking City",
"enUS",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[122963] = {
"Rezan",
"Atal'Dazar",
"enUS",
},
[23418] = {
"Essence of Suffering",
"Black Temple",
"enUS",
},
[37228] = {
"Frostwarden Warrior",
"Icecrown Citadel",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[119476] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[153526] = {
"Aqir Swarmer",
"Horrific Vision of Orgrimmar",
"enUS",
},
[229286] = {
"Shifty Scalper",
"Liberation of Undermine",
"enUS",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
"enUS",
},
[57962] = {
"Deathwing",
"Dragon Soul",
"enUS",
},
[53188] = {
"Flamewaker Subjugator",
"Firelands",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
"enUS",
},
[158136] = {
"Inquisitor Darkspeak",
"Horrific Vision of Stormwind",
"enUS",
},
[19843] = {
"Nethervine Trickster",
"Tempest Keep: The Botanica",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[229287] = {
"Professor Boomspark",
"Liberation of Undermine",
"enUS",
},
[156089] = {
"Aqir Venomweaver",
"Horrific Vision of Orgrimmar",
"enUS",
},
[12099] = {
"Firesworn",
"Molten Core",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[122850] = {
"Umbral Guard",
"Tomb of Sargeras",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[162744] = {
"Nekthara the Mangler",
"Theater of Pain",
"enUS",
},
[12259] = {
"Gehennas",
"Molten Core",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[230312] = {
"Volunteer Rocketeer",
"Liberation of Undermine",
"enUS",
},
[111333] = {
"Taintheart Trickster",
"The Emerald Nightmare",
"enUS",
},
[153531] = {
"Aqir Bonecrusher",
"Horrific Vision of Orgrimmar",
"enUS",
},
[52088] = {
"Gurubashi Cauldron-Mixer",
"Zul'Gurub",
"enUS",
},
[37117] = {
"Kor'kron Battle-Mage",
"Icecrown Citadel",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[229356] = {
"Imperious Blaster",
"Liberation of Undermine",
"enUS",
},
[237991] = {
"Void-Scarred Gryphon",
"Horrific Vision of Stormwind",
"enUS",
},
[185268] = {
"Ebonsteel Construct",
"Sepulcher of the First Ones",
"enUS",
},
[52345] = {
"Pride of Bethekk",
"Zul'Gurub",
"enUS",
},
[153532] = {
"Aqir Mindhunter",
"Horrific Vision of Orgrimmar",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[122851] = {
"Umbral Archer",
"Tomb of Sargeras",
"enUS",
},
[217517] = {
"Nightfall Hopestealer",
"Nightfall Sanctum",
"enUS",
},
[160699] = {
"Angry Mailemental",
"Horrific Vision of Stormwind",
"enUS",
},
[24761] = {
"Brightscale Wyrm",
"Magisters' Terrace",
"enUS",
},
[36844] = {
"Risen Deathspeaker Servant",
"Icecrown Citadel",
"enUS",
},
[158140] = {
"Frenzied Rat",
"Horrific Vision of Stormwind",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[36805] = {
"Deathspeaker Servant",
"Icecrown Citadel",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[225708] = {
"Sporbit",
"Mycomancer Cavern",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[153022] = {
"Snang",
"Horrific Vision of Orgrimmar",
"enUS",
},
[36853] = {
"Sindragosa",
"Icecrown Citadel",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[93931] = {
"Gorebound Felcaster",
"Hellfire Citadel",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[180664] = {
"Mawsworn Infuser",
"Sanctum of Domination",
"enUS",
},
[185271] = {
"Stellar Mote",
"Sepulcher of the First Ones",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[16699] = {
"Shattered Hand Reaver",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[175546] = {
"Timecap'n Hooktail",
"Tazavesh, the Veiled Market",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[180665] = {
"Gibbering Soul",
"Sanctum of Domination",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[23235] = {
"Bonechewer Blade Fury",
"Black Temple",
"enUS",
},
[149441] = {
"Frozen Ballista",
"Battle of Dazar'alor",
"enUS",
},
[135052] = {
"Blight Toad",
"Waycrest Manor",
"enUS",
},
[224175] = {
"Princeguard Enforcer",
"Liberation of Undermine",
"enUS",
},
[240018] = {
"Overcharged Pylon",
"The Spiral Weave",
"enUS",
},
[214920] = {
"Tasting Room Attendant",
"Khaz Algar (Surface)",
"enUS",
},
[120808] = {
"Lylth the Silent",
"Tomb of Sargeras",
"enUS",
},
[17371] = {
"Shadowmoon Warlock",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[236027] = {
"Remote Ticktock",
"Sidestreet Sluice",
"enUS",
},
[78832] = {
"Grom'kar Man-at-Arms",
"Blackrock Foundry",
"enUS",
},
[91103] = {
"Felfire Demolisher",
"Hellfire Citadel",
"enUS",
},
[15551] = {
"Spectral Stable Hand",
"Karazhan",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[131527] = {
"Lord Waycrest",
"Waycrest Manor",
"enUS",
},
[185274] = {
"Astral Particle",
"Sepulcher of the First Ones",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[157602] = {
"Drest'agath",
"Ny'alotha, the Waking City",
"enUS",
},
[52435] = {
"Gurubashi Villager",
"Zul'Gurub",
"enUS",
},
[214419] = {
"Void-Cursed Crusher",
"The Rookery",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
"enUS",
},
[16389] = {
"Spectral Apprentice",
"Karazhan",
"enUS",
},
[94018] = {
"Shadow Burster",
"Hellfire Citadel",
"enUS",
},
[185275] = {
"Kelmortos",
"Sepulcher of the First Ones",
"enUS",
},
[161217] = {
"Aqir Skitterer",
"Ny'alotha, the Waking City",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[10404] = {
"Pustulating Horror",
"Icecrown Citadel",
"enUS",
},
[10436] = {
"Baroness Anastari",
"Stratholme",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
"enUS",
},
[92142] = {
"Blademaster Jubei'thos",
"Hellfire Citadel",
"enUS",
},
[176535] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[136100] = {
"Sunken Denizen",
"Shrine of the Storm",
"enUS",
},
[161218] = {
"Aqir Crusher",
"Ny'alotha, the Waking City",
"enUS",
},
[16704] = {
"Shattered Hand Sharpshooter",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[133379] = {
"Adderis",
"Temple of Sethraliss",
"enUS",
},
[56922] = {
"Twilight Infiltrator",
"Dragon Soul",
"enUS",
},
[16407] = {
"Spectral Servant",
"Karazhan",
"enUS",
},
[178072] = {
"Anduin Wrynn",
"Sanctum of Domination",
"enUS",
},
[17477] = {
"Hellfire Imp",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[210270] = {
"Brew Drop",
"Cinderbrew Meadery",
"enUS",
},
[17669] = {
"Rabid Warhound",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[178623] = {
"Mawsworn Guard",
"Sanctum of Domination",
"enUS",
},
[17797] = {
"Hydromancer Thespia",
"Dastardly Dome",
"enUS",
},
[134602] = {
"Shrouded Fang",
"Temple of Sethraliss",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[93913] = {
"Fel Scorcher",
"Hellfire Citadel",
"enUS",
},
[53619] = {
"Druid of the Flame",
"Firelands",
"enUS",
},
[52606] = {
"Gurubashi Warmonger",
"Zul'Gurub",
"enUS",
},
[87989] = {
"Forgemistress Flamehand",
"Blackrock Foundry",
"enUS",
},
[178624] = {
"Mawsworn Sentry",
"Sanctum of Domination",
"enUS",
},
[18309] = {
"Ethereal Scavenger",
"Khaz Algar (Surface)",
"enUS",
},
[129232] = {
"Mogul Razdunk",
"The MOTHERLODE!!",
"enUS",
},
[119470] = {
"Corrupted Risen Soldier",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[214548] = {
"Slippery Syphoner",
"Tak-Rethan Abyss",
"enUS",
},
[37122] = {
"Captain Arnath",
"Icecrown Citadel",
"enUS",
},
[53630] = {
"Unstable Pyrelord",
"Firelands",
"enUS",
},
[122397] = {
"Corrupted Risen Arbalest",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[178625] = {
"Mawsworn Archer",
"Sanctum of Domination",
"enUS",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[23172] = {
"Hand of Gorefiend",
"Black Temple",
"enUS",
},
[234932] = {
"Gold Shaman",
"Sidestreet Sluice",
"enUS",
},
[55265] = {
"Morchok",
"Dragon Soul",
"enUS",
},
[178626] = {
"Mawrat",
"Sanctum of Domination",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[55294] = {
"Ultraxion",
"Dragon Soul",
"enUS",
},
[158373] = {
"Roberto Pupellyverbos",
"Horrific Vision of Stormwind",
"enUS",
},
[22898] = {
"Supremus",
"Black Temple",
"enUS",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[56854] = {
"Twilight Elite Dreadblade",
"Dragon Soul",
"enUS",
},
[111852] = {
"Rothos",
"The Emerald Nightmare",
"enUS",
},
[129548] = {
"Blacktooth Brute",
"Freehold",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
"enUS",
},
[117198] = {
"Highlord Kruul",
"Artifact - Acquisition - Tank",
"enUS",
},
[37532] = {
"Frostwing Whelp",
"Icecrown Citadel",
"enUS",
},
[12100] = {
"Lava Reaver",
"Molten Core",
"enUS",
},
[88818] = {
"Security Guard",
"Blackrock Foundry",
"enUS",
},
[130024] = {
"Soggy Shiprat",
"Freehold",
"enUS",
},
[178628] = {
"Mawsworn Darkcaster",
"Sanctum of Domination",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[53119] = {
"Flamewaker Forward Guard",
"Firelands",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[176581] = {
"Spiked Ball",
"Sanctum of Domination",
"enUS",
},
[53088] = {
"Temple Rat",
"Zul'Gurub",
"enUS",
},
[53631] = {
"Cinderweb Spiderling",
"Firelands",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
"enUS",
},
[54015] = {
"Majordomo Staghelm",
"Firelands",
"enUS",
},
[54143] = {
"Molten Flamefather",
"Firelands",
"enUS",
},
[92146] = {
"Gurtogg Bloodboil",
"Hellfire Citadel",
"enUS",
},
[228648] = {
"Rik Reverb",
"Liberation of Undermine",
"enUS",
},
[177094] = {
"Signe",
"Sanctum of Domination",
"enUS",
},
[117484] = {
"Jormog the Behemoth",
"Artifact - Highmountain - Dual Boss",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
"enUS",
},
[18341] = {
"Pandemonius",
"Auchindoun: Mana-Tombs",
"enUS",
},
[175559] = {
"Kel'Thuzad",
"Sanctum of Domination",
"enUS",
},
[17414] = {
"Shadowmoon Technician",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[177095] = {
"Kyra",
"Sanctum of Domination",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
"enUS",
},
[17670] = {
"Shattered Hand Houndmaster",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[178631] = {
"Mawsworn Commander",
"Sanctum of Domination",
"enUS",
},
[43778] = {
"Foe Reaper 5000",
"Dastardly Dome",
"enUS",
},
[158092] = {
"Fallen Heartpiercer",
"Horrific Vision of Stormwind",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
"enUS",
},
[17990] = {
"Underbog Mushroom",
"Coilfang: The Underbog",
"enUS",
},
[56575] = {
"Burning Tendons",
"Dragon Soul",
"enUS",
},
[88820] = {
"Furnace Engineer",
"Blackrock Foundry",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[114629] = {
"Spectral Retainer",
"Return to Karazhan",
"enUS",
},
[36612] = {
"Lord Marrowgar",
"Icecrown Citadel",
"enUS",
},
[53120] = {
"Flamewaker Pathfinder",
"Firelands",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[52956] = {
"Zandalari Juggernaut",
"Zul'Gurub",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
"enUS",
},
[127723] = {
"Imperator Deconix",
"Antorus, the Burning Throne",
"enUS",
},
[126983] = {
"Harlan Sweete",
"Freehold",
"enUS",
},
[22853] = {
"Illidari Defiler",
"Black Temple",
"enUS",
},
[22917] = {
"Illidan Stormrage",
"Black Temple",
"enUS",
},
[137474] = {
"King Timalji",
"Kings' Rest",
"enUS",
},
[139269] = {
"Gloom Horror",
"Waycrest Manor",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[109040] = {
"Arcanist Tel'arn",
"The Nighthold",
"enUS",
},
[88821] = {
"Bellows Operator",
"Blackrock Foundry",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[24744] = {
"Vexallus",
"Magisters' Terrace",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[94733] = {
"Felfire Demolisher",
"Hellfire Citadel",
"enUS",
},
[116840] = {
"Darkness Within",
"The Eye of Eternity - Scenario",
"enUS",
},
[53786] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[36808] = {
"Deathspeaker Zealot",
"Icecrown Citadel",
"enUS",
},
[127724] = {
"Fanatical Pyromancer",
"Antorus, the Burning Throne",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[111856] = {
"Guardian Gorroc",
"The Emerald Nightmare",
"enUS",
},
[2630] = {
"Earthbind Totem",
"Magisters' Terrace",
"enUS",
},
[114625] = {
"Phantom Guest",
"Return to Karazhan",
"enUS",
},
[22884] = {
"Leviathan",
"Black Temple",
"enUS",
},
[114634] = {
"Undying Servant",
"Return to Karazhan",
"enUS",
},
[109041] = {
"Naturalist Tel'arn",
"The Nighthold",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[114633] = {
"Spectral Valet",
"Return to Karazhan",
"enUS",
},
[157700] = {
"Agustus Moulaine",
"Horrific Vision of Stormwind",
"enUS",
},
[101875] = {
"Twilight Ritualist",
"Tirisfal Glades",
"enUS",
},
[53121] = {
"Flamewaker Cauterizer",
"Firelands",
"enUS",
},
[118728] = {
"Ghastly Bonewarden",
"Tomb of Sargeras",
"enUS",
},
[37571] = {
"Darkfallen Advisor",
"Icecrown Citadel",
"enUS",
},
[37125] = {
"Captain Rupert",
"Icecrown Citadel",
"enUS",
},
[127725] = {
"Felblade Shocktrooper",
"Antorus, the Burning Throne",
"enUS",
},
[161745] = {
"Hepthys",
"Ny'alotha, the Waking City",
"enUS",
},
[10405] = {
"Plague Ghoul",
"Stratholme",
"enUS",
},
[10437] = {
"Nerub'enkan",
"Stratholme",
"enUS",
},
[134616] = {
"Krolusk Pup",
"Temple of Sethraliss",
"enUS",
},
[78801] = {
"Darkshard Acidback",
"Blackrock Foundry",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[129517] = {
"Reanimated Raptor",
"Atal'Dazar",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[161746] = {
"Ossirat",
"Ny'alotha, the Waking City",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[22965] = {
"Devoted Steward",
"Black Temple",
"enUS",
},
[134617] = {
"Krolusk Hatchling",
"Temple of Sethraliss",
"enUS",
},
[208244] = {
"Nerubian Threadmancer",
"Skittering Breach",
"enUS",
},
[217541] = {
"Nightfall Initiate",
"Nightfall Sanctum",
"enUS",
},
[17724] = {
"Underbat",
"Coilfang: The Underbog",
"enUS",
},
[78233] = {
"Darkshard Crystalback",
"Blackrock Foundry",
"enUS",
},
[17671] = {
"Shattered Hand Champion",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[111858] = {
"Guardian Rurson",
"The Emerald Nightmare",
"enUS",
},
[52409] = {
"Ragnaros",
"Firelands",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[56587] = {
"Twilight Assault Drake",
"Dragon Soul",
"enUS",
},
[144683] = {
"Ra'wani Kanae",
"Battle of Dazar'alor",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[111303] = {
"Nightborne Sage",
"The Nighthold",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[18311] = {
"Ethereal Crypt Raider",
"Khaz Algar (Surface)",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[137487] = {
"Skeletal Hunting Raptor",
"Kings' Rest",
"enUS",
},
[119473] = {
"Unstable Fel Orb",
"Black Rook Hold - Artifact Challenge",
"enUS",
},
[37126] = {
"Sister Svalna",
"Icecrown Citadel",
"enUS",
},
[134388] = {
"A Knot of Snakes",
"Temple of Sethraliss",
"enUS",
},
[229226] = {
"Darkfuse Junker",
"Liberation of Undermine",
"enUS",
},
[53890] = {
"Hideous Amalgamation",
"Dragon Soul",
"enUS",
},
[152324] = {
"Aldwin Laughlin",
"Horrific Vision of Stormwind",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[235187] = {
"Voltaic Image",
"Liberation of Undermine",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[234436] = {
"Xel'anegh the Many",
"Excavation Site 9",
"enUS",
},
[146442] = {
"Grunt",
"Battle of Dazar'alor",
"enUS",
},
[112718] = {
"Sidereal Familiar",
"The Nighthold",
"enUS",
},
[103685] = {
"Tichondrius",
"The Nighthold",
"enUS",
},
[89890] = {
"Fel Lord Zakuun",
"Hellfire Citadel",
"enUS",
},
[220616] = {
"Corridor Sleeper",
"Darkflame Cleft",
"enUS",
},
[229222] = {
"Darkfuse Melter",
"Liberation of Undermine",
"enUS",
},
[157349] = {
"Void Boar",
"Horrific Vision of Orgrimmar",
"enUS",
},
[234437] = {
"Xel'anegh the Many",
"Excavation Site 9",
"enUS",
},
[234949] = {
"Geargrave",
"The Dread Pit",
"enUS",
},
[52376] = {
"Florawing Needler",
"Zul'Gurub",
"enUS",
},
[111860] = {
"Bo'lan the Marked",
"The Emerald Nightmare",
"enUS",
},
[234975] = {
"Electricity Generator",
"Sidestreet Sluice",
"enUS",
},
[22869] = {
"Illidari Boneslicer",
"Black Temple",
"enUS",
},
[237252] = {
"Underpin's Friend's Agent",
"Sidestreet Sluice",
"enUS",
},
[88314] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[234438] = {
"Xel'anegh the Many",
"Excavation Site 9",
"enUS",
},
[23028] = {
"Bonechewer Taskmaster",
"Black Temple",
"enUS",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[37782] = {
"Flesh-eating Insect",
"Icecrown Citadel",
"enUS",
},
[113090] = {
"Corrupted Gatewarden",
"The Emerald Nightmare",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[228463] = {
"Shock Reel Assistant",
"Liberation of Undermine",
"enUS",
},
[17464] = {
"Shattered Hand Gladiator",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[37127] = {
"Ymirjar Frostbinder",
"Icecrown Citadel",
"enUS",
},
[53635] = {
"Cinderweb Drone",
"Firelands",
"enUS",
},
[178133] = {
"Murkbrine Wavejumper",
"Tazavesh, the Veiled Market",
"enUS",
},
[53891] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[54161] = {
"Flame Archon",
"Firelands",
"enUS",
},
[113012] = {
"Felsworn Chaos-Mage",
"The Nighthold",
"enUS",
},
[177004] = {
"Tortured Amalgamation",
"Sanctum of Domination",
"enUS",
},
[94285] = {
"Fel Extractor",
"Hellfire Citadel",
"enUS",
},
[136160] = {
"King Dazar",
"Kings' Rest",
"enUS",
},
[129699] = {
"Ludwig Von Tortollan",
"Freehold",
"enUS",
},
[147497] = {
"Prelate Akk'al",
"Battle of Dazar'alor",
"enUS",
},
[57382] = {
"Dark Globule",
"Dragon Soul",
"enUS",
},
[130192] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[121399] = {
"Inquisitor Sebilus",
"Tomb of Sargeras",
"enUS",
},
[111295] = {
"Domesticated Manasaber",
"The Nighthold",
"enUS",
},
[16523] = {
"Shattered Hand Savage",
"Hellfire Citadel: The Shattered Halls",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[111350] = {
"Skittering Shadows",
"The Emerald Nightmare",
"enUS",
},
[90114] = {
"Iron Dragoon",
"Hellfire Citadel",
"enUS",
},
[148617] = {
"Akunda the Devout",
"Battle of Dazar'alor",
"enUS",
},
[112118] = {
"Tainted Bloodpetal",
"The Emerald Nightmare",
"enUS",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[91331] = {
"Archimonde",
"Hellfire Citadel",
"enUS",
},
[118460] = {
"Engine of Souls",
"Tomb of Sargeras",
"enUS",
},
[112255] = {
"Sludgerax",
"The Nighthold",
"enUS",
},
[127233] = {
"Flameweaver",
"Antorus, the Burning Throne",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
"enUS",
},
[152939] = {
"Boundless Corruption",
"Horrific Vision of Stormwind",
"enUS",
},
[18312] = {
"Ethereal Spellbinder",
"Auchindoun: Mana-Tombs",
"enUS",
},
[91520] = {
"Adjunct Kuroh",
"Hellfire Citadel",
"enUS",
},
[217039] = {
"Nerubian Hauler",
"Ara-Kara, City of Echoes",
"enUS",
},
[144747] = {
"Pa'ku's Aspect",
"Battle of Dazar'alor",
"enUS",
},
[234443] = {
"Leopleuradon",
"Theater of Pain",
"enUS",
},
[37531] = {
"Frostwarden Handler",
"Icecrown Citadel",
"enUS",
},
[223182] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[22855] = {
"Illidari Nightlord",
"Black Temple",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[211061] = {
"Patreux",
"Fungal Folly",
"enUS",
},
[23047] = {
"Shadowmoon Soldier",
"Black Temple",
"enUS",
},
[19016] = {
"Hellfire Familiar",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[90284] = {
"Iron Reaver",
"Hellfire Citadel",
"enUS",
},
[23239] = {
"Bonechewer Combatant",
"Black Temple",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
"enUS",
},
[105721] = {
"Nightmare Ichor",
"The Emerald Nightmare",
"enUS",
},
[144231] = {
"Rowdy Reveler",
"The MOTHERLODE!!",
"enUS",
},
[118518] = {
"Priestess Lunaspyre",
"Tomb of Sargeras",
"enUS",
},
[237516] = {
"Geargrinder Biker",
"Liberation of Undermine",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[178732] = {
"Mawsworn Runesmith",
"Sanctum of Domination",
"enUS",
},
[127732] = {
"Clobex",
"Antorus, the Burning Throne",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[122778] = {
"Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[127231] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[10408] = {
"Rockwing Gargoyle",
"Stratholme",
"enUS",
},
[16425] = {
"Phantom Guardsman",
"Karazhan",
"enUS",
},
[125429] = {
"Paraxis Inquisitor",
"Antorus, the Burning Throne",
"enUS",
},
[234958] = {
"Maulspike",
"Fungal Folly",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[52524] = {
"Cinderweb Spinner",
"Firelands",
"enUS",
},
[146105] = {
"Living Bomb",
"Battle of Dazar'alor",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
"enUS",
},
[176605] = {
"Amdam",
"Sanctum of Domination",
"enUS",
},
[156642] = {
"Enthralled Laborer",
"Horrific Vision of Stormwind",
"enUS",
},
[207454] = {
"Fungal Gutter",
"Mycomancer Cavern",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[10406] = {
"Ghoul Ravener",
"Stratholme",
"enUS",
},
[91646] = {
"Grim Collaborator",
"Hellfire Citadel",
"enUS",
},
[180782] = {
"Consumed Soul",
"Sanctum of Domination",
"enUS",
},
[17397] = {
"Shadowmoon Adept",
"Hellfire Citadel: The Blood Furnace",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[135470] = {
"Aka'ali the Conqueror",
"Kings' Rest",
"enUS",
},
[175726] = {
"Skyja",
"Sanctum of Domination",
"enUS",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[175727] = {
"Soulrender Dormazain",
"Sanctum of Domination",
"enUS",
},
[144638] = {
"Grong the Revenant",
"Battle of Dazar'alor",
"enUS",
},
[236176] = {
"Clanker Bomb",
"Sidestreet Sluice",
"enUS",
},
[93830] = {
"Iron Dragoon",
"Hellfire Citadel",
"enUS",
},
[176920] = {
"Domination Arrow",
"Sanctum of Domination",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[111354] = {
"Taintheart Befouler",
"The Emerald Nightmare",
"enUS",
},
[183496] = {
"Foul Gorger",
"Sepulcher of the First Ones",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[125569] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[186105] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[17993] = {
"Bloodwarder Protector",
"Tempest Keep: The Botanica",
"enUS",
},
[129526] = {
"Bilge Rat Swabby",
"Freehold",
"enUS",
},
[185347] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[184539] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
"enUS",
},
[122104] = {
"Portal Keeper Hasabel",
"Antorus, the Burning Throne",
"enUS",
},
[18313] = {
"Ethereal Sorcerer",
"Auchindoun: Mana-Tombs",
"enUS",
},
[229855] = {
"Shadeguard Speaker",
"Nightfall Sanctum",
"enUS",
},
[179257] = {
"Burning Shade",
"Sanctum of Domination",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[121003] = {
"Rez the Tombwatcher",
"Tomb of Sargeras",
"enUS",
},
[111355] = {
"Taintheart Tormenter",
"The Emerald Nightmare",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[117264] = {
"Maiden of Valor",
"Tomb of Sargeras",
"enUS",
},
[91648] = {
"Somber Guardian",
"Hellfire Citadel",
"enUS",
},
[233474] = {
"Gallagio Goon",
"Liberation of Undermine",
"enUS",
},
[178733] = {
"Mawsworn Vanguard",
"Sanctum of Domination",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[129527] = {
"Bilge Rat Buccaneer",
"Freehold",
"enUS",
},
[101118] = {
"Faceless Corrupter",
"Tirisfal Glades",
"enUS",
},
[176949] = {
"Mawsworn Embermage",
"Sanctum of Domination",
"enUS",
},
[185610] = {
"Unmade Steward",
"Sepulcher of the First Ones",
"enUS",
},
[57821] = {
"Lieutenant Shara",
"Dragon Soul",
"enUS",
},
[93952] = {
"Fel Raven",
"Hellfire Citadel",
"enUS",
},
[159305] = {
"Maddened Conscript",
"Ny'alotha, the Waking City",
"enUS",
},
[52958] = {
"Zandalari Hierophant",
"Zul'Gurub",
"enUS",
},
[162303] = {
"Aqir Swarmkeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[153065] = {
"Voidbound Ravager",
"Horrific Vision of Orgrimmar",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
"enUS",
},
[157238] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
"enUS",
},
[160249] = {
"Spike Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[181546] = {
"Prototype of Renewal",
"Sepulcher of the First Ones",
"enUS",
},
[52558] = {
"Lord Rhyolith",
"Firelands",
"enUS",
},
[179894] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[159309] = {
"Leeching Parasite",
"Ny'alotha, the Waking City",
"enUS",
},
[179942] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[114794] = {
"Skeletal Hound",
"Return to Karazhan",
"enUS",
},
[161312] = {
"Crushing Tendril",
"Ny'alotha, the Waking City",
"enUS",
},
[118523] = {
"Huntress Kasparian",
"Tomb of Sargeras",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[162933] = {
"Thought Harvester",
"Ny'alotha, the Waking City",
"enUS",
},
[155656] = {
"Misha",
"Horrific Vision of Orgrimmar",
"enUS",
},
[53639] = {
"Flamewaker Cauterizer",
"Firelands",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[178661] = {
"Mawsworn Interceptor",
"Sanctum of Domination",
"enUS",
},
[37022] = {
"Blighted Abomination",
"Icecrown Citadel",
"enUS",
},
[162305] = {
"Aqir Heartpiercer",
"Ny'alotha, the Waking City",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[157475] = {
"Synthesis Growth",
"Ny'alotha, the Waking City",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
"enUS",
},
[101120] = {
"Flesh Spawn",
"Tirisfal Glades",
"enUS",
},
[76806] = {
"Heart of the Mountain",
"Blackrock Foundry",
"enUS",
},
[244182] = {
"Faceless Shadowcaller",
"Horrific Vision of Orgrimmar",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[127235] = {
"Garothi Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[183404] = {
"Eternal Assembler",
"Sepulcher of the First Ones",
"enUS",
},
[181011] = {
"Ancient Guardian",
"Sepulcher of the First Ones",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[148631] = {
"Unexploded Ordnance",
"Battle of Dazar'alor",
"enUS",
},
[244183] = {
"Burrowing Appendage",
"Horrific Vision of Orgrimmar",
"enUS",
},
[111528] = {
"Deathroot Ancient",
"The Emerald Nightmare",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[112638] = {
"Astral Defender",
"The Nighthold",
"enUS",
},
[17994] = {
"Bloodwarder Falconer",
"Tempest Keep: The Botanica",
"enUS",
},
[156653] = {
"Coagulated Horror",
"Horrific Vision of Orgrimmar",
"enUS",
},
[235318] = {
"Underpaid Brute",
"Skittering Breach",
"enUS",
},
[148483] = {
"Ancestral Avenger",
"Battle of Dazar'alor",
"enUS",
},
[244184] = {
"Faceless Willbreaker",
"Horrific Vision of Orgrimmar",
"enUS",
},
[18314] = {
"Nexus Stalker",
"Auchindoun: Mana-Tombs",
"enUS",
},
[53128] = {
"Giant Fire Scorpion",
"Firelands",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[16171] = {
"Coldmist Widow",
"Karazhan",
"enUS",
},
[181224] = {
"Dausegne",
"Sepulcher of the First Ones",
"enUS",
},
[53640] = {
"Flamewaker Sentinel",
"Firelands",
"enUS",
},
[104536] = {
"Inquisitor Vethriz",
"The Nighthold",
"enUS",
},
[53896] = {
"Blazing Talon Initiate",
"Firelands",
"enUS",
},
[16170] = {
"Coldmist Stalker",
"Karazhan",
"enUS",
},
[181856] = {
"Point Defense Drone",
"Sepulcher of the First Ones",
"enUS",
},
[23049] = {
"Shadowmoon Weapon Master",
"Black Temple",
"enUS",
},
[156143] = {
"Voidcrazed Hulk",
"Horrific Vision of Orgrimmar",
"enUS",
},
[125436] = {
"Thu'raya, Mother of the Cosmos",
"Antorus, the Burning Throne",
"enUS",
},
[101122] = {
"Twilight Shadowcaster",
"Tirisfal Glades",
"enUS",
},
[137204] = {
"Hoodoo Hexer",
"Temple of Sethraliss",
"enUS",
},
[244186] = {
"K'thir Dominator",
"Horrific Vision of Orgrimmar",
"enUS",
},
[120158] = {
"Volatile Corruption",
"Tomb of Sargeras",
"enUS",
},
[171500] = {
"Shuffling Corpse",
"The Necrotic Wake",
"enUS",
},
[179399] = {
"Drunk Pirate",
"Tazavesh, the Veiled Market",
"enUS",
},
[229854] = {
"Inquisitor Speaker",
"Nightfall Sanctum",
"enUS",
},
[94724] = {
"Bryanda",
"Hellfire Citadel",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
"enUS",
},
[244187] = {
"K'thir Mindcarver",
"Horrific Vision of Orgrimmar",
"enUS",
},
[105304] = {
"Dominator Tentacle",
"The Emerald Nightmare",
"enUS",
},
[123398] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[113048] = {
"Corrupted Deer",
"The Emerald Nightmare",
"enUS",
},
[217570] = {
"Speaker Halven",
"Nightfall Sanctum",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
"enUS",
},
[76809] = {
"Foreman Feldspar",
"Blackrock Foundry",
"enUS",
},
[113920] = {
"Flail of Il'gynoth",
"The Emerald Nightmare",
"enUS",
},
[122366] = {
"Varimathras",
"Antorus, the Burning Throne",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
"enUS",
},
},
["aura_cooldown_reverse"] = false,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["last_news_time"] = 1702345503,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["plater_resources_align"] = "horizontal",
["aura_height2"] = 12,
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[88308] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[426860] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[201226] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[468813] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[268202] = {
true,
"orchid",
"",
},
[199151] = {
true,
"blue",
"",
},
[372311] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[333488] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[444608] = {
false,
"gray",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
true,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[1214315] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[450854] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[330614] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[391118] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[384868] = {
true,
"orangered",
"",
},
[372087] = {
true,
"orangered",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[426893] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[275907] = {
true,
"orangered",
"",
},
[383823] = {
true,
"orchid",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[473114] = {
true,
"orangered",
"",
},
[257756] = {
true,
"orchid",
"",
},
[427342] = {
true,
"orchid",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[226296] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[427025] = {
true,
"orangered",
"",
},
[426260] = {
true,
"orangered",
"",
},
[1217496] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[426261] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[265721] = {
true,
"orangered",
"",
},
[188404] = {
true,
"orangered",
"",
},
[369828] = {
true,
"orchid",
"",
},
[426645] = {
true,
"orangered",
},
[87618] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[372225] = {
true,
"orchid",
"",
},
[387950] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[320822] = {
true,
"orchid",
"",
},
[393432] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[432198] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[293986] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[449090] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[474018] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[448640] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[373742] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[331718] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[443500] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[411994] = {
true,
"darkorange",
"",
},
[465682] = {
true,
"orangered",
"",
},
[474087] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[381525] = {
true,
"orangered",
"",
},
[472452] = {
true,
"orangered",
"",
},
[340160] = {
true,
"orangered",
"",
},
[262377] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[412129] = {
true,
"orangered",
"",
},
},
["ui_parent_cast_strata"] = "DIALOG",
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Cast - Tank Interrupt"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Unit Power"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Glowing [P]"] = 10,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Add - Explode on Die [P]"] = 1,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Countdown"] = 12,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - AoE With Range [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Cast - Voidzone [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Stop Casting"] = 4,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Relics 9.2 M Dungeons"] = 2,
["Unit - Important"] = 11,
["Cast - Quick Flash"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Spiteful Affix"] = 3,
["Add - Warning [P]"] = 5,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Color Change"] = 1,
["Cast - AoE Hit All [P]"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Aura - Is Cast Bar [P]"] = 1,
["Aura Border Color"] = 1,
["Cast - On Going Cast [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Castbar is Timer [P]"] = 2,
["Blink by Time Left"] = 1,
["Explosion Affix M+"] = 14,
["Fixate On You"] = 12,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["semver"] = "1.0.2",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["aura_alpha"] = 0.8499999642372131,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["extra_icon_height"] = 10,
["plater_resources_show_number"] = false,
["extra_icon_show_purge"] = true,
["aura_consolidate"] = true,
["extra_icon_width"] = 16,
["health_statusbar_texture"] = "Solid",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Monk Statue"] = 2,
["Combo Points"] = 6,
["Extra Border"] = 2,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Execute Range"] = 1,
},
["minor_width_scale"] = 0.9999999403953552,
["indicator_pet"] = false,
["captured_spells"] = {
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["npcID"] = 208745,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2787,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["npcID"] = 208747,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2788,
},
[421910] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["npcID"] = 208743,
["isChanneled"] = false,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2826,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["npcID"] = 213008,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2788,
},
[426261] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Sootsnout",
["npcID"] = 212412,
},
},
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["aura_timer_text_font"] = "Accidental Presidency",
["extra_icon_stack_font"] = "Accidental Presidency",
["aura_height"] = 12,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["aura2_x_offset"] = 2.099990844726563,
["target_indicator"] = "Double Arrows",
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "15",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplateShowPersonalCooldowns"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.2000000476837",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateMinScale"] = "1",
["nameplateLargeTopInset"] = "0.03999999910593",
["nameplateOtherTopInset"] = "0.03999999910593",
["ShowClassColorInNameplate"] = "1",
["nameplateSelfBottomInset"] = "0.2",
["nameplateSelfTopInset"] = "0.5",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.89999997615814",
["nameplateOccludedAlphaMult"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateShowFriendlyBuffs"] = "0",
},
["login_counter"] = 24115,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["bossmod_aura_height"] = 32,
["aura_stack_font"] = "Accidental Presidency",
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["plater_resources_show_depleted"] = false,
["plate_config"] = {
["player"] = {
["spellpercent_text_font"] = "Accidental Presidency",
["power_percent_text_enabled"] = false,
["click_through"] = true,
["level_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["big_actortitle_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
["power_percent_text_color"] = {
1,
1,
1,
},
["percent_text_font"] = "Accidental Presidency",
["power_percent_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Accidental Presidency",
["actorname_use_class_color"] = true,
["cast"] = {
120,
1,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["mana_incombat"] = {
nil,
4,
},
["actorname_use_guild_color"] = false,
["all_names"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["quest_color_enemy"] = {
1,
0.369,
0,
},
["only_thename"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["percent_show_health"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["big_actorname_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Accidental Presidency",
["big_actorname_text_outline"] = "OUTLINE",
["percent_text_ooc"] = true,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana"] = {
nil,
4,
},
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_friends_color"] = false,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_text_size"] = 10,
["big_actortitle_text_size"] = 10,
["percent_text_font"] = "Accidental Presidency",
["buff_frame_y_offset"] = 0,
["percent_text_outline"] = "NONE",
["actorname_text_font"] = "Accidental Presidency",
["health_incombat"] = {
120,
12,
},
["health"] = {
120,
12,
},
["percent_text_enabled"] = true,
["quest_enabled"] = true,
["spellpercent_text_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["spellpercent_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["enabled"] = false,
["spellpercent_text_outline"] = "NONE",
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.369,
0,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
1,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Accidental Presidency",
["only_names"] = false,
["percent_text_enabled"] = true,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["big_actorname_text_font"] = "Accidental Presidency",
["big_actortitle_text_size"] = 10,
["big_actorname_text_size"] = 10,
["percent_text_ooc"] = true,
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_enabled"] = true,
["percent_text_font"] = "Accidental Presidency",
["percent_text_outline"] = "NONE",
["actorname_text_font"] = "Accidental Presidency",
["health_incombat"] = {
100,
1,
},
["health"] = {
100,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_text_size"] = 10,
["percent_show_health"] = true,
["level_text_enabled"] = true,
},
["global_health_width"] = 120,
["global_health_height"] = 12,
["enemyplayer"] = {
["spellpercent_text_font"] = "ViklunD's SexFont",
["cast"] = {
120,
8,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["x"] = 1,
["side"] = 5,
},
["percent_text_show_decimals"] = false,
["spellpercent_text_outline"] = "NONE",
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["mana_incombat"] = {
120,
1,
},
["all_names"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["spellname_text_font"] = "Accidental Presidency",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["big_actortitle_text_size"] = 10,
["big_actorname_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["percent_text_size"] = 10,
["percent_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["percent_show_percent"] = false,
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["quest_color_enabled"] = true,
["health_incombat"] = {
nil,
12,
},
["health"] = {
120,
},
["level_text_alpha"] = 0.2999999821186066,
["quest_enabled"] = true,
["percent_show_health"] = false,
["mana"] = {
120,
1,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "ViklunD's SexFont",
["level_text_size"] = 10,
["cast"] = {
120,
8,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["actorname_text_outline"] = "OUTLINE",
["actorname_text_spacing"] = 9,
["big_actortitle_text_font"] = "Accidental Presidency",
["spellpercent_text_size"] = 10,
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 0.4000015258789063,
["side"] = 5,
},
["spellname_text_font"] = "Accidental Presidency",
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_text_size"] = 10,
["percent_text_show_decimals"] = false,
["percent_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 10,
["health"] = {
120,
},
["power_percent_text_font"] = "Accidental Presidency",
["actorname_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 1,
["side"] = 3,
},
["health_incombat"] = {
nil,
12,
},
["level_text_enabled"] = false,
},
},
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["indicator_elite"] = false,
["bossmod_aura_width"] = 32,
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3296-009336A2"] = "HolyPower",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-3685-0DFC95BB"] = "Essence",
["Player-5764-000166DE"] = "HolyPower",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4184-00949207"] = "HolyPower",
["Player-5764-0002671B"] = "HolyPower",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-11-0E532B0D"] = "Chi",
["Player-3685-0990B6B7"] = "Runes",
["Player-5765-003F0A0E"] = "Chi",
["Player-4184-009493C8"] = "Runes",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-4184-00948CDA"] = "Chi",
["Player-5765-003F0A27"] = "Runes",
["Player-3685-07180DDD"] = "Chi",
["Player-3685-0ACADE27"] = "SoulShards",
["Player-3685-07F1620A"] = "ArcaneCharges",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-11-0E532B15"] = "HolyPower",
["Player-5764-000944AE"] = "Chi",
["Player-4184-00949549"] = "ComboPoints",
["Player-4609-0014C179"] = "HolyPower",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-3685-0722C2B9"] = "HolyPower",
["Player-3725-0A9FE377"] = "Chi",
["Player-3685-0722B5D5"] = "ComboPoints",
["Player-4609-0014B1D9"] = "Essence",
["Player-3685-09491807"] = "ComboPoints",
},
},
["aura_timer_text_size"] = 10,
["cast_statusbar_spark_offset"] = -13,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[149740] = {
true,
false,
"fuchsia",
},
[231197] = {
true,
false,
"aqua",
},
[213934] = {
true,
false,
"aqua",
},
[95842] = {
true,
false,
"fuchsia",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[184023] = {
true,
false,
"fuchsia",
},
[134024] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[196045] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[229686] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[132126] = {
false,
false,
"honeydew",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[122971] = {
true,
false,
"fuchsia",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"fuchsia",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[213338] = {
true,
false,
"fuchsia",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[229069] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[144293] = {
false,
false,
"aqua",
},
[137516] = {
false,
false,
"lightsalmon",
},
[144294] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[164501] = {
false,
false,
"fuchsia",
},
[231380] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[224732] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"fuchsia",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[130404] = {
false,
false,
"peru",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[135258] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[113537] = {
true,
false,
"aqua",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[195876] = {
true,
false,
"fuchsia",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
[195877] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[40634] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[209801] = {
true,
false,
"aqua",
},
[164804] = {
true,
false,
"aqua",
},
[207198] = {
true,
false,
"fuchsia",
},
[210269] = {
false,
false,
"no color",
},
[195878] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[213932] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[129553] = {
true,
false,
"fuchsia",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
false,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[220815] = {
true,
false,
"fuchsia",
},
[197912] = {
true,
false,
"fuchsia",
},
[95766] = {
true,
false,
"aqua",
},
[101991] = {
true,
false,
"fuchsia",
},
[91001] = {
true,
false,
"aqua",
},
[230740] = {
true,
false,
"aqua",
},
[165919] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[223777] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[184301] = {
true,
false,
"fuchsia",
},
[134629] = {
false,
false,
"navajowhite",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[207969] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[138338] = {
true,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[216342] = {
true,
false,
"fuchsia",
},
[165137] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[136549] = {
true,
false,
"aqua",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[113998] = {
true,
false,
"aqua",
},
[200137] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[212403] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"fuchsia",
},
[216338] = {
true,
false,
"aqua",
},
[81820] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[213806] = {
true,
false,
"fuchsia",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[136295] = {
false,
false,
"peru",
},
[207459] = {
true,
false,
"fuchsia",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[169927] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[135474] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[196798] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[228540] = {
true,
false,
"fuchsia",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[133685] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[144303] = {
false,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[129529] = {
false,
false,
"goldenrod",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[184132] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[163503] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"magenta",
},
[166275] = {
true,
false,
"fuchsia",
},
[133432] = {
true,
false,
"fuchsia",
},
[208165] = {
true,
false,
"fuchsia",
},
[189340] = {
true,
false,
"aqua",
},
[126919] = {
true,
false,
"fuchsia",
},
[133870] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[220314] = {
true,
false,
"fuchsia",
},
[136353] = {
false,
false,
"royalblue",
},
[139949] = {
false,
false,
"honeydew",
},
[192333] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[168318] = {
true,
false,
"fuchsia",
},
[231312] = {
true,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[131436] = {
true,
false,
"aqua",
},
[170572] = {
true,
false,
"fuchsia",
},
[204206] = {
true,
false,
"fuchsia",
},
[220060] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"peru",
},
[144295] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[197698] = {
true,
false,
"aqua",
},
[45919] = {
true,
false,
"aqua",
},
[207468] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[134331] = {
false,
false,
"lightskyblue",
},
[136186] = {
false,
false,
"honeydew",
},
[189266] = {
true,
false,
"aqua",
},
[189265] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[200126] = {
true,
false,
"fuchsia",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[196671] = {
true,
false,
"aqua",
},
[131318] = {
false,
false,
"fuchsia",
},
[206064] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[125977] = {
false,
false,
"plum",
},
[188067] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"fuchsia",
},
[223773] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[223253] = {
true,
false,
"fuchsia",
},
[139422] = {
false,
false,
"lightskyblue",
},
[224271] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[168578] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[75979] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[134284] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[190294] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[223775] = {
true,
false,
"fuchsia",
},
[194894] = {
true,
false,
"fuchsia",
},
[206698] = {
true,
false,
"fuchsia",
},
[190407] = {
true,
false,
"fuchsia",
},
[220195] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[98792] = {
true,
false,
"aqua",
},
[163086] = {
true,
false,
"aqua",
},
[223776] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[59552] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[130635] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[205363] = {
true,
false,
"fuchsia",
},
[40167] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[208193] = {
true,
false,
"fuchsia",
},
[134417] = {
false,
false,
"lightskyblue",
},
[134418] = {
false,
false,
"dodgerblue",
},
[174802] = {
true,
false,
"fuchsia",
},
[75459] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[151657] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[198927] = {
true,
false,
"aqua",
},
[89] = {
true,
false,
"fuchsia",
},
[230748] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"honeydew",
},
[205151] = {
true,
false,
"aqua",
},
},
["bossmod_cooldown_text_size"] = 10,
["range_check_alpha_friendlies"] = 0.6499999761581421,
["cast_statusbar_spark_half"] = true,
["hook_data"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Initialization"] = "function (modTable)\n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    modTable.changeBarColor = modTable.config.changeBarColor\n    modTable.changeBorderColor = modTable.config.changeBorderColor\n    modTable.resetColors = modTable.config.resetColors\n    \n    modTable.ListOfNpcs = {\n        [61146] = modTable.config.color, --\"olive\", --monk statue npcID\n        [103822] = modTable.config.color, --\"olive\", --druid treant npcID\n        [15352] = modTable.config.color, --\"olive\", --shaman elemental\n        [95072] = modTable.config.color, --\"olive\", --shaman greater earth elemental npcID\n        [61056] = modTable.config.color, --\"olive\", --shaman primal earth elemental npcID\n        \n    }\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not unitId then\n        return\n    end\n    --get the GUID of the target of the unit\n    local targetGUID = UnitGUID (unitId .. \"target\")\n    \n    if (targetGUID) then\n        \n        --get the npcID of the target\n        local npcID = Plater.GetNpcIDFromGUID (targetGUID)\n        local unitName = UnitName (unitId .. \"target\")\n        local unitNameLower = string.lower (unitName)\n        \n        --check if the npcID of this unit is in the npc list \n        local color = modTable.ListOfNpcs [npcID] or modTable.ListOfNpcs [unitName] or modTable.ListOfNpcs [unitNameLower]\n        \n        if color then\n            if modTable.changeBarColor then\n                Plater.SetNameplateColor (unitFrame, color)\n            end\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame, color)\n            end\n            unitFrame.attackingSpecificUnitFromMod = true\n        elseif unitFrame.attackingSpecificUnitFromMod and modTable.resetColors then\n            if modTable.changeBorderColor then\n                Plater.SetBorderColor (unitFrame)\n            end\n            if modTable.changeBarColor then\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n            unitFrame.attackingSpecificUnitFromMod = false\n        end\n    end\nend",
},
["Time"] = 1620377377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_attacking_unit",
["Enabled"] = false,
["Revision"] = 363,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Change the nameplate color if the unit is attacking a specific unit like Monk's Ox Statue or Druid's Treants. You may edit which units it track in the constructor script.",
["Name"] = "Attacking Specific Unit [Plater]",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 1,
["Key"] = "color",
["Value"] = {
0.5019607843137255,
0.5019607843137255,
0,
1,
},
["Name"] = "Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBarColor",
["Value"] = true,
["Name"] = "Change Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "changeBorderColor",
["Value"] = false,
["Name"] = "Change Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "resetColors",
["Value"] = true,
["Name"] = "Reset Colors",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 95,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["LastHookEdited"] = "Constructor",
["Desc"] = "Hide neutral units, show when selected, see the constructor script for options.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end\n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        envTable.HideNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat and InCombatLockdown()) then\n            return\n        end\n        \n        --check the unit reaction\n        if (unitFrame.namePlateIsTarget) then\n            envTable.ShowNameplate (unitFrame)\n            \n        else\n            envTable.HideNameplate (unitFrame)\n            \n        end    \n    end\n    \nend\n\n\n\n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        envTable.ShowNameplate (unitFrame)\n    end\n    \nend\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when plater finishes an update on the nameplate\n    --check within the envTable if the healthBar of this nameplate should be hidden\n    if (envTable.IsHidden) then\n        if (unitFrame.healthBar:IsShown()) then\n            envTable.HideNameplate (unitFrame)\n        end\n    end\n    \nend\n\n\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateUnitReaction == envTable.REACTION_NEUTRAL) then\n        \n        --plater already handle this\n        if (unitFrame.PlayerCannotAttack) then\n            return\n        end    \n        \n        --check if is only open world\n        if (envTable.OnlyInOpenWorld and Plater.ZoneInstanceType ~= \"none\") then\n            return \n        end\n        \n        --check for only in combat\n        if (envTable.ShowInCombat) then\n            envTable.ShowNameplate (unitFrame)\n        end\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.OnlyInOpenWorld = true;\n    envTable.ShowInCombat = true;\n    \n    --consts\n    envTable.REACTION_NEUTRAL = 4;\n    \n    --functions to hide and show the healthBar\n    function envTable.HideNameplate (unitFrame)\n        Plater.HideHealthBar (unitFrame)\n        Plater.DisableHighlight (unitFrame)\n        envTable.IsHidden = true\n    end\n    \n    function envTable.ShowNameplate (unitFrame)\n        Plater.ShowHealthBar (unitFrame)\n        Plater.EnableHighlight (unitFrame)\n        envTable.IsHidden = false\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Hide Neutral Units [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450458,
["Icon"] = 1990989,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 185,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["LastHookEdited"] = "Constructor",
["Desc"] = "Show how many raid members are targeting the unit",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShow = false;\n    envTable.TargetAmount:SetText (\"\")\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when a nameplate is added to the screen check if the player is in combat\n    if (InCombatLockdown()) then\n        --player is in combat, check if can check amount of targets\n        envTable.CanShow = envTable.CanShowTargetAmount();\n        \n    else\n        envTable.CanShow = false; \n    end\n    \n    envTable.TargetAmount:SetText (\"\");\n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.TargetAmount:SetText (\"\");\n    envTable.CanShow = false;\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --if the script is allowed to show the amount of targets\n    --also check if the unit is in combat\n    if (envTable.CanShow and UnitAffectingCombat (unitId)) then\n        \n        --check if can update the amount of targets following the cooldown set in the constructor script\n        --by default Plater updates the nameplate every 250ms, by default the cooldown is 2, so it'll update the amuont of target every 1/2 of a second\n        envTable.UpdateCooldown = envTable.UpdateCooldown + 1\n        if (envTable.UpdateCooldown < envTable.UpdateInterval) then\n            return\n        else\n            \n            --reset the cooldown interval to check the amount of target again\n            envTable.UpdateCooldown = 0\n            \n            --get the amount of targets\n            local amount;\n            if (envTable.InRaid) then\n                amount = envTable.NumTargetsInRaid (unitFrame)      \n                \n            elseif (envTable.InParty) then\n                amount = envTable.NumTargetsInParty (unitFrame)   \n                \n            else\n                envTable.TargetAmount:SetText (\"\")\n                return\n            end\n            \n            --update the amount text\n            if (amount == 0) then\n                envTable.TargetAmount:SetText (\"\")\n            else\n                envTable.TargetAmount:SetText (amount)\n            end\n            \n        end\n    end\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if can show the amount of targets\n    envTable.CanShow = envTable.CanShowTargetAmount();\n    \n    if (not envTable.CanShow) then\n        envTable.TargetAmount:SetText (\"\") \n    end\nend\n\n\n\n\n",
["Constructor"] = "--all gray text like this are comments and do not run as code\n--build the settings and basic functions for the hook\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --declare setting variables:\n    local textColor = \"orange\";\n    local textSize = 12;\n    \n    local showInRaid = true;\n    local showInDungeon = true;\n    local showInArena = false;\n    local showInBattleground = false;\n    local showInOpenWorld = true;\n    \n    envTable.UpdateInterval = 2; --each 2 updates in the nameplate it'll update the amount of targets\n    \n    local anchor = {\n        side = 6, --1 = topleft 2 = left 3 = bottomleft 4 = bottom 5 = bottom right 6 = right 7 = topright 8 = top\n        x = 4, --x offset\n        y = 0, --y offset\n    };\n    \n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------\n    \n    \n    --frames:\n    \n    --create the text that will show the amount of people targeting the unit\n    if (not  unitFrame.healthBar.TargetAmount) then\n        envTable.TargetAmount = Plater:CreateLabel (unitFrame.healthBar, \"\", textSize, textColor);\n        Plater.SetAnchor (envTable.TargetAmount, anchor);\n        unitFrame.healthBar.TargetAmount = envTable.TargetAmount\n    end\n    \n    --in case Plater wipes the envTable\n    envTable.TargetAmount = unitFrame.healthBar.TargetAmount\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --private variables (they will be used in the other scripts within this hook)\n    envTable.CanShow = false;\n    envTable.UpdateCooldown = 0;\n    envTable.InRaid = false;\n    envTable.InParty = false;\n    \n    ---------------------------------------------------------------------------------------------------------------------------------------------           \n    --functions\n    \n    --update the InRaid or InParty proprieties\n    function envTable.UpdateGroupType()\n        if (IsInRaid()) then\n            envTable.InRaid = true;\n            envTable.InParty = false;     \n            \n        elseif (IsInGroup()) then\n            envTable.InRaid = false;\n            envTable.InParty = true;   \n            \n        else\n            envTable.InRaid = false;            \n            envTable.InParty = false;\n        end\n    end\n    \n    --this function controls if the amount of targets can show following the settings in the top of this script\n    function envTable.CanShowTargetAmount()\n        \n        local _, instanceType, difficultyID, _, _, _, _, instanceMapID, instanceGroupSize = GetInstanceInfo()\n        \n        if (showInRaid and instanceType == \"raid\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInDungeon and instanceType == \"party\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInArena and instanceType == \"arena\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInBattleground and instanceType == \"pvp\") then\n            envTable.UpdateGroupType()\n            return true\n        end\n        \n        if (showInOpenWorld and instanceType == \"none\") then\n            envTable.UpdateGroupType()\n            if (envTable.InRaid or envTable.InParty) then\n                return true\n            end\n        end\n        \n        return false\n    end\n    \n    --get the amount of player targetting the unit in raid or party\n    function envTable.NumTargetsInRaid (unitFrame)\n        local amount = 0\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        return amount\n    end\n    \n    function envTable.NumTargetsInParty()\n        local amount = 0\n        for i = 1, GetNumGroupMembers() - 1 do\n            local unit = \"party\" .. i .. \"target\"\n            if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n                amount = amount + 1\n            end\n        end\n        \n        local unit = \"playertarget\"\n        if (UnitGUID (unit) == unitFrame.namePlateUnitGUID) then\n            amount = amount + 1\n        end        \n        \n        return amount\n    end\n    \nend",
},
["Name"] = "Players Targeting a Target [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825362,
["Icon"] = 1966587,
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 94,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Changes the target color to the color set in the constructor script.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateColor (unitFrame)\nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --usage: color name e.g \"red\" \"yellow\"; color table e.g {1, 0, 0} {1, 1, 0}; hex string e.g. \"#FF0000\" \"FFFF00\"\n    \n    envTable.TargetColor = \"purple\"\n    --envTable.TargetColor = \"#FF00FF\"\n    --envTable.TargetColor = {252/255, 0/255, 254/255}\n    \n    function envTable.UpdateColor (unitFrame)\n        --do not change the color of the personal bar\n        if (not unitFrame.IsSelf) then\n            \n            --if this nameplate the current target of the player?\n            if (unitFrame.namePlateIsTarget) then\n                Plater.SetNameplateColor (unitFrame, envTable.TargetColor)  --rgb\n            else\n                --refresh the nameplate color\n                Plater.RefreshNameplateColor (unitFrame)\n            end\n        end\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Current Target Color [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1613211428,
["Icon"] = 878211,
["PlaterCore"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    --constructor is executed only once when any script of the hook runs.\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if need update the amount of combo points shown\n    if (envTable.LastPlayerTalentUpdate > envTable.LastUpdate) then\n        envTable.UpdateComboPointAmount()\n    end    \n    \n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n        \n    else\n        envTable.ComboPointFrame:Hide()\n    end    \n    \nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --check if this nameplate is the current target\n    if (unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.ComboPointFrame:Show()\n        envTable.UpdateComboPoints()\n    else\n        envTable.ComboPointFrame:Hide()\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Player Power Update"] = "function (self, unitId, unitFrame, envTable, modTable, ...)\n    local powerType = ...\n    \n    if (powerType and powerType == \"COMBO_POINTS\" and unitFrame.namePlateIsTarget and not unitFrame.IsSelf) then\n        envTable.UpdateComboPoints()\n    end\n    \n    \nend",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.ComboPointFrame:Hide()\n    \nend\n\n\n\n\n",
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --update the amount of comboo points shown when the player changes talents or specialization\n    envTable.UpdateComboPointAmount()\n    \n    --save the time of the last talent change\n    envTable.LastPlayerTalentUpdate = GetTime()\n    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --settings\n    local anchors = {\n        {\"bottom\", unitFrame.healthBar, \"top\", 0, 24},\n    }\n    \n    local sizes = {\n        width = 12,\n        height = 12,\n        scale = 1,\n    }\n    \n    local textures = {\n        backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        backgroundTexCoords = {0/128, 21/128, 101/128, 122/128},\n        \n        comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n        comboPointTexCoords = {3/128, 18/128, 81/128, 96/128},\n    }\n    if WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE then\n        textures = {\n            backgroundTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            backgroundTexCoords = {78/128, 98/128, 21/64, 41/64},\n            \n            comboPointTexture = [[Interface\\PLAYERFRAME\\ClassOverlayComboPoints]],\n            comboPointTexCoords = {100/128, 120/128, 21/64, 41/64},\n        }\n    end\n    \n    local frameLevel = 1000\n    local frameStrata = \"high\"    \n    \n    --private\n    do\n        --store combo points frames on this table\n        envTable.ComboPoints = {}\n        --save when the player changed talents or spec\n        envTable.LastPlayerTalentUpdate = GetTime()\n        --save when this nameplate got a combo point amount and alignment update        \n        \n        --build combo points frame anchor (combo point are anchored to this)\n        if (not unitFrame.PlaterComboPointFrame) then\n            local hostFrame = CreateFrame (\"frame\", nil, unitFrame)\n            hostFrame.ComboPointFramesPool = {}\n            unitFrame.PlaterComboPointFrame = hostFrame\n            envTable.ComboPointFrame = hostFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            \n            --DetailsFramework:ApplyStandardBackdrop (envTable.ComboPointFrame) --debug anchor size\n            \n            --animations\n            local onPlayShowAnimation = function (animation)\n                --stop the hide animation if it's playing\n                if (animation:GetParent():GetParent().HideAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().HideAnimation:Stop()\n                end\n                \n                animation:GetParent():Show()\n            end\n            \n            local onPlayHideAnimation = function (animation)\n                --stop the show animation if it's playing\n                if (animation:GetParent():GetParent().ShowAnimation:IsPlaying()) then\n                    animation:GetParent():GetParent().ShowAnimation:Stop()\n                end\n            end        \n            local onStopHideAnimation = function (animation)\n                animation:GetParent():Hide()       \n            end\n            \n            local createAnimations = function (comboPoint)\n                --on show\n                comboPoint.ShowAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayShowAnimation, nil)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 1, 0.1, 0, 0, 1, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"alpha\", 1, 0.1, .5, 1)\n                Plater:CreateAnimation (comboPoint.ShowAnimation, \"scale\", 2, 0.1, 1.2, 1.2, 1, 1)\n                \n                --on hide\n                comboPoint.HideAnimation = Plater:CreateAnimationHub (comboPoint.comboPointTexture, onPlayHideAnimation, onStopHideAnimation)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"scale\", 1, 0.1, 1, 1, 0, 0)\n                Plater:CreateAnimation (comboPoint.HideAnimation, \"alpha\", 1, 0.1, 1, 0)\n            end\n            \n            --build combo point frame        \n            for i =1, 10 do \n                local f = CreateFrame (\"frame\", nil, envTable.ComboPointFrame)\n                f:SetSize (sizes.width, sizes.height)\n                tinsert (envTable.ComboPoints, f)\n                tinsert (unitFrame.PlaterComboPointFrame.ComboPointFramesPool, f)\n                \n                local backgroundTexture = f:CreateTexture (nil, \"background\")\n                backgroundTexture:SetTexture (textures.backgroundTexture)\n                backgroundTexture:SetTexCoord (unpack (textures.backgroundTexCoords))\n                backgroundTexture:SetSize (sizes.width, sizes.height)\n                backgroundTexture:SetPoint (\"center\")\n                \n                local comboPointTexture = f:CreateTexture (nil, \"artwork\")\n                comboPointTexture:SetTexture (textures.comboPointTexture)\n                comboPointTexture:SetTexCoord (unpack (textures.comboPointTexCoords))\n                \n                comboPointTexture:SetSize (sizes.width, sizes.height)\n                comboPointTexture:SetPoint (\"center\")\n                comboPointTexture:Hide()            \n                \n                f.IsActive = false\n                \n                f.backgroundTexture = backgroundTexture\n                f.comboPointTexture = comboPointTexture\n                \n                createAnimations (f)\n            end\n            \n        else\n            envTable.ComboPointFrame = unitFrame.PlaterComboPointFrame\n            envTable.ComboPointFrame:SetScale (sizes.scale)\n            envTable.ComboPoints = unitFrame.PlaterComboPointFrame.ComboPointFramesPool\n            \n        end            \n        \n        envTable.ComboPointFrame:SetFrameLevel (frameLevel)\n        envTable.ComboPointFrame:SetFrameStrata (frameStrata)\n        \n        function envTable.UpdateComboPoints()\n            local comboPoints = GetComboPoints(\"player\", \"target\")\n            --UnitPower (\"player\", Enum.PowerType.ComboPoints)\n            \n            for i = 1, envTable.TotalComboPoints do\n                local thisComboPoint = envTable.ComboPoints [i]\n                \n                if (i <= comboPoints ) then\n                    --combo point enabled\n                    if (not thisComboPoint.IsActive) then\n                        thisComboPoint.ShowAnimation:Play()\n                        thisComboPoint.IsActive = true\n                        \n                    end\n                    \n                else\n                    --combo point disabled\n                    if (thisComboPoint.IsActive) then\n                        thisComboPoint.HideAnimation:Play()\n                        thisComboPoint.IsActive = false\n                        \n                    end\n                end\n            end\n            \n            \n        end\n        \n        function envTable.UpdateComboPointAmount()\n            local namePlateWidth = Plater.db.profile.plate_config.enemynpc.health_incombat[1]\n            local comboPoints = UnitPowerMax (\"player\", Enum.PowerType.ComboPoints)\n            local reservedSpace = (namePlateWidth - sizes.width * comboPoints)  / comboPoints \n            \n            --store the total amount of combo points\n            envTable.TotalComboPoints = comboPoints\n            \n            --update anchor frame\n            envTable.ComboPointFrame:SetWidth (namePlateWidth)\n            envTable.ComboPointFrame:SetHeight (20)\n            envTable.ComboPointFrame:ClearAllPoints()\n            for i = 1, #anchors do\n                local anchor = anchors[i]\n                envTable.ComboPointFrame:SetPoint (unpack (anchor))\n            end        \n            \n            --\n            for i = 1, #envTable.ComboPoints do\n                envTable.ComboPoints[i]:Hide()\n                envTable.ComboPoints[i]:ClearAllPoints()\n            end\n            \n            for i = 1, comboPoints do\n                local comboPoint = envTable.ComboPoints[i]\n                if i == 1 then\n                    comboPoint:SetPoint (\"left\", envTable.ComboPointFrame, \"left\", reservedSpace/2, 0)\n                else\n                    comboPoint:SetPoint (\"left\", envTable.ComboPoints[i-1], \"right\", reservedSpace, 0)\n                end\n                \n                comboPoint:Show()\n            end\n            \n            envTable.LastUpdate = GetTime()\n            \n            envTable.UpdateComboPoints()\n        end\n        \n        --initialize\n        envTable.UpdateComboPointAmount()\n        envTable.ComboPointFrame:Hide()\n    end\n    \n    \nend",
},
["Time"] = 1621935143,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
["Enabled"] = true,
["DRUID"] = true,
["ROGUE"] = true,
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
["103"] = true,
["Enabled"] = true,
},
},
["url"] = "",
["Icon"] = 135426,
["Enabled"] = false,
["Revision"] = 284,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Desc"] = "Show combo points above the nameplate for Druid Feral and Rogues.",
["Name"] = "Combo Points [Plater]",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["Enabled"] = false,
["Revision"] = 197,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Tecno-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Add another border with more customizations. This border can also be manipulated by other scripts.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --run constructor!\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.IsEnabled and unitFrame.ActorType == \"enemyplayer\") then\n        \n        if (unitFrame.IsSelf) then\n            if (envTable.ShowOnPersonalBar) then\n                envTable.BorderFrame:Show()\n            else\n                envTable.BorderFrame:Hide() \n            end\n        else\n            envTable.BorderFrame:Show()\n        end   \n        \n    else\n        envTable.BorderFrame:Hide() \n    end\n    \nend   \n\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BorderFrame:Hide()\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border color\n    local borderColor = \"yellow\"\n    \n    --size of the border\n    local borderSize = 1\n    \n    --transparency\n    local borderAlpha = 1\n    \n    --enabled (set to false it you only want to use the extra border in other scripts)\n    local isEnabled = true\n    \n    --export border (allow the border to be used by other scripts)\n    --other scripts can use:\n    --unitFrame.healthBar.extraBorder:Show()\n    --unitFrame.healthBar.extraBorder:SetVertexColor (r, g, b)\n    --unitFrame.healthBar.extraBorder:SetBorderSizes (borderSize)\n    local canExportBorder = true\n    \n    --do not add the border to personal bar\n    local noPersonalBar = true\n    \n    --private\n    do\n        \n        local newBorder = CreateFrame (\"frame\", nil, unitFrame.healthBar, \"NamePlateFullBorderTemplate\")\n        envTable.BorderFrame = newBorder\n        \n        newBorder:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n        newBorder:UpdateSizes()\n        \n        local r, g, b = DetailsFramework:ParseColors (borderColor)\n        newBorder:SetVertexColor (r, g, b, borderAlpha)\n        \n        envTable.ShowOnPersonalBar = not noPersonalBar\n        \n        if (canExportBorder) then\n            unitFrame.healthBar.extraBorder = newBorder\n        end\n        \n        if (not isEnabled) then\n            envTable.IsEnabled = false\n        else\n            envTable.IsEnabled = true\n        end\n    end\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Extra Border [Plater]",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1613211728,
["Icon"] = 133689,
["PlaterCore"] = 1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Added"] = "\n\n-- exported function Plater.UpdatePlateSize() from Plater.lua\n--this is for advanced users which wants to reorder the nameplate frame at their desire\n\n\n\nfunction (self, unitId, unitFrame, envTable)\n    \n    --check if there's a type of unit on this nameplate\n    local plateFrame = unitFrame:GetParent()\n    if (not plateFrame.actorType) then\n        return\n    end\n    \n    --get all the frames and cache some variables\n    local ACTORTYPE_ENEMY_PLAYER = \"enemyplayer\"\n    local profile = Plater.db.profile\n    local DB_PLATE_CONFIG = profile.plate_config\n    local isInCombat = Plater.IsInCombat()\n    local actorType = plateFrame.actorType\n    \n    local unitFrame = plateFrame.unitFrame\n    local healthBar = unitFrame.healthBar\n    local castBar = unitFrame.castBar\n    local powerBar = unitFrame.powerBar\n    local buffFrame1 = unitFrame.BuffFrame\n    local buffFrame2 = unitFrame.BuffFrame2\n    \n    --use in combat bars when in pvp\n    if (plateFrame.actorType == ACTORTYPE_ENEMY_PLAYER) then\n        if ((Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"arena\") and DB_PLATE_CONFIG.player.pvp_always_incombat) then\n            isInCombat = true\n        end\n    end\n    \n    --get the config for this actor type\n    local plateConfigs = DB_PLATE_CONFIG [actorType]\n    --get the config key based if the player is in combat\n    local castBarConfigKey, healthBarConfigKey, manaConfigKey = Plater.GetHashKey (isInCombat)\n    \n    --get the width and height from what the user set in the options panel\n    local healthBarWidth, healthBarHeight = unitFrame.customHealthBarWidth or plateConfigs [healthBarConfigKey][1], unitFrame.customHealthBarHeight or plateConfigs [healthBarConfigKey][2]\n    local castBarWidth, castBarHeight = unitFrame.customCastBarWidth or plateConfigs [castBarConfigKey][1], unitFrame.customCastBarHeight or plateConfigs [castBarConfigKey][2]\n    local powerBarWidth, powerBarHeight = unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][1], unitFrame.customPowerBarHeight or plateConfigs [manaConfigKey][2]\n    \n    --calculate the offset for the cast bar, this is done due to the cast bar be anchored to topleft and topright\n    local castBarOffSetX = (healthBarWidth - castBarWidth) / 2\n    local castBarOffSetY = plateConfigs.castbar_offset\n    \n    --calculate offsets for the power bar\n    local powerBarOffSetX = (healthBarWidth - powerBarWidth) / 2\n    local powerBarOffSetY = 0\n    \n    --calculate the size deviation for pets\n    local unitType = Plater.GetUnitType (plateFrame)\n    if (unitType == \"pet\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.pet_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.pet_width_scale\n        \n    elseif (unitType == \"minus\") then\n        healthBarHeight = healthBarHeight * Plater.db.profile.minor_height_scale\n        healthBarWidth = healthBarWidth * Plater.db.profile.minor_width_scale\n    end\n    \n    --unit frame - is set to be the same size as the plateFrame\n    unitFrame:ClearAllPoints()\n    unitFrame:SetAllPoints()\n    \n    --calculates the health bar anchor points\n    --it will always be placed in the center of the nameplate area (where it accepts mouse clicks) \n    local xOffSet = (plateFrame:GetWidth() - healthBarWidth) / 2\n    local yOffSet = (plateFrame:GetHeight() - healthBarHeight) / 2\n    \n    --set the health bar point\n    healthBar:ClearAllPoints()\n    PixelUtil.SetPoint (healthBar, \"topleft\", unitFrame, \"topleft\", xOffSet + profile.global_offset_x, -yOffSet + profile.global_offset_y)\n    PixelUtil.SetPoint (healthBar, \"bottomright\", unitFrame, \"bottomright\", -xOffSet + profile.global_offset_x, yOffSet + profile.global_offset_y)\n    \n    --set the cast bar point and size\n    castBar:ClearAllPoints()\n    PixelUtil.SetPoint (castBar, \"topleft\", healthBar, \"bottomleft\", castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetPoint (castBar, \"topright\", healthBar, \"bottomright\", -castBarOffSetX, castBarOffSetY)\n    PixelUtil.SetHeight (castBar, castBarHeight)\n    PixelUtil.SetSize (castBar.Icon, castBarHeight, castBarHeight)\n    PixelUtil.SetSize (castBar.BorderShield, castBarHeight * 1.4, castBarHeight * 1.4)\n    \n    --set the power bar point and size\n    powerBar:ClearAllPoints()\n    PixelUtil.SetPoint (powerBar, \"topleft\", healthBar, \"bottomleft\", powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetPoint (powerBar, \"topright\", healthBar, \"bottomright\", -powerBarOffSetX, powerBarOffSetY)\n    PixelUtil.SetHeight (powerBar, powerBarHeight)\n    \n    --power bar are hidden by default, show it if there's a custom size for it\n    if (unitFrame.customPowerBarWidth and unitFrame.customPowerBarHeight) then\n        powerBar:SetUnit (unitFrame.unit)\n    end\n    \n    --aura frames\n    local bf1Anchor = Plater.db.profile.aura_frame1_anchor\n    Plater.SetAnchor (buffFrame1, {side = bf1Anchor.side, x = bf1Anchor.x, y = bf1Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura_grow_direction or 2) == 2)\n    \n    local bf2Anchor = Plater.db.profile.aura_frame2_anchor\n    Plater.SetAnchor (buffFrame2, {side = bf2Anchor.side, x = bf2Anchor.x, y = bf2Anchor.y + plateConfigs.buff_frame_y_offset}, unitFrame.healthBar, (Plater.db.profile.aura2_grow_direction or 2) == 2)\n    \nend\n\n\n",
},
["Time"] = 1722754264,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 574574,
["Enabled"] = false,
["Revision"] = 94,
["semver"] = "",
["Author"] = "Kastfall-Azralon",
["Desc"] = "Function Plater.UpdatePlateSize from Plater.lua exported to scritps.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["Name"] = "Reorder Nameplate [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 107,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["LastHookEdited"] = "Constructor",
["Desc"] = "Easy way to change the color of an unit. Open the constructor script and follow the examples.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --attempt to get the color from the unit color list\n    local color = envTable.NpcColors [unitFrame.namePlateUnitNameLower] or envTable.NpcColors [unitFrame.namePlateUnitName] or envTable.NpcColors [unitFrame.namePlateNpcId]\n    \n    --if the color exists, set the health bar color\n    if (color) then\n        Plater.SetNameplateColor (unitFrame, color)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --list of npcs and their colors, can be inserted:\n    --name of the unit\n    --name of the unit in lower case\n    --npcID of the unit\n    \n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    \n    envTable.NpcColors = {\n        \n        --examples, using the unit name in lower case, regular unit name and the unitID:\n        \n        [\"Thunderlord Windreader\"] = \"red\", --using regular mob name and color it as red\n        [\"thunderlord crag-leaper\"] = {1, 1, 0}, --using lower case and coloring it yellow\n        [75790] = \"#00FF00\", --using the ID of the unit and using green as color\n        \n        --insert the new mobs here:\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    } --close custom color bracket\n    \nend\n\n\n\n\n",
},
["Name"] = "Color Automation [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825317,
["Icon"] = "Interface\\AddOns\\Plater\\images\\color_bar",
["Options"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 139,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Ahwa-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Adds extra effects to execute range and allow to setup two execute ranges for classes with execute when the unit has almost full healh. See the constructor script for options.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (envTable.UseCustomExecutePercent) then\n        \n        --manual detection\n        local healthBar = unitFrame.healthBar\n        local percent = healthBar.CurrentHealth / healthBar.CurrentHealthMax\n        \n        if (percent <= envTable.ExecutePercent) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.ExecutePercent)\n            envTable.InExecuteRange = true\n            \n        elseif (percent < envTable.SecondRangeStart and percent >= envTable.SecondRangeEnd) then\n            envTable.UnitInExecuteRange (unitFrame, envTable.SecondRangeEnd)\n            envTable.InExecuteRange = true\n            \n        else\n            if (envTable.InExecuteRange) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                Plater.RefreshNameplateColor (unitFrame)\n                Plater.SetBorderColor (unitFrame)\n                envTable.InExecuteRange = false\n            end\n        end\n        \n    else\n        \n        --auto detection\n        if (unitFrame.InExecuteRange) then\n            envTable.UnitInExecuteRange (unitFrame, 0)\n        end\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --execute detection, if true the script will handle the execute percent\n    --while false Plater will automatically trigger the execute range\n    --you only want to set this to true in case of Plater not detecting the execute range correctly\n    envTable.UseCustomExecutePercent = true\n    --execute percent, if not detecting automatic, this is the percent to active the execute range\n    --use from zero to one, 0.20 is equal to 20% of the unit life\n    envTable.ExecutePercent = 0.20\n    \n    --second execute range (UseCustomExecutePercent must be enabled)\n    envTable.SecondRangeStart = 0.999\n    envTable.SecondRangeEnd = 0.8\n    \n    --allow this script to change the nameplate color when the unit is in execute range\n    envTable.CanChangeColor = true\n    --change the health bar color to this color when the unit is in execute range\n    --color can be set as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}\n    envTable.ExecuteColor = \"green\"\n    \n    --border color\n    envTable.CanChangeBorderColor = false\n    envTable.BorderColor = \"red\"\n    \n    --hide the default health divisor and the health execute indicator\n    envTable.HideHealthDivisor = false\n    --if not hidden, adjust the health divisor settings and the health execute indicator\n    envTable.HealthDivisorAlpha = 0.5\n    envTable.HealthDivisorColor = \"white\"\n    envTable.HealthExecuteIndicatorAlpha = 0.15\n    envTable.HealthExecuteIndicatorColor = \"darkred\"\n    \n    \n    --private (internal functions)\n    do\n        function envTable.UnitInExecuteRange (unitFrame, divisorPercent)\n            --check if can change the execute color\n            if (envTable.CanChangeColor) then\n                Plater.SetNameplateColor (unitFrame, envTable.ExecuteColor)\n            end\n            \n            if (envTable.CanChangeBorderColor) then\n                Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            end\n            \n            if (envTable.HideHealthDivisor) then\n                unitFrame.healthBar.healthCutOff:Hide() \n                unitFrame.healthBar.executeRange:Hide()\n                \n            else\n                envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n                \n            end\n        end\n        \n        function envTable.UpdateHealthDivisor (unitFrame, divisorPercent)\n            local healthBar = unitFrame.healthBar\n            \n            healthBar.healthCutOff:Show()\n            healthBar.healthCutOff:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthDivisorColor))\n            healthBar.healthCutOff:SetAlpha (envTable.HealthDivisorAlpha)\n            \n            healthBar.executeRange:Show()\n            healthBar.executeRange:SetVertexColor (DetailsFramework:ParseColors (envTable.HealthExecuteIndicatorColor))\n            healthBar.executeRange:SetAlpha (envTable.HealthExecuteIndicatorAlpha)\n            \n            if (envTable.UseCustomExecutePercent) then\n                healthBar.healthCutOff:ClearAllPoints()\n                healthBar.executeRange:ClearAllPoints()\n                \n                healthBar.healthCutOff:SetSize (healthBar:GetHeight(), healthBar:GetHeight())\n                healthBar.healthCutOff:SetPoint (\"center\", healthBar, \"left\", healthBar:GetWidth() * divisorPercent, 0)\n                \n                healthBar.executeRange:SetTexCoord (0, envTable.ExecutePercent, 0, 1)\n                healthBar.executeRange:SetHeight (healthBar:GetHeight())\n                healthBar.executeRange:SetPoint (\"left\", healthBar, \"left\", 0, 0)\n                healthBar.executeRange:SetPoint (\"right\", healthBar.healthCutOff, \"center\")\n            end\n            \n        end\n    end\n    \nend",
},
["Name"] = "Advanced Execute Range",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825289,
["Icon"] = 135358,
["OptionsValues"] = {
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1741124898,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 361,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = false,
["Revision"] = 237,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Kastfall-Azralon",
["Options"] = {
},
["Desc"] = "Script for the Jaina encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Unexploded Ordinance\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.UnexplodedOrdinance) then\n        \n        --make the life percent be bigger than the regular size\n        --so it's better to see the health percent of the barrel\n        local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n        Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize + envTable.UnexplodedOrdinanceTextSizeIncrease)\n    end\n    \n    if (envTable.IncreaseSize [unitFrame.namePlateNpcId]) then\n        local currentHeight = unitFrame.healthBar:GetHeight()\n        Plater.SetNameplateSize (unitFrame, nil, currentHeight + envTable.IncreaseSize [unitFrame.namePlateNpcId])\n    end\n    \nend\n\n\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame, nil, envTable.UnexplodedOrdinanceCastBarHeight)\n        Plater:SetFontSize (unitFrame.castBar.percentText, envTable.UnexplodedOrdinanceTimerSize)\n    end\nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    \n    --reset the health percent text size\n    local currentSize = Plater.db.profile.plate_config.enemynpc.percent_text_size\n    Plater:SetFontSize (unitFrame.healthBar.lifePercent, currentSize)    \n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --Override the color\n    if (envTable.Colors [unitFrame.namePlateNpcId]) then\n        Plater.SetNameplateColor (unitFrame, envTable.Colors [unitFrame.namePlateNpcId])\n    end    \n    \n    --Show the name of the unit in the Ice Block nameplate\n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.IceBlock) then\n        --find which player this block are holding\n        for i = 1, GetNumGroupMembers() do\n            local unit = \"raid\" .. i\n            if (UnitExists (unit)) then\n                for debuffId = 1, 40 do\n                    local name, texture, count, debuffType, duration, expirationTime, caster = UnitDebuff (unit, debuffId)\n                    \n                    --cancel the loop if there's no more debuffs on the player\n                    if (not name) then \n                        break \n                    end                    \n                    \n                    --check if who casted this debuff is the unit shown on this nameplate\n                    if (UnitIsUnit (caster or \"\", unitId)) then\n                        local unitName = UnitName (unit)\n                        \n                        --color the text by the class\n                        unitName = Plater.SetTextColorByClass (unit, unitName)\n                        \n                        --add the role icon\n                        if (Details) then\n                            local role = UnitGroupRolesAssigned (unit)\n                            unitName = Details:AddRoleIcon (unitName, role, 12)\n                        end\n                        \n                        unitFrame.unitName:SetText (unitName)\n                        unitFrame.castBar.Text:SetText (unitName)\n                        break\n                    end\n                    \n                end\n            else\n                break\n            end\n        end\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable)\n    if (envTable.UnexplodedOrdinanceCast and envTable._SpellID == envTable.UnexplodedOrdinanceSpellID) then\n        Plater.SetCastBarSize (unitFrame)\n        Plater:SetFontSize (unitFrame.castBar.percentText, Plater.db.profile.plate_config.enemynpc.spellpercent_text_size)\n    end\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors [148631] = \"orange\" --Unexploded Ordinance\n    envTable.Colors [148522] = \"white\" --Ice Block\n    \n    --increase the nameplate height for these units\n    envTable.IncreaseSize = {}\n    envTable.IncreaseSize [148522] = 4 --Ice Block (increase in 4 pixels)\n    \n    --increase the size of the life percent for the nameplate of the barrel\n    envTable.UnexplodedOrdinanceTextSizeIncrease = 3\n    \n    --increase the castbar size for the unexploded ordinance explosion cast\n    envTable.UnexplodedOrdinanceCast = true\n    envTable.UnexplodedOrdinanceSpellID = 288221 --12058 --(debug)\n    envTable.UnexplodedOrdinanceCastBarHeight = 18\n    envTable.UnexplodedOrdinanceTimerSize = 18\n    \n    --npcIDs\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.UnexplodedOrdinance = 148631\n    envTable.NpcIDs.IceBlock = 148522\nend\n\n--tests 126023 --harbor saurid - dazar'alor harbor\n--tests 3127 venomtail scorpid - durotar\n--tests 12058 dustwind storm witch - durotar\n--Load Condition: EncounterID 2281\n\n\n",
},
["Prio"] = 99,
["Name"] = "Jaina Encounter [Plater]",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1723224887,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_jaina",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2281,
["Enabled"] = true,
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 81,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Script for Stormwall Blockade encounter on Battle for Dazzar'alor",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.Colors.TemptingSiren) then\n            Plater.SetNameplateColor (unitFrame, envTable.Colors.TemptingSiren)\n        end\n        \n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.namePlateNpcId == envTable.NpcIDs.TemptingSiren) then\n        \n        if (envTable.NameplateHeight.TemptingSiren) then\n            \n            Plater.SetNameplateSize (unitFrame, nil, envTable.NameplateHeight.TemptingSiren)\n            \n        end\n        \n    end    \n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --nameplate colors for unit\n    envTable.Colors = {}\n    envTable.Colors.TemptingSiren = \"orange\"\n    \n    --npcID\n    envTable.NpcIDs = {}\n    envTable.NpcIDs.TemptingSiren = 146436\n    \n    --nameplate height for each unit\n    envTable.NameplateHeight = {}\n    envTable.NameplateHeight.TemptingSiren = 18\n    \n    \n    \nend\n\n\n",
},
["Name"] = "Stormwall Encounter [Plater]",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
["1"] = 2280,
["Enabled"] = true,
},
["affix"] = {
},
},
["Time"] = 1551887545,
["Icon"] = "Interface\\AddOns\\Plater\\images\\encounter_stormwall_blockade",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 58,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Herith�gue-Proudmoore",
["HooksTemp"] = {
},
["Desc"] = "Change the border of the focus target.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n",
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    envTable.UpdateBorder (unitFrame, unitId)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.BorderThickness = 3\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.UpdateBorder (unitFrame, unit)\n        local plateFrame = unitFrame:GetParent()\n        \n        if (UnitIsUnit (\"focus\", unit)) then\n            Plater.SetBorderColor (unitFrame, envTable.BorderColor)\n            local borderSize = envTable.BorderThickness\n            unitFrame.healthBar.border:SetBorderSizes (borderSize, borderSize, borderSize, borderSize)\n            unitFrame.healthBar.border:UpdateSizes()        \n            \n        else\n            Plater.SetBorderColor (unitFrame)\n            Plater.UpdatePlateBorderThickness (unitFrame.PlateFrame)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend\n\n\n\n",
},
["Name"] = "Focus Target Border",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1552962607,
["Icon"] = 133006,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 48,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Change the nameplate color when a nameplate does not have the auras set in the constructor script.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --do nothing if the player isn't in combat\n    if (not Plater.IsInCombat()) then\n        return \n    end\n    \n    --do nothing if the unit isn't in combat\n    if (not unitFrame.InCombat) then\n        return\n    end\n    \n    --check the auras\n    local hasAura = false\n    \n    for auraName, _ in pairs (envTable.TrackingAuras) do\n        if (Plater.NameplateHasAura (unitFrame, auraName)) then\n            hasAura = true\n            break\n        end\n    end\n    \n    if (not hasAura) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end    \n    \nend\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    --Important: lines starting with double dashes are comments and are not part of the script\n    \n    --if the unit does not have any of the following auras, it will be painted with the color listed below\n    --list of spells to track, can be the spell name (case-sensitive) or the spellID\n    envTable.TrackingAuras = {\n        --[\"Nightblade\"] = true, --this is an example using the spell name\n        --[195452] = true, --this is an example using the spellID\n        \n    }\n    \n    --which color the nameplate wil be changed\n    --color can be added as:\n    --color names: \"red\", \"yellow\"\n    --color hex: \"#FF0000\", \"#FFFF00\"\n    --color table: {1, 0, 0}, {1, 1, 0}    \n    --you may also use /plater colors\n    envTable.NameplateColor = \"pink\"\n    \nend\n\n\n",
},
["Prio"] = 99,
["Time"] = 1613211434,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Don't Have Aura [Plater]",
["Icon"] = 136207,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 55,
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Tint nameplates of Reaping Soul units (Mythic Dungeon Affix) depending on its target and role of the player",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --can detect the reaping souls aggro?\n    if (envTable.detectAggro and Plater.IsInCombat()) then\n        \n        --is this npc a reaping soul?\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            \n            --check if the mob is attacking the player\n            if (UnitIsUnit (unitFrame.targetUnitID, \"player\")) then\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateAggroColor)\n                \n            else\n                Plater.SetNameplateColor (unitFrame, envTable.NameplateNoAggroColor)\n            end\n            \n        end\n        \n    end\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    --when the nameplate is added and the npcID matches, cache the color for the nameplate\n    if (envTable.detectAggro) then\n        if (envTable.npcIDs [unitFrame.namePlateNpcId]) then\n            local profile = Plater.db.profile\n            local role = Plater:GetPlayerRole()\n            \n            if (role == \"TANK\") then\n                envTable.NameplateAggroColor = profile.tank.colors.aggro\n                envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            else\n                envTable.NameplateAggroColor = profile.dps.colors.aggro\n                envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            end\n            \n        end\n    end\n    \n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --npcs affected by this script\n    \n    envTable.npcIDs = {\n        [148716] = true, --risen soul\n        [148893] = true, --tormented soul\n        [148894] = true, --lost soul\n        \n        [127278] = true, --skittering feeder (tests and debug, also need to disable the load conditions)\n    }\n    \n    --detect aggro, if true it will see which group member the soul is attacking and override the color\n    envTable.detectAggro = true\n    \n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "M+ Bwonsamdi Reaping",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
["Enabled"] = true,
["party"] = true,
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
["Enabled"] = true,
["117"] = true,
},
},
["HooksTemp"] = {
},
["Time"] = 1579030189,
["Icon"] = 2446016,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 36,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Kastfall-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show the name of the unit current target ",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateSpellNameText (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --max length of the text\n    envTable.TextMaxLength = 100\n    \n    --update the spell name text\n    function envTable.UpdateSpellNameText (unitFrame)\n        \n        local castBar = unitFrame.castBar\n        local textString = castBar.Text\n        local spellName = castBar.SpellName\n        \n        if (unitFrame.targetUnitID) then\n            local targetName = UnitName (unitFrame.targetUnitID)\n            \n            if (targetName) then\n                textString:SetText (spellName .. \" > \" .. targetName) \n                \n                if (envTable.TextMaxLength) then\n                    Plater.LimitTextSize (textString, envTable.TextMaxLength)\n                end\n                \n            else\n                textString:SetText (spellName)\n            end\n        else\n            textString:SetText (spellName)\n        end\n    end\nend",
},
["Prio"] = 99,
["Name"] = "Cast Target",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620347099,
["Icon"] = 413580,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 43,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Kastfall-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Only show nameplates while in combat, see the constructor for more options.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Zone Changed"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.CheckIfCanShowNameplate (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckIfCanShowNameplate (unitFrame)\n        if (Plater.IsInCombat()) then\n            \n            if (not unitFrame.healthBar:IsShown()) then\n                Plater.ShowHealthBar (unitFrame)\n                Plater.EnableHighlight (unitFrame)\n            end\n            \n        else\n            \n            if (unitFrame.healthBar:IsShown()) then\n                Plater.HideHealthBar (unitFrame)\n                Plater.DisableHighlight (unitFrame)\n            end\n            \n        end        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Only in Combat",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825361,
["Icon"] = 135473,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add an exclamation icon on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local npcColor = Plater.GetNpcColor (unitFrame)\n    if (npcColor) then\n        unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n        unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)        \n        unitFrame.NpcColorCodeTexture:Show()\n        \n    else\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.IconTexture = [[Interface\\AddOns\\Plater\\media\\exclamation_64]]\n    envTable.Alpha = 0.8\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetTexture (envTable.IconTexture)\n        \n        --texture side | anchor to which frame | frame side | x offset | y offset\n        unitFrame.NpcColorCodeTexture:SetPoint (\"right\", unitFrame.healthBar, \"right\", -2, 0)\n        \n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Npc Colors Icon",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450716,
["Icon"] = "Interface\\AddOns\\Plater\\media\\exclamation_64",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 68,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Add a color tag on units with color set in the Npc Colors tab with the \"Only Script\" box selected.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateColorTag (unitFrame)   \n    \nend\n\n\n\n\n\n\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateTexture (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Alpha = 0.75\n    \n    envTable.Anchor = {\n        side = 11, --right side inside the nameplate\n        x = -3,\n        y = 0\n    }\n    \n    --private\n    if (not unitFrame.NpcColorCodeTexture) then\n        unitFrame.NpcColorCodeTexture = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        unitFrame.NpcColorCodeTexture:SetColorTexture (1, 1, 1, 1)\n        \n    end\n    \n    function  envTable.UpdateColorTag (unitFrame)\n        local npcColor = Plater.GetNpcColor (unitFrame)\n        if (npcColor) then\n            unitFrame.NpcColorCodeTexture:SetVertexColor (DetailsFramework:ParseColors (npcColor))\n            unitFrame.NpcColorCodeTexture:SetAlpha (envTable.Alpha)           \n            unitFrame.NpcColorCodeTexture:Show()        \n        end\n    end\n    \n    function  envTable.UpdateTexture (unitFrame)\n        Plater.SetAnchor (unitFrame.NpcColorCodeTexture, envTable.Anchor)\n        unitFrame.NpcColorCodeTexture:SetSize (unitFrame.healthBar:GetHeight() - 4, unitFrame.healthBar:GetHeight() - 4)\n        unitFrame.NpcColorCodeTexture:Hide()\n        \n        envTable.UpdateColorTag (unitFrame)\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Name"] = "Npc Colors Tag",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450705,
["Icon"] = "Interface\\AddOns\\Plater\\media\\radio_64",
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 44,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Change the color of the aura timer by it's time left",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    local auras = unitFrame.BuffFrame.PlaterBuffList\n    \n    for _, auraIcon in ipairs (auras) do\n        if (auraIcon:IsVisible()) then\n            if (auraIcon.RemainingTime < envTable.Timers.critical) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.critical)\n                \n            elseif (auraIcon.RemainingTime < envTable.Timers.warning) then\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.warning)\n                \n            else\n                Plater:SetFontColor (auraIcon.TimerText, envTable.Colors.okay)\n            end \n        end\n        \n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --colors for each time bracket\n    envTable.Colors = {\n        critical = \"red\",\n        warning = \"yellow\",\n        okay = \"white\",\n    }\n    \n    --time amount to enter in warning or critical state\n    envTable.Timers = {\n        critical = 4.9,\n        warning = 8,\n    }\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Paint Aura Timers",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1613211753,
["Icon"] = "Interface\\Timer\\Challenges-Logo",
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 133,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1741124896,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 35,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "�r��ne-Kel'thuzad",
["HooksTemp"] = {
},
["Desc"] = "Show yellow star for elite; Silver star for rares",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame, unitId)\n    \nend\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.UpdateIndicator (unitFrame, unitId)\n        local unitClassification = UnitClassification (unitId)\n        local unitName = UnitName (unitId)\n        unitName = unitName or UNKNOWN\n        \n        if (unitClassification == \"rareelite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. \"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t \" .. unitName)\n            \n        elseif (unitClassification == \"rare\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\AddOns\\\\Plater\\\\media\\\\star_full_64:12:12:0:0:64:64:0:64:0:64|t\" .. unitName)\n            \n        elseif (unitClassification == \"elite\") then\n            unitFrame.unitName:SetText (\"|TInterface\\\\GLUES\\\\CharacterSelect\\\\Glues-AddOn-Icons:12:12:0:0:64:16:48:64:0:16|t\" .. unitName)\n            \n        end\n    end\n    \nend\n\n\n\n\n",
},
["Name"] = "Rarity in the Name",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825364,
["Icon"] = "Interface\\AddOns\\Plater\\media\\star_full_64",
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 79,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["OptionsValues"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 99,
["Name"] = "Aggro Indicator",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Time"] = 1741124896,
["Icon"] = 132344,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 20,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Edit the Constructor script setting the font you want in the FONT = \"\", then /reload.",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable)\n    \n    --added this event just to run the constructor script\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --insert here the font you want to change then /reeload\n    --after the reload, check if the font has changed and disable this script\n    \n    local FONT = \"Accidental Presidency\"\n    \n    local profile = Plater.db.profile\n    local actorTables = profile.plate_config\n    \n    for plateType, plateTable in pairs (actorTables) do\n        \n        plateTable.actorname_text_font = FONT\n        plateTable.spellname_text_font = FONT\n        plateTable.spellpercent_text_font = FONT\n        plateTable.level_text_font = FONT\n        plateTable.percent_text_font = FONT\n        plateTable.big_actortitle_text_font = FONT\n        plateTable.big_actorname_text_font = FONT\n        plateTable.power_percent_text_font = FONT\n        \n    end\n    \n    profile.castbar_target_font = FONT\n    profile.aura_timer_text_font = FONT    \n    profile.aura_stack_font = FONT    \n    \nend\n\n\n",
},
["Name"] = "Change All Fonts",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551825316,
["Icon"] = 134331,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 50,
["Options"] = {
},
["LastHookEdited"] = "Constructor",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Show the power bar for specific units",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (Plater.ZoneInstanceType == \"arena\") then\n        \n        local arenaEnemies = GetNumArenaOpponentSpecs()\n        local found = false\n        for i = 1, arenaEnemies do\n            local guid = UnitGUID (\"arena\" .. i)\n            print (guid)\n            if (guid == unitFrame.namePlateUnitGUID) then\n                \n                local spec = GetArenaOpponentSpec (i)\n                print (spec)\n                if (spec) then\n                    local id, name, description, icon, role, class = GetSpecializationInfoByID (spec)\n                    print (name)\n                    if (role == \"HEALER\") then\n                        envTable.UpdatePowerBar (unitFrame)\n                    end\n                    print (role)\n                end\n                \n                break\n            end\n        end\n        \n        return\n    end\n    \n    --show for enemy players\n    if (unitFrame.ActorType == \"enemyplayer\") then\n        envTable.UpdatePowerBar (unitFrame)\n        return\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.PowerBarAnchor = {side = 4, x = 0, y = -10}\n    \n    function envTable.UpdatePowerBar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        Plater.SetAnchor (unitFrame.powerBar, envTable.PowerBarAnchor)\n        \n    end\n    \nend\n\n\n",
},
["Name"] = "Power Bar",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1553450521,
["Icon"] = 1375677,
["OptionsValues"] = {
},
},
{
["Enabled"] = false,
["Revision"] = 140,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings:\n    --show cast icon\n    envTable.ShowIcon = true\n    --anchor icon on what side\n    envTable.IconAnchor = \"left\" --accep 'left' 'right'\n    --fine tune the size of the icon\n    envTable.IconSizeOffset = 1\n    \n    --shield for non interruptible casts\n    envTable.ShowShield = false\n    envTable.ShieldTexture = [[Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON]]\n    envTable.ShieldDesaturated = true\n    envTable.ShieldColor = {1, 1, 1 ,1}\n    envTable.ShieldSize = {10, 12}\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local shield = castBar.BorderShield\n        \n        if (envTable.ShowIcon) then\n            icon:ClearAllPoints()\n            \n            if (envTable.IconAnchor == \"left\") then\n                icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", -1, 0)    \n                \n            elseif (envTable.IconAnchor == \"right\") then\n                icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, envTable.IconSizeOffset)\n                icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", 1, 0)\n                \n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n            \n        else\n            icon:Hide()\n            \n        end\n        \n        if (envTable.ShowShield and not castBar.canInterrupt) then\n            shield:Show()\n            shield:SetAlpha (1)\n            shield:SetTexCoord (0, 1, 0, 1)\n            shield:SetVertexColor (1, 1, 1, 1)\n            \n            shield:SetTexture (envTable.ShieldTexture)\n            shield:SetDesaturated (envTable.ShieldDesaturated)\n            \n            if (not envTable.ShieldDesaturated) then\n                shield:SetVertexColor (DetailsFramework:ParseColors (envTable.ShieldColor))\n            end\n            \n            shield:SetSize (unpack (envTable.ShieldSize))\n            \n            shield:ClearAllPoints()\n            shield:SetPoint (\"center\", castBar, \"left\", 0, 0)\n            \n        else\n            shield:Hide()\n            \n        end\n        \n    end\nend",
},
["Prio"] = 99,
["Time"] = 1620346604,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Icon Anchor",
["Icon"] = "Interface\\Buttons\\UI-Quickslot2",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 65,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar spell icon.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    if (unitFrame.castBar.IconOverlayFrame) then\n        unitFrame.castBar.IconOverlayFrame:Hide()\n    end\n    \nend\n\n\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.BuildFrames (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.AnchorSide = \"left\"\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    function envTable.BuildFrames (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.IconBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.IconBorder:SetBorderSizes (size, size, size, size)\n        castBar.IconBorder:UpdateSizes()\n        \n        local icon = castBar.Icon\n        if (envTable.AnchorSide == \"left\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", -1, 0)\n            icon:SetPoint (\"bottomright\", castBar, \"bottomleft\", -1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        elseif (envTable.AnchorSide == \"right\") then\n            icon:ClearAllPoints()\n            icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", 1, 0)\n            icon:SetPoint (\"bottomleft\", castBar, \"bottomright\", 1, 0)\n            icon:SetWidth (icon:GetHeight())\n            \n        end\n        \n        icon:Show()\n        castBar.IconOverlayFrame:Show()\n    end\n    \n    if (not unitFrame.castBar.IconOverlayFrame) then\n        --icon support frame\n        unitFrame.castBar.IconOverlayFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"topleft\", unitFrame.castBar.Icon, \"topleft\")\n        unitFrame.castBar.IconOverlayFrame:SetPoint (\"bottomright\", unitFrame.castBar.Icon, \"bottomright\")\n        \n        unitFrame.castBar.IconBorder = CreateFrame (\"frame\", nil,  unitFrame.castBar.IconOverlayFrame, \"NamePlateFullBorderTemplate\")\n    end    \n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1620346604,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Icon Border",
["Icon"] = 133004,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 104,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1741122916,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Cast Bar Border",
["Icon"] = 133004,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 46,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Debuff timer show decimal values",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then\n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            if (auraIcon.RemainingTime < envTable.MinTime) then            \n                auraIcon.TimerText:SetText (format (\"%.1f\", auraIcon.RemainingTime))\n            end\n        end        \n    end    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --minimum time left to take effect\n    envTable.MinTime = 9.999\n    \nend",
},
["Prio"] = 99,
["Time"] = 1613211431,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Decimal Debuff Timer",
["Icon"] = 609811,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 87,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "?????-Illidan",
["OptionsValues"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Name"] = "Buff Special Mod",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1740112275,
["Icon"] = 136139,
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 29,
["Options"] = {
},
["LastHookEdited"] = "Player Talent Update",
["Author"] = "Izimode-Azralon",
["HooksTemp"] = {
},
["Desc"] = "Adds two arrows into the target indicators options.",
["Hooks"] = {
["Player Talent Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    --after editing this script, save it and /reload\n    \n    --adds two target indicators in arrow format\n    --to change the texture you may replace the path with another texture path\n    --or you can copy and paste more options here\n    \n    Plater.TargetIndicators    [\"SmallArrow\"] = {\n        path = [[Interface\\MONEYFRAME\\Arrow-Right-Up]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 12,\n        height = 12,\n        x = 8,\n        y = 0,\n        blend = \"ADD\",\n    }\n    \n    Plater.TargetIndicators    [\"BigArrow\"] = {\n        path = [[Interface\\AddOns\\Plater\\media\\arrow_right_64]],\n        coords = {\n            {0, 1, 0, 1}, \n            {1, 0, 0, 1}\n        },\n        desaturated = false,\n        width = 18,\n        height = 16,\n        x = 24,\n        y = 0,\n        blend = \"ADD\",\n        color = \"yellow\",\n    }\n    \n    \n    \nend\n\n\n",
},
["Name"] = "Arrow Target Indicators",
["PlaterCore"] = 1,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["Time"] = 1551887544,
["Icon"] = "Interface\\AddOns\\Plater\\media\\arrow_right_64",
["OptionsValues"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 17,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Unit Name Over Target Shading",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Time"] = 1741124901,
["Icon"] = 237377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = false,
["Revision"] = 25,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Set the spark height to the same size of the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    self.Spark:SetHeight (self:GetHeight())\n    \nend\n\n\n",
},
["Prio"] = 99,
["Name"] = "Adjust Spark Size",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620348421,
["Icon"] = "Interface\\AddOns\\Plater\\images\\spark6",
["PlaterCore"] = 1,
},
{
["Enabled"] = false,
["Revision"] = 71,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Show power bar for some units.",
["Hooks"] = {
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CanShowPowerBarForUnit (unitFrame)    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --power bar options:\n    \n    --for which units it should\n    envTable.ShowForEnemyPlayers = true\n    envTable.ShowForEnemyNpcs = false\n    \n    --specific npcs, can be the npc name or npcId\n    --this list work even if the ShowForEnemyNpcs is false\n    envTable.SpecificNpcs = {\n        [\"the rock\"] = true, --npc name\n        [225] = true, --npcId\n    }\n    \n    --anchor the power bar to\n    envTable.Anchor = {\n        side = 13, --inside the healthbar, bottom side\n        x = 0, \n        y = 0,\n    }\n    \n    --power bar height\n    envTable.Height = 1\n    \n    --power bar percent text\n    envTable.PercentTextEnabled = false\n    envTable.PercentTextAnchor = {\n        side = 7, --top right\n        x = 2, \n        y = 0,\n    }\n    \n    \n    --private\n    function envTable.ShowPowerbar (unitFrame)\n        unitFrame.powerBar:SetUnit (unitFrame.unit)\n        envTable.UpdatePowerbar (unitFrame)\n    end\n    \n    function envTable.UpdatePowerbar (unitFrame)\n        local powerBar = unitFrame.powerBar\n        Plater.SetAnchor (powerBar, envTable.Anchor, unitFrame.healthBar)\n        powerBar:SetSize (unitFrame.healthBar:GetWidth(), envTable.Height)\n        \n        envTable.SavePowerBarSize (unitFrame, envTable.Height)\n        \n        if (envTable.PercentTextEnabled) then\n            powerBar.percentText:Show()\n            --copy the font from the health percent\n            Plater:SetFontFace (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_font)\n            Plater:SetFontSize (powerBar.percentText, Plater.GetConfig (unitFrame).percent_text_size)\n            Plater.SetAnchor (powerBar.percentText, envTable.PercentTextAnchor)\n        else\n            powerBar.percentText:Hide()\n        end\n    end\n    \n    function envTable.CanShowPowerBarForUnit (unitFrame)\n        --check if the is in the special list to force show\n        local forceShowPowerBar = envTable.SpecificNpcs [unitFrame.namePlateNpcId] or envTable.SpecificNpcs [unitFrame.namePlateUnitName] or envTable.SpecificNpcs [unitFrame.namePlateUnitNameLower]\n        if (forceShowPowerBar) then\n            envTable.ShowPowerbar (unitFrame)\n            \n            --check if the unit is a enemy player\n        elseif (unitFrame.ActorType == \"enemyplayer\") then\n            if (envTable.ShowForEnemyPlayers) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n            \n            --check if the unit is a enemy npc\n        elseif (unitFrame.ActorType == \"enemynpc\") then\n            if (envTable.ShowForEnemyNpcs) then\n                envTable.ShowPowerbar (unitFrame)\n            end\n        end\n    end\n    \n    function envTable.SavePowerBarSize (unitFrame, height)\n        local plateConfigs = Plater.db.profile.plate_config [unitFrame.ActorType]\n        plateConfigs.mana[1] = plateConfigs.health[1]\n        plateConfigs.mana[2] = height\n        plateConfigs.mana_incombat[1] = plateConfigs.health_incombat[1]\n        plateConfigs.mana_incombat[2] = height\n    end\nend\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Power Bar",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["LastHookEdited"] = "",
["Time"] = 1620346758,
["Icon"] = "Interface/Addons/Plater/Media/fire_64",
["PlaterCore"] = 1,
},
{
["OptionsValues"] = {
["useFullSize"] = false,
["iconOnLeftSide"] = false,
["showIcon"] = false,
},
["HooksTemp"] = {
},
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIconPosition (unitFrame)\n    self.ThrottleUpdate = -1\n    \nend\n\n\n",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    unitFrame.castBar.BorderShield:SetDrawLayer(\"artwork\")\n    envTable.UpdateIconPosition (unitFrame)\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    --private:\n    function envTable.UpdateIconPosition (unitFrame)\n        local castBar = unitFrame.castBar\n        local icon = castBar.Icon\n        local noInterruptTexture = castBar.BorderShield\n        \n        if (modTable.config.showIcon) then\n            icon:ClearAllPoints()\n            \n            if (modTable.config.iconOnLeftSide) then\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topright\", unitFrame.healthBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topright\", unitFrame.castBar, \"topleft\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomright\", unitFrame.castBar, \"bottomleft\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n                \n            else\n                if (modTable.config.useFullSize) then\n                    icon:SetPoint (\"topleft\", unitFrame.healthBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                    \n                else\n                    \n                    icon:SetPoint (\"topleft\", unitFrame.castBar, \"topright\", modTable.config.iconPadding, modTable.config.iconSizeOffset)\n                    icon:SetPoint (\"bottomleft\", unitFrame.castBar, \"bottomright\", modTable.config.iconPadding, -modTable.config.iconSizeOffset)\n                end\n            end\n            \n            icon:SetWidth (icon:GetHeight())\n            icon:Show()\n        else\n            icon:Hide()\n        end\n        \n        if (modTable.config.showTexture and not castBar.canInterrupt) then\n            noInterruptTexture:Show()\n            \n            local texturePath = modTable.config.iconTexturePath\n            texturePath = texturePath:gsub(\"//\", \"/\")\n            texturePath = texturePath:gsub(\"\\\\\", \"/\")\n            \n            noInterruptTexture:SetTexture (texturePath)\n            noInterruptTexture:SetTexCoord (0, 1, 0, 1)\n            \n            if (modTable.config.desaturatedTexture) then\n                noInterruptTexture:SetDesaturated (modTable.config.desaturatedTexture)\n            else\n                noInterruptTexture:SetVertexColor (DetailsFramework:ParseColors (modTable.config.textureColor))\n            end\n            \n            noInterruptTexture:SetSize (modTable.config.textureWidth, castBar:GetHeight() + modTable.config.textureHeightMod)\n            noInterruptTexture:ClearAllPoints()\n            noInterruptTexture:SetPoint (\"center\", castBar, \"left\", modTable.config.texturePosition, 0)\n            noInterruptTexture:SetAlpha (modTable.config.textureAlpha)\n        else\n            noInterruptTexture:Hide()\n        end\n    end\nend",
},
["Time"] = 1620347016,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\castbar_icon",
["Enabled"] = false,
["Revision"] = 352,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Move the icon of the spell cast to the left or right side of the nameplate.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Icon Settings:",
["Name"] = "Icon Settings",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showIcon",
["Value"] = true,
["Name"] = "Show Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Show the castbar icon when enabled",
},
{
["Type"] = 4,
["Key"] = "iconOnLeftSide",
["Value"] = true,
["Name"] = "Icon on Left Side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled it anchor the icon on the left side, right otherwise",
},
{
["Type"] = 4,
["Key"] = "useFullSize",
["Value"] = false,
["Name"] = "Use Big Icon",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled the icon has the size of the cast bar plus the healthbar",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Fine tune the icon size",
["Min"] = 0,
["Name"] = "Icon Size Offset",
["Value"] = 0,
["Key"] = "iconSizeOffset",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Space between the icon and the cast bar",
["Min"] = -5,
["Name"] = "Icon Padding",
["Value"] = 0,
["Key"] = "iconPadding",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option5",
["Value"] = "Can't Interrupt Texture:",
["Name"] = "Interrupt Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "showTexture",
["Value"] = true,
["Name"] = "Show Texture",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled show a texture to tell the cast can't be interrupted",
},
{
["Type"] = 3,
["Key"] = "iconTexturePath",
["Value"] = "Interface\\GROUPFRAME\\UI-GROUP-MAINTANKICON",
["Name"] = "Texture Path",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Insert the path for the texture",
},
{
["Type"] = 4,
["Key"] = "desaturatedTexture",
["Value"] = true,
["Name"] = "Texture Desaturated",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enbaled, texture is shown in black & white",
},
{
["Type"] = 1,
["Key"] = "textureColor",
["Value"] = {
1,
1,
1,
0.30567157268524,
},
["Name"] = "Texture Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Select the color of the texture",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture width",
["Min"] = 1,
["Name"] = "Texture Width",
["Value"] = 10,
["Key"] = "textureWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "The texture is set to be the same size as the cast bar, fine tune the height as wanted",
["Min"] = -16,
["Name"] = "Texture Height Mod",
["Value"] = 0,
["Key"] = "textureHeightMod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Adjust the texture position",
["Min"] = -32,
["Name"] = "Texture Position",
["Value"] = 0,
["Key"] = "texturePosition",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Adjust the texture transparency",
["Min"] = 0,
["Name"] = "Texture Alpha",
["Value"] = 1,
["Key"] = "textureAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["LastHookEdited"] = "",
["Name"] = "Cast Bar Icon Settings [P]",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    local name = unitFrame.healthBar.unitName:GetText()\n    \n    if (name) then\n        unitFrame.healthBar.unitName:SetText(name:gsub('(%S+) ',function(t) return t:sub(0,0)..'' end))\n    end\nend\n\n\n\n\n\n\n\n",
},
["Time"] = 1728835469,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/Rcm39UnZV/2",
["Icon"] = "INTERFACE\\ICONS\\Ability_Spy",
["Enabled"] = false,
["Revision"] = 453,
["semver"] = "1.0.1",
["Author"] = "Zenshoes-Area 52",
["Desc"] = "Abbreviates names on nameplates",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Abbreviated Names",
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1729336844,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 45,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Force Threat Color",
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 10,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1741124903,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1000,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["version"] = 18,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameLength",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarNameLength",
},
{
["Type"] = 4,
["Name"] = "Treat hyphens (-) as space",
["Value"] = true,
["Key"] = "hyphenAsSpace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Name"] = "Keep hyphen in the last name",
["Value"] = true,
["Key"] = "keepHyphenInLastName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Name"] = "Cutoff when no split can be done",
["Value"] = true,
["Key"] = "noSplitCutoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Value"] = true,
["Key"] = "abbreviate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Name"] = "Abbreviate left to right",
["Value"] = false,
["Key"] = "abbreviateLeftToRight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Name"] = "Keep right side",
["Value"] = true,
["Key"] = "keepRightSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Name"] = "Ignore Players",
["Value"] = false,
["Key"] = "ignorePlayers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC nameplate",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Name"] = "Ignore Object Nameplate",
["Value"] = true,
["Key"] = "ignoreObjectNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC cast bar",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcCastBar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Name"] = "Manual name overwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Key"] = "manualNameOverwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
},
{
["OptionsValues"] = {
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
["readyColor"] = {
0,
1,
0,
1,
},
["willBeReadyColor"] = {
0,
0,
0,
1,
},
["defaultColor"] = {
0,
0,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
},
["Time"] = 1753502936,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = true,
["Revision"] = 908,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 90,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "qweqew",
["Value"] = 0,
["Name"] = "qwdqwd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Interrupt ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Key"] = "willBeReadyColor",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Name"] = "Will be ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Key"] = "reactionTime",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaction time",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Key"] = "borderThickness",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Border thickness",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "defaultBorderToggle",
["Value"] = false,
["Name"] = "Enable default border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Key"] = "defaultColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Default Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Key"] = "option12",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "castBarIndicatorToggle",
["Value"] = true,
["Name"] = "Exact indicator in cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Key"] = "interruptIndicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Indicator color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1746424428,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 105,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 99,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Constructor",
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want VT+SWP+DP to be white, but VT+SWP to be purple:\n    1. Put the VT+SWP+DP combo FIRST\n    2. Put the VT+SWP combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#aaff00\",    -- Lime Green Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
},
["Time"] = 1746422290,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4728198,
["Enabled"] = false,
["Revision"] = 108,
["semver"] = "",
["Author"] = "Deafndk-Tichondrius",
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Prio"] = 99,
["Name"] = "Quazii Debuffs Combo Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 1,
["Name"] = "Reaver's mark",
["Value"] = {
1,
1,
1,
0.4032512903213501,
},
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["OptionsValues"] = {
["threshold2"] = 3,
["debuff3"] = "207771",
["debuff2"] = "442624",
["color1"] = {
0,
1,
0.5607843399047852,
1,
},
["color2"] = {
0.4117647409439087,
1,
0,
1,
},
["low_time_color2"] = {
1,
0.9647059440612793,
0,
1,
},
["color3"] = {
1,
0.6039215922355652,
0,
1,
},
["low_time_color1"] = {
0,
1,
0.8941177129745483,
1,
},
["debuff1"] = "204598",
["threshold3"] = 3,
["threshold1"] = 3,
["low_time_color3"] = {
1,
0.4941176772117615,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Time"] = 1753506263,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4635182,
["Enabled"] = true,
["Revision"] = 352,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Nameplate Colors (Vengeance DH)",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Options"] = {
{
["Type"] = 3,
["Name"] = "Sigil of Flame  ID",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Sigil of Flame Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Sigil Low Time",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold1",
},
{
["Type"] = 1,
["Name"] = "Sigil Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Reaver's Mark ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold2",
["Value"] = 5,
["Name"] = "Reaver's Mark Low Time",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Low Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Fiery Brand ID",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fiery Brand Low Time",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
},
{
["OptionsValues"] = {
["threshold2"] = 3,
["debuff3"] = "12654",
["debuff2"] = "383669",
["color1"] = {
0,
1,
0.5607843399047852,
1,
},
["color2"] = {
0.4117647409439087,
1,
0,
1,
},
["low_time_color2"] = {
1,
0.9647059440612793,
0,
1,
},
["color3"] = {
1,
0.6039215922355652,
0,
1,
},
["threshold1"] = 3,
["debuff1"] = "204598",
["threshold3"] = 3,
["low_time_color1"] = {
0,
1,
0.8941177129745483,
1,
},
["low_time_color3"] = {
1,
0.4941176772117615,
0,
1,
},
},
["HooksTemp"] = {
},
["UID"] = "0x6818528f2a8a01b",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Time"] = 1746425136,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["Icon"] = 4635182,
["Enabled"] = false,
["Revision"] = 371,
["Options"] = {
{
["Type"] = 3,
["Key"] = "debuff1",
["Value"] = "000000",
["Name"] = "Sigil of Flame  ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Sigil of Flame Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold1",
["Value"] = 5,
["Name"] = "Sigil Low Time",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Sigil Low Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Reaver's Mark ID",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Reaver's Mark Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaver's Mark Low Time",
},
{
["Type"] = 1,
["Name"] = "Reaver's Mark Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Fiery Brand ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fiery Brand Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Fiery Brand Low Time",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold3",
},
{
["Type"] = 1,
["Key"] = "low_time_color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fiery Brand Low Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Nameplate Colors (Mage)",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
},
},
["auras_experimental_update_classic_era"] = true,
["health_animation_time_dilatation"] = 2.869999885559082,
["auras_per_row_amount2"] = 2,
["aura_width"] = 16,
["ghost_auras"] = {
["auras"] = {
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
},
},
["extra_icon_caster_size"] = 10,
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267354] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372223] = "nil",
[382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[465682] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[283422] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[461796] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267551] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[259940] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[468813] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[465754] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[332708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[275907] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[447270] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[424958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320729] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1214546] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473220] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "nil",
[333294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396665] = "nil",
[323608] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[459779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[1214315] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[291865] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[472452] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[330614] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[317231] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473114] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411994] = "nil",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[209628] = "nil",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199151] = "nil",
[369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[293986] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[474018] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[436592] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[474087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217653] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[339706] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1215738] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
},
["pet_width_scale"] = 0.9999999403953552,
["hover_highlight_alpha"] = 0.2999999821186066,
["quick_hide"] = true,
["extra_icon_timer_size"] = 10,
["target_highlight_color"] = {
nil,
0.5215686559677124,
},
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["aura_sort"] = true,
["resources"] = {
["y_offset"] = 1,
["y_offset_target"] = 9,
["scale"] = 0.800000011920929,
},
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["castbar_target_outline"] = "NONE",
["target_shady_combat_only"] = false,
["range_check_in_range_or_target_alpha_friendlies"] = 0.8999999761581421,
["extra_icon_show_enrage"] = true,
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0,
["first_run3"] = true,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["health_selection_overlay_color"] = {
0.960784375667572,
[3] = 0.988235354423523,
},
["ui_parent_scale_tune"] = 1.819999933242798,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["profile_name"] = "Quazii TWW 11.1 Plater",
["health_statusbar_bgtexture"] = "PlaterBackground",
["indicator_raidmark_anchor"] = {
["x"] = 0,
["side"] = 9,
},
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["aura_tracker"] = {
["buff_banned"] = {
["333553"] = true,
["281242"] = true,
["61573"] = true,
["206150"] = true,
["61574"] = true,
},
["debuff_banned"] = {
["331653"] = true,
["330911"] = true,
[447513] = true,
["327980"] = true,
["281242"] = true,
[376084] = true,
[449217] = true,
["299151"] = true,
[452229] = true,
["284678"] = true,
["340007"] = true,
},
["debuff"] = {
224991,
277950,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
[227931] = true,
[163689] = true,
["329181"] = false,
},
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["indicator_rare"] = false,
["color_override"] = false,
["tocversion"] = 110105,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["not_affecting_combat_alpha"] = 0.7999999523162842,
["use_health_animation"] = true,
["target_highlight_alpha"] = 1,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["target_shady_alpha"] = 0.6100000143051147,
["cast_statusbar_texture"] = "Solid",
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["target_highlight_height"] = 20,
["url"] = "https://wago.io/kvgdjO6_L/3",
["cast_statusbar_fadein_time"] = 0.02081192471087,
["version"] = 3,
["indicator_raidmark_scale"] = 0.5,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["blizzard_nameplate_font_size"] = 10,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["plater_resources_grow_direction"] = "center",
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["aura_grow_direction"] = 3,
["patch_version"] = 39,
["no_spellname_length_limit"] = true,
["range_check_in_range_or_target_alpha"] = 0.8999999761581421,
["captured_casts"] = {
[384524] = {
["encounterName"] = "Watcher Irideus",
["encounterID"] = 2615,
["npcID"] = 189719,
},
[376683] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[375727] = {
["encounterName"] = "Chrono-Lord Deios",
["encounterID"] = 2559,
["npcID"] = 184125,
},
[411300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Waveshaper",
["npcID"] = 205363,
},
[412129] = {
["event"] = "SPELL_CAST_START",
["source"] = "Lerai, Timesworn Maiden",
["npcID"] = 205152,
},
[265568] = {
["event"] = "SPELL_CAST_START",
["source"] = "Befouled Spirit",
["npcID"] = 133685,
},
[372222] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[267354] = {
["isChanneled"] = true,
["source"] = "Hired Assassin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 134232,
},
[372223] = {
["npcID"] = 189265,
},
[427176] = {
["encounterName"] = "The Darkness",
["source"] = "Wriggling Darkspawn",
["npcID"] = 213008,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[382233] = {
["npcID"] = 193462,
},
[323137] = {
["encounterName"] = "Ingra Maloch",
["source"] = "Droman Oulfarran",
["encounterID"] = 2397,
["event"] = "SPELL_CAST_START",
["npcID"] = 164804,
},
[372735] = {
["npcID"] = 187969,
},
[266209] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Deathspeaker",
["npcID"] = 134284,
},
[269843] = {
["encounterName"] = "Unbound Abomination",
["source"] = "Unbound Abomination",
["npcID"] = 133007,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2123,
},
[283422] = {
["encounterName"] = "Tussle Tonks",
["source"] = "Gnomercy 4.U.",
["npcID"] = 145185,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2257,
},
[388801] = {
["npcID"] = 195855,
},
[340160] = {
["source"] = "Mistveil Matriarch",
["event"] = "SPELL_CAST_START",
["npcID"] = 173655,
},
[260894] = {
["encounterName"] = "Elder Leaxa",
["source"] = "Elder Leaxa",
["npcID"] = 131318,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2111,
},
[461796] = {
["source"] = "Darkfuse Demolitionist",
["event"] = "SPELL_CAST_START",
["npcID"] = 229212,
},
[387910] = {
["npcID"] = 196200,
},
[226406] = {
["source"] = "Emberhusk Dominator",
["event"] = "SPELL_CAST_START",
["npcID"] = 113537,
},
[183088] = {
["source"] = "Mightstone Breaker",
["event"] = "SPELL_CAST_START",
["npcID"] = 92612,
},
[267551] = {
["source"] = "Coin-Operated Crowd Pummeler",
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[412200] = {
["event"] = "SPELL_CAST_START",
["source"] = "Time-Lost Aerobot",
["npcID"] = 205723,
},
[197974] = {
["encounterName"] = "Ilysanna Ravencrest",
["source"] = "Soul-torn Vanguard",
["encounterID"] = 1833,
["event"] = "SPELL_CAST_START",
["npcID"] = 100485,
},
[384597] = {
["npcID"] = 193293,
},
[370764] = {
["npcID"] = 187160,
},
[201226] = {
["source"] = "Bloodtainted Fury",
["event"] = "SPELL_CAST_START",
["npcID"] = 100531,
},
[259940] = {
["encounterName"] = "Rixxa Fluxfume",
["source"] = "Rixxa Fluxflame",
["encounterID"] = 2107,
["event"] = "SPELL_CAST_START",
["npcID"] = 129231,
},
[377204] = {
["encounterName"] = "Warlord Sargha",
["encounterID"] = 2611,
["npcID"] = 189901,
},
[468813] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["event"] = "SPELL_CAST_START",
["npcID"] = 226404,
},
[412012] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Timeslicer",
["npcID"] = 205408,
},
[427376] = {
["source"] = "Gilgoblin Hunter",
["event"] = "SPELL_CAST_START",
["npcID"] = 40935,
},
[372615] = {
["npcID"] = 189247,
},
[465754] = {
["source"] = "Shreddinator 3000",
["event"] = "SPELL_CAST_START",
["npcID"] = 230740,
},
[332708] = {
["npcID"] = 167532,
},
[413607] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Twilight Magus",
["npcID"] = 201223,
},
[432031] = {
["encounterName"] = "Ki'katal the Harvester",
["source"] = "Bloodworker",
["npcID"] = 215968,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["encounterID"] = 2901,
},
[447395] = {
["encounterName"] = "Forgemaster Throngus",
["source"] = "Forgemaster Throngus",
["encounterID"] = 1050,
["event"] = "SPELL_CAST_START",
["npcID"] = 40177,
},
[395184] = {
["npcID"] = 185883,
},
[372107] = {
["encounterName"] = "Kokia Blazehoof",
["npcID"] = 189232,
["encounterID"] = 2606,
},
[257870] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Buccaneer",
["npcID"] = 130011,
},
[256627] = {
["event"] = "SPELL_CAST_START",
["source"] = "Scrimshaw Enforcer",
["npcID"] = 129374,
},
[447270] = {
["encounterName"] = "Captain Dailcry",
["source"] = "Captain Dailcry",
["encounterID"] = 2847,
["event"] = "SPELL_CAST_START",
["npcID"] = 207946,
},
[424958] = {
["encounterName"] = "Stormguard Gorren",
["source"] = "Stormguard Gorren",
["encounterID"] = 2861,
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[472452] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Darkfuse Mechadrone",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 228424,
},
[439621] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Nx",
["encounterID"] = 2908,
["event"] = "SPELL_CAST_START",
["npcID"] = 216648,
},
[451543] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[376892] = {
["encounterName"] = "Balakar Khan",
["encounterID"] = 2580,
["npcID"] = 186151,
},
[367521] = {
["npcID"] = 185534,
},
[340300] = {
["event"] = "SPELL_CAST_START",
["source"] = "Mistveil Gorgegullet",
["npcID"] = 173720,
},
[320729] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[257426] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Enforcer",
["npcID"] = 129602,
},
[1214546] = {
["source"] = "Void Ascendant",
["event"] = "SPELL_CAST_START",
["npcID"] = 212793,
},
[419351] = {
["event"] = "SPELL_CAST_START",
["source"] = "Infinite Saboteur",
["npcID"] = 208438,
},
[473220] = {
["encounterName"] = "Big M.O.M.M.A.",
["source"] = "Big M.O.M.M.A.",
["encounterID"] = 3020,
["event"] = "SPELL_CAST_START",
["npcID"] = 226398,
},
[434779] = {
["encounterName"] = "Orator Krix'vizk",
["source"] = "Orator Krix'vizk",
["encounterID"] = 2907,
["event"] = "SPELL_CAST_START",
["npcID"] = 216619,
},
[369563] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[425027] = {
["source"] = "Earth Infused Golem",
["event"] = "SPELL_CAST_START",
["npcID"] = 210109,
},
[422541] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[448105] = {
["encounterName"] = "Drahga Shadowburner",
["source"] = "Valiona",
["encounterID"] = 1048,
["event"] = "SPELL_CAST_START",
["npcID"] = 40320,
},
[422414] = {
["event"] = "SPELL_CAST_START",
["source"] = "Shuffling Horror",
["npcID"] = 208456,
},
[427323] = {
["event"] = "SPELL_CAST_START",
["source"] = "Voidrider",
["npcID"] = 212786,
},
[429427] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Stoneshaper",
["npcID"] = 214066,
},
[412215] = {
["event"] = "SPELL_CAST_START",
["source"] = "Spurlok, Timesworn Sentinel",
["npcID"] = 205158,
},
[426860] = {
["encounterName"] = "Anub'ikkaj",
["source"] = "Anub'ikkaj",
["encounterID"] = 2838,
["event"] = "SPELL_CAST_START",
["npcID"] = 211089,
},
[257397] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Bonesaw",
["npcID"] = 129788,
},
[333294] = {
["npcID"] = 169893,
},
[375943] = {
["encounterName"] = "Balakar Khan",
["source"] = "Balakar Khan",
["encounterID"] = 2580,
["event"] = "SPELL_CAST_START",
["npcID"] = 186151,
},
[200913] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[88308] = {
["encounterName"] = "Altairus",
["source"] = "Altairus",
["encounterID"] = 1041,
["event"] = "SPELL_CAST_START",
["npcID"] = 43873,
},
[451843] = {
["source"] = "Stormguard Gorren",
["event"] = "SPELL_CAST_START",
["npcID"] = 207205,
},
[448619] = {
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_START",
["npcID"] = 223423,
},
[317231] = {
["encounterName"] = "Xav the Unfallen",
["npcID"] = 162329,
["encounterID"] = 2366,
},
[1215738] = {
["encounterName"] = "An Affront of Challengers",
["source"] = "Paceran the Virulent",
["npcID"] = 164463,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2391,
},
[372311] = {
["npcID"] = 189266,
},
[449130] = {
["event"] = "SPELL_CAST_START",
["source"] = "Forge Loader",
["npcID"] = 213343,
},
[437719] = {
["source"] = "Primalist Galesinger",
["event"] = "SPELL_CAST_START",
["npcID"] = 190373,
},
[333488] = {
["encounterName"] = "Amarth, The Harvester",
["source"] = "Amarth",
["encounterID"] = 2388,
["event"] = "SPELL_CAST_START",
["npcID"] = 163157,
},
[269029] = {
["encounterName"] = "Dread Captain Lockwood",
["source"] = "Dread Captain Lockwood",
["npcID"] = 129208,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2109,
},
[369061] = {
["encounterName"] = "Emberon",
["encounterID"] = 2558,
["npcID"] = 184422,
},
[396665] = {
["source"] = "Magmas",
["event"] = "SPELL_CAST_START",
["npcID"] = 199027,
},
[262377] = {
["source"] = "Crawler Mine",
["event"] = "SPELL_CAST_START",
["npcID"] = 235631,
},
[323608] = {
["encounterName"] = "Mordretha",
["npcID"] = 165946,
["encounterID"] = 2404,
},
[377732] = {
["npcID"] = 184319,
},
[408141] = {
["encounterName"] = "Blight of Galakrond",
["source"] = "Dazhak",
["encounterID"] = 2668,
["event"] = "SPELL_CAST_START",
["npcID"] = 201788,
},
[388060] = {
["npcID"] = 187033,
},
[459779] = {
["encounterName"] = "Demolition Duo",
["source"] = "Bront",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226402,
},
[369573] = {
["encounterName"] = "The Lost Dwarves",
["encounterID"] = 2555,
["npcID"] = 184581,
},
[257288] = {
["encounterName"] = "Chopper Redhook",
["source"] = "Irontide Cleaver",
["encounterID"] = 2098,
["event"] = "SPELL_CAST_START",
["npcID"] = 129879,
},
[333477] = {
["npcID"] = 163621,
},
[1217653] = {
["encounterName"] = "Demolition Duo",
["source"] = "Keeza Quickfuse",
["encounterID"] = 3019,
["event"] = "SPELL_CAST_START",
["npcID"] = 226403,
},
[375439] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[378818] = {
["npcID"] = 192788,
},
[411012] = {
["event"] = "SPELL_CAST_START",
["source"] = "Young Storm Dragon",
["npcID"] = 45919,
},
[381525] = {
["encounterName"] = "Kyrakka and Erkhart Stormvein",
["npcID"] = 190484,
["encounterID"] = 2623,
},
[386660] = {
["encounterName"] = "Leymor",
["npcID"] = 186644,
["encounterID"] = 2582,
},
[377034] = {
["encounterName"] = "Crawth",
["encounterID"] = 2564,
["npcID"] = 191736,
},
[382708] = {
["npcID"] = 193293,
},
[421277] = {
["encounterName"] = "The Candle King",
["source"] = "The Candle King",
["encounterID"] = 2787,
["event"] = "SPELL_CAST_START",
["npcID"] = 208745,
},
[444608] = {
["encounterName"] = "Prioress Murrpray",
["source"] = "Prioress Murrpray",
["encounterID"] = 2848,
["event"] = "SPELL_CAST_START",
["npcID"] = 207940,
},
[291865] = {
["encounterName"] = "King Mechagon",
["source"] = "Aerial Unit R-21/X",
["npcID"] = 150396,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2260,
},
[188169] = {
["encounterName"] = "Rokmora",
["source"] = "Rokmora",
["encounterID"] = 1790,
["event"] = "SPELL_CAST_START",
["npcID"] = 91003,
},
[385578] = {
["encounterName"] = "Azureblade",
["encounterID"] = 2585,
["npcID"] = 186739,
},
[255567] = {
["source"] = "T'lonja",
["event"] = "SPELL_CAST_START",
["npcID"] = 128455,
},
[451496] = {
["source"] = "Eye of the Queen",
["event"] = "SPELL_CAST_START",
["npcID"] = 220003,
},
[268260] = {
["source"] = "Ashvane Cannoneer",
["event"] = "SPELL_CAST_START",
["npcID"] = 138465,
},
[272609] = {
["event"] = "SPELL_CAST_START",
["source"] = "Faceless Corruptor",
["npcID"] = 138281,
},
[169929] = {
["encounterName"] = "Yalnu",
["source"] = "Gnarled Ancient",
["npcID"] = 84400,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[375351] = {
["npcID"] = 190403,
},
[466124] = {
["encounterName"] = "Geezle Gigazap",
["source"] = "Geezle Gigazap",
["encounterID"] = 3054,
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 226404,
},
[265019] = {
["event"] = "SPELL_CAST_START",
["source"] = "Chosen Blood Matron",
["npcID"] = 131436,
},
[427359] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[279118] = {
["event"] = "SPELL_CAST_START",
["source"] = "Zanchuli Witch-Doctor",
["npcID"] = 122969,
},
[382712] = {
["event"] = "SPELL_CAST_START",
["source"] = "Wilted Oak",
["npcID"] = 186229,
},
[374361] = {
["encounterName"] = "Echo of Doragosa",
["encounterID"] = 2565,
["npcID"] = 190609,
},
[265540] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fetid Maggot",
["npcID"] = 130909,
},
[200784] = {
["source"] = "Wyrmtongue Scavenger",
["event"] = "SPELL_CAST_START",
["npcID"] = 98792,
},
[330614] = {
["npcID"] = 163086,
},
[474087] = {
["encounterName"] = "Kul'tharok",
["source"] = "Kul'tharok",
["npcID"] = 162309,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2364,
},
[465682] = {
["source"] = "Darkfuse Inspector",
["event"] = "SPELL_CAST_START",
["npcID"] = 231385,
},
[411994] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Infinite Chronoweaver",
["npcID"] = 205384,
},
[375348] = {
["npcID"] = 190401,
},
[426893] = {
["event"] = "SPELL_CAST_START",
["source"] = "Quartermaster Koratite",
["npcID"] = 209801,
},
[443500] = {
["source"] = "Royal Swarmguard",
["event"] = "SPELL_CAST_START",
["npcID"] = 220197,
},
[428293] = {
["encounterName"] = "Lady Naz'jar",
["source"] = "Naz'jar Honor Guard",
["encounterID"] = 1045,
["event"] = "SPELL_CAST_START",
["npcID"] = 40633,
},
[384978] = {
["encounterName"] = "Umbrelskul",
["encounterID"] = 2584,
["npcID"] = 186738,
},
[321834] = {
["encounterName"] = "Mistcaller",
["source"] = "Mistcaller",
["encounterID"] = 2392,
["event"] = "SPELL_CAST_START",
["npcID"] = 164501,
},
[440218] = {
["encounterName"] = "Fangs of the Queen",
["source"] = "Vx",
["npcID"] = 216649,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2908,
},
[331718] = {
["source"] = "Mistveil Defender",
["event"] = "SPELL_CAST_START",
["npcID"] = 171772,
},
[397889] = {
["event"] = "SPELL_CAST_START",
["source"] = "Fallen Waterspeaker",
["npcID"] = 200126,
},
[324323] = {
["npcID"] = 165919,
},
[473114] = {
["encounterName"] = "Swampface",
["source"] = "Swampface",
["encounterID"] = 3053,
["event"] = "SPELL_CAST_START",
["npcID"] = 226396,
},
[257756] = {
["event"] = "SPELL_CAST_START",
["source"] = "Bilge Rat Buccaneer",
["npcID"] = 129527,
},
[427342] = {
["event"] = "SPELL_CAST_START",
["source"] = "Arathi Footman",
["npcID"] = 206705,
},
[453161] = {
["event"] = "SPELL_CAST_START",
["source"] = "Hulking Bloodguard",
["npcID"] = 216338,
},
[253517] = {
["event"] = "SPELL_CAST_START",
["source"] = "Dazar'ai Confessor",
["npcID"] = 122973,
},
[373742] = {
["encounterName"] = "Chargath, Bane of Scales",
["encounterID"] = 2613,
["npcID"] = 189340,
},
[226296] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[388392] = {
["npcID"] = 196044,
},
[426260] = {
["source"] = "Torchsnarl",
["event"] = "SPELL_CAST_START",
["npcID"] = 212411,
},
[427025] = {
["encounterName"] = "The Darkness",
["source"] = "The Darkness",
["npcID"] = 208747,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2788,
},
[434824] = {
["source"] = "Ixin",
["event"] = "SPELL_CAST_START",
["npcID"] = 217531,
},
[426261] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sootsnout",
["npcID"] = 212412,
},
[372201] = {
["npcID"] = 189464,
},
[462216] = {
["event"] = "SPELL_CAST_START",
["source"] = "Twilight Flamerender",
["npcID"] = 224240,
},
[375251] = {
["encounterName"] = "Magmatusk",
["encounterID"] = 2610,
["npcID"] = 181861,
},
[387629] = {
["npcID"] = 195876,
},
[320822] = {
["npcID"] = 165222,
},
[436592] = {
["encounterName"] = "Goldie Baronbottom",
["source"] = "Goldie Baronbottom",
["encounterID"] = 2930,
["event"] = "SPELL_CAST_START",
["npcID"] = 214661,
},
[448640] = {
["event"] = "SPELL_CAST_START",
["source"] = "Cursedforge Honor Guard",
["npcID"] = 214264,
},
[426645] = {
["source"] = "Naz'jar Ravager",
["event"] = "SPELL_CAST_START",
["npcID"] = 212673,
},
[87618] = {
["encounterName"] = "Asaad",
["source"] = "Asaad",
["npcID"] = 43875,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1042,
},
[321968] = {
["source"] = "Tirnenn Villager",
["event"] = "SPELL_CAST_START",
["npcID"] = 164929,
},
[375327] = {
["npcID"] = 190404,
},
[382277] = {
["npcID"] = 193457,
},
[387950] = {
["npcID"] = 187919,
},
[377559] = {
["encounterName"] = "Treemouth",
["encounterID"] = 2568,
["npcID"] = 186120,
},
[374563] = {
["npcID"] = 190362,
},
[396812] = {
["npcID"] = 196576,
},
[393432] = {
["npcID"] = 190340,
},
[474018] = {
["source"] = "Voidrider",
["event"] = "SPELL_CAST_START",
["npcID"] = 212786,
},
[169179] = {
["encounterName"] = "Yalnu",
["source"] = "Yalnu",
["npcID"] = 83846,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1756,
},
[209628] = {
["encounterName"] = "Advisor Melandrus",
["source"] = "Advisor Melandrus",
["encounterID"] = 1870,
["event"] = "SPELL_CAST_START",
["npcID"] = 104218,
},
[416139] = {
["encounterName"] = "Chrono-Lord Deios",
["event"] = "SPELL_CAST_START",
["source"] = "Chrono-Lord Deios",
["npcID"] = 199000,
},
[385958] = {
["encounterName"] = "Vexamus",
["encounterID"] = 2562,
["npcID"] = 194181,
},
[369465] = {
["npcID"] = 186420,
},
[431494] = {
["source"] = "Nightfall Tactician",
["event"] = "SPELL_CAST_START",
["npcID"] = 213934,
},
[433662] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Reinforced Drone",
["npcID"] = 216856,
},
[200768] = {
["source"] = "Crazed Razorbeak",
["event"] = "SPELL_CAST_START",
["npcID"] = 95766,
},
[293986] = {
["event"] = "SPELL_CAST_START",
["source"] = "Blastatron X-80",
["npcID"] = 151476,
},
[426905] = {
["source"] = "Minion of Ghur'sha",
["event"] = "SPELL_CAST_START",
["npcID"] = 212778,
},
[397931] = {
["source"] = "Minion of Doubt",
["event"] = "SPELL_CAST_START",
["npcID"] = 57109,
},
[449090] = {
["isChanneled"] = true,
["source"] = "Careless Hopgoblin",
["event"] = "SPELL_CAST_SUCCESS",
["npcID"] = 223423,
},
[445457] = {
["encounterName"] = "Skardyn Monstrosity",
["source"] = "Voidstone Monstrosity",
["npcID"] = 207207,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2836,
},
[388911] = {
["npcID"] = 196577,
},
[432198] = {
["encounterName"] = "Brewmaster Aldryr",
["source"] = "Brew Master Aldryr",
["encounterID"] = 2900,
["event"] = "SPELL_CAST_START",
["npcID"] = 210271,
},
[441119] = {
["source"] = "Bee Wrangler",
["event"] = "SPELL_CAST_START",
["npcID"] = 210264,
},
[200291] = {
["source"] = "Risen Scout",
["event"] = "SPELL_CAST_START",
["npcID"] = 98691,
},
[156718] = {
["source"] = "Monstrous Corpse Spider",
["event"] = "SPELL_CAST_START",
["npcID"] = 76104,
},
[388976] = {
["npcID"] = 196671,
},
[372225] = {
["npcID"] = 189467,
},
[369828] = {
["npcID"] = 184023,
},
[188404] = {
["encounterName"] = "Hymdall",
["source"] = "Storm Drake",
["encounterID"] = 1805,
["event"] = "SPELL_CAST_START",
["npcID"] = 97788,
},
[367484] = {
["npcID"] = 185508,
},
[323496] = {
["npcID"] = 165872,
},
[265721] = {
["source"] = "Terrorachna",
["event"] = "SPELL_CAST_START",
["npcID"] = 200349,
},
[427869] = {
["encounterName"] = "Void Speaker Eirich",
["source"] = "Void Speaker Eirich",
["encounterID"] = 2883,
["event"] = "SPELL_CAST_START",
["npcID"] = 213119,
},
[88194] = {
["source"] = "Young Storm Dragon",
["event"] = "SPELL_CAST_START",
["npcID"] = 45919,
},
[1217496] = {
["source"] = "Bubbles",
["event"] = "SPELL_CAST_START",
["npcID"] = 231197,
},
[385536] = {
["isChanneled"] = true,
["event"] = "SPELL_CAST_SUCCESS",
["source"] = "Primalist Flamedancer",
["npcID"] = 190206,
},
[432520] = {
["source"] = "Nightfall Darkcaster",
["event"] = "SPELL_CAST_START",
["npcID"] = 213893,
},
[257899] = {
["event"] = "SPELL_CAST_START",
["source"] = "Irontide Ravager",
["npcID"] = 130012,
},
[200261] = {
["source"] = "Soul-Torn Champion",
["event"] = "SPELL_CAST_START",
["npcID"] = 98243,
},
[432967] = {
["event"] = "SPELL_CAST_START",
["source"] = "Sentry Stagshell",
["npcID"] = 216340,
},
[383823] = {
["npcID"] = 192796,
},
[275907] = {
["encounterName"] = "Azerokk",
["source"] = "Azerokk",
["encounterID"] = 2106,
["event"] = "SPELL_CAST_START",
["npcID"] = 129227,
},
[369409] = {
["npcID"] = 184130,
},
[1217294] = {
["encounterName"] = "Coin-Operated Crowd Pummeler",
["source"] = "Coin-Operated Crowd Pummeler",
["encounterID"] = 2105,
["event"] = "SPELL_CAST_START",
["npcID"] = 129214,
},
[372087] = {
["npcID"] = 187897,
},
[384868] = {
["npcID"] = 192789,
},
[412505] = {
["event"] = "SPELL_CAST_START",
["source"] = "Tyr's Vanguard",
["npcID"] = 205151,
},
[226304] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[391723] = {
["npcID"] = 197697,
},
[260793] = {
["encounterName"] = "Cragmaw the Infested",
["source"] = "Cragmaw the Infested",
["npcID"] = 131817,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2118,
},
[193505] = {
["source"] = "Vileshard Hulk",
["event"] = "SPELL_CAST_START",
["npcID"] = 91000,
},
[450854] = {
["source"] = "Deathscreamer Iken'tak",
["event"] = "SPELL_CAST_START",
["npcID"] = 211263,
},
[1214315] = {
["encounterName"] = "Kyrioss",
["source"] = "Kyrioss",
["encounterID"] = 2816,
["event"] = "SPELL_CAST_START",
["npcID"] = 209230,
},
[391118] = {
["npcID"] = 191739,
},
[265372] = {
["source"] = "Bewitched Captain",
["event"] = "SPELL_CAST_START",
["npcID"] = 131587,
},
[183465] = {
["source"] = "Tarspitter Lurker",
["event"] = "SPELL_CAST_START",
["npcID"] = 91001,
},
[376170] = {
["encounterName"] = "Decatriarch Wratheye",
["encounterID"] = 2569,
["npcID"] = 186121,
},
[164357] = {
["encounterName"] = "Witherbark",
["source"] = "Witherbark",
["npcID"] = 81522,
["event"] = "SPELL_CAST_START",
["encounterID"] = 1746,
},
[421910] = {
["encounterName"] = "Blazikon",
["source"] = "Blazikon",
["encounterID"] = 2826,
["event"] = "SPELL_CAST_START",
["npcID"] = 208743,
},
[435012] = {
["encounterName"] = "Anub'zekt",
["source"] = "Anub'zekt",
["npcID"] = 215405,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2906,
},
[339706] = {
["encounterName"] = "Mordretha",
["source"] = "Echo Bullrider",
["npcID"] = 173549,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2404,
},
[257862] = {
["encounterName"] = "Hadal Darkfathom",
["source"] = "Hadal Darkfathom",
["npcID"] = 128651,
["event"] = "SPELL_CAST_START",
["encounterID"] = 2099,
},
[413529] = {
["source"] = "Timestream Anomaly",
["event"] = "SPELL_CAST_START",
["npcID"] = 199749,
},
[377383] = {
["npcID"] = 192333,
},
[199151] = {
["source"] = "Angerhoof Bull",
["event"] = "SPELL_CAST_START",
["npcID"] = 96611,
},
[268202] = {
["encounterName"] = "Gorak Tul",
["source"] = "Deathtouched Slaver",
["encounterID"] = 2117,
["event"] = "SPELL_CAST_START",
["npcID"] = 135552,
},
[374839] = {
["encounterName"] = "Forgemaster Gorek",
["encounterID"] = 2612,
["npcID"] = 189478,
},
},
["extra_icon_show_timer"] = false,
["first_run2"] = true,
["number_region_first_run"] = true,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["plater_resources_personal_bar"] = false,
["aura_width2"] = 16,
["plater_resources_scale"] = 0.8,
["health_statusbar_bgcolor"] = {
0.0431372,
0.0431372,
0.0431372,
1,
},
["buff_frame_anchor_and_size_migrated"] = true,
["castbar_target_anchor"] = {
["side"] = 11,
},
["castbar_target_font"] = "Accidental Presidency",
["click_space_friendly"] = {
92,
1,
},
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["plater_resources_padding"] = 2,
["plater_resources_show"] = false,
["show_healthbars_on_not_attackable"] = true,
["cast_statusbar_spark_width"] = 25,
},
["Quazii TWW season2 updated"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["aura_sort"] = true,
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["target_shady_enabled"] = false,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["castbar_framelevel"] = 0,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Accidental Presidency",
["spellpercent_text_font"] = "Accidental Presidency",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_enabled"] = false,
["power_percent_text_size"] = 10,
["spellname_text_font"] = "Accidental Presidency",
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Accidental Presidency",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["only_thename"] = true,
["percent_text_enabled"] = true,
["actorname_use_guild_color"] = false,
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Accidental Presidency",
["mana"] = {
nil,
4,
},
["level_text_alpha"] = 0.2999999821186066,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["big_actortitle_text_outline"] = "OUTLINE",
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["percent_text_size"] = 10,
["percent_text_outline"] = "NONE",
["percent_text_font"] = "Accidental Presidency",
["actorname_text_font"] = "Accidental Presidency",
["quest_enabled"] = true,
["health_incombat"] = {
120,
12,
},
["health"] = {
120,
12,
},
["percent_show_health"] = true,
["actorname_use_friends_color"] = false,
["big_actorname_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellpercent_text_font"] = "Accidental Presidency",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["percent_text_enabled"] = true,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Accidental Presidency",
["percent_text_outline"] = "NONE",
["power_percent_text_font"] = "Accidental Presidency",
["big_actorname_text_size"] = 10,
["actorname_text_font"] = "Accidental Presidency",
["health_incombat"] = {
100,
1,
},
["health"] = {
100,
1,
},
["big_actorname_text_font"] = "Accidental Presidency",
["percent_show_health"] = true,
["percent_text_size"] = 10,
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = true,
},
["enemynpc"] = {
["spellpercent_text_font"] = "ViklunD's SexFont",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 0.4000015258789063,
["side"] = 5,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["actorname_text_size"] = 10,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = 11.29999542236328,
["x"] = 1,
["side"] = 3,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_font"] = "Accidental Presidency",
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_size"] = 10,
["health"] = {
120,
},
["power_percent_text_font"] = "Accidental Presidency",
["health_incombat"] = {
nil,
12,
},
["percent_show_health"] = false,
["spellname_text_font"] = "Accidental Presidency",
["level_text_enabled"] = false,
},
["global_health_width"] = 120,
["enemyplayer"] = {
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["spellpercent_text_font"] = "ViklunD's SexFont",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Accidental Presidency",
["actorname_text_size"] = 10,
["actorname_text_outline"] = "OUTLINE",
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["big_actortitle_text_size"] = 10,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Accidental Presidency",
["quest_enabled"] = true,
["percent_show_percent"] = false,
["quest_color_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
12,
},
["health"] = {
120,
},
["actorname_text_font"] = "Accidental Presidency",
["percent_show_health"] = false,
["big_actorname_text_size"] = 10,
["mana"] = {
120,
1,
},
["level_text_enabled"] = false,
},
["global_health_height"] = 12,
},
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["bossmod_aura_width"] = 32,
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["plater_resources_grow_direction"] = "center",
["resources_settings"] = {
["chr"] = {
["Player-4184-00948CDA"] = "Chi",
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-5764-000166DE"] = "HolyPower",
["Player-4184-00949549"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-5765-003F0A27"] = "Runes",
["Player-4609-0014C179"] = "HolyPower",
["Player-4184-009493C8"] = "Runes",
["Player-4184-00949207"] = "HolyPower",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-3725-0A9FE377"] = "Chi",
["Player-5764-000944AE"] = "Chi",
["Player-11-0E532B0D"] = "Chi",
["Player-5764-0002671B"] = "HolyPower",
["Player-3296-009336A2"] = "HolyPower",
["Player-11-0E532B15"] = "HolyPower",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-4609-0014B1D9"] = "Essence",
["Player-5765-003F0A0E"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
},
["aura_grow_direction"] = 3,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[149740] = {
true,
false,
"fuchsia",
},
[213806] = {
true,
false,
"fuchsia",
},
[213934] = {
true,
false,
"aqua",
},
[95842] = {
true,
false,
"fuchsia",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[134144] = {
false,
false,
"lightgreen",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[134024] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[200137] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[168942] = {
true,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[129553] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[122971] = {
true,
false,
"fuchsia",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"fuchsia",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[207198] = {
true,
false,
"fuchsia",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[213338] = {
true,
false,
"fuchsia",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[229069] = {
true,
false,
"fuchsia",
},
[163086] = {
true,
false,
"aqua",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[144293] = {
false,
false,
"aqua",
},
[165137] = {
true,
false,
"fuchsia",
},
[144294] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[164501] = {
false,
false,
"fuchsia",
},
[231380] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[224732] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"fuchsia",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[98691] = {
false,
false,
"aqua",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[135365] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[163503] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[135258] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[113537] = {
true,
false,
"aqua",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[195876] = {
true,
false,
"fuchsia",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
[195877] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[40634] = {
true,
false,
"fuchsia",
},
[131812] = {
true,
false,
"fuchsia",
},
[209801] = {
true,
false,
"aqua",
},
[164804] = {
true,
false,
"aqua",
},
[206698] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[216338] = {
true,
false,
"aqua",
},
[129600] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[213932] = {
true,
false,
"fuchsia",
},
[75459] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[189340] = {
true,
false,
"aqua",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
false,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[220815] = {
true,
false,
"fuchsia",
},
[134417] = {
false,
false,
"lightskyblue",
},
[95766] = {
true,
false,
"aqua",
},
[168578] = {
true,
false,
"fuchsia",
},
[125977] = {
false,
false,
"plum",
},
[91001] = {
true,
false,
"aqua",
},
[40167] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"magenta",
},
[223777] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[45919] = {
true,
false,
"aqua",
},
[134629] = {
false,
false,
"navajowhite",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[196115] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[138338] = {
true,
false,
"fuchsia",
},
[130635] = {
true,
false,
"fuchsia",
},
[216342] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[229686] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[212403] = {
true,
false,
"fuchsia",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[136549] = {
true,
false,
"aqua",
},
[113998] = {
true,
false,
"aqua",
},
[129547] = {
false,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[165529] = {
true,
false,
"magenta",
},
[136353] = {
false,
false,
"royalblue",
},
[231496] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[194894] = {
true,
false,
"fuchsia",
},
[139422] = {
false,
false,
"lightskyblue",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[196798] = {
true,
false,
"fuchsia",
},
[136295] = {
false,
false,
"peru",
},
[131436] = {
true,
false,
"aqua",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[169927] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[190294] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[193457] = {
true,
false,
"aqua",
},
[141284] = {
false,
false,
"lightskyblue",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[126919] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[136186] = {
false,
false,
"honeydew",
},
[75979] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[95834] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[184132] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[223773] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[101991] = {
true,
false,
"fuchsia",
},
[166275] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[208165] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[133870] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[139949] = {
false,
false,
"honeydew",
},
[220314] = {
true,
false,
"fuchsia",
},
[197912] = {
true,
false,
"fuchsia",
},
[135167] = {
false,
false,
"peru",
},
[102232] = {
true,
false,
"fuchsia",
},
[134331] = {
false,
false,
"lightskyblue",
},
[190407] = {
true,
false,
"fuchsia",
},
[231312] = {
true,
false,
"fuchsia",
},
[130404] = {
false,
false,
"peru",
},
[200126] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[129788] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[220060] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[189266] = {
true,
false,
"aqua",
},
[191847] = {
true,
false,
"fuchsia",
},
[131586] = {
false,
false,
"peru",
},
[189265] = {
true,
false,
"fuchsia",
},
[188067] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[231197] = {
true,
false,
"aqua",
},
[190381] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[207468] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[144295] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[204206] = {
true,
false,
"fuchsia",
},
[168318] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"aqua",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[196671] = {
true,
false,
"aqua",
},
[131318] = {
false,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[184023] = {
true,
false,
"fuchsia",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[144303] = {
false,
false,
"fuchsia",
},
[210269] = {
false,
false,
"no color",
},
[133432] = {
true,
false,
"fuchsia",
},
[195878] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[189247] = {
true,
false,
"fuchsia",
},
[228540] = {
true,
false,
"fuchsia",
},
[223253] = {
true,
false,
"fuchsia",
},
[129529] = {
false,
false,
"goldenrod",
},
[135474] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[133685] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[207969] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[207459] = {
true,
false,
"fuchsia",
},
[196045] = {
true,
false,
"fuchsia",
},
[223775] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[206064] = {
true,
false,
"fuchsia",
},
[220195] = {
true,
false,
"fuchsia",
},
[59552] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[133836] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"fuchsia",
},
[98792] = {
true,
false,
"aqua",
},
[134157] = {
false,
false,
"peru",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[184301] = {
true,
false,
"fuchsia",
},
[132126] = {
false,
false,
"honeydew",
},
[205363] = {
true,
false,
"fuchsia",
},
[208193] = {
true,
false,
"fuchsia",
},
[230740] = {
true,
false,
"aqua",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[98275] = {
true,
false,
"aqua",
},
[134284] = {
true,
false,
"fuchsia",
},
[134418] = {
false,
false,
"dodgerblue",
},
[174802] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[151657] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[198927] = {
true,
false,
"aqua",
},
[89] = {
true,
false,
"fuchsia",
},
[230748] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"honeydew",
},
[205151] = {
true,
false,
"aqua",
},
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1699162519,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 360,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Aura Reorder [Plater]",
},
{
["Enabled"] = true,
["Revision"] = 136,
["OptionsValues"] = {
},
["LastHookEdited"] = "Nameplate Updated",
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1742865758,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 78,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["OptionsValues"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 99,
["Name"] = "Aggro Indicator",
["PlaterCore"] = 1,
["LastHookEdited"] = "Destructor",
["Time"] = 1728836553,
["Icon"] = 132344,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 103,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Cast Bar Border",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1728837069,
["Icon"] = 133004,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 86,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["Options"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1699162520,
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Name"] = "Buff Special Mod",
["Icon"] = 136139,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 23,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Unit Name Over Target Shading",
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Time"] = 1743606293,
["Icon"] = 237377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1729336844,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 45,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 99,
["version"] = 2,
["PlaterCore"] = 1,
["Options"] = {
},
["LastHookEdited"] = "",
["Name"] = "Force Threat Color",
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 10,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1743347389,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1000,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["version"] = 18,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameLength",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarNameLength",
},
{
["Type"] = 4,
["Name"] = "Treat hyphens (-) as space",
["Value"] = true,
["Key"] = "hyphenAsSpace",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Name"] = "Keep hyphen in the last name",
["Value"] = true,
["Key"] = "keepHyphenInLastName",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Name"] = "Cutoff when no split can be done",
["Value"] = true,
["Key"] = "noSplitCutoff",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Value"] = true,
["Key"] = "abbreviate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Name"] = "Abbreviate left to right",
["Value"] = false,
["Key"] = "abbreviateLeftToRight",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Name"] = "Keep right side",
["Value"] = true,
["Key"] = "keepRightSide",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Name"] = "Ignore Players",
["Value"] = false,
["Key"] = "ignorePlayers",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC nameplate",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Name"] = "Ignore Object Nameplate",
["Value"] = true,
["Key"] = "ignoreObjectNameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Name"] = "Ignore Friendly NPC cast bar",
["Value"] = false,
["Key"] = "ignoreFriendlyNpcCastBar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Name"] = "Manual name overwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Key"] = "manualNameOverwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
},
{
["OptionsValues"] = {
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
["readyColor"] = {
0,
1,
0,
1,
},
["willBeReadyColor"] = {
0,
0,
0,
1,
},
["defaultColor"] = {
0,
0,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
},
["Time"] = 1743347388,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = false,
["Revision"] = 913,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 90,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "qweqew",
["Value"] = 0,
["Name"] = "qwdqwd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Interrupt ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Key"] = "willBeReadyColor",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Name"] = "Will be ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Key"] = "reactionTime",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaction time",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Key"] = "borderThickness",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Border thickness",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "defaultBorderToggle",
["Value"] = false,
["Name"] = "Enable default border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Key"] = "defaultColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Default Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Key"] = "option12",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "castBarIndicatorToggle",
["Value"] = true,
["Name"] = "Exact indicator in cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Key"] = "interruptIndicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Indicator color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1743347391,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 103,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 99,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["scriptId"] = "table: 000002074E750DD0",
["Time"] = 1746422461,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4635182,
["Enabled"] = false,
["Revision"] = 315,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 65,
["Name"] = "Quazii Debuff Nameplate Colors",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 3,
["Key"] = "debuff1",
["Value"] = "000000",
["Name"] = "Debuff #1 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Low Time #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold1",
},
{
["Type"] = 1,
["Key"] = "low_time_color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Debuff #2 ID",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Low Time #2",
["Value"] = 5,
["Key"] = "threshold2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Low Time Color #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold3",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low Time #3",
},
{
["Type"] = 1,
["Key"] = "low_time_color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want VT+SWP+DP to be white, but VT+SWP to be purple:\n    1. Put the VT+SWP+DP combo FIRST\n    2. Put the VT+SWP combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#aaff00\",    -- Lime Green Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
},
["Time"] = 1746421810,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4728198,
["Enabled"] = false,
["Revision"] = 106,
["semver"] = "",
["Author"] = "Deafndk-Tichondrius",
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Prio"] = 65,
["Name"] = "Quazii Debuffs Combo Color",
["PlaterCore"] = 1,
["Options"] = {
},
["HooksTemp"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want VT+SWP+DP to be white, but VT+SWP to be purple:\n    1. Put the VT+SWP+DP combo FIRST\n    2. Put the VT+SWP combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#aaff00\",    -- Lime Green Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
},
["version"] = -1,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "Nameplate Removed",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Time"] = 1743606329,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 2065559,
["Enabled"] = false,
["Revision"] = 411,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate border will change to your chosen color.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Border Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #1",
},
{
["Type"] = 1,
["Name"] = "Color #1",
["Value"] = {
0.6666666865348816,
1,
0,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #1",
},
{
["Type"] = 3,
["Name"] = "Debuff #2",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #2",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
0.501960813999176,
0,
1,
},
["Name"] = "Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #2",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #3",
},
{
["Type"] = 1,
["Name"] = "Color #3",
["Value"] = {
0,
0.7019608020782471,
0.5254902243614197,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #3",
},
{
["Type"] = 3,
["Name"] = "Debuff #4",
["Value"] = "000000",
["Key"] = "debuff4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #4",
},
{
["Type"] = 1,
["Key"] = "color4",
["Value"] = {
0.5882353186607361,
0.294117659330368,
0,
1,
},
["Name"] = "Color #4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #4",
},
{
["Type"] = 3,
["Key"] = "debuff5",
["Value"] = "000000",
["Name"] = "Debuff #5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #5",
},
{
["Type"] = 1,
["Name"] = "Color #5",
["Value"] = {
0.6901960968971252,
0.6901960968971252,
0.6901960968971252,
1,
},
["Key"] = "color5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #5",
},
{
["Type"] = 3,
["Name"] = "Debuff #6",
["Value"] = "000000",
["Key"] = "debuff6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #6",
},
{
["Type"] = 1,
["Key"] = "color6",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color #6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #6",
},
{
["Type"] = 3,
["Key"] = "debuff7",
["Value"] = "000000",
["Name"] = "Debuff #7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #7",
},
{
["Type"] = 1,
["Name"] = "Color #7",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #7",
},
{
["Type"] = 2,
["Max"] = 15,
["Desc"] = "Increase size of colored border here.",
["Min"] = 1,
["Key"] = "borderWidth",
["Value"] = 1,
["Name"] = "Border Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
},
["last_news_time"] = 1702345503,
["auras_experimental_update_classic_era"] = true,
["aura_width2"] = 16,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["plater_resources_scale"] = 0.8,
["health_statusbar_bgcolor"] = {
0.0431372,
0.0431372,
0.0431372,
1,
},
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267354] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372223] = "nil",
[382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[283422] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[461796] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267551] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[259940] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[468813] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[465754] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[332708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[275907] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[447270] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[424958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[472452] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320729] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1214546] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473220] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "nil",
[333294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[317231] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323608] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[459779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396665] = "nil",
[386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[291865] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1214315] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[330614] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473114] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411994] = "nil",
[331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[436592] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199151] = "nil",
[369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[293986] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[474018] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[209628] = "nil",
[373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[465682] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[474087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217653] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[339706] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1215738] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[412129] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[340160] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[201226] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[468813] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[472452] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[199151] = {
true,
"blue",
"",
},
[200913] = {
true,
"orangered",
"",
},
[88308] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[333488] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
true,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[268202] = {
true,
"orchid",
"",
},
[272609] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[444608] = {
false,
"gray",
"",
},
[265019] = {
true,
"orangered",
"",
},
[330614] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[384868] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[275907] = {
true,
"orangered",
"",
},
[372087] = {
true,
"orangered",
"",
},
[391118] = {
true,
"orangered",
"",
},
[426893] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[383823] = {
true,
"orchid",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[473114] = {
true,
"orangered",
"",
},
[257756] = {
true,
"orchid",
"",
},
[427342] = {
true,
"orchid",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[226296] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[427025] = {
true,
"orangered",
"",
},
[426260] = {
true,
"orangered",
"",
},
[1217496] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[426261] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[265721] = {
true,
"orangered",
"",
},
[188404] = {
true,
"orangered",
"",
},
[369828] = {
true,
"orchid",
"",
},
[426645] = {
true,
"orangered",
},
[87618] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[372225] = {
true,
"orchid",
"",
},
[387950] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[432198] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[293986] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[449090] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[474018] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[320822] = {
true,
"orchid",
"",
},
[396812] = {
true,
"orchid",
"",
},
[448640] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[373742] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[331718] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[443500] = {
true,
"orangered",
"",
},
[428293] = {
true,
"orangered",
},
[411994] = {
true,
"darkorange",
"",
},
[465682] = {
true,
"orangered",
"",
},
[474087] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[381525] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[262377] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[426860] = {
true,
"orangered",
"",
},
[1214315] = {
true,
"orangered",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["castbar_target_anchor"] = {
["side"] = 11,
},
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
},
["script_auto_imported"] = {
["Cast - Important by Color [P]"] = 2,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Explosion Affix M+"] = 14,
["Aura - Debuff Alert"] = 12,
["Unit - Show Energy"] = 11,
["Countdown"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Unit Power"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Tank Interrupt"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Add - Explode on Die [P]"] = 1,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Stop Casting"] = 4,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Cast - AoE With Range [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Heroic Leap [P]"] = 3,
["Cast - On Going Cast [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Cast - Tankbuster [P]"] = 1,
["Unit - Important"] = 11,
["Relics 9.2 M Dungeons"] = 2,
["Cast - Important Target [P]"] = 2,
["Cast - Quick Flash"] = 2,
["Cast - Very Important"] = 15,
["Cast - Alert + Timer [P]"] = 4,
["Spiteful Affix"] = 3,
["Add - Warning [P]"] = 5,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Auto Set Skull"] = 11,
["Color Change"] = 1,
["Cast - AoE Hit All [P]"] = 3,
["Add - Non Elite Trash [P]"] = 4,
["Aura - Is Cast Bar [P]"] = 1,
["Aura Border Color"] = 1,
["Cast - Voidzone [P]"] = 2,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Fixate"] = 11,
["Cast - Glowing [P]"] = 10,
["Blink by Time Left"] = 1,
["Cast - Castbar is Timer [P]"] = 2,
["Fixate On You"] = 12,
},
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["plater_resources_padding"] = 2,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["aura_alpha"] = 0.84999996423721,
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["show_healthbars_on_not_attackable"] = true,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.81818177877379,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "PlaterBackground",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Solid",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Reorder Nameplate"] = 4,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Monk Statue"] = 2,
["Extra Border"] = 2,
["Combo Points"] = 6,
["Targetting Alpha"] = 3,
["Target Color"] = 3,
["Attacking Specific Unit"] = 2,
["Execute Range"] = 1,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110100,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["indicator_rare"] = false,
["not_affecting_combat_alpha"] = 0.7999999523162842,
["extra_icon_stack_font"] = "Accidental Presidency",
["aura_height"] = 12,
["indicator_elite"] = false,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["plater_resources_personal_bar"] = false,
["target_indicator"] = "NONE",
["extra_icon_height"] = 10,
["cast_statusbar_texture"] = "Solid",
["castbar_target_outline"] = "NONE",
["aura_cooldown_reverse"] = false,
["aura_show_tooltip"] = true,
["extra_icon_caster_size"] = 10,
["extra_icon_timer_size"] = 10,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["aura_height2"] = 12,
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1739959468,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 113,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
["PlaterCore"] = 1,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1739959455,
["Enabled"] = true,
["url"] = "",
["Icon"] = 610472,
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 92,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura is Shield [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["SpellIds"] = {
343470,
423228,
},
["PlaterCore"] = 1,
["semver"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Time"] = 1739959478,
["Enabled"] = true,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 157,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "indicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Vertical Line Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Fill Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "fillColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Name"] = "Add - Health Markers [P]",
["Prio"] = 99,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["version"] = -1,
["PlaterCore"] = 1,
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Time"] = 1739959462,
["Enabled"] = true,
["url"] = "",
["NpcNames"] = {
},
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Revision"] = 27,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura While Casting [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["SpellIds"] = {
372743,
372749,
384933,
},
["PlaterCore"] = 1,
["semver"] = "",
["Icon"] = 236209,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1739959466,
["Enabled"] = true,
["url"] = "",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Revision"] = 30,
["Options"] = {
},
["version"] = -1,
["Prio"] = 99,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show a castbar for the aura duration.",
["Name"] = "Aura - Is Cast Bar [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["PlaterCore"] = 1,
["semver"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1742865758,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["Icon"] = 1305153,
["semver"] = "",
["Enabled"] = true,
["Revision"] = 1971,
["Options"] = {
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "interruptSoundToggle",
["Value"] = false,
["Name"] = "Play Sound On Spell Cast",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Key"] = "interruptSound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Name"] = "Choose Sound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Key"] = "option11",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
397889,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
450756,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
423051,
444743,
437721,
441627,
440687,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
430109,
465595,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["url"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Time"] = 1739980563,
["Enabled"] = true,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 1005,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Option 1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Key"] = "desaturateArrow",
["Value"] = false,
["Name"] = "Use White Arrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Name"] = "Quazii FRONTALS",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["version"] = -1,
["Prio"] = 67,
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
},
["PlaterCore"] = 1,
["semver"] = "",
["Icon"] = 1958262,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["url"] = "",
},
},
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplateMinAlphaDistance"] = "-158489.31924611",
["nameplateOtherTopInset"] = "0.085",
["nameplateLargeTopInset"] = "0.085",
["nameplateSelfBottomInset"] = "0.2",
["ShowClassColorInNameplate"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.75",
["nameplateSelfTopInset"] = "0.5",
["nameplateOccludedAlphaMult"] = "1",
["NamePlateHorizontalScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
},
["pet_height_scale"] = 0.9999999403953552,
["click_space_friendly"] = {
92,
1,
},
["login_counter"] = 20431,
["extra_icon_caster_name"] = false,
["aura_cooldown_show_swipe"] = false,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["aura_x_offset"] = 0,
["blizzard_nameplate_font_size"] = 10,
["aura_tracker"] = {
["debuff_banned"] = {
["331653"] = true,
["330911"] = true,
[447513] = true,
["327980"] = true,
["281242"] = true,
[376084] = true,
[449217] = true,
["299151"] = true,
[452229] = true,
["284678"] = true,
["340007"] = true,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
[227931] = true,
[163689] = true,
["329181"] = false,
},
},
["aura_timer_text_font"] = "Accidental Presidency",
["bossmod_aura_height"] = 32,
["target_highlight_alpha"] = 1,
["aura_stack_font"] = "Accidental Presidency",
["patch_version"] = 39,
["no_spellname_length_limit"] = true,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["target_shady_alpha"] = 0.5999999642372131,
["first_run2"] = true,
["plater_resources_show"] = false,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["indicator_raidmark_scale"] = 0.5,
["version"] = 3,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1,
},
},
["target_highlight_height"] = 18,
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["buff_frame_anchor_and_size_migrated"] = true,
["ui_parent_cast_strata"] = "DIALOG",
["castbar_target_font"] = "Accidental Presidency",
["bossmod_aura_glow_expiring"] = true,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["aura2_x_offset"] = 2.099990844726563,
["cast_statusbar_spark_width"] = 25,
["cast_statusbar_spark_offset"] = -13,
},
["Quazii TWW 11.2 Plater"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1745120820,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Revision"] = 119,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Name"] = "Aura - Invalidate Unit [Plater]",
["PlaterCore"] = 1,
["Enabled"] = true,
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1745289211,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["Enabled"] = true,
["Revision"] = 638,
["semver"] = "",
["NpcNames"] = {
},
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Aura - Buff Alert [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1745120821,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 374,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["NpcNames"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["semver"] = "",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["SpellIds"] = {
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Desc"] = "Add the debuff name in the trigger box.",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1743564548,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["Icon"] = 136048,
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 145,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Name"] = "UnitPower [Plater]",
["PlaterCore"] = 1,
["Enabled"] = false,
["Desc"] = "Show the energy amount above the nameplate",
["Prio"] = 99,
["SpellIds"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1743564605,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["NpcNames"] = {
},
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Revision"] = 254,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Fraction"] = false,
["Value"] = 16,
["Name"] = "Text Size",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "fontSize",
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Icon"] = 136048,
["Enabled"] = false,
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["SpellIds"] = {
},
["Prio"] = 99,
["Name"] = "Unit - Show Energy [Plater]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743574570,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["Revision"] = 93,
["semver"] = "",
["Icon"] = 610472,
["Enabled"] = true,
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Name"] = "Aura is Shield [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
343470,
423228,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743992662,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["Revision"] = 161,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Name"] = "Vertical Line Alpha",
["Value"] = 0.79,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "indicatorAlpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Key"] = "fillAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fill Alpha",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["Enabled"] = true,
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["Name"] = "Add - Health Markers [P]",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["version"] = -1,
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["semver"] = "",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1743574568,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["url"] = "",
["Icon"] = 236209,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["Revision"] = 28,
["semver"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Name"] = "Aura While Casting [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
372743,
372749,
384933,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1745120819,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["Revision"] = 32,
["semver"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura - Is Cast Bar [P]",
["PlaterCore"] = 1,
["Prio"] = 99,
["SpellIds"] = {
438494,
335141,
},
["Desc"] = "Show a castbar for the aura duration.",
["Options"] = {
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1753081975,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["url"] = "",
["Icon"] = 1305153,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 2007,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Play Sound On Spell Cast",
["Value"] = false,
["Key"] = "interruptSoundToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Name"] = "Choose Sound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Key"] = "interruptSound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.4,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 5,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.2,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 8,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Amplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 40,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Frequency",
},
},
["NpcNames"] = {
},
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
423051,
444743,
441627,
440687,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
437721,
463058,
465595,
430109,
1235326,
326450,
325700,
314488,
1229510,
355934,
355642,
350922,
357260,
357284,
351119,
},
["PlaterCore"] = 1,
["Name"] = "Quazii MUST INTERRUPT",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["semver"] = "",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1753080501,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["Icon"] = 1958262,
["url"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["Revision"] = 1034,
["semver"] = "",
["NpcNames"] = {
},
["Enabled"] = true,
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["Name"] = "Quazii FRONTALS",
["Prio"] = 67,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
326997,
322711,
323236,
323143,
1226111,
1235368,
1227900,
1227918,
352390,
199805,
355577,
347149,
},
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Key"] = "arrowAlpha",
["Value"] = 0.73,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Arrow Alpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Key"] = "animSpeed",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Animation Speed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = false,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["NpcNames"] = {
},
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Key"] = "flashDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Flash Duration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Key"] = "castBarHeight",
["Value"] = 0,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast Bar Height Mod",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Key"] = "shakeDuration",
["Value"] = 0.1,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Shake Duration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Key"] = "shakeAmplitude",
["Value"] = 2,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Key"] = "shakeFrequency",
["Value"] = 10,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Name"] = "Cast - Tankbuster [P]",
},
},
["blizzard_nameplate_large_font"] = "Quazii",
["saved_cvars_last_change"] = {
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["SoftTargetInteract"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowPersonalCooldowns"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
["nameplateShowFriendlyBuffs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1344",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["indicator_raidmark_scale"] = 0.6499999761581421,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["castbar_framelevel"] = 0,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Quazii",
["spellpercent_text_font"] = "Quazii",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_enabled"] = false,
["power_percent_text_size"] = 10,
["spellname_text_font"] = "Quazii",
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Quazii",
},
["friendlyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["only_thename"] = true,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Quazii",
["mana"] = {
nil,
4,
},
["level_text_alpha"] = 0.2999999821186066,
["percent_show_health"] = true,
["big_actortitle_text_outline"] = "OUTLINE",
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["percent_text_size"] = 10,
["percent_text_outline"] = "NONE",
["percent_text_font"] = "Quazii",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["quest_enabled"] = true,
["health_incombat"] = {
120,
14,
},
["health"] = {
120,
14,
},
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["percent_text_enabled"] = true,
["actorname_use_friends_color"] = false,
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["big_actorname_text_font"] = "Quazii",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = true,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_outline"] = "NONE",
["spellname_text_font"] = "Quazii",
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["health_incombat"] = {
100,
14,
},
["health"] = {
100,
14,
},
["percent_text_enabled"] = true,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellpercent_text_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = true,
},
["global_health_height"] = 14,
["global_health_width"] = 120,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["all_names"] = true,
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Quazii",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["big_actorname_text_font"] = "Accidental Presidency",
["quest_enabled"] = true,
["percent_show_percent"] = false,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_size"] = 10,
["quest_color_enabled"] = true,
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["level_text_alpha"] = 0.2999999821186066,
["mana"] = {
120,
1,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["actorname_text_font"] = "Quazii",
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_font"] = "Quazii",
["spellpercent_text_font"] = "Quazii",
["actorname_text_size"] = 10,
["level_text_size"] = 10,
["big_actorname_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["percent_text_size"] = 10,
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["percent_text_font"] = "Quazii",
["spellname_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["cast_incombat"] = {
nil,
8,
},
["percent_text_show_decimals"] = false,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["actorname_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 1.599998474121094,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 0.5999984741210938,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Quazii",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["bossmod_aura_width"] = 32,
["bossmod_support_bars_enabled"] = false,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-5764-000166DE"] = "HolyPower",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4184-00949207"] = "HolyPower",
["Player-5764-0002671B"] = "HolyPower",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-11-0E532B0D"] = "Chi",
["Player-11-0E93F38F"] = "HolyPower",
["Player-5765-003F0A0E"] = "Chi",
["Player-4184-009493C8"] = "Runes",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-4184-00948CDA"] = "Chi",
["Player-5765-003F0A27"] = "Runes",
["Player-4609-0014C179"] = "HolyPower",
["Player-3685-07F1620A"] = "ArcaneCharges",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-3725-0A9FE377"] = "Chi",
["Player-5764-000944AE"] = "Chi",
["Player-3296-009336A2"] = "HolyPower",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-3685-0722C2B9"] = "HolyPower",
["Player-11-0E532B15"] = "HolyPower",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-4184-00949549"] = "ComboPoints",
["Player-4609-0014B1D9"] = "Essence",
["Player-3685-07180DDD"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[53134] = {
"Ancient Core Hound",
"Firelands",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[111226] = {
"Summoner Xiv",
"The Nighthold",
"enUS",
},
[111354] = {
"Taintheart Befouler",
"The Emerald Nightmare",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[183496] = {
"Foul Gorger",
"Sepulcher of the First Ones",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[180426] = {
"Feeding Horror",
"Sanctum of Domination",
"enUS",
},
[164562] = {
"Depraved Houndmaster",
"Halls of Atonement",
"enUS",
},
[111227] = {
"Felweaver Pharamere",
"The Nighthold",
"enUS",
},
[111355] = {
"Taintheart Tormenter",
"The Emerald Nightmare",
"enUS",
},
[56781] = {
"Goriona",
"Dragon Soul",
"enUS",
},
[180427] = {
"Loom Guardian",
"Sanctum of Domination",
"enUS",
},
[112251] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[184522] = {
"Vigilant Custodian",
"Sepulcher of the First Ones",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[125429] = {
"Paraxis Inquisitor",
"Antorus, the Burning Throne",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[127732] = {
"Clobex",
"Antorus, the Burning Throne",
"enUS",
},
[121975] = {
"Aggramar",
"Antorus, the Burning Throne",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[77325] = {
"Blackhand",
"Blackrock Foundry",
"enUS",
},
[183500] = {
"Thieving Agent",
"Sepulcher of the First Ones",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[183501] = {
"Artificer Xy'mox",
"Sepulcher of the First Ones",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[56846] = {
"Arm Tentacle",
"Dragon Soul",
"enUS",
},
[180431] = {
"Focused Ritualist",
"Tazavesh, the Veiled Market",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[180432] = {
"Devoted Accomplice",
"Tazavesh, the Veiled Market",
"enUS",
},
[136934] = {
"Weapons Tester",
"The MOTHERLODE!!",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[112638] = {
"Astral Defender",
"The Nighthold",
"enUS",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[178388] = {
"Bazaar Strongarm",
"Tazavesh, the Veiled Market",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[112255] = {
"Sludgerax",
"The Nighthold",
"enUS",
},
[57231] = {
"Twilight Portal",
"Dragon Soul",
"enUS",
},
[178133] = {
"Murkbrine Wavejumper",
"Tazavesh, the Veiled Market",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[57807] = {
"Twilight Frost Evoker",
"Dragon Soul",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[16171] = {
"Coldmist Widow",
"Karazhan",
"enUS",
},
[80400] = {
"Iron Assembly Warden",
"Blackrock Foundry",
"enUS",
},
[56848] = {
"Twilight Elite Slayer",
"Dragon Soul",
"enUS",
},
[178392] = {
"Gatewarden Zo'mazz",
"Tazavesh, the Veiled Market",
"enUS",
},
[103685] = {
"Tichondrius",
"The Nighthold",
"enUS",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[178394] = {
"Cartel Lackey",
"Tazavesh, the Veiled Market",
"enUS",
},
[161251] = {
"Cultist Sycophant",
"Ny'alotha, the Waking City",
"enUS",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[178139] = {
"Murkbrine Shellcrusher",
"Tazavesh, the Veiled Market",
"enUS",
},
[164578] = {
"Stitchflesh's Creation",
"The Necrotic Wake",
"enUS",
},
[125436] = {
"Thu'raya, Mother of the Cosmos",
"Antorus, the Burning Throne",
"enUS",
},
[176605] = {
"Adamancy",
"Sanctum of Domination",
"enUS",
},
[122366] = {
"Varimathras",
"Antorus, the Burning Throne",
"enUS",
},
[178141] = {
"Murkbrine Scalebinder",
"Tazavesh, the Veiled Market",
"enUS",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[178142] = {
"Murkbrine Fishmancer",
"Tazavesh, the Veiled Market",
"enUS",
},
[184539] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
"enUS",
},
[124158] = {
"Imonar the Soulhunter",
"Antorus, the Burning Throne",
"enUS",
},
[126333] = {
"Felseeker Ritualist",
"Antorus, the Burning Throne",
"enUS",
},
[122367] = {
"Admiral Svirax",
"Antorus, the Burning Throne",
"enUS",
},
[112260] = {
"Dreadsoul Defiler",
"The Emerald Nightmare",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[101002] = {
"Krosus",
"The Nighthold",
"enUS",
},
[236995] = {
"Ravenous Destroyer",
"Eco-Dome Al'dani",
"enUS",
},
[112261] = {
"Dreadsoul Corruptor",
"The Emerald Nightmare",
"enUS",
},
[177889] = {
"Mawforged Souljudge",
"Sanctum of Domination",
"enUS",
},
[16407] = {
"Spectral Servant",
"Karazhan",
"enUS",
},
[127230] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[117123] = {
"Tidescale Legionnaire",
"Tomb of Sargeras",
"enUS",
},
[57746] = {
"Faceless Destroyer",
"Dragon Soul",
"enUS",
},
[115844] = {
"Goroth",
"Tomb of Sargeras",
"enUS",
},
[15548] = {
"Spectral Stallion",
"Karazhan",
"enUS",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[177891] = {
"Mawforged Summoner",
"Sanctum of Domination",
"enUS",
},
[127231] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[177892] = {
"Mawforged Goliath",
"Sanctum of Domination",
"enUS",
},
[53141] = {
"Molten Surger",
"Firelands",
"enUS",
},
[178661] = {
"Mawsworn Interceptor",
"Sanctum of Domination",
"enUS",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[125569] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[242631] = {
"Overcharged Sentinel",
"Eco-Dome Al'dani",
"enUS",
},
[234955] = {
"Wastelander Pactspeaker",
"Eco-Dome Al'dani",
"enUS",
},
[179942] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[127233] = {
"Flameweaver",
"Antorus, the Burning Throne",
"enUS",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[87317] = {
"Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[234957] = {
"Wastelander Ritualist",
"Eco-Dome Al'dani",
"enUS",
},
[53206] = {
"Hell Hound",
"Firelands",
"enUS",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[185574] = {
"Dominated Saboteur",
"Sepulcher of the First Ones",
"enUS",
},
[111370] = {
"Creature in the Shadows",
"The Emerald Nightmare",
"enUS",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[87318] = {
"Dungeoneer's Training Dummy",
"SMV Alliance Garrison Level 3",
"enUS",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[56341] = {
"Burning Tendons",
"Dragon Soul",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[234960] = {
"Tamed Ruinstalker",
"Eco-Dome Al'dani",
"enUS",
},
[103695] = {
"Corruption Horror",
"The Emerald Nightmare",
"enUS",
},
[100497] = {
"Ursoc",
"The Emerald Nightmare",
"enUS",
},
[102672] = {
"Nythendra",
"The Emerald Nightmare",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[123398] = {
"Garothi Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[234962] = {
"Wastelander Farstalker",
"Eco-Dome Al'dani",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[159224] = {
"Gryth'ax the Executioner",
"Ny'alotha, the Waking City",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[176880] = {
"Soulscream Tormentor",
"Sanctum of Domination",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[56854] = {
"Twilight Elite Dreadblade",
"Dragon Soul",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[160249] = {
"Spike Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[56471] = {
"Mutated Corruption",
"Dragon Soul",
"enUS",
},
[175861] = {
"Glacial Spike",
"Sanctum of Domination",
"enUS",
},
[56855] = {
"Twilight Assault Drake",
"Dragon Soul",
"enUS",
},
[157439] = {
"Fury of N'Zoth",
"Ny'alotha, the Waking City",
"enUS",
},
[112655] = {
"Celestial Acolyte",
"The Nighthold",
"enUS",
},
[123402] = {
"Garothi Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[57751] = {
"Ruin Tentacle",
"Dragon Soul",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[106643] = {
"Elisande",
"The Nighthold",
"enUS",
},
[162303] = {
"Aqir Swarmkeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[186357] = {
"Stellar Mote",
"Sepulcher of the First Ones",
"enUS",
},
[162305] = {
"Aqir Heartpiercer",
"Ny'alotha, the Waking City",
"enUS",
},
[123532] = {
"Dark Keeper",
"Antorus, the Burning Throne",
"enUS",
},
[175611] = {
"The Tarragrue",
"Sanctum of Domination",
"enUS",
},
[53786] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[162306] = {
"Aqir Drone",
"Ny'alotha, the Waking City",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[178171] = {
"Stormforged Guardian",
"Tazavesh, the Veiled Market",
"enUS",
},
[180474] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[182777] = {
"Rygelon",
"Sepulcher of the First Ones",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[182778] = {
"Collapsing Quasar",
"Sepulcher of the First Ones",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[186105] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[113043] = {
"Abyss Watcher",
"The Nighthold",
"enUS",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[57817] = {
"Stormborn Myrmidon",
"Dragon Soul",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[180990] = {
"The Jailer",
"Sepulcher of the First Ones",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[56922] = {
"Twilight Infiltrator",
"Dragon Soul",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[157452] = {
"Nightmare Antigen",
"Ny'alotha, the Waking City",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[15550] = {
"Attumen the Huntsman",
"Karazhan",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[56923] = {
"Twilight Sapper",
"Dragon Soul",
"enUS",
},
[162828] = {
"Corrosive Digester",
"Ny'alotha, the Waking City",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[185346] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[57819] = {
"Corrupted Fragment",
"Dragon Soul",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[113048] = {
"Corrupted Deer",
"The Emerald Nightmare",
"enUS",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[112153] = {
"Dire Shaman",
"The Emerald Nightmare",
"enUS",
},
[112665] = {
"Nighthold Protector",
"The Nighthold",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[122773] = {
"Decimator",
"Antorus, the Burning Throne",
"enUS",
},
[159764] = {
"Jesh'ra",
"Ny'alotha, the Waking City",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[165138] = {
"Blight Bag",
"The Necrotic Wake",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[87719] = {
"Ogron Hauler",
"Blackrock Foundry",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[111004] = {
"Gelatinized Decay",
"The Emerald Nightmare",
"enUS",
},
[113307] = {
"Chronowraith",
"The Nighthold",
"enUS",
},
[57821] = {
"Lieutenant Shara",
"Dragon Soul",
"enUS",
},
[53791] = {
"Blazing Monstrosity",
"Firelands",
"enUS",
},
[122135] = {
"Shatug",
"Antorus, the Burning Throne",
"enUS",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[113052] = {
"Dreadguard",
"The Nighthold",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[125590] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[180495] = {
"Enraged Direhorn",
"Tazavesh, the Veiled Market",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[120473] = {
"Tidescale Combatant",
"Tomb of Sargeras",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[165911] = {
"Loyal Creation",
"The Necrotic Wake",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[15551] = {
"Spectral Stable Hand",
"Karazhan",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[112671] = {
"Duskwatch Battle-Magus",
"The Nighthold",
"enUS",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[57823] = {
"Stormbinder Adept",
"Dragon Soul",
"enUS",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[185363] = {
"Manifestor Krugan",
"Sepulcher of the First Ones",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[55265] = {
"Morchok",
"Dragon Soul",
"enUS",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[165408] = {
"Halkias",
"Halls of Atonement",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[112162] = {
"Grisly Trapper",
"The Emerald Nightmare",
"enUS",
},
[56161] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[129050] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[163619] = {
"Zolramus Bonecarver",
"The Necrotic Wake",
"enUS",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[163620] = {
"Rotspew",
"The Necrotic Wake",
"enUS",
},
[112675] = {
"Duskwatch Sentinel",
"The Nighthold",
"enUS",
},
[112803] = {
"Astrologer Jarin",
"The Nighthold",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[53795] = {
"Egg Pile",
"Firelands",
"enUS",
},
[184603] = {
"Ancient Bufonid",
"Sepulcher of the First Ones",
"enUS",
},
[56162] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[163622] = {
"Goregrind Bits",
"The Necrotic Wake",
"enUS",
},
[112676] = {
"Nobleborn Warpcaster",
"The Nighthold",
"enUS",
},
[112804] = {
"Trained Shadescale",
"The Nighthold",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[117154] = {
"Razorjaw Acolyte",
"Tomb of Sargeras",
"enUS",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
"enUS",
},
[163623] = {
"Rotspew Leftovers",
"The Necrotic Wake",
"enUS",
},
[133430] = {
"Venture Co. Mastermind",
"The MOTHERLODE!!",
"enUS",
},
[176929] = {
"Remnant of Kel'Thuzad",
"Sanctum of Domination",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[165415] = {
"Toiling Groundskeeper",
"Halls of Atonement",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[123680] = {
"Dark Keeper Aedis",
"Antorus, the Burning Throne",
"enUS",
},
[53732] = {
"Unbound Smoldering Elemental",
"Firelands",
"enUS",
},
[57890] = {
"Claw of Go'rath",
"Dragon Soul",
"enUS",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[157231] = {
"Shad'har the Insatiable",
"Ny'alotha, the Waking City",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[111528] = {
"Deathroot Ancient",
"The Emerald Nightmare",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[53222] = {
"Flamewaker Centurion",
"Firelands",
"enUS",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[113321] = {
"Shambling Hungerer",
"The Nighthold",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[178731] = {
"Bonesteel",
"Sanctum of Domination",
"enUS",
},
[176940] = {
"Soulember",
"Sanctum of Domination",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[181546] = {
"Prototype of Renewal",
"Sepulcher of the First Ones",
"enUS",
},
[157238] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[178732] = {
"Mawsworn Runesmith",
"Sanctum of Domination",
"enUS",
},
[53095] = {
"Matriarch Fire Turtle",
"Firelands",
"enUS",
},
[53223] = {
"Flamewaker Beast Handler",
"Firelands",
"enUS",
},
[180780] = {
"Dreadmaw",
"Sanctum of Domination",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[175663] = {
"Hylbrande",
"Tazavesh, the Veiled Market",
"enUS",
},
[167731] = {
"Separation Assistant",
"The Necrotic Wake",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[180781] = {
"Frothing Hound",
"Sanctum of Domination",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[161335] = {
"Void Horror",
"Ny'alotha, the Waking City",
"enUS",
},
[180782] = {
"Consumed Soul",
"Sanctum of Domination",
"enUS",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[111405] = {
"Shadow Pounder",
"The Emerald Nightmare",
"enUS",
},
[180015] = {
"Burly Deckhand",
"Tazavesh, the Veiled Market",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[53096] = {
"Fire Turtle Hatchling",
"Firelands",
"enUS",
},
[53224] = {
"Flamewaker Taskmaster",
"Firelands",
"enUS",
},
[57382] = {
"Dark Globule",
"Dragon Soul",
"enUS",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[111022] = {
"The Demon Within",
"The Nighthold",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[184623] = {
"Ancient Avian",
"Sepulcher of the First Ones",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[56167] = {
"Arm Tentacle",
"Dragon Soul",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[111151] = {
"Midnight Siphoner",
"The Nighthold",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[176949] = {
"Mawsworn Embermage",
"Sanctum of Domination",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[184627] = {
"Dominated Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[56168] = {
"Wing Tentacle",
"Dragon Soul",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[121004] = {
"Razorjaw Myrmidon",
"Tomb of Sargeras",
"enUS",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[57384] = {
"Cobalt Globule",
"Dragon Soul",
"enUS",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[157253] = {
"Ka'zir",
"Ny'alotha, the Waking City",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[176956] = {
"Shadowsteel Goliath",
"Sanctum of Domination",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[157254] = {
"Tek'ris",
"Ny'alotha, the Waking City",
"enUS",
},
[182074] = {
"Acquisitions Automa",
"Sepulcher of the First Ones",
"enUS",
},
[176957] = {
"Shadowsteel Colossus",
"Sanctum of Domination",
"enUS",
},
[126764] = {
"Bladesworn Ravager",
"Antorus, the Burning Throne",
"enUS",
},
[103224] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[176703] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[176959] = {
"Mawsworn Soulmage",
"Sanctum of Domination",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[184126] = {
"Defense Matrix Automa",
"Sepulcher of the First Ones",
"enUS",
},
[57386] = {
"Crimson Globule",
"Dragon Soul",
"enUS",
},
[133463] = {
"Venture Co. War Machine",
"The MOTHERLODE!!",
"enUS",
},
[89] = {
"Infernal",
"Theater of Pain",
"enUS",
},
[57962] = {
"Deathwing",
"Dragon Soul",
"enUS",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[126767] = {
"Clubfist Beastlord",
"Antorus, the Burning Throne",
"enUS",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[56427] = {
"Warmaster Blackhorn",
"Dragon Soul",
"enUS",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[159309] = {
"Leeching Parasite",
"Ny'alotha, the Waking City",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[121011] = {
"Tidescale Witch",
"Tomb of Sargeras",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[185154] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[179269] = {
"Oasis Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[185155] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[165197] = {
"Skeletal Monstrosity",
"The Necrotic Wake",
"enUS",
},
[159312] = {
"Living Blood",
"Ny'alotha, the Waking City",
"enUS",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104636] = {
"Cenarius",
"The Emerald Nightmare",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[115767] = {
"Mistress Sassz'ine",
"Tomb of Sargeras",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[116407] = {
"Harjatan",
"Tomb of Sargeras",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[57388] = {
"Shadowed Globule",
"Dragon Soul",
"enUS",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[56173] = {
"Deathwing",
"Dragon Soul",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[53167] = {
"Unbound Pyrelord",
"Firelands",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[112955] = {
"Shadescale Wyrm",
"The Nighthold",
"enUS",
},
[176974] = {
"Soul Reaver",
"Sanctum of Domination",
"enUS",
},
[111164] = {
"Twilight Stardancer",
"The Nighthold",
"enUS",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[57773] = {
"Kohcrom",
"Dragon Soul",
"enUS",
},
[184651] = {
"Subjugator Zeltoth",
"Sepulcher of the First Ones",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[112956] = {
"Shimmering Manaspine",
"The Nighthold",
"enUS",
},
[162647] = {
"Willing Sacrifice",
"Ny'alotha, the Waking City",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
"enUS",
},
[16389] = {
"Spectral Apprentice",
"Karazhan",
"enUS",
},
[111166] = {
"Resolute Courtesan",
"The Nighthold",
"enUS",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[111295] = {
"Domesticated Manasaber",
"The Nighthold",
"enUS",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[126776] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
"enUS",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[163678] = {
"Clotted Corruption",
"Ny'alotha, the Waking City",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[123451] = {
"Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[178008] = {
"Decrepit Orb",
"Sanctum of Domination",
"enUS",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[121021] = {
"Shadowsworn Invader",
"Tomb of Sargeras",
"enUS",
},
[111170] = {
"Astral Farseer",
"The Nighthold",
"enUS",
},
[119742] = {
"Felguard Invader",
"Tomb of Sargeras",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[128060] = {
"Priestess of Delirium",
"Antorus, the Burning Throne",
"enUS",
},
[114883] = {
"Grand Magister Rommath",
"The Nighthold",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[156523] = {
"Maut",
"Ny'alotha, the Waking City",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[108359] = {
"Volatile Scorpid",
"The Nighthold",
"enUS",
},
[112709] = {
"Promenade Guard",
"The Nighthold",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[181856] = {
"Point Defense Drone",
"Sepulcher of the First Ones",
"enUS",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[108360] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[163690] = {
"Shath'Yar Scribe",
"Ny'alotha, the Waking City",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[111303] = {
"Nightborne Sage",
"The Nighthold",
"enUS",
},
[180323] = {
"Fatespawn Monstrosity",
"Sanctum of Domination",
"enUS",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[108361] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[183396] = {
"Eternal Forger",
"Sepulcher of the First Ones",
"enUS",
},
[120516] = {
"Razorjaw Swiftfin",
"Tomb of Sargeras",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[180070] = {
"Mawsworn Scryer",
"Sanctum of Domination",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[183398] = {
"Ancient Sentinel",
"Sepulcher of the First Ones",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[180840] = {
"Frostbound Devoted",
"Sanctum of Domination",
"enUS",
},
[127810] = {
"Slobbering Fiend",
"Antorus, the Burning Throne",
"enUS",
},
[103758] = {
"Star Augur Etraeus",
"The Nighthold",
"enUS",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[177004] = {
"Tortured Amalgamation",
"Sanctum of Domination",
"enUS",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[175725] = {
"Eye of the Jailer",
"Sanctum of Domination",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[175726] = {
"Skyja",
"Sanctum of Domination",
"enUS",
},
[57333] = {
"Acidic Globule",
"Dragon Soul",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[162933] = {
"Thought Harvester",
"Ny'alotha, the Waking City",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[183404] = {
"Eternal Assembler",
"Sepulcher of the First Ones",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[175729] = {
"Remnant of Ner'zhul",
"Sanctum of Domination",
"enUS",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[180335] = {
"Cartel Smuggler",
"Tazavesh, the Veiled Market",
"enUS",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[183406] = {
"Colossal Realmcrafter",
"Sepulcher of the First Ones",
"enUS",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[180336] = {
"Cartel Wiseguy",
"Tazavesh, the Veiled Market",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[183407] = {
"Eternal Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[175731] = {
"Guardian of the First Ones",
"Sanctum of Domination",
"enUS",
},
[166264] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[112718] = {
"Sidereal Familiar",
"The Nighthold",
"enUS",
},
[164218] = {
"Lord Chamberlain",
"Halls of Atonement",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[166266] = {
"Spare Parts",
"The Necrotic Wake",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[87515] = {
"Iron Flame Binder",
"Blackrock Foundry",
"enUS",
},
[177269] = {
"So'leah",
"Tazavesh, the Veiled Market",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[105299] = {
"Recursive Elemental",
"The Nighthold",
"enUS",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[85341] = {
"Lunarfall Raccoon",
"SMV Alliance Garrison Level 2",
"enUS",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[183413] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[162689] = {
"Surgeon Stitchflesh",
"The Necrotic Wake",
"enUS",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[56249] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[104534] = {
"D'zorykx the Trapper",
"The Nighthold",
"enUS",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[162691] = {
"Blightbone",
"The Necrotic Wake",
"enUS",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[180091] = {
"Ancient Core Hound",
"Tazavesh, the Veiled Market",
"enUS",
},
[162692] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[53115] = {
"Molten Lord",
"Firelands",
"enUS",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[112595] = {
"Shal'dorei Archmage",
"The Nighthold",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[162693] = {
"Nalthor the Rimebinder",
"The Necrotic Wake",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[87520] = {
"Animated Slag",
"Blackrock Foundry",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[56250] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[104536] = {
"Inquisitor Vethriz",
"The Nighthold",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[161416] = {
"Aqir Shadowcrafter",
"Ny'alotha, the Waking City",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[103769] = {
"Xavius",
"The Emerald Nightmare",
"enUS",
},
[87521] = {
"Iron Slag-Shaper",
"Blackrock Foundry",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[53244] = {
"Flamewaker Trainee",
"Firelands",
"enUS",
},
[104537] = {
"Fel Lord Kuraz'mal",
"The Nighthold",
"enUS",
},
[180864] = {
"High Torturer",
"Sanctum of Domination",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[186127] = {
"Ebonsteel Construct",
"Sepulcher of the First Ones",
"enUS",
},
[123533] = {
"Tarneth",
"Antorus, the Burning Throne",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[183138] = {
"Inchoate Shadow",
"Sepulcher of the First Ones",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[184535] = {
"Overthrown Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[180865] = {
"Twisted Warden",
"Sanctum of Domination",
"enUS",
},
[184533] = {
"Overthrown Protector",
"Sepulcher of the First Ones",
"enUS",
},
[111225] = {
"Chaos Mage Beleron",
"The Nighthold",
"enUS",
},
[104154] = {
"Gul'dan",
"The Nighthold",
"enUS",
},
[56251] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[182071] = {
"Guardian Automa",
"Sepulcher of the First Ones",
"enUS",
},
[16170] = {
"Coldmist Stalker",
"Karazhan",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[123726] = {
"Fel-Powered Purifier",
"Antorus, the Burning Throne",
"enUS",
},
[181548] = {
"Prototype of Absolution",
"Sepulcher of the First Ones",
"enUS",
},
[182045] = {
"Necrotic Ritualist",
"Sepulcher of the First Ones",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[181549] = {
"Prototype of War",
"Sepulcher of the First Ones",
"enUS",
},
[181551] = {
"Prototype of Duty",
"Sepulcher of the First Ones",
"enUS",
},
[184961] = {
"Gnarled Skitter",
"Sepulcher of the First Ones",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[122450] = {
"Garothi Worldbreaker",
"Antorus, the Burning Throne",
"enUS",
},
[122578] = {
"Kin'garoth",
"Antorus, the Burning Throne",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[181244] = {
"Domination Core",
"Sepulcher of the First Ones",
"enUS",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[184962] = {
"Gnarled Scavenger",
"Sepulcher of the First Ones",
"enUS",
},
[181224] = {
"Dausegne",
"Sepulcher of the First Ones",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[184880] = {
"Dominated Disrupter",
"Sepulcher of the First Ones",
"enUS",
},
[183416] = {
"Bound Realmbreaker",
"Sepulcher of the First Ones",
"enUS",
},
[185347] = {
"Dominated Eradicator",
"Sepulcher of the First Ones",
"enUS",
},
[183412] = {
"Dominated Saboteur",
"Sepulcher of the First Ones",
"enUS",
},
[171500] = {
"Shuffling Corpse",
"The Necrotic Wake",
"enUS",
},
[181011] = {
"Ancient Guardian",
"Sepulcher of the First Ones",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[179334] = {
"Portalmancer Zo'dahh",
"Tazavesh, the Veiled Market",
"enUS",
},
[183495] = {
"Twisted Worldeater",
"Sepulcher of the First Ones",
"enUS",
},
[56252] = {
"Twilight Assaulter",
"Dragon Soul",
"enUS",
},
[163708] = {
"Umbral Gatekeeper",
"Ny'alotha, the Waking City",
"enUS",
},
[183497] = {
"Foul Controller",
"Sepulcher of the First Ones",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[185181] = {
"Automated Eliminator",
"Sepulcher of the First Ones",
"enUS",
},
[156818] = {
"Wrathion",
"Ny'alotha, the Waking City",
"enUS",
},
[183429] = {
"Ebon Chainguard",
"Sepulcher of the First Ones",
"enUS",
},
[184140] = {
"Xy Acolyte",
"Sepulcher of the First Ones",
"enUS",
},
[179847] = {
"Shadowsteel Horror",
"Sanctum of Domination",
"enUS",
},
[176581] = {
"Spiked Ball",
"Sanctum of Domination",
"enUS",
},
[183499] = {
"Hired Muscle",
"Sepulcher of the First Ones",
"enUS",
},
[183498] = {
"Illicit Collector",
"Sepulcher of the First Ones",
"enUS",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[184659] = {
"Dominated Sentinel",
"Sepulcher of the First Ones",
"enUS",
},
[181859] = {
"Volatile Materium",
"Sepulcher of the First Ones",
"enUS",
},
[56587] = {
"Twilight Assault Drake",
"Dragon Soul",
"enUS",
},
[180773] = {
"Vigilant Guardian",
"Sepulcher of the First Ones",
"enUS",
},
[184954] = {
"Ancient Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[184530] = {
"Eternal Sentry",
"Sepulcher of the First Ones",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[113113] = {
"Essence of Nightmare",
"The Emerald Nightmare",
"enUS",
},
[123476] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[179963] = {
"Terror Orb",
"Sanctum of Domination",
"enUS",
},
[177154] = {
"Mawsworn Vanguard",
"Sanctum of Domination",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[176920] = {
"Domination Arrow",
"Sanctum of Domination",
"enUS",
},
[176523] = {
"Painsmith Raznal",
"Sanctum of Domination",
"enUS",
},
[180473] = {
"Unstoppable Abomination",
"Sanctum of Domination",
"enUS",
},
[157475] = {
"Synthesis Growth",
"Ny'alotha, the Waking City",
"enUS",
},
[183432] = {
"Ebon Dominator",
"Sepulcher of the First Ones",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[157461] = {
"Mycelial Cyst",
"Ny'alotha, the Waking City",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[159768] = {
"Deresh of the Nothingness",
"Ny'alotha, the Waking City",
"enUS",
},
[123477] = {
"Antoran Doomguard",
"Antorus, the Burning Throne",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[161173] = {
"Abyssal Watcher",
"Ny'alotha, the Waking City",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[53119] = {
"Flamewaker Forward Guard",
"Firelands",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[55294] = {
"Ultraxion",
"Dragon Soul",
"enUS",
},
[185610] = {
"Unmade Steward",
"Sepulcher of the First Ones",
"enUS",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[123478] = {
"Antoran Felguard",
"Antorus, the Burning Throne",
"enUS",
},
[111398] = {
"Nightmare Amalgamation",
"The Emerald Nightmare",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[158328] = {
"Il'gynoth",
"Ny'alotha, the Waking City",
"enUS",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[54015] = {
"Majordomo Staghelm",
"Firelands",
"enUS",
},
[159308] = {
"Zealous Adherent",
"Ny'alotha, the Waking City",
"enUS",
},
[176953] = {
"Mawsworn Flamehand",
"Sanctum of Domination",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[161745] = {
"Hepthys",
"Ny'alotha, the Waking City",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[53793] = {
"Harbinger of Flame",
"Firelands",
"enUS",
},
[176520] = {
"Ocular Commander",
"Sanctum of Domination",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[185032] = {
"Taskmaster Xy'pro",
"Sepulcher of the First Ones",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[183438] = {
"Chainbound Construct",
"Sepulcher of the First Ones",
"enUS",
},
[53120] = {
"Flamewaker Pathfinder",
"Firelands",
"enUS",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[123480] = {
"Antoran Champion",
"Antorus, the Burning Throne",
"enUS",
},
[183439] = {
"Mawsworn Annihilator",
"Sepulcher of the First Ones",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[53094] = {
"Patriarch Fire Turtle",
"Firelands",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[176531] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[185274] = {
"Astral Particle",
"Sepulcher of the First Ones",
"enUS",
},
[186106] = {
"Overthrown Artisan",
"Sepulcher of the First Ones",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[56575] = {
"Burning Tendons",
"Dragon Soul",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[162715] = {
"Fanatical Cultist",
"Ny'alotha, the Waking City",
"enUS",
},
[175806] = {
"So'azmi",
"Tazavesh, the Veiled Market",
"enUS",
},
[234872] = {
"Wastelander Phaseblade",
"Eco-Dome Al'dani",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[162716] = {
"Spellbound Ritualist",
"Ny'alotha, the Waking City",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[181395] = {
"Skolex",
"Sepulcher of the First Ones",
"enUS",
},
[53121] = {
"Flamewaker Cauterizer",
"Firelands",
"enUS",
},
[53185] = {
"Flamewaker Overseer",
"Firelands",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[158367] = {
"Basher Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[162717] = {
"Sinister Soulcarver",
"Ny'alotha, the Waking City",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[176535] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[53889] = {
"Corrupted Blood",
"Dragon Soul",
"enUS",
},
[162718] = {
"Iron-Willed Enforcer",
"Ny'alotha, the Waking City",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[123452] = {
"Fel Lord",
"Antorus, the Burning Throne",
"enUS",
},
[123191] = {
"Fel Hound",
"Antorus, the Burning Throne",
"enUS",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[16151] = {
"Midnight",
"Karazhan",
"enUS",
},
[178072] = {
"Anduin Wrynn",
"Sanctum of Domination",
"enUS",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[181398] = {
"Mal'Ganis",
"Sepulcher of the First Ones",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[157602] = {
"Drest'agath",
"Ny'alotha, the Waking City",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[176537] = {
"Infused Goliath",
"Sanctum of Domination",
"enUS",
},
[122477] = {
"F'harg",
"Antorus, the Burning Throne",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[181399] = {
"Kin'tessa",
"Sepulcher of the First Ones",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[57280] = {
"Twilight Siege Captain",
"Dragon Soul",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[57749] = {
"Faceless Corruptor",
"Dragon Soul",
"enUS",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[180665] = {
"Gibbering Soul",
"Sanctum of Domination",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[55689] = {
"Hagara the Stormbinder",
"Dragon Soul",
"enUS",
},
[53890] = {
"Hideous Amalgamation",
"Dragon Soul",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[161571] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[182169] = {
"Lihuvim",
"Sepulcher of the First Ones",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[180664] = {
"Mawsworn Infuser",
"Sanctum of Domination",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[111075] = {
"Chaotoid",
"The Nighthold",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[111331] = {
"Lurking Horror",
"The Emerald Nightmare",
"enUS",
},
[122778] = {
"Annihilator",
"Antorus, the Burning Throne",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[180379] = {
"Mawsworn Arbalest",
"Sanctum of Domination",
"enUS",
},
[112603] = {
"Terrace Grove-Tender",
"The Nighthold",
"enUS",
},
[175546] = {
"Timecap'n Hooktail",
"Tazavesh, the Veiled Market",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[158375] = {
"Corruptor Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[183707] = {
"Xy Spellslinger",
"Sepulcher of the First Ones",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[53891] = {
"Corruption",
"Dragon Soul",
"enUS",
},
[158376] = {
"Psychus",
"Ny'alotha, the Waking City",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[87989] = {
"Forgemistress Flamehand",
"Blackrock Foundry",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[185268] = {
"Ebonsteel Construct",
"Sepulcher of the First Ones",
"enUS",
},
[120463] = {
"Undersea Custodian",
"Tomb of Sargeras",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[180429] = {
"Adorned Starseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[104288] = {
"Trilliax",
"The Nighthold",
"enUS",
},
[179894] = {
"Deathseeker Eye",
"Sanctum of Domination",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[157354] = {
"Vexiona",
"Ny'alotha, the Waking City",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[184733] = {
"Dominated Grunt",
"Sepulcher of the First Ones",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[111856] = {
"Guardian Gorroc",
"The Emerald Nightmare",
"enUS",
},
[124227] = {
"Volant Kerapteron",
"Antorus, the Burning Throne",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[184734] = {
"Sacred Matrix Automa",
"Sepulcher of the First Ones",
"enUS",
},
[162729] = {
"Patchwerk Soldier",
"The Necrotic Wake",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[125535] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[103225] = {
"Acidmaw Scorpid",
"The Nighthold",
"enUS",
},
[157467] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
"enUS",
},
[157612] = {
"Eye of Drest'agath",
"Ny'alotha, the Waking City",
"enUS",
},
[180385] = {
"Condemned Soul Remnant",
"Sanctum of Domination",
"enUS",
},
[184735] = {
"Degeneration Automa",
"Sepulcher of the First Ones",
"enUS",
},
[104881] = {
"Spellblade Aluriel",
"The Nighthold",
"enUS",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[122104] = {
"Portal Keeper Hasabel",
"Antorus, the Burning Throne",
"enUS",
},
[127235] = {
"Garothi Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[159405] = {
"Aqir Scarab",
"Ny'alotha, the Waking City",
"enUS",
},
[180387] = {
"Mawsworn Paindrinker",
"Sanctum of Domination",
"enUS",
},
[128095] = {
"Sister of the Lash",
"Antorus, the Burning Throne",
"enUS",
},
[184737] = {
"Acquisitions Automa",
"Sepulcher of the First Ones",
"enUS",
},
[87411] = {
"Workshop Guardian",
"Blackrock Foundry",
"enUS",
},
[165515] = {
"Depraved Darkblade",
"Halls of Atonement",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[184738] = {
"Guardian Automa",
"Sepulcher of the First Ones",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[180389] = {
"Mawsworn Rageguard",
"Sanctum of Domination",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[130192] = {
"Hulking Demolisher",
"Antorus, the Burning Throne",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122467] = {
"Asara, Mother of Night",
"Antorus, the Burning Throne",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[16152] = {
"Attumen the Huntsman",
"Karazhan",
"enUS",
},
[104415] = {
"Chronomatic Anomaly",
"The Nighthold",
"enUS",
},
[172981] = {
"Kyrian Stitchwerk",
"The Necrotic Wake",
"enUS",
},
[113128] = {
"Withered Skulker",
"The Nighthold",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[112678] = {
"Shal'dorei Naturalist",
"The Nighthold",
"enUS",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[167607] = {
"Stoneborn Slasher",
"Halls of Atonement",
"enUS",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[122468] = {
"Noura, Mother of Flames",
"Antorus, the Burning Throne",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[57877] = {
"Flail of Go'rath",
"Dragon Soul",
"enUS",
},
[180392] = {
"Gorgoan Souldrinker",
"Sanctum of Domination",
"enUS",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[184742] = {
"Dominated Shaper",
"Sepulcher of the First Ones",
"enUS",
},
[178165] = {
"Coastwalker Goliath",
"Tazavesh, the Veiled Market",
"enUS",
},
[15547] = {
"Spectral Charger",
"Karazhan",
"enUS",
},
[111210] = {
"Searing Infernal",
"The Nighthold",
"enUS",
},
[112290] = {
"Horrid Eagle",
"The Emerald Nightmare",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[157620] = {
"Prophet Skitra",
"Ny'alotha, the Waking City",
"enUS",
},
[52530] = {
"Alysrazor",
"Firelands",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[122469] = {
"Diima, Mother of Gloom",
"Antorus, the Burning Throne",
"enUS",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[235151] = {
"K'aresh Elemental",
"Eco-Dome Al'dani",
"enUS",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[118022] = {
"Infernal Chaosbringer",
"Tomb of Sargeras",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[180906] = {
"Halondrus",
"Sepulcher of the First Ones",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[120482] = {
"Tidescale Seacaller",
"Tomb of Sargeras",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[176879] = {
"Hollowsoul",
"Sanctum of Domination",
"enUS",
},
[111333] = {
"Taintheart Trickster",
"The Emerald Nightmare",
"enUS",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[112973] = {
"Duskwatch Weaver",
"The Nighthold",
"enUS",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[53127] = {
"Fire Scorpion",
"Firelands",
"enUS",
},
[120477] = {
"Deep Stalker",
"Tomb of Sargeras",
"enUS",
},
[178041] = {
"Mawsworn Shackler",
"Sanctum of Domination",
"enUS",
},
[54073] = {
"Flamewaker Hound Master",
"Firelands",
"enUS",
},
[160182] = {
"Void Initiate",
"Ny'alotha, the Waking City",
"enUS",
},
[57387] = {
"Glowing Globule",
"Dragon Soul",
"enUS",
},
[242209] = {
"Overgorged Mite",
"Eco-Dome Al'dani",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[163121] = {
"Stitched Vanguard",
"The Necrotic Wake",
"enUS",
},
[178862] = {
"Screamspike",
"Sanctum of Domination",
"enUS",
},
[160183] = {
"Void Fanatic",
"Ny'alotha, the Waking City",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[136643] = {
"Azerite Extractor",
"The MOTHERLODE!!",
"enUS",
},
[159416] = {
"Spiked Tentacle",
"Ny'alotha, the Waking City",
"enUS",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[111081] = {
"Fulminant",
"The Nighthold",
"enUS",
},
[178029] = {
"Mawsworn Wingsoldier",
"Sanctum of Domination",
"enUS",
},
[109038] = {
"Solarist Tel'arn",
"The Nighthold",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[159417] = {
"Demented Knife-Twister",
"Ny'alotha, the Waking City",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[57158] = {
"Earthen Destroyer",
"Dragon Soul",
"enUS",
},
[53128] = {
"Giant Fire Scorpion",
"Firelands",
"enUS",
},
[178163] = {
"Murkbrine Shorerunner",
"Tazavesh, the Veiled Market",
"enUS",
},
[175727] = {
"Soulrender Dormazain",
"Sanctum of Domination",
"enUS",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[176562] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[176563] = {
"Zo'gron",
"Tazavesh, the Veiled Market",
"enUS",
},
[113512] = {
"Putrid Sludge",
"The Nighthold",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[185008] = {
"Volatile Sentry",
"Sepulcher of the First Ones",
"enUS",
},
[109040] = {
"Arcanist Tel'arn",
"The Nighthold",
"enUS",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[176565] = {
"Disruptive Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[124828] = {
"Argus the Unmaker",
"Antorus, the Burning Throne",
"enUS",
},
[161218] = {
"Aqir Crusher",
"Ny'alotha, the Waking City",
"enUS",
},
[57159] = {
"Earthen Soldier",
"Dragon Soul",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[178851] = {
"Burning Stygia",
"Sanctum of Domination",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[109041] = {
"Naturalist Tel'arn",
"The Nighthold",
"enUS",
},
[125545] = {
"Blazing Imp",
"Antorus, the Burning Throne",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[179893] = {
"Cartel Skulker",
"Tazavesh, the Veiled Market",
"enUS",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[55312] = {
"Yor'sahj the Unsleeping",
"Dragon Soul",
"enUS",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[112596] = {
"Duskwatch Warden",
"The Nighthold",
"enUS",
},
[111413] = {
"Dark Devourers",
"The Emerald Nightmare",
"enUS",
},
[111071] = {
"Pulsauron",
"The Nighthold",
"enUS",
},
[167612] = {
"Stoneborn Reaver",
"Halls of Atonement",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[156866] = {
"Ra-den",
"Ny'alotha, the Waking City",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[159425] = {
"Occult Shadowmender",
"Ny'alotha, the Waking City",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[180407] = {
"Gorgoan Sentinel",
"Sanctum of Domination",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[57160] = {
"Ancient Water Lord",
"Dragon Soul",
"enUS",
},
[161217] = {
"Aqir Skitterer",
"Ny'alotha, the Waking City",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[166079] = {
"Brittlebone Crossbowman",
"The Necrotic Wake",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[162534] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[125547] = {
"Feltouched Skitterer",
"Antorus, the Burning Throne",
"enUS",
},
[177594] = {
"Mawsworn Agonizer",
"Sanctum of Domination",
"enUS",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[111858] = {
"Guardian Rurson",
"The Emerald Nightmare",
"enUS",
},
[236190] = {
"Frenzied Mite",
"Eco-Dome Al'dani",
"enUS",
},
[185271] = {
"Stellar Mote",
"Sepulcher of the First Ones",
"enUS",
},
[179386] = {
"Corsair Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[102263] = {
"Skorpyron",
"The Nighthold",
"enUS",
},
[162719] = {
"Void Ascendant",
"Ny'alotha, the Waking City",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[178733] = {
"Mawsworn Vanguard",
"Sanctum of Domination",
"enUS",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[127723] = {
"Imperator Deconix",
"Antorus, the Burning Throne",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[156575] = {
"Dark Inquisitor Xanesh",
"Ny'alotha, the Waking City",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[179388] = {
"Hourglass Tidesage",
"Tazavesh, the Veiled Market",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[125549] = {
"Hungering Stalker",
"Antorus, the Burning Throne",
"enUS",
},
[127724] = {
"Fanatical Pyromancer",
"Antorus, the Burning Throne",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[159305] = {
"Maddened Conscript",
"Ny'alotha, the Waking City",
"enUS",
},
[177787] = {
"Mawsworn Hopebreaker",
"Sanctum of Domination",
"enUS",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[185275] = {
"Kelmortos",
"Sepulcher of the First Ones",
"enUS",
},
[175730] = {
"Fatescribe Roh-Kalo",
"Sanctum of Domination",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[159219] = {
"Umbral Seer",
"Ny'alotha, the Waking City",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
"enUS",
},
[103217] = {
"Crystalline Scorpid",
"The Nighthold",
"enUS",
},
[178623] = {
"Mawsworn Guard",
"Sanctum of Domination",
"enUS",
},
[113012] = {
"Felsworn Chaos-Mage",
"The Nighthold",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[178043] = {
"Mawsworn Lancer",
"Sanctum of Domination",
"enUS",
},
[127725] = {
"Felblade Shocktrooper",
"Antorus, the Burning Throne",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[180159] = {
"Brawling Patron",
"Tazavesh, the Veiled Market",
"enUS",
},
[180415] = {
"Mawsworn Axeguard",
"Sanctum of Domination",
"enUS",
},
[178624] = {
"Mawsworn Sentry",
"Sanctum of Domination",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[161334] = {
"Gnashing Terror",
"Ny'alotha, the Waking City",
"enUS",
},
[87448] = {
"Ironworker",
"Blackrock Foundry",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[180779] = {
"Terrorspine",
"Sanctum of Domination",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
"enUS",
},
[178625] = {
"Mawsworn Archer",
"Sanctum of Domination",
"enUS",
},
[113013] = {
"Felsworn Shadowblade",
"The Nighthold",
"enUS",
},
[113088] = {
"Corrupted Feeler",
"The Emerald Nightmare",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[111350] = {
"Skittering Shadows",
"The Emerald Nightmare",
"enUS",
},
[123760] = {
"Fel-Infused Destructor",
"Antorus, the Burning Throne",
"enUS",
},
[179257] = {
"Burning Shade",
"Sanctum of Domination",
"enUS",
},
[180417] = {
"Loom Artificer",
"Sanctum of Domination",
"enUS",
},
[178626] = {
"Mawrat",
"Sanctum of Domination",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[176973] = {
"Unstoppable Abomination",
"Sanctum of Domination",
"enUS",
},
[175732] = {
"Sylvanas Windrunner",
"Sanctum of Domination",
"enUS",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[159303] = {
"Monstrous Behemoth",
"Ny'alotha, the Waking City",
"enUS",
},
[159510] = {
"Eye of the Depths",
"Ny'alotha, the Waking City",
"enUS",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[181954] = {
"Anduin Wrynn",
"Sepulcher of the First Ones",
"enUS",
},
[162417] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[178628] = {
"Mawsworn Darkcaster",
"Sanctum of Domination",
"enUS",
},
[162508] = {
"Anubisath Sentinel",
"Ny'alotha, the Waking City",
"enUS",
},
[161746] = {
"Ossirat",
"Ny'alotha, the Waking City",
"enUS",
},
[185537] = {
"Foul Controller",
"Sepulcher of the First Ones",
"enUS",
},
[161229] = {
"Aqir Venomweaver",
"Ny'alotha, the Waking City",
"enUS",
},
[163712] = {
"Dying Voidspawn",
"Ny'alotha, the Waking City",
"enUS",
},
[55308] = {
"Warlord Zon'ozz",
"Dragon Soul",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[159767] = {
"Sanguimar",
"Ny'alotha, the Waking City",
"enUS",
},
[161312] = {
"Crushing Tendril",
"Ny'alotha, the Waking City",
"enUS",
},
[177094] = {
"Signe",
"Sanctum of Domination",
"enUS",
},
[125570] = {
"Riftworld Assistant",
"Antorus, the Burning Throne",
"enUS",
},
[175559] = {
"Kel'Thuzad",
"Sanctum of Domination",
"enUS",
},
[158343] = {
"Organ of Corruption",
"Ny'alotha, the Waking City",
"enUS",
},
[159514] = {
"Blood of Ny'alotha",
"Ny'alotha, the Waking City",
"enUS",
},
[161286] = {
"Dark Ritualist",
"Ny'alotha, the Waking City",
"enUS",
},
[178630] = {
"Mawsworn Seeker",
"Sanctum of Domination",
"enUS",
},
[164557] = {
"Shard of Halkias",
"Halls of Atonement",
"enUS",
},
[177095] = {
"Kyra",
"Sanctum of Domination",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[178631] = {
"Mawsworn Commander",
"Sanctum of Domination",
"enUS",
},
[163841] = {
"Amalgamation of Flesh",
"Ny'alotha, the Waking City",
"enUS",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[179399] = {
"Drunk Pirate",
"Tazavesh, the Veiled Market",
"enUS",
},
[158041] = {
"N'Zoth the Corruptor",
"Ny'alotha, the Waking City",
"enUS",
},
[159578] = {
"Exposed Synapse",
"Ny'alotha, the Waking City",
"enUS",
},
[163947] = {
"Psychophage",
"Ny'alotha, the Waking City",
"enUS",
},
[163122] = {
"Brittlebone Warrior",
"The Necrotic Wake",
"enUS",
},
[163836] = {
"Psychophage",
"Ny'alotha, the Waking City",
"enUS",
},
[163612] = {
"Voidspawn Annihilator",
"Ny'alotha, the Waking City",
"enUS",
},
[179177] = {
"Mawsworn Overlord",
"Sanctum of Domination",
"enUS",
},
},
["aura_grow_direction"] = 3,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[149740] = {
true,
false,
"aqua",
},
[231197] = {
true,
false,
"aqua",
},
[231325] = {
true,
false,
"orange",
},
[196671] = {
true,
false,
"aqua",
},
[211121] = {
true,
false,
"orange",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[180432] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[131585] = {
false,
false,
"navajowhite",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[236190] = {
true,
false,
"aqua",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[212411] = {
true,
false,
"orange",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[134024] = {
true,
false,
"fuchsia",
},
[178141] = {
true,
false,
"palegreen",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[178142] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[194894] = {
true,
false,
"fuchsia",
},
[196045] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[129553] = {
true,
false,
"fuchsia",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[180336] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[178165] = {
true,
false,
"orange",
},
[104300] = {
true,
false,
"fuchsia",
},
[233152] = {
true,
false,
"orange",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[136353] = {
false,
false,
"royalblue",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"orange",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[178171] = {
true,
false,
"aqua",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[212826] = {
true,
false,
"orange",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[210269] = {
true,
false,
"orange",
},
[236995] = {
true,
false,
"aqua",
},
[207456] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[165515] = {
false,
false,
"aqua",
},
[229069] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[207207] = {
true,
false,
"fuchsia",
},
[206696] = {
true,
false,
"orange",
},
[165137] = {
true,
false,
"fuchsia",
},
[234957] = {
true,
false,
"fuchsia",
},
[144294] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[242631] = {
true,
false,
"orange",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[179334] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[234960] = {
true,
false,
"aqua",
},
[164501] = {
false,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[144298] = {
true,
false,
"orange",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[234962] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[206704] = {
true,
false,
"orange",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"orange",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[180495] = {
true,
false,
"aqua",
},
[199037] = {
true,
false,
"fuchsia",
},
[206710] = {
true,
false,
"orange",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[226404] = {
true,
false,
"aqua",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[98370] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"orange",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[177816] = {
false,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[239836] = {
true,
false,
"orange",
},
[177817] = {
true,
false,
"fuchsia",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[136643] = {
true,
false,
"orange",
},
[165415] = {
false,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[187155] = {
true,
false,
"fuchsia",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[212739] = {
true,
false,
"orange",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[167607] = {
true,
false,
"aqua",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[180431] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[184023] = {
true,
false,
"fuchsia",
},
[178139] = {
true,
false,
"fuchsia",
},
[234955] = {
true,
false,
"orange",
},
[176396] = {
false,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[180429] = {
true,
false,
"aqua",
},
[151657] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[230748] = {
true,
false,
"fuchsia",
},
[89] = {
true,
false,
"fuchsia",
},
[179841] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[176395] = {
true,
false,
"fuchsia",
},
[234872] = {
false,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[213806] = {
true,
false,
"fuchsia",
},
[231839] = {
true,
false,
"orange",
},
[198927] = {
true,
false,
"aqua",
},
[135258] = {
false,
false,
"peru",
},
[134418] = {
false,
false,
"dodgerblue",
},
[220423] = {
true,
false,
"aqua",
},
[134417] = {
false,
false,
"lightskyblue",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[134364] = {
false,
false,
"honeydew",
},
[211089] = {
true,
false,
"aqua",
},
[205363] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[206698] = {
true,
false,
"fuchsia",
},
[167612] = {
true,
false,
"orange",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[180091] = {
true,
false,
"aqua",
},
[130404] = {
false,
false,
"peru",
},
[198047] = {
true,
false,
"fuchsia",
},
[176564] = {
true,
false,
"aqua",
},
[230740] = {
true,
false,
"aqua",
},
[213934] = {
true,
false,
"aqua",
},
[128435] = {
false,
false,
"aqua",
},
[223776] = {
true,
false,
"fuchsia",
},
[210539] = {
true,
false,
"orange",
},
[208193] = {
true,
false,
"fuchsia",
},
[205337] = {
true,
false,
"fuchsia",
},
[176565] = {
true,
false,
"fuchsia",
},
[177716] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[206064] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[207198] = {
true,
false,
"fuchsia",
},
[197912] = {
true,
false,
"fuchsia",
},
[45919] = {
true,
false,
"aqua",
},
[213338] = {
true,
false,
"fuchsia",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[190377] = {
true,
false,
"fuchsia",
},
[135263] = {
false,
false,
"maroon",
},
[191847] = {
true,
false,
"fuchsia",
},
[195876] = {
true,
false,
"fuchsia",
},
[224732] = {
true,
false,
"fuchsia",
},
[212403] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[139422] = {
false,
false,
"lightskyblue",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[195877] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[131812] = {
true,
false,
"fuchsia",
},
[179893] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[164804] = {
true,
false,
"aqua",
},
[200137] = {
true,
false,
"fuchsia",
},
[196044] = {
true,
false,
"fuchsia",
},
[195878] = {
true,
false,
"fuchsia",
},
[188067] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[216338] = {
true,
false,
"orange",
},
[189247] = {
true,
false,
"fuchsia",
},
[132126] = {
false,
false,
"honeydew",
},
[223773] = {
true,
false,
"fuchsia",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"orange",
},
[190294] = {
true,
false,
"fuchsia",
},
[220815] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[95766] = {
true,
false,
"aqua",
},
[216293] = {
true,
false,
"fuchsia",
},
[200126] = {
true,
false,
"fuchsia",
},
[192333] = {
true,
false,
"fuchsia",
},
[168318] = {
true,
false,
"fuchsia",
},
[104270] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[205727] = {
true,
false,
"fuchsia",
},
[167876] = {
true,
false,
"orange",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[170690] = {
true,
false,
"magenta",
},
[59552] = {
true,
false,
"fuchsia",
},
[167493] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[163503] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"aqua",
},
[138338] = {
true,
false,
"fuchsia",
},
[231380] = {
true,
false,
"fuchsia",
},
[216342] = {
true,
false,
"fuchsia",
},
[219040] = {
true,
false,
"aqua",
},
[211228] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[220946] = {
true,
false,
"orange",
},
[213913] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[136549] = {
true,
false,
"aqua",
},
[122971] = {
true,
false,
"fuchsia",
},
[189265] = {
true,
false,
"fuchsia",
},
[131818] = {
false,
false,
"plum",
},
[204206] = {
true,
false,
"fuchsia",
},
[134331] = {
false,
false,
"lightskyblue",
},
[131586] = {
false,
false,
"peru",
},
[179388] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[131819] = {
true,
false,
"fuchsia",
},
[136934] = {
true,
false,
"lightgreen",
},
[189235] = {
true,
false,
"fuchsia",
},
[131436] = {
true,
false,
"aqua",
},
[136295] = {
false,
false,
"peru",
},
[95769] = {
true,
false,
"fuchsia",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[139949] = {
false,
false,
"honeydew",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[190404] = {
true,
false,
"aqua",
},
[164557] = {
true,
false,
"orange",
},
[193457] = {
true,
false,
"aqua",
},
[141284] = {
false,
false,
"lightskyblue",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[144293] = {
true,
false,
"orange",
},
[135365] = {
true,
false,
"fuchsia",
},
[169927] = {
true,
false,
"fuchsia",
},
[95834] = {
true,
false,
"fuchsia",
},
[129529] = {
false,
false,
"goldenrod",
},
[223253] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[126919] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[113537] = {
true,
false,
"aqua",
},
[135474] = {
true,
false,
"fuchsia",
},
[130435] = {
false,
false,
"magenta",
},
[194316] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[208165] = {
true,
false,
"fuchsia",
},
[133432] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[133870] = {
true,
false,
"fuchsia",
},
[207969] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[220314] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[189266] = {
true,
false,
"aqua",
},
[134144] = {
false,
false,
"lightgreen",
},
[231312] = {
true,
false,
"fuchsia",
},
[95842] = {
true,
false,
"fuchsia",
},
[207459] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[141285] = {
false,
false,
"lightgreen",
},
[170572] = {
true,
false,
"fuchsia",
},
[164562] = {
true,
false,
"fuchsia",
},
[242209] = {
true,
false,
"fuchsia",
},
[220060] = {
true,
false,
"fuchsia",
},
[133430] = {
true,
false,
"orange",
},
[228540] = {
true,
false,
"fuchsia",
},
[133685] = {
true,
false,
"fuchsia",
},
[135239] = {
false,
false,
"paleturquoise",
},
[190407] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[168578] = {
true,
false,
"fuchsia",
},
[179269] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[235151] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[134284] = {
true,
false,
"fuchsia",
},
[144295] = {
true,
false,
"fuchsia",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[207468] = {
true,
false,
"fuchsia",
},
[75979] = {
true,
false,
"fuchsia",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[131318] = {
false,
false,
"fuchsia",
},
[125977] = {
false,
false,
"plum",
},
[134629] = {
false,
false,
"navajowhite",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[132491] = {
false,
false,
"palegreen",
},
[98691] = {
false,
false,
"aqua",
},
[84990] = {
true,
false,
"fuchsia",
},
[166275] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[184132] = {
true,
false,
"fuchsia",
},
[144303] = {
false,
false,
"fuchsia",
},
[229251] = {
true,
false,
"orange",
},
[196798] = {
true,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[220141] = {
true,
false,
"fuchsia",
},
[136186] = {
false,
false,
"honeydew",
},
[194895] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"fuchsia",
},
[163086] = {
true,
false,
"orange",
},
[229686] = {
true,
false,
"fuchsia",
},
[231075] = {
true,
false,
"aqua",
},
[223775] = {
true,
false,
"fuchsia",
},
[137484] = {
false,
false,
"lightskyblue",
},
[189340] = {
true,
false,
"aqua",
},
[98792] = {
true,
false,
"aqua",
},
[220195] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[130635] = {
true,
false,
"fuchsia",
},
[75459] = {
true,
false,
"fuchsia",
},
[113998] = {
true,
false,
"aqua",
},
[214697] = {
true,
false,
"orange",
},
[40167] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[184301] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[223777] = {
true,
false,
"fuchsia",
},
[91001] = {
true,
false,
"aqua",
},
[177998] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[101991] = {
true,
false,
"fuchsia",
},
[133463] = {
true,
false,
"orange",
},
[208450] = {
true,
false,
"orange",
},
[174802] = {
true,
false,
"fuchsia",
},
[177999] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[209801] = {
true,
false,
"aqua",
},
[40634] = {
true,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
[205151] = {
true,
false,
"aqua",
},
},
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1748400766,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 371,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 145,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Name"] = "Advanced Debuff Border",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1748269068,
["Icon"] = 133006,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 97,
["Options"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["OptionsValues"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 33,
["Time"] = 1748400759,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Aggro Indicator",
["Icon"] = 132344,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 142,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["Options"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1748400767,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Cast Bar Border",
["Icon"] = 133004,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 97,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "?????-Illidan",
["Options"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Name"] = "Buff Special Mod",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1748400747,
["Icon"] = 136139,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 63,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Name"] = "Unit Name Over Target Shading",
["PlaterCore"] = 1,
["HooksTemp"] = {
},
["Time"] = 1749295625,
["Icon"] = 237377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1749295629,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 64,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 58,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 10,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1748400779,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1024,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Key"] = "nameLength",
["Value"] = 18,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Nameplate name length",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Key"] = "castBarNameLength",
["Value"] = 15,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Cast bar name length",
},
{
["Type"] = 4,
["Key"] = "hyphenAsSpace",
["Value"] = true,
["Name"] = "Treat hyphens (-) as space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Key"] = "keepHyphenInLastName",
["Value"] = true,
["Name"] = "Keep hyphen in the last name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Key"] = "noSplitCutoff",
["Value"] = true,
["Name"] = "Cutoff when no split can be done",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Key"] = "abbreviate",
["Value"] = true,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Key"] = "abbreviateLeftToRight",
["Value"] = false,
["Name"] = "Abbreviate left to right",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Key"] = "keepRightSide",
["Value"] = true,
["Name"] = "Keep right side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Key"] = "ignorePlayers",
["Value"] = false,
["Name"] = "Ignore Players",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcNameplate",
["Value"] = false,
["Name"] = "Ignore Friendly NPC nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Key"] = "ignoreObjectNameplate",
["Value"] = true,
["Name"] = "Ignore Object Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcCastBar",
["Value"] = false,
["Name"] = "Ignore Friendly NPC cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Key"] = "manualNameOverwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Name"] = "Manual name overwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
["HooksTemp"] = {
},
["version"] = 18,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1753503028,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 172,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 33,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["borderThickness"] = 1,
["readyColor"] = {
0,
1,
0,
1,
},
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
},
["Time"] = 1753156686,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = true,
["Revision"] = 958,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 50,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "qweqew",
["Value"] = 0,
["Name"] = "qwdqwd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Interrupt ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Key"] = "willBeReadyColor",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Name"] = "Will be ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Name"] = "Reaction time",
["Value"] = 0.3,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "reactionTime",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Name"] = "Border thickness",
["Value"] = 0.5,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "borderThickness",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "defaultBorderToggle",
["Value"] = false,
["Name"] = "Enable default border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Key"] = "defaultColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Default Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Key"] = "option12",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "castBarIndicatorToggle",
["Value"] = true,
["Name"] = "Exact indicator in cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Key"] = "interruptIndicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Indicator color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
},
{
["OptionsValues"] = {
["debuff1"] = "207771",
["debuff2"] = "000000",
["borderWidth"] = 1,
["color1"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1.5)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Time"] = 1753156677,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 2065559,
["Enabled"] = false,
["Revision"] = 468,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate border will change to your chosen color.",
["Prio"] = 33,
["Name"] = "Quazii Debuff Border Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1.5)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #1",
},
{
["Type"] = 1,
["Name"] = "Color #1",
["Value"] = {
0.6666666865348816,
1,
0,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #1",
},
{
["Type"] = 3,
["Name"] = "Debuff #2",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #2",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
0.501960813999176,
0,
1,
},
["Name"] = "Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #2",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #3",
},
{
["Type"] = 1,
["Name"] = "Color #3",
["Value"] = {
0,
0.7019608020782471,
0.5254902243614197,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #3",
},
{
["Type"] = 3,
["Name"] = "Debuff #4",
["Value"] = "000000",
["Key"] = "debuff4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #4",
},
{
["Type"] = 1,
["Key"] = "color4",
["Value"] = {
0.5882353186607361,
0.294117659330368,
0,
1,
},
["Name"] = "Color #4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #4",
},
{
["Type"] = 3,
["Key"] = "debuff5",
["Value"] = "000000",
["Name"] = "Debuff #5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #5",
},
{
["Type"] = 1,
["Name"] = "Color #5",
["Value"] = {
0.6901960968971252,
0.6901960968971252,
0.6901960968971252,
1,
},
["Key"] = "color5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #5",
},
{
["Type"] = 3,
["Name"] = "Debuff #6",
["Value"] = "000000",
["Key"] = "debuff6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #6",
},
{
["Type"] = 1,
["Key"] = "color6",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color #6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #6",
},
{
["Type"] = 3,
["Key"] = "debuff7",
["Value"] = "000000",
["Name"] = "Debuff #7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #7",
},
{
["Type"] = 1,
["Name"] = "Color #7",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #7",
},
{
["Type"] = 2,
["Max"] = 15,
["Desc"] = "Increase size of colored border here.",
["Min"] = 1,
["Name"] = "Border Size",
["Value"] = 1,
["Key"] = "borderWidth",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
},
},
{
["Enabled"] = false,
["Revision"] = 162,
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Options"] = {
},
["Author"] = "Deafndk-Tichondrius",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want Moonfire + Sunfire + Solar Beam to be white, but Moonfire + Sunfire to be purple:\n    1. Put the Moonfire + Sunfire + Solar Beam combo FIRST\n    2. Put the Moonfire + Sunfire combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#b9a2ff\",    -- Light Purple Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
},
["Prio"] = 65,
["Time"] = 1753156688,
["PlaterCore"] = 1,
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Name"] = "Quazii Debuffs Combo Color",
["Icon"] = 4728198,
["HooksTemp"] = {
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want Moonfire + Sunfire + Solar Beam to be white, but Moonfire + Sunfire to be purple:\n    1. Put the Moonfire + Sunfire + Solar Beam combo FIRST\n    2. Put the Moonfire + Sunfire combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#b9a2ff\",    -- Light Purple Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                if modTable.doDesaturate and auraIcon.isBuff then\n                    if not modTable.isPurgeUsable(unitId, auraIcon.AuraType == \"enrage\", auraIcon.AuraType == \"magic\") then\n                        auraIcon.Icon:SetDesaturated(true)\n                        --desatColor = \"dimgrey\"\n                    else\n                        auraIcon.Icon:SetDesaturated(false)\n                    end\n                end\n                Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                    auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                    local offset = modTable.config.antsThickness\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                end\n                \n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                    if modTable.doDesaturate and auraIcon.isBuff then\n                        if not modTable.isPurgeUsable(unitId, auraIcon.debuffType == \"\", auraIcon.debuffType == \"Magic\") then\n                            auraIcon.Texture:SetDesaturated(true)\n                        else\n                            auraIcon.Texture:SetDesaturated(false)\n                        end\n                    end\n                    Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                    if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                        auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                        local offset = modTable.config.antsThickness\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                    end\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
["Initialization"] = "function (modTable)\n    -- settings:\n    \n    -- for the LibCustomGlow implementation:\n    modTable.options = {\n        glowType = \"pixel\",\n        color = modTable.config.glowColorE,--\"red\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1. Defaul value is {0.95, 0.95, 0.32, 1}\n        N = modTable.config.antsAmount, --8, -- number of lines. Defaul value is 8;\n        frequency = modTable.config.frequency, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = modTable.config.antsLength, -- length of lines. Default value depends on region size and number of lines;\n        th = modTable.config.antsThickness, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = modTable.config.antsBorder, -- set to true to create border under lines;\n        key = \"StealPurgeAuraGlow\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    \n    local GetSpellCooldown = GetSpellCooldown or function(spellID)\n        local spellCooldownInfo = C_Spell.GetSpellCooldown(spellID)\n        if spellCooldownInfo then\n            return spellCooldownInfo.startTime, spellCooldownInfo.duration, spellCooldownInfo.isEnabled, spellCooldownInfo.modRate\n        end\n    end\n    local IsSpellInRange = IsSpellInRange and function(id) return IsSpellInRange(GetSpellInfo(id)) end or function(id, unit)\n        local result = C_Spell.IsSpellInRange(id, unit)\n        if result == true then\n            return 1\n        elseif result == false then\n            return 0\n        end\n        return nil\n    end\n    local GetSpellInfo = GetSpellInfo or function(spellID)\n        if not spellID then\n            return nil;\n        end\n        \n        local spellInfo = C_Spell.GetSpellInfo(spellID);\n        if spellInfo then\n            return spellInfo.name, nil, spellInfo.iconID, spellInfo.castTime, spellInfo.minRange, spellInfo.maxRange, spellInfo.spellID, spellInfo.originalIconID;\n        end\n    end\n    \n    modTable.doDesaturate = modTable.config.outOfRange or modTable.config.desaturate\n    -- functions:\n    function modTable.isPurgeUsable(unit, isEnrage, isMagic)\n        local purgeCD, purgeDur, purgeStart, spellOutOfRange, purgeID\n        for purgeSpellId, purgeSpellData in pairs(modTable.purgeSpellIDs or {}) do\n            \n            if (isEnrage and purgeSpellData.soothe) or (isMagic and purgeSpellData.purge) then\n                if not purgeSpellData.override then\n                    if modTable.isSpellOrTalentKnown(purgeSpellId) then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end\n                    end\n                else\n                    -- workaround for spell overrides (on WL command ability, etc.) or pet spells\n                    if FindSpellOverrideByID(purgeSpellData.override) == purgeSpellId then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or  (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end \n                    end\n                end\n            end\n        end\n        \n        \n        \n        \n        if not purgeCD then\n            return true\n        elseif ((spellOutOfRange == true) and modTable.config.outOfRange) then\n            return false\n        elseif not (C_Spell.IsSpellUsable(purgeID) and (purgeCD == 0)) and modTable.config.desaturate then\n            return false\n        elseif GetSpellCooldown(61304) >= purgeCD then --GCD check necessary...\n            return false\n        else\n            return true\n        end\n    end\n    \n    function modTable.updatePurgeId ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updatePurgeIDs()\n        end\n    end\n    \n    -- determine purge spell according to spec\n    function modTable.updatePurgeIDs ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        modTable.knownSpecID = specId\n        local purgeIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if Plater.PlayerClass == \"ROGUE\" then\n            purgeIDs[5938] = {soothe = true, purge = false, override = nil} --Shiv\n        elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n            --\n        elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n            purgeIDs[278326] = {soothe = false, purge = true, override = nil} -- Consume Magic\n        elseif Plater.PlayerClass == \"DRUID\" then\n            purgeIDs[2908] = {soothe = true, purge = false, override = nil} -- Soothe\n        elseif Plater.PlayerClass == \"HUNTER\" then\n            purgeIDs[19801] = {soothe = true, purge = true, override = nil} -- Tranquilizing Shot\n        elseif Plater.PlayerClass == \"MONK\" then\n            --\n        elseif Plater.PlayerClass == \"PALADIN\" then\n            --\n        elseif Plater.PlayerClass == \"SHAMAN\" then\n            purgeIDs[370] = {soothe = false, purge = true, override = nil} -- Purge\n            purgeIDs[378773] = {soothe = false, purge = true, override = nil} -- Greater Purge\n        elseif Plater.PlayerClass == \"WARRIOR\" then\n            --\n        elseif Plater.PlayerClass == \"MAGE\" then\n            purgeIDs[255361] = {soothe = false, purge = true, override = nil} -- Spellsteal\n        elseif Plater.PlayerClass == \"PRIEST\" then\n            purgeIDs[32375] = {soothe = false, purge = true, override = nil} -- Mass Dispel\n            purgeIDs[235101] = {soothe = false, purge = true, override = nil} -- Dispel Magic\n        elseif Plater.PlayerClass == \"WARLOCK\" then\n            purgeIDs[19505] = {soothe = false, purge = true, override = nil} -- Devour Magic (Pet)\n        elseif Plater.PlayerClass == \"EVOKER\" then\n            purgeIDs[372048] = {soothe = true, purge = false, override = nil} -- Oppressing Roar\n        end\n        purgeIDs[25046] = {soothe = false, purge = true, override = nil} -- Arcane Torrent\n        \n        modTable.purgeSpellIDs = purgeIDs\n    end\n    \n    function modTable.isTalentLearned(nodeID)\n        local talentConfig = C_ClassTalents.GetActiveConfigID()\n        local nodeInfo = talentConfig and nodeID and C_Traits.GetNodeInfo(talentConfig, nodeID)\n        return nodeInfo and nodeInfo.entryIDsWithCommittedRanks and nodeInfo.entryIDsWithCommittedRanks[1] and true or false\n    end\n    \n    function modTable.isSpellOrTalentKnown(spellId)\n        if IsSpellKnown(spellId) then\n            return true\n        elseif modTable.isTalentLearned(spellId) then\n            return true\n        end\n    end\n    \n    modTable.updatePurgeIDs()\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePurgeId ()\nend\n\n\n",
},
["Time"] = 1748400779,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/turHC0a5k/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = true,
["Revision"] = 542,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["Name"] = "Steal/Purge Aura Glow",
["PlaterCore"] = 1,
["version"] = 13,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "@scriptname Options:",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option16",
["Value"] = "Ants options:",
["Name"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColorE",
["Value"] = {
1,
0,
0,
1,
},
["Name"] = "Glow Color (Enrage)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the glow ants.",
},
{
["Type"] = 1,
["Key"] = "glowColorM",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Glow Color (Magic)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Amount of ants in the glow effect.",
["Min"] = 1,
["Name"] = "Ants Amount",
["Value"] = 6,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "antsAmount",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Ants move speed",
["Min"] = -1,
["Name"] = "Speed",
["Value"] = 0.25,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "frequency",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants length",
["Value"] = 4,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "antsLength",
},
{
["Type"] = 2,
["Max"] = 4,
["Desc"] = "",
["Min"] = 1,
["Name"] = "Ants Thickness",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "antsThickness",
},
{
["Type"] = 6,
["Key"] = "option14",
["Value"] = 0,
["Name"] = "Option 14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "antsBorder",
["Value"] = false,
["Name"] = "Ants Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outerGlow",
["Value"] = false,
["Name"] = "Outer Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option17",
["Value"] = 0,
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option15",
["Value"] = "Desaturation (Retail only)",
["Name"] = "Option 15",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "desaturate",
["Value"] = false,
["Name"] = "Desaturate if not usable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
{
["Type"] = 4,
["Key"] = "outOfRange",
["Value"] = false,
["Name"] = "Desaturate when out of range",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Initialization"] = "function(modTable)\n    modTable.castingUnits = {}\n    modTable.castCounter = 0\n    modTable.unitKeys = {}  -- To store unique identifiers for each unitFrame\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    \n    -- Create a unique identifier for this unitFrame if it doesn't exist\n    if not modTable.unitKeys[unitFrame] then\n        modTable.unitKeys[unitFrame] = #modTable.unitKeys + 1\n    end\n    \n    if not modTable.castingUnits[unitFrame] then\n        modTable.castCounter = modTable.castCounter + 1\n        envTable.castOrder = modTable.castCounter\n        \n        modTable.castingUnits[unitFrame] = envTable.castOrder\n    else\n        envTable.castOrder = modTable.castingUnits[unitFrame]\n    end\n    \n    -- Use original level as base and add a large offset for casting\n    -- Add unitKey to ensure uniqueness even for simultaneous casts\n    local castingOffset = 100\n    local frameLevel = envTable.originalLevel + castingOffset + (envTable.castOrder * 10) + modTable.unitKeys[unitFrame]\n    \n    if unitFrame.castBar and unitFrame.castBar.isSpecialCast then\n        frameLevel = frameLevel + 50\n    end\n    \n    unitFrame:SetFrameLevel(frameLevel)\n    \n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        modTable.castingUnits[unitFrame] = nil\n        -- Don't remove from unitKeys to maintain consistent unique IDs\n        \n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n        envTable.castOrder = nil\n    end\nend",
},
["Time"] = 1748400769,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/15",
["Icon"] = 4640492,
["Enabled"] = true,
["Revision"] = 562,
["semver"] = "1.0.14",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 31,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "fullOpacityOnCast",
["Value"] = true,
["Name"] = "Force full opacity when casting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = 15,
},
{
["Enabled"] = false,
["Revision"] = 387,
["OptionsValues"] = {
["threshold2"] = 5,
["debuff3"] = "",
["debuff2"] = "442624",
["color1"] = {
0.2980392277240753,
0.8509804606437683,
0.3921568989753723,
1,
},
["color2"] = {
0.6666666865348816,
1,
0,
1,
},
["low_time_color2"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["low_time_color1"] = {
0.4549019932746887,
0.6784313917160034,
0,
1,
},
["debuff1"] = "",
["color3"] = {
1,
1,
1,
1,
},
["threshold1"] = 0,
["low_time_color3"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1 ID",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #1",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold1",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low Time #1",
},
{
["Type"] = 1,
["Name"] = "Low Time Color #1",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Debuff #2 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Low Time #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold2",
},
{
["Type"] = 1,
["Key"] = "low_time_color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Debuff #3 ID",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #3",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Low Time #3",
["Value"] = 5,
["Key"] = "threshold3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Low Time Color #3",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
["Author"] = "Blindmonkas-Tichondrius",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["race"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["UID"] = "0x6816fa86ef28426",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Prio"] = 99,
["Time"] = 1753163262,
["PlaterCore"] = 1,
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Name"] = "Quazii Debuff Nameplate Colors",
["Icon"] = 4635182,
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
},
{
["OptionsValues"] = {
["threshold2"] = 3,
["debuff3"] = "207771",
["threshold1"] = 3,
["color1"] = {
0.06666667014360428,
1,
0.4941176772117615,
1,
},
["color2"] = {
0.1176470667123795,
1,
0,
1,
},
["debuff2"] = "442624",
["color3"] = {
1,
0.658823549747467,
0,
1,
},
["low_time_color1"] = {
0.05882353335618973,
1,
0.8509804606437683,
1,
},
["debuff1"] = "204598",
["threshold3"] = 3,
["low_time_color2"] = {
0.9803922176361084,
1,
0,
1,
},
["low_time_color3"] = {
1,
0.3960784673690796,
0,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Time"] = 1753506484,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4635182,
["Enabled"] = true,
["Revision"] = 354,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Nameplate Colors (Vengeance DH)",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 3,
["Name"] = "Sigil of Flame  ID",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Sigil of Flame Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Sigil Low Time",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold1",
},
{
["Type"] = 1,
["Name"] = "Sigil Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Reaver's Mark ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold2",
["Value"] = 5,
["Name"] = "Reaver's Mark Low Time",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Low Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Fiery Brand ID",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fiery Brand Low Time",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["version"] = -1,
},
},
["last_news_time"] = 1743878608,
["auras_experimental_update_classic_era"] = true,
["aura_width2"] = 16,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["aura_height2"] = 12,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[267354] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[372223] = "nil",
[382233] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372735] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[283422] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388801] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[461796] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[387910] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[267551] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412200] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[370764] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[323143] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[259940] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412012] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[427376] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[465754] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[332708] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[275907] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[432031] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257870] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[447270] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[424958] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[472452] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[367521] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[320729] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1214546] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[473220] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[429427] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[268202] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[322711] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257397] = "nil",
[333294] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[451843] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1225174] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1215738] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[317231] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[437719] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[421910] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323608] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377732] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369828] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[459779] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1235368] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[386660] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[421277] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200345] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[384868] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[355577] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1217653] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[199805] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265540] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[474087] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[396665] = "nil",
[369409] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1222356] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[465682] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[326997] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323236] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1214315] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[397889] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[473114] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257756] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[1226111] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[331718] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1227900] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[383823] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[426260] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[396812] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[320822] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[209628] = "nil",
[432198] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[448640] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[367484] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[436592] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[369465] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[293986] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[200784] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[200291] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[347149] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[199151] = "nil",
[188404] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[434824] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[1217496] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[385536] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[253721] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Stop.ogg",
[378818] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[411994] = "nil",
[1217294] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[330614] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[352390] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[339706] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Quazii\\sound\\QUI2_Front.ogg",
[372225] = "Interface\\AddOns\\QuaziiUI\\voicepack\\Stop.ogg",
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[88308] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[340160] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[323143] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[412129] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[472452] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[426860] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[1225174] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[381525] = {
true,
"orangered",
"",
},
[412215] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[1214315] = {
true,
"orangered",
"",
},
[322711] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[450854] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[355577] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[391118] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[272609] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[474087] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
false,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[330614] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[268202] = {
true,
"orchid",
"",
},
[444608] = {
false,
"gray",
"",
},
[375351] = {
true,
"orangered",
"",
},
[383823] = {
true,
"orchid",
"",
},
[428293] = {
true,
"orangered",
},
[199805] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[384868] = {
true,
"orangered",
"",
},
[373742] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[465682] = {
true,
"orangered",
"",
},
[265721] = {
true,
"orangered",
"",
},
[426893] = {
true,
"orangered",
"",
},
[326997] = {
true,
"orangered",
"",
},
[323236] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[434824] = {
true,
"orangered",
"",
},
[427342] = {
true,
"orchid",
"",
},
[226296] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[257756] = {
true,
"orchid",
"",
},
[1226111] = {
true,
"orangered",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[331718] = {
true,
"orangered",
"",
},
[324323] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[426260] = {
true,
"orangered",
"",
},
[427025] = {
true,
"orangered",
"",
},
[102569] = {
false,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[462216] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[432198] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[87618] = {
true,
"orangered",
"",
},
[387950] = {
true,
"orangered",
"",
},
[426645] = {
true,
"orangered",
},
[347149] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[448640] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[320822] = {
true,
"orchid",
"",
},
[433662] = {
true,
"orchid",
"",
},
[375251] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[416139] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[393432] = {
true,
"orangered",
"",
},
[200768] = {
true,
"orangered",
"",
},
[293986] = {
true,
"orangered",
"",
},
[449090] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[209628] = {
true,
"blue",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[474018] = {
true,
"orangered",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[1227900] = {
true,
"orangered",
"",
},
[473114] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[372225] = {
true,
"orchid",
"",
},
[369828] = {
true,
"orchid",
"",
},
[188404] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[1217496] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[443500] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[275907] = {
true,
"orangered",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[372087] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[391723] = {
true,
"orangered",
"",
},
[1222356] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[352390] = {
true,
"orangered",
"",
},
[333488] = {
true,
"orangered",
"",
},
[201226] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[1235368] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[262377] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[199151] = {
true,
"blue",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["ui_parent_cast_strata"] = "DIALOG",
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["extra_icon_timer_size"] = 10,
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["aura2_grow_direction"] = 3,
["semver"] = "1.0.2",
["plater_resources_padding"] = 2,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["cast_statusbar_texture"] = "Quazii",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["show_healthbars_on_not_attackable"] = true,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.81818177877379,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Quazii",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Quazii",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Targetting Alpha"] = 3,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Attacking Specific Unit"] = 2,
["Execute Range"] = 1,
["Combo Points"] = 6,
["Reorder Nameplate"] = 4,
["Target Color"] = 3,
["Extra Border"] = 2,
["Monk Statue"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110200,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Quazii",
["extra_icon_timer_font"] = "Quazii",
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["not_affecting_combat_alpha"] = 0.7999999523162842,
["extra_icon_height"] = 10,
["aura_alpha"] = 0.84999996423721,
["extra_icon_stack_font"] = "Quazii",
["castbar_target_font"] = "Quazii",
["aura_height"] = 12,
["aura2_x_offset"] = 2.099990844726563,
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["plater_resources_personal_bar"] = false,
["target_indicator"] = "Double Arrows",
["border_color"] = {
nil,
nil,
nil,
0.8352941870689392,
},
["bossmod_aura_glow_expiring"] = true,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["extra_icon_caster_size"] = 10,
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["target_shady_alpha"] = 0.5999999642372131,
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0,
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["indicator_elite"] = false,
["indicator_rare"] = false,
["target_highlight_height"] = 18,
["aura_tracker"] = {
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
["329181"] = false,
[163689] = true,
[227931] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["debuff_banned"] = {
["331653"] = true,
[449217] = true,
[447513] = true,
[1490] = false,
["284678"] = true,
[273977] = false,
[391568] = false,
["340007"] = true,
[376084] = true,
["330911"] = true,
[440340] = true,
[394933] = true,
[452229] = true,
[206930] = false,
["327980"] = true,
[458478] = false,
["281242"] = true,
[452545] = false,
["299151"] = true,
},
["buff_banned"] = {
["206150"] = true,
[442624] = false,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
},
["extra_icon_caster_font"] = "Quazii",
["login_counter"] = 26889,
["extra_icon_caster_name"] = false,
["click_space_friendly"] = {
92,
1,
},
["target_highlight_alpha"] = 1,
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["blizzard_nameplate_font_size"] = 10,
["aura_sort"] = true,
["plater_resources_show"] = false,
["bossmod_aura_height"] = 32,
["blizzard_nameplate_font"] = "Quazii",
["aura_stack_font"] = "Quazii",
["patch_version"] = 39,
["no_spellname_length_limit"] = true,
["first_run2"] = true,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["aura_cooldown_reverse"] = false,
["plater_resources_grow_direction"] = "center",
["aura_cooldown_show_swipe"] = false,
["version"] = 3,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1000000238419",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["SoftTargetInteract"] = "3",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplateShowPersonalCooldowns"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateShowFriendlyBuffs"] = "0",
["nameplateMinScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateOtherTopInset"] = "0.085",
["NamePlateHorizontalScale"] = "1",
["nameplateSelfBottomInset"] = "0.2",
["nameplateOccludedAlphaMult"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateSelfAlpha"] = "0.75",
["nameplateSelfTopInset"] = "0.5",
["ShowClassColorInNameplate"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateMinAlphaDistance"] = "-158489.31924611",
},
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.200000047683716,
},
},
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["plater_resources_scale"] = 0.8,
["health_statusbar_bgcolor"] = {
0.04313725605607033,
0.04313725605607033,
0.04313725605607033,
1,
},
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["buff_frame_anchor_and_size_migrated"] = true,
["castbar_target_anchor"] = {
["side"] = 11,
},
["hook_data_trash"] = {
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["__TrashAt"] = 1753503015,
["Time"] = 1753163302,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["race"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["role"] = {
},
},
["url"] = "",
["Icon"] = 4635182,
["Enabled"] = true,
["Revision"] = 350,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Nameplate Colors (Vengeance DH)",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 3,
["Name"] = "Sigil of Flame  ID",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Sigil of Flame Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Sigil Low Time",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold1",
},
{
["Type"] = 1,
["Name"] = "Sigil Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff2",
["Value"] = "000000",
["Name"] = "Reaver's Mark ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold2",
["Value"] = 5,
["Name"] = "Reaver's Mark Low Time",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color2",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Reaver's Mark Low Time Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Fiery Brand ID",
["Value"] = "000000",
["Key"] = "debuff3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Key"] = "threshold3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Fiery Brand Low Time",
},
{
["Type"] = 1,
["Name"] = "Fiery Brand Low Time Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
["HooksTemp"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["version"] = -1,
},
},
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Fixate On You"] = 12,
["Cast - Shining Green [P]"] = 3,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Ultra Important"] = 14,
["Blink by Time Left"] = 1,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Tank Interrupt"] = 12,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Fixate"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Countdown"] = 12,
["Add - Tag Number [P]"] = 2,
["Unit - Health Markers"] = 12,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Glowing [P]"] = 10,
["Cast - On Going Cast [P]"] = 2,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Explosion Affix M+"] = 14,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Important by Color [P]"] = 2,
["Unit - Important"] = 11,
["Cast - Alert + Timer [P]"] = 4,
["Cast - Very Important"] = 15,
["Cast - AoE Hit All [P]"] = 3,
["Color Change"] = 1,
["Auto Set Skull"] = 11,
["Aura is Shield [P]"] = 5,
["Cast - Debuff [P]"] = 2,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Add - Warning [P]"] = 5,
["Spiteful Affix"] = 3,
["Cast - Quick Flash"] = 2,
["Add - Non Elite Trash [P]"] = 4,
["Relics 9.2 M Dungeons"] = 2,
["Aura Border Color"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Heroic Leap [P]"] = 3,
["Unit Power"] = 1,
["Cast - Stop Casting"] = 4,
["Unit - Show Energy"] = 11,
},
["castbar_target_outline"] = "NONE",
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["cast_statusbar_spark_offset"] = -13,
["cast_statusbar_spark_width"] = 25,
["border_thickness"] = 1.5,
},
["Quazii S3"] = {
["plater_resources_show_depleted"] = false,
["target_shady_combat_only"] = false,
["script_data"] = {
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["Time"] = 1745120820,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --color to set the nameplate\n    envTable.NameplateColor = \"gray\"\n    \nend\n\n\n",
["NpcNames"] = {
},
["Enabled"] = true,
["Revision"] = 119,
["Options"] = {
},
["Author"] = "Izimode-Azralon",
["Desc"] = "When an aura makes the unit invulnarable and you don't want to attack it. Add spell in the Add Trigger field.",
["Name"] = "Aura - Invalidate Unit [Plater]",
["Prio"] = 99,
["SpellIds"] = {
261265,
261266,
271590,
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    --only change the nameplate color in combat\n    if (InCombatLockdown()) then\n        Plater.SetNameplateColor (unitFrame, envTable.NameplateColor)\n    end\n    \nend\n\n\n\n\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_invalid",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1745289211,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend",
["Revision"] = 638,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["semver"] = "",
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Add the buff name in the trigger box.",
["Name"] = "Aura - Buff Alert [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \n    \n    \n    \nend",
["SpellIds"] = {
398151,
375596,
377738,
378149,
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\n    \nend\n\n\n\n\n",
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["Time"] = 1745120821,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura",
["Enabled"] = true,
["Revision"] = 374,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Enter the spell name or spellID of the Buff in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option3",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "glowEnabled",
["Value"] = false,
["Name"] = "Glow Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColor",
["Value"] = {
0.403921568627451,
0.00392156862745098,
0,
1,
},
["Name"] = "Glow Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "dotsEnabled",
["Value"] = true,
["Name"] = "Dots Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Dots Color",
["Value"] = {
1,
0.3215686274509804,
0,
1,
},
["Key"] = "dotsColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
},
["Desc"] = "Add the debuff name in the trigger box.",
["SpellIds"] = {
},
["Author"] = "Tercioo-Sylvanas",
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Show()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        envTable.dotAnimation = Plater.PlayDotAnimation(self, 6, scriptTable.config.dotsColor, 6, 3) \n    end\nend\n\n\n",
["Name"] = "Aura - Debuff Alert [Plater]",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["semver"] = "",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (scriptTable.config.glowEnabled) then\n        envTable.buffIconGlow:Hide()\n    end\n    \n    if (scriptTable.config.dotsEnabled) then\n        Plater.StopDotAnimation(self, envTable.dotAnimation)\n    end\n    \n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --creates a glow around the icon\n    envTable.buffIconGlow = envTable.buffIconGlow or Plater.CreateIconGlow (self, scriptTable.config.glowColor)\n    \nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["Time"] = 1743564548,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);\nend\n\n--[=[\n\n\n--]=]",
["NpcNames"] = {
"Guardian of Yogg-Saron",
},
["Enabled"] = false,
["Revision"] = 145,
["Options"] = {
},
["Author"] = "Celian-Sylvanas",
["Desc"] = "Show the energy amount above the nameplate",
["Name"] = "UnitPower [Plater]",
["Prio"] = 99,
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount.text = \"\" .. UnitPower (unitId);\nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["Icon"] = 136048,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["ScriptType"] = 3,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["Time"] = 1743564605,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount = Plater:CreateLabel (unitFrame, \"\", 16, \"silver\");\n    envTable.EnergyAmount:SetPoint (\"bottom\", unitFrame, \"top\", 0, 18);    \n    \n    envTable.EnergyAmount.fontsize = scriptTable.config.fontSize\n    envTable.EnergyAmount.fontcolor = scriptTable.config.fontColor\n    envTable.EnergyAmount.outline = scriptTable.config.outline\n    \n    \nend\n\n--[=[\n\n164406 = Shriekwing\n164407 = Sludgefist\n162100 = kryxis the voracious\n162099 = general kaal - sanguine depths\n162329 = Xav the Unfallen - threater of pain\n--]=]",
["url"] = "",
["Icon"] = 136048,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Enabled"] = false,
["Revision"] = 254,
["semver"] = "",
["NpcNames"] = {
},
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "script desc",
["Value"] = "Show the power of the unit above the nameplate.",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "add trigger",
["Value"] = "Add the unit name or unitId in the \"Add Trigger\" field and press \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Show at 80% of Energy",
["Value"] = true,
["Key"] = "showLater",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the energy won't start showing until the unit has 80% energy.",
},
{
["Type"] = 6,
["Name"] = "Option 2",
["Value"] = 0,
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 32,
["Desc"] = "Text size.",
["Min"] = 8,
["Name"] = "Text Size",
["Value"] = 16,
["Key"] = "fontSize",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Name"] = "Font Color",
["Value"] = {
0.80392156862745,
0.80392156862745,
0.80392156862745,
1,
},
["Key"] = "fontColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the text.",
},
{
["Type"] = 4,
["Name"] = "Enable Text Outline",
["Value"] = true,
["Key"] = "outline",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the text uses outline.",
},
},
["Author"] = "Celian-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Show the energy amount above the nameplate.",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local currentPower = UnitPower(unitId)\n    \n    if (currentPower and currentPower > 0) then\n        local maxPower = UnitPowerMax (unitId)\n        local percent = floor (currentPower / maxPower * 100)\n        \n        envTable.EnergyAmount.text = \"\" .. percent;\n        \n        if (scriptTable.config.showLater) then\n            local alpha = (percent -80) * 5\n            alpha = alpha / 100\n            alpha = max(0, alpha)\n            envTable.EnergyAmount:SetAlpha(alpha)\n            \n        else\n            envTable.EnergyAmount:SetAlpha(1.0)\n        end\n        \n        \n    else\n        envTable.EnergyAmount.text = \"\"\n    end\nend\n\n\n\n\n\n\n\n\n",
["SpellIds"] = {
},
["PlaterCore"] = 1,
["Prio"] = 99,
["Name"] = "Unit - Show Energy [Plater]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Show()\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.EnergyAmount:Hide()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Time"] = 1743574570,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Icon"] = 610472,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = true,
["Revision"] = 93,
["Options"] = {
},
["NpcNames"] = {
},
["semver"] = "",
["Author"] = "Keyspell-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Show power bar where its value is the buff value (usualy shown in the buff tooltip)",
["SpellIds"] = {
343470,
423228,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (WOW_PROJECT_ID ~= WOW_PROJECT_MAINLINE) then\n        return \n    end\n    \n    local continuationToken\n    local slots\n    local foundAura = false\n    \n    for i = 1, 40 do\n        local auraInfo = C_UnitAuras.GetBuffDataByIndex(envTable._UnitID, i)\n        if (auraInfo) then\n            local spellId = auraInfo.spellId\n            if (spellId == envTable._SpellID) then --need to get the trigger spellId\n                --Ablative Shield\n                local unitPowerBar = unitFrame.powerBar\n                if (not unitPowerBar:IsShown()) then\n                    unitPowerBar:SetUnit(unitId)\n                end\n                \n                foundAura = true\n                return\n            end\n        else\n            break\n        end\n    end\n    \n    if (not foundAura) then\n        local unitPowerBar = unitFrame.powerBar\n        if (unitPowerBar:IsShown()) then\n            unitPowerBar:Hide()\n        end\n    end\nend",
["Name"] = "Aura is Shield [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    local unitPowerBar = unitFrame.powerBar\n    unitPowerBar:Hide()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["ScriptType"] = 3,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743992662,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\health_indicator",
["semver"] = "",
["Enabled"] = true,
["Revision"] = 161,
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 1",
["Value"] = "Add markers into the health bar to remind you about boss abilities at life percent.",
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "blank line",
["Value"] = 0,
["Key"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Name"] = "Vertical Line Color",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "indicatorColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Indicator color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Indicator alpha.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.79,
["Key"] = "indicatorAlpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Vertical Line Alpha",
},
{
["Type"] = 6,
["Key"] = "",
["Value"] = 0,
["Name"] = "blank line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "fillColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Fill Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Fill color.",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Fill alpha.",
["Min"] = 0,
["Key"] = "fillAlpha",
["Value"] = 0.2,
["Name"] = "Fill Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = true,
},
},
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    envTable.lifePercent = { --dragonflight\n        [214840] = {25}, --engorged crawler\n        \n    }\n    \n    \n    function envTable.CreateMarker(unitFrame)\n        unitFrame.healthMarker = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthMarker:SetColorTexture(1, 1, 1)\n        unitFrame.healthMarker:SetSize(1, unitFrame.healthBar:GetHeight())\n        \n        unitFrame.healthOverlay = unitFrame.healthBar:CreateTexture(nil, \"overlay\")\n        unitFrame.healthOverlay:SetColorTexture(1, 1, 1)\n        unitFrame.healthOverlay:SetSize(1, unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateMarkers(unitFrame)\n        local markersTable = envTable.lifePercent[envTable._NpcID]\n        if (markersTable) then\n            local unitLifePercent = envTable._HealthPercent / 100\n            for i, percent in ipairs(markersTable) do\n                percent = percent / 100\n                if (unitLifePercent > percent) then\n                    if (not unitFrame.healthMarker) then\n                        envTable.CreateMarker(unitFrame)\n                    end\n                    \n                    unitFrame.healthMarker:Show()\n                    local width = unitFrame.healthBar:GetWidth()\n                    unitFrame.healthMarker:SetPoint(\"left\", unitFrame.healthBar, \"left\", width*percent, 0)\n                    \n                    local overlaySize = width * (unitLifePercent - percent)\n                    unitFrame.healthOverlay:SetWidth(overlaySize)\n                    unitFrame.healthOverlay:SetPoint(\"left\", unitFrame.healthMarker, \"right\", 0, 0)\n                    \n                    unitFrame.healthMarker:SetVertexColor(Plater:ParseColors(scriptTable.config.indicatorColor))\n                    unitFrame.healthMarker:SetAlpha(scriptTable.config.indicatorAlpha)\n                    \n                    unitFrame.healthOverlay:SetVertexColor(Plater:ParseColors(scriptTable.config.fillColor))\n                    unitFrame.healthOverlay:SetAlpha(scriptTable.config.fillAlpha)\n                    \n                    return\n                end\n            end --end for\n            \n            if (unitFrame.healthMarker and unitFrame.healthMarker:IsShown()) then\n                unitFrame.healthMarker:Hide()\n                unitFrame.healthOverlay:Hide()\n            end\n        end\n    end\nend      \n\n\n\n\n\n\n\n\n\n",
["NpcNames"] = {
"214840",
"197697",
"59544",
"186227",
"184020",
"91005",
},
["Author"] = "Aelerolor-Torghast",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Desc"] = "Place a marker into the health bar to indicate when the unit will change phase or cast an important spell.",
["version"] = -1,
["Prio"] = 99,
["Name"] = "Add - Health Markers [P]",
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["SpellIds"] = {
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.UpdateMarkers(unitFrame)\nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    if (unitFrame.healthMarker) then\n        unitFrame.healthMarker:Hide()\n        unitFrame.healthOverlay:Hide()\n    end\nend\n\n\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["ScriptType"] = 1,
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Time"] = 1743574568,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \n    local plateFrame = unitFrame.PlateFrame\n    \n    if (not plateFrame.BWC_RedBackground) then\n        plateFrame.BWC_RedBackground = plateFrame:CreateTexture(nil, \"background\")\n        plateFrame.BWC_RedBackground:SetAllPoints()\n    end\n    \n    plateFrame.BWC_RedBackground:SetTexture([[Interface/AddOns/Plater/masks/mask1]])\n    plateFrame.BWC_RedBackground:Hide()\n    \n    function envTable.ShowBackground(unitFrame)\n        local plateFrame = unitFrame.PlateFrame\n        plateFrame.BWC_RedBackground:SetVertexColor(1, 0, 0, 0.4)\n        plateFrame.BWC_RedBackground:Show()\n    end\n    \n    function envTable.HideBackground(unitFrame)\n        plateFrame.BWC_RedBackground:Hide()\n    end\nend\n\n\n\n\n\n\n",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Enabled"] = true,
["Revision"] = 28,
["Options"] = {
},
["Icon"] = 236209,
["semver"] = "",
["Author"] = "Tiranaa-Azralon",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Desc"] = "Highlight the nameplate of a unit when has a certain Buff (trigger) and start to cast a spell",
["SpellIds"] = {
372743,
372749,
384933,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (Plater.UnitIsCasting(unitId)) then\n        envTable.ShowBackground(unitFrame)\n    else\n        envTable.HideBackground(unitFrame)\n    end\n    \nend",
["Name"] = "Aura While Casting [P]",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    envTable.HideBackground(unitFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["ScriptType"] = 1,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1745120819,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["NpcNames"] = {
},
["Temp_Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["Enabled"] = true,
["Revision"] = 32,
["Options"] = {
},
["Icon"] = "Interface\\AddOns\\Plater\\images\\aura_castbar.png",
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "		function (scriptTable)\n			--insert code here\n			\n		end\n	",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local auraDuration = envTable._Duration\n    local altCastId = 1\n    \n    ---@class plater_altcastbarconfig : table\n    ---@field iconTexture string\n    ---@field iconTexcoord table\n    ---@field iconAlpha number\n    ---@field text string\n    ---@field texture any\n    ---@field color any\n    ---@field isChanneling boolean\n    ---@field canInterrupt boolean\n    ---@field height number\n    ---@field iconSize number\n    ---@field textSize number\n    ---@field spellNameAnchor df_anchor\n    ---@field timerAnchor df_anchor\n    ---@field iconAnchor df_anchor\n    \n    local configTable = {\n        iconTexture = envTable._Texture,\n        text = envTable._SpellName,\n        color = \"gray\",\n        isChanneling = true,\n        canInterrupt = false,\n        texture = [[Interface\\AddOns\\Plater\\images\\bar_background]],\n        \n    }\n    \n    Plater.SetAltCastBar(unitFrame.PlateFrame, configTable, auraDuration, envTable._StartTime, altCastId)\n    \nend\n\n\n",
["SpellIds"] = {
438494,
335141,
},
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Name"] = "Aura - Is Cast Bar [P]",
["Desc"] = "Show a castbar for the aura duration.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --insert code here\n    Plater.ClearAltCastBar(unitFrame.PlateFrame)\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
["interruptSoundToggle"] = false,
["interruptSound"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["castbarColor"] = {
1,
0.4313725829124451,
0,
1,
},
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1745289204,
["url"] = "",
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --save current cast bar color before changing it later\n    envTable.OldCastbarColor = unitFrame.castBar:GetColor()\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["Icon"] = 1305153,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    --set color back to what it was before\n    unitFrame.castBar:SetColor(Plater:ParseColors(envTable.OldCastbarColor))\n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["Revision"] = 1971,
["semver"] = "",
["NpcNames"] = {
},
["Prio"] = 99,
["Author"] = "Tercioo-Sylvanas",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (unitFrame.ActorType == \"enemyplayer\" or unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"friendlynpc\" ) then\n        return\n    end\n    \n    if scriptTable.config.interruptSoundToggle then\n        PlaySoundFile(scriptTable.config.interruptSound, \"Master\")\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    --Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    unitFrame.castBar:SetColor(Plater:ParseColors(scriptTable.config.castbarColor))\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n",
["version"] = -1,
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Name"] = "Quazii MUST INTERRUPT",
["PlaterCore"] = 1,
["SpellIds"] = {
387955,
387615,
387606,
225100,
211401,
211470,
192563,
152818,
156776,
398206,
153524,
396073,
396018,
345202,
263365,
395859,
395872,
397914,
209410,
392924,
397889,
153395,
265089,
278755,
266106,
272183,
265523,
202181,
374080,
400386,
209413,
207980,
257397,
257736,
382787,
369602,
369465,
381593,
265091,
265433,
382791,
376780,
257784,
88010,
410870,
266209,
342797,
413044,
204243,
279118,
255041,
259572,
200630,
225562,
201399,
264390,
265346,
263959,
278444,
265876,
264407,
266225,
415770,
415437,
412922,
417481,
418200,
411300,
412378,
412233,
407891,
416139,
227913,
164965,
164887,
168082,
427460,
429176,
271174,
165213,
169839,
413607,
388392,
388863,
396640,
377389,
387975,
387564,
375596,
386546,
384365,
386025,
386024,
386015,
387125,
387411,
387596,
384808,
373395,
397394,
372743,
384194,
373017,
367500,
367503,
377950,
372711,
374544,
385029,
384633,
374339,
374045,
395694,
374563,
374699,
376171,
377341,
377402,
395427,
372223,
384161,
378282,
369675,
369365,
369411,
436841,
392451,
434802,
434793,
436322,
448248,
448047,
433841,
443430,
443433,
442536,
452162,
453840,
431309,
450756,
451097,
431333,
429545,
445207,
429109,
322938,
324914,
326046,
340544,
337235,
322450,
335143,
324293,
327130,
256957,
275826,
272571,
454440,
451871,
76711,
324776,
427356,
432959,
426145,
427157,
338353,
442210,
449455,
377488,
386549,
1214468,
1214780,
462771,
471733,
428019,
425536,
424322,
426295,
422541,
427176,
424420,
424419,
423051,
444743,
441627,
440687,
341902,
330868,
342675,
341969,
341977,
280604,
269302,
263202,
271579,
268702,
293729,
301088,
441351,
268797,
437721,
463058,
465595,
430109,
},
["Desc"] = "Flash, Bounce and Red Color the CastBar border when when an important cast is happening. Add spell in the Add Trigger field.",
["Options"] = {
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Blank Space",
["Value"] = 0,
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Cast Bar Color Enabled",
["Value"] = true,
["Key"] = "useCastbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Name"] = "Cast Bar Color",
["Value"] = {
1,
0.4313725490196079,
0,
1,
},
["Key"] = "castbarColor",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Name"] = "Blank Line",
["Value"] = 0,
["Key"] = "option7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Name"] = "Play Sound On Spell Cast",
["Value"] = false,
["Key"] = "interruptSoundToggle",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Plays \"Interrupt\" Sound When Spell Casted",
},
{
["Type"] = 8,
["Name"] = "Choose Sound",
["Value"] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Interrupt.ogg",
["Key"] = "interruptSound",
["Icon"] = "Interface\\AddOns\\Plater\\images\\options_audio_dropdown.png",
["Desc"] = "Choose The Sound Played",
},
{
["Type"] = 6,
["Name"] = "blank space",
["Value"] = 0,
["Key"] = "option11",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Name"] = "Flash Duration",
["Value"] = 0.4,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Name"] = "Cast Bar Height Mod",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Name"] = "Shake Duration",
["Value"] = 0.2,
["Fraction"] = true,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Fraction"] = false,
["Value"] = 8,
["Name"] = "Shake Amplitude",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 40,
["Name"] = "Shake Frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["Enabled"] = true,
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
["OptionsValues"] = {
},
["Temp_OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["ScriptType"] = 2,
["Temp_Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["Time"] = 1743574572,
["Temp_ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    local movingArrowTexture = unitFrame._movingArrowTexture\n    if (not movingArrowTexture) then\n        movingArrowTexture = self:CreateTexture(nil, \"artwork\", nil, 6)\n        unitFrame._movingArrowTexture = movingArrowTexture\n    end\n    \n    envTable.movingAnimation = envTable.movingAnimation or Plater:CreateAnimationHub (unitFrame._movingArrowTexture, \n        function() \n            unitFrame._movingArrowTexture:Show() \n            unitFrame._movingArrowTexture:SetPoint(\"left\", 0, 0)\n        end, \n        function() unitFrame._movingArrowTexture:Hide() end)\n    \n    envTable.movingAnimation:SetLooping (\"REPEAT\")\n    \n    envTable.arrowAnimation = envTable.arrowAnimation or Plater:CreateAnimation (envTable.movingAnimation, \"translation\", 1, 0.20, self:GetWidth()-16, 0)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\nend\n\n\n\n\n\n\n",
["url"] = "",
["NpcNames"] = {
},
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Enabled"] = true,
["Revision"] = 1006,
["Options"] = {
{
["Type"] = 6,
["Name"] = "Option 1",
["Value"] = 0,
["Key"] = "option1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 2",
["Value"] = "Produces an effect to indicate the spell will hit players in front of the enemy.",
["Key"] = "option2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Name"] = "Option 4",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Key"] = "option4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Name"] = "Option 3",
["Value"] = 0,
["Key"] = "option3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Set the alpha of the moving arrow",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.73,
["Name"] = "Arrow Alpha",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "arrowAlpha",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Time that takes for an arrow to travel from the to right.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.2,
["Name"] = "Animation Speed",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "animSpeed",
},
{
["Type"] = 4,
["Name"] = "Use White Arrow",
["Value"] = false,
["Key"] = "desaturateArrow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If enabled, the arrow color will be desaturated.",
},
},
["Icon"] = 1958262,
["semver"] = "",
["Author"] = "Izimode-Azralon",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend\n\n\n",
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    unitFrame._movingArrowTexture:SetTexture([[Interface\\PETBATTLES\\PetBattle-StatIcons]])\n    unitFrame._movingArrowTexture:SetSize(16, self:GetHeight() - 2)\n    unitFrame._movingArrowTexture:SetTexCoord(unpack({0, 15/32, 18/32, 30/32}))\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    unitFrame._movingArrowTexture:SetDesaturated(scriptTable.config.desaturateArrow)    \n    \n    unitFrame._movingArrowTexture:SetParent(self.FrameOverlay)\n    unitFrame._movingArrowTexture:SetDrawLayer(\"overlay\",  7)\n    \n    envTable.arrowAnimation:SetDuration(scriptTable.config.animSpeed)\n    envTable.movingAnimation:Play()\nend\n\n\n",
["SpellIds"] = {
388623,
384699,
153501,
153686,
154442,
192018,
219488,
387067,
391136,
382233,
209027,
212031,
207261,
207979,
198888,
199805,
199050,
191508,
152792,
265540,
226304,
375327,
372202,
209495,
260894,
226406,
193505,
375348,
257426,
255952,
257870,
413147,
383107,
377559,
390111,
369791,
369335,
375727,
265016,
265019,
260793,
260292,
272457,
272609,
269843,
183465,
226296,
188169,
183088,
410873,
411012,
88308,
373742,
374533,
377204,
204667,
255567,
201226,
200768,
265372,
413529,
408141,
412215,
412129,
412505,
419351,
200261,
200345,
197974,
200913,
164357,
169179,
426645,
428293,
169929,
388976,
385958,
377383,
377034,
374361,
370764,
386660,
391118,
372222,
385578,
384696,
384868,
387629,
382277,
376892,
375943,
376683,
372087,
391726,
391723,
381525,
388060,
376170,
393432,
384524,
375351,
382708,
375251,
375439,
372311,
372201,
369563,
369573,
369409,
369061,
382712,
434824,
453161,
443500,
434779,
451496,
451543,
439621,
440218,
431494,
450854,
449130,
448640,
321968,
331718,
340160,
324323,
333488,
333477,
256627,
269029,
257862,
462216,
447395,
448105,
432198,
441119,
448619,
449090,
427323,
422414,
425027,
340300,
427025,
257288,
268260,
426261,
321834,
427869,
465754,
472452,
465682,
1217653,
459779,
473114,
1217496,
421910,
421277,
447270,
436592,
426893,
1214315,
424958,
451843,
1214546,
445457,
317231,
320729,
333294,
330614,
323608,
339706,
267551,
1217294,
275907,
259940,
283422,
293986,
291865,
466124,
468813,
473220,
332708,
1215738,
474087,
426260,
},
["Temp_UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    unitFrame._movingArrowTexture:SetAlpha(scriptTable.config.arrowAlpha)\n    \n    local percent = envTable.movingAnimation:GetProgress()\n    \n    if (percent < 0.4) then\n        local value = Lerp(0.01, scriptTable.config.arrowAlpha, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n        \n    elseif (percent > 0.6) then\n        local value = Lerp(scriptTable.config.arrowAlpha, 0.01, percent) or 0\n        unitFrame._movingArrowTexture:SetAlpha(Saturate(value))\n    end\n    \n    --unitFrame._movingArrowTexture:SetAlpha(1)\n    \n    self.ThrottleUpdate = 0\nend",
["Name"] = "Quazii FRONTALS",
["PlaterCore"] = 1,
["Prio"] = 67,
["version"] = -1,
["Desc"] = "Does an animation for casts that affect the frontal area of the enemy. Add spell in the Add Trigger field.",
["Temp_OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    envTable.movingAnimation:Stop()\nend\n\n\n",
},
{
["ConstructorCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    --castbar color (when can be interrupted)\n    envTable.CastbarColor = scriptTable.config.castbarColor\n    \n    --flash duration\n    local CONFIG_BACKGROUND_FLASH_DURATION = scriptTable.config.flashDuration\n    \n    --add this value to the cast bar height\n    envTable.CastBarHeightAdd = scriptTable.config.castBarHeight\n    \n    --create a fast flash above the cast bar\n    envTable.FullBarFlash = envTable.FullBarFlash or Plater.CreateFlash (self, 0.05, 1, \"white\")\n    \n    --create a camera shake for the nameplate\n    envTable.FrameShake = Plater:CreateFrameShake (unitFrame, scriptTable.config.shakeDuration, scriptTable.config.shakeAmplitude, scriptTable.config.shakeFrequency, false, false, 0, 1, 0.05, 0.1, Plater.GetPoints (unitFrame))\n    \n    --create a texture to use for a flash behind the cast bar\n    local backGroundFlashTexture = Plater:CreateImage (self, [[Interface\\ACHIEVEMENTFRAME\\UI-Achievement-Alert-Glow]], self:GetWidth()+60, self:GetHeight()+50, \"background\", {0, 400/512, 0, 170/256})\n    backGroundFlashTexture:SetBlendMode (\"ADD\", 7)\n    backGroundFlashTexture:SetDrawLayer(\"OVERLAY\", 7)\n    backGroundFlashTexture:SetPoint (\"center\", self, \"center\")\n    backGroundFlashTexture:Hide()\n    \n    --create the animation hub to hold the flash animation sequence\n    envTable.BackgroundFlash = envTable.BackgroundFlash or Plater:CreateAnimationHub (backGroundFlashTexture, \n        function()\n            backGroundFlashTexture:Show()\n        end,\n        function()\n            backGroundFlashTexture:Hide()\n        end\n    )\n    \n    --create the flash animation sequence\n    envTable.BackgroundFlash.fadeIn = envTable.BackgroundFlash.fadeIn or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 1, CONFIG_BACKGROUND_FLASH_DURATION/2, 0, .75)\n    envTable.BackgroundFlash.fadeIn:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    envTable.BackgroundFlash.fadeOut = envTable.BackgroundFlash.fadeOut or Plater:CreateAnimation (envTable.BackgroundFlash, \"ALPHA\", 2, CONFIG_BACKGROUND_FLASH_DURATION/2, 1, 0)    \n    envTable.BackgroundFlash.fadeOut:SetDuration(CONFIG_BACKGROUND_FLASH_DURATION/2)\n    \n    --envTable.BackgroundFlash:Play() --envTable.BackgroundFlash:Stop()    \n    \n    \n    \n    \n    \nend\n\n\n\n\n",
["OnHideCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    if (not Plater.IsShowingCastBarTest) then\n        --don't execute on battlegrounds and arenas\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end    \n    end\n    \n    unitFrame.castBar:SetHeight (envTable._DefaultHeight)\n    \n    --stop the camera shake\n    unitFrame:StopFrameShake (envTable.FrameShake)\n    \n    envTable.FullBarFlash:Stop()\n    envTable.BackgroundFlash:Stop()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n",
["OptionsValues"] = {
},
["ScriptType"] = 2,
["UpdateCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \nend\n\n\n",
["Time"] = 1741042861,
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\cast_bar_tankbuster.png",
["Enabled"] = false,
["Revision"] = 1285,
["semver"] = "",
["Author"] = "Terciob",
["Initialization"] = "function (scriptTable)\n    --insert code here\n    \nend",
["Desc"] = "Abilities casted on the tank.",
["NpcNames"] = {
},
["SpellIds"] = {
280604,
1215411,
1215065,
331316,
320644,
330586,
323515,
324079,
434773,
432229,
439031,
473351,
459799,
469478,
465666,
466190,
448485,
424414,
448515,
},
["PlaterCore"] = 1,
["Name"] = "Cast - Tankbuster [P]",
["version"] = -1,
["Options"] = {
{
["Type"] = 6,
["Key"] = "option1",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option2",
["Value"] = "Produces a notable effect in the cast bar when a spell from the 'Triggers' starts to cast.",
["Name"] = "Option 2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "Enter the spell name or spellID of the Spell in the Add Trigger box and hit \"Add\".",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Blank Space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "useCastbarColor",
["Value"] = true,
["Name"] = "Cast Bar Color Enabled",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When enabled, changes the cast bar color,",
},
{
["Type"] = 1,
["Key"] = "castbarColor",
["Value"] = {
1,
0.1098039299249649,
0.1137254983186722,
1,
},
["Name"] = "Cast Bar Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color of the cast bar.",
},
{
["Type"] = 6,
["Key"] = "option7",
["Value"] = 0,
["Name"] = "Blank Line",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts it flash rapidly, adjust how fast it flashes. Value is milliseconds.",
["Min"] = 0.05,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Flash Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "flashDuration",
},
{
["Type"] = 2,
["Max"] = 10,
["Desc"] = "Increases the cast bar height by this value",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 0,
["Name"] = "Cast Bar Height Mod",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarHeight",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "When the cast starts, there's a small shake in the nameplate, this settings controls how long it takes.",
["Min"] = 0.1,
["Fraction"] = true,
["Value"] = 0.1,
["Name"] = "Shake Duration",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeDuration",
},
{
["Type"] = 2,
["Max"] = 100,
["Desc"] = "How strong is the shake.",
["Min"] = 2,
["Name"] = "Shake Amplitude",
["Value"] = 2,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeAmplitude",
},
{
["Type"] = 2,
["Max"] = 80,
["Desc"] = "How fast the shake moves.",
["Min"] = 1,
["Name"] = "Shake Frequency",
["Value"] = 10,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "shakeFrequency",
},
},
["OnShowCode"] = "function (self, unitId, unitFrame, envTable, scriptTable)\n    \n    --don't execute on battlegrounds and arenas\n    if (not Plater.IsShowingCastBarTest) then\n        if (Plater.ZoneInstanceType == \"arena\" or Plater.ZoneInstanceType == \"pvp\" or Plater.ZoneInstanceType == \"none\") then\n            return\n        end\n    end\n    \n    --don't execute if the player is not the tank\n    if (not Plater.IsPlayerTank()) then\n        return\n    end\n    \n    --play flash animations\n    envTable.FullBarFlash:Play()\n    \n    --envTable.currentHeight = unitFrame.castBar:GetHeight()\n    \n    --restoring the default size (not required since it already restore in the hide script)\n    if (envTable.OriginalHeight) then\n        self:SetHeight (envTable.OriginalHeight)\n    end\n    \n    --increase the cast bar size\n    local height = self:GetHeight()\n    envTable.OriginalHeight = height\n    \n    self:SetHeight (height + envTable.CastBarHeightAdd)\n    \n    Plater.SetCastBarBorderColor (self, 1, .2, .2, 0.4)\n    \n    unitFrame:PlayFrameShake (envTable.FrameShake)\n    \n    --set the color of the cast bar to dark orange (only if can be interrupted)\n    --Plater auto set this color to default when a new cast starts, no need to reset this value at OnHide.    \n    if (envTable._CanInterrupt) then\n        if (scriptTable.config.useCastbarColor) then\n            self:SetStatusBarColor (Plater:ParseColors (envTable.CastbarColor))\n        end\n    end\n    \n    Plater.SetCastBarColorForScript(self, scriptTable.config.useCastbarColor, scriptTable.config.castbarColor, envTable)\n    \n    envTable.BackgroundFlash:Play()\n    \n    unitFrame.castBar.Spark:SetHeight(unitFrame.castBar:GetHeight())\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
},
["blizzard_nameplate_large_font"] = "Quazii",
["saved_cvars_last_change"] = {
["nameplateShowOnlyNames"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateOverlapV"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["ShowNamePlateLoseAggroFlash"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowEnemyMinus"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["NamePlateClassificationScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriendlyTotems"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplatePersonalHideDelaySeconds"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriendlyPets"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplatePersonalShowInCombat"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplatePersonalShowWithTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMinAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateResourceOnTarget"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowAll"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriendlyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelfScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateTargetBehindMaxDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["SoftTargetInteract"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowEnemies"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["NamePlateVerticalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelectedAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowSelf"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelfTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMotionSpeed"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateGlobalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowEnemyMinions"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriendlyNPCs"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelectedScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMinAlphaDistance"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMotion"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateMinScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["ShowClassColorInNameplate"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateOtherTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriends"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelfBottomInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateTargetRadialPosition"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateShowFriendlyGuardians"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateSelfAlpha"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateLargeTopInset"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["NamePlateHorizontalScale"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplateOccludedAlphaMult"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
["nameplatePersonalShowAlways"] = "Interface/AddOns/Plater/Plater_OptionsPanel.lua:1078",
},
["url"] = "https://wago.io/kvgdjO6_L/3",
["hover_highlight_alpha"] = 0.29999998211861,
["cast_statusbar_fadein_time"] = 0.02081192471087,
["indicator_raidmark_scale"] = 0.5,
["cast_statusbar_spark_alpha"] = 0.7199999690055847,
["aura2_y_offset"] = 0,
["extra_icon_caster_size"] = 10,
["buffs_on_aura2"] = true,
["plate_config"] = {
["player"] = {
["actorname_text_font"] = "Accidental Presidency",
["percent_text_font"] = "Quazii",
["spellpercent_text_font"] = "Quazii",
["power_percent_text_color"] = {
1,
1,
1,
},
["big_actortitle_text_font"] = "Accidental Presidency",
["click_through"] = true,
["power_percent_text_enabled"] = false,
["power_percent_text_size"] = 10,
["spellname_text_font"] = "Quazii",
["big_actorname_text_font"] = "Accidental Presidency",
["level_text_font"] = "Accidental Presidency",
["power_percent_text_font"] = "Quazii",
},
["friendlyplayer"] = {
["actorname_use_friends_color"] = false,
["spellpercent_text_font"] = "Quazii",
["actorname_use_class_color"] = true,
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["big_actortitle_text_shadow_color_offset"] = {
1,
-1,
},
["cast_incombat"] = {
120,
1,
},
["big_actorname_text_shadow_color"] = {
0,
0,
0,
1,
},
["spellpercent_text_outline"] = "NONE",
["big_actortitle_text_shadow_color"] = {
0,
0,
0,
1,
},
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["big_actorname_text_outline"] = "OUTLINE",
["big_actorname_text_shadow_color_offset"] = {
1,
-1,
},
["quest_color_enemy"] = {
1,
0.369,
0,
},
["quest_color_neutral"] = {
1,
0.65,
0,
},
["mana_incombat"] = {
nil,
4,
},
["only_thename"] = true,
["big_actorname_text_font"] = "Accidental Presidency",
["actorname_use_guild_color"] = false,
["all_names"] = true,
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_font"] = "Quazii",
["percent_show_health"] = true,
["level_text_alpha"] = 0.2999999821186066,
["big_actortitle_text_outline"] = "OUTLINE",
["spellpercent_text_enabled"] = true,
["actorname_text_spacing"] = 9,
["only_damaged"] = false,
["buff_frame_y_offset"] = 0,
["big_actorname_text_size"] = 10,
["quest_enabled"] = true,
["percent_text_size"] = 10,
["percent_text_font"] = "Quazii",
["percent_text_outline"] = "NONE",
["health_incombat"] = {
120,
14,
},
["health"] = {
120,
14,
},
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["percent_text_enabled"] = true,
["mana"] = {
nil,
4,
},
["level_text_enabled"] = true,
},
["friendlynpc"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
1,
},
["percent_text_ooc"] = true,
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["enabled"] = false,
["level_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["cast_incombat"] = {
nil,
1,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["only_names"] = false,
["quest_color_neutral"] = {
1,
0.65,
0,
},
["big_actorname_text_font"] = "Quazii",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = true,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["quest_color_enemy"] = {
1,
0.369,
0,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["percent_text_outline"] = "NONE",
["spellname_text_font"] = "Quazii",
["power_percent_text_font"] = "Accidental Presidency",
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["health_incombat"] = {
100,
14,
},
["health"] = {
100,
14,
},
["percent_text_enabled"] = true,
["actorname_text_anchor"] = {
["y"] = -3,
["x"] = -1,
["side"] = 1,
},
["spellpercent_text_enabled"] = true,
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = true,
},
["global_health_height"] = 14,
["global_health_width"] = 120,
["enemyplayer"] = {
["big_actorname_text_size"] = 10,
["spellpercent_text_font"] = "Quazii",
["big_actortitle_text_font"] = "Accidental Presidency",
["cast"] = {
120,
8,
},
["big_actortitle_text_size"] = 10,
["spellpercent_text_anchor"] = {
["side"] = 5,
["x"] = 1,
},
["percent_text_show_decimals"] = false,
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_outline"] = "NONE",
["percent_text_anchor"] = {
["y"] = 4.649993896484375,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["quest_color_neutral"] = {
1,
0.65,
0,
1,
},
["mana_incombat"] = {
120,
1,
},
["power_percent_text_font"] = "Accidental Presidency",
["quest_color_enemy"] = {
1,
0.369,
0,
1,
},
["all_names"] = true,
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["spellname_text_anchor"] = {
["y"] = 1,
["side"] = 3,
},
["spellname_text_font"] = "Quazii",
["actorname_text_outline"] = "OUTLINE",
["level_text_alpha"] = 0.2999999821186066,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["big_actorname_text_font"] = "Accidental Presidency",
["percent_show_percent"] = false,
["quest_color_enabled"] = true,
["quest_enabled"] = true,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["actorname_text_size"] = 10,
["actorname_text_anchor"] = {
["y"] = -0.4000015258789063,
["x"] = -1,
["side"] = 1,
},
["percent_show_health"] = false,
["mana"] = {
120,
1,
},
["level_text_enabled"] = false,
},
["enemynpc"] = {
["spellpercent_text_font"] = "Quazii",
["level_text_size"] = 10,
["big_actortitle_text_font"] = "Quazii",
["cast"] = {
120,
8,
},
["spellpercent_text_size"] = 10,
["percent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellpercent_text_anchor"] = {
["y"] = -0.8000030517578125,
["x"] = 3.899993896484375,
["side"] = 5,
},
["level_text_anchor"] = {
["y"] = 100,
["x"] = 1,
["side"] = 5,
},
["cast_incombat"] = {
nil,
8,
},
["actorname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["spellname_text_anchor"] = {
["y"] = 0.09999847412109375,
["x"] = -0.8000030517578125,
["side"] = 3,
},
["percent_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 0.5999984741210938,
["side"] = 5,
},
["level_text_font"] = "Quazii",
["actorname_text_font"] = "Quazii",
["actorname_text_size"] = 10,
["power_percent_text_font"] = "Accidental Presidency",
["actorname_text_outline"] = "OUTLINE",
["percent_show_health"] = false,
["percent_text_size"] = 10,
["actorname_text_spacing"] = 9,
["percent_text_font"] = "Quazii",
["spellname_text_font"] = "Quazii",
["percent_text_show_decimals"] = false,
["spellname_text_color"] = {
0.95294117647059,
[3] = 0.9921568627451,
},
["spellname_text_size"] = 10,
["spellname_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["health_incombat"] = {
nil,
14,
},
["health"] = {
120,
14,
},
["big_actorname_text_font"] = "Quazii",
["actorname_text_anchor"] = {
["y"] = 12.29999542236328,
["x"] = 1.599998474121094,
["side"] = 3,
},
["spellpercent_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["level_text_alpha"] = 0.2999999821186066,
["level_text_enabled"] = false,
},
},
["health_selection_overlay"] = "Quazii",
["aura_y_offset"] = 2,
["use_ui_parent"] = true,
["expansion_triggerwipe"] = {
[9] = true,
[10] = true,
},
["cast_statusbar_color_nointerrupt"] = {
0.49411764705882,
0.49803921568628,
0.50196078431373,
0.96000000089407,
},
["bossmod_aura_width"] = 32,
["bossmod_support_bars_enabled"] = false,
["border_thickness"] = 1.5,
["aura_show_tooltip"] = true,
["resources_settings"] = {
["chr"] = {
["Player-3725-0C1533F1"] = "ComboPoints",
["Player-5764-000264AF"] = "ComboPoints",
["Player-3725-0C1632F3"] = "HolyPower",
["Player-4609-0014BD91"] = "SoulShards",
["Player-4609-0014B9A9"] = "ArcaneCharges",
["Player-5764-000166DE"] = "HolyPower",
["Player-3725-0C16E871"] = "HolyPower",
["Player-3725-0AA8E1EF"] = "Runes",
["Player-4184-00C4D942"] = "SoulShards",
["Player-4184-00949207"] = "HolyPower",
["Player-5764-0002671B"] = "HolyPower",
["Player-3725-0A9FE377"] = "Chi",
["Player-11-0E532B0D"] = "Chi",
["Player-11-0E93F38F"] = "HolyPower",
["Player-5765-003F0A0E"] = "Chi",
["Player-4184-009493C8"] = "Runes",
["Player-11-0E532B17"] = "ComboPoints",
["Player-4184-00C5DED9"] = "ComboPoints",
["Player-4184-003D46E0"] = "Chi",
["Player-4184-00948CDA"] = "Chi",
["Player-5765-003F0A27"] = "Runes",
["Player-4609-0014C179"] = "HolyPower",
["Player-3725-0C194479"] = "Essence",
["Player-11-0E532B60"] = "Runes",
["Player-5764-000944AE"] = "Chi",
["Player-5765-003F0A23"] = "ComboPoints",
["Player-3296-009336A2"] = "HolyPower",
["Player-4609-0014B1DA"] = "ComboPoints",
["Player-11-0E532B15"] = "HolyPower",
["Player-5765-003F0A3C"] = "HolyPower",
["Player-4184-00949549"] = "ComboPoints",
["Player-4609-0014B1D9"] = "Essence",
["Player-3685-07180DDD"] = "Chi",
},
},
["health_animation_time_dilatation"] = 2.869999885559082,
["npc_cache"] = {
[134139] = {
"Shrine Templar",
"Shrine of the Storm",
},
[196798] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
},
[216619] = {
"Orator Krix'vizk",
"City of Threads",
"enUS",
},
[231197] = {
"Bubbles",
"Operation: Floodgate",
"enUS",
},
[231325] = {
"Darkfuse Jumpstarter",
"Operation: Floodgate",
"enUS",
},
[196671] = {
"Arcane Ravager",
"Algeth'ar Academy",
"enUS",
},
[211121] = {
"Rank Overseer",
"Darkflame Cleft",
},
[216364] = {
"Blood Overseer",
"Ara-Kara, City of Echoes",
"enUS",
},
[195265] = {
"Stormcaller Arynga",
"The Nokhud Offensive",
"enUS",
},
[173655] = {
"Mistveil Matriarch",
"Mists of Tirna Scithe",
"enUS",
},
[173016] = {
"Corpse Collector",
"The Necrotic Wake",
"enUS",
},
[201788] = {
"Dazhak",
"Dawn of the Infinite",
"enUS",
},
[229537] = {
"Void Emissary",
"The Stonevault",
"enUS",
},
[231839] = {
"Scrapmaster",
"Liberation of Undermine",
"enUS",
},
[120651] = {
"Explosives",
"Court of Stars",
},
[212786] = {
"Cursed Stormrider",
"The Rookery",
"enUS",
},
[213937] = {
"Rasha'nan",
"The Dawnbreaker",
"enUS",
},
[197697] = {
"Flamegullet",
"Ruby Life Pools",
"enUS",
},
[40633] = {
"Naz'jar Honor Guard",
"Throne of the Tides",
"enUS",
},
[135167] = {
"Spectral Berserker",
"Kings' Rest",
},
[81522] = {
"Witherbark",
"The Everbloom",
"enUS",
},
[131587] = {
"Bewitched Captain",
"Waycrest Manor",
},
[126918] = {
"Irontide Crackshot",
"Freehold",
},
[196548] = {
"Ancient Branch",
"Algeth'ar Academy",
"enUS",
},
[135552] = {
"Deathtouched Slaver",
"Waycrest Manor",
"enUS",
},
[218671] = {
"Venture Co. Pyromaniac",
"Cinderbrew Meadery",
"enUS",
},
[231075] = {
"Chrome King Gallywix",
"Liberation of Undermine",
"enUS",
},
[186191] = {
"Decay Speaker",
"Brackenhide Hollow",
"enUS",
},
[206140] = {
"Coalesced Time",
"Dawn of the Infinite",
"enUS",
},
[208698] = {
"Infinite Riftmage",
"Dawn of the Infinite",
"enUS",
},
[221102] = {
"Elder Shadeweaver",
"City of Threads",
"enUS",
},
[127111] = {
"Irontide Oarsman",
"Freehold",
},
[168418] = {
"Forsworn Inquisitor",
"Spires of Ascension",
},
[213942] = {
"Sludge",
"Throne of the Tides",
"enUS",
},
[199748] = {
"Timeline Marauder",
"Dawn of the Infinite",
"enUS",
},
[165222] = {
"Zolramus Bonemender",
"The Necrotic Wake",
"enUS",
},
[199749] = {
"Timestream Anomaly",
"Dawn of the Infinite",
"enUS",
},
[168420] = {
"Forsworn Champion",
"Spires of Ascension",
},
[212793] = {
"Void Ascendant",
"The Rookery",
"enUS",
},
[134150] = {
"Runecarver Sorn",
"Shrine of the Storm",
},
[187602] = {
"Qalashi Scaleripper",
"10.0 Dragon Isles",
},
[184022] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[128967] = {
"Ashvane Sniper",
"Siege of Boralus",
"enUS",
},
[210109] = {
"Earth Infused Golem",
"The Stonevault",
"enUS",
},
[212411] = {
"Torchsnarl",
"Darkflame Cleft",
"enUS",
},
[199368] = {
"Hardened Crystal",
"The Azure Vault",
"enUS",
},
[134024] = {
"Devouring Maggot",
"Waycrest Manor",
"enUS",
},
[212412] = {
"Sootsnout",
"Darkflame Cleft",
"enUS",
},
[83892] = {
"Life Warden Gola",
"The Everbloom",
},
[98406] = {
"Embershard Scorpion",
"Neltharion's Lair",
},
[137478] = {
"Queen Wasi",
"Kings' Rest",
},
[208193] = {
"Paladin of the Silver Hand",
"Dawn of the Infinite",
"enUS",
},
[196045] = {
"Corrupted Manafiend",
"Algeth'ar Academy",
"enUS",
},
[135049] = {
"Dreadwing Raven",
"Waycrest Manor",
"enUS",
},
[211263] = {
"Deathscreamer Iken'tak",
"The Dawnbreaker",
"enUS",
},
[164461] = {
"Sathel the Accursed",
"Theater of Pain",
"enUS",
},
[83893] = {
"Earthshaper Telu",
"The Everbloom",
},
[128969] = {
"Ashvane Commander",
"Siege of Boralus",
"enUS",
},
[99366] = {
"Taintheart Summoner",
"Darkheart Thicket",
"enUS",
},
[220599] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[150396] = {
"Aerial Unit R-21/X",
"Operation: Mechagon",
"enUS",
},
[207940] = {
"Prioress Murrpray",
"Priory of the Sacred Flame",
"enUS",
},
[223541] = {
"Stolen Loader",
"Mycomancer Cavern",
"enUS",
},
[217531] = {
"Ixin",
"Ara-Kara, City of Echoes",
"enUS",
},
[167532] = {
"Heavin the Breaker",
"Theater of Pain",
"enUS",
},
[98280] = {
"Risen Arcanist",
"Black Rook Hold",
"enUS",
},
[225204] = {
"Zekvir",
"Zekvir's Lair",
"enUS",
},
[205384] = {
"Infinite Chronoweaver",
"Dawn of the Infinite",
"enUS",
},
[212673] = {
"Naz'jar Ravager",
"Throne of the Tides",
"enUS",
},
[133007] = {
"Unbound Abomination",
"The Underrot",
},
[134158] = {
"Shadow-Borne Champion",
"Kings' Rest",
},
[128651] = {
"Hadal Darkfathom",
"Siege of Boralus",
"enUS",
},
[217533] = {
"Atik",
"Ara-Kara, City of Echoes",
"enUS",
},
[220730] = {
"Royal Venomshell",
"City of Threads",
"enUS",
},
[165872] = {
"Flesh Crafter",
"The Necrotic Wake",
"enUS",
},
[214209] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[129227] = {
"Azerokk",
"The MOTHERLODE!!",
"enUS",
},
[131858] = {
"Thornguard",
"Waycrest Manor",
},
[129547] = {
"Blacktooth Knuckleduster",
"Freehold",
},
[45912] = {
"Wild Vortex",
"The Vortex Pinnacle",
},
[127757] = {
"Reanimated Honor Guard",
"Atal'Dazar",
},
[208456] = {
"Shuffling Horror",
"Darkflame Cleft",
"enUS",
},
[189531] = {
"Decayed Elder",
"Brackenhide Hollow",
"enUS",
},
[137486] = {
"Queen Patlaa",
"Kings' Rest",
},
[219454] = {
"Crazed Abomination",
"The Underkeep",
"enUS",
},
[137103] = {
"Blood Visage",
"The Underrot",
},
[207946] = {
"Captain Dailcry",
"Priory of the Sacred Flame",
"enUS",
},
[162039] = {
"Wicked Oppressor",
"Sanguine Depths",
},
[75713] = {
"Shadowmoon Bone-Mender",
"Shadowmoon Burial Grounds",
},
[138255] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[162040] = {
"Grand Overseer",
"Sanguine Depths",
},
[195927] = {
"Soulharvester Galtmaa",
"The Nokhud Offensive",
"enUS",
},
[181861] = {
"Magmatusk",
"Neltharus",
"enUS",
},
[195928] = {
"Soulharvester Duuren",
"The Nokhud Offensive",
"enUS",
},
[97197] = {
"Valarjar Purifier",
"Halls of Valor",
},
[126928] = {
"Irontide Corsair",
"Freehold",
},
[203857] = {
"Horde Warlock",
"Dawn of the Infinite",
"enUS",
},
[195929] = {
"Soulharvester Tumen",
"The Nokhud Offensive",
"enUS",
},
[221760] = {
"Risen Mage",
"Priory of the Sacred Flame",
"enUS",
},
[131864] = {
"Gorak Tul",
"Waycrest Manor",
"enUS",
},
[231223] = {
"Disturbed Kelp",
"Operation: Floodgate",
"enUS",
},
[186339] = {
"Teera",
"The Nokhud Offensive",
"enUS",
},
[223423] = {
"Careless Hopgoblin",
"Cinderbrew Meadery",
"enUS",
},
[195930] = {
"Soulharvester Mandakh",
"The Nokhud Offensive",
"enUS",
},
[104295] = {
"Blazing Imp",
"Court of Stars",
},
[193373] = {
"Nokhud Thunderfist",
"The Nokhud Offensive",
"enUS",
},
[184422] = {
"Emberon",
"Uldaman: Legacy of Tyr",
"enUS",
},
[228539] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[209230] = {
"Kyrioss",
"The Rookery",
"enUS",
},
[133912] = {
"Bloodsworn Defiler",
"The Underrot",
},
[136214] = {
"Windspeaker Heldis",
"Shrine of the Storm",
},
[136470] = {
"Refreshment Vendor",
"The MOTHERLODE!!",
"enUS",
},
[216648] = {
"Nx",
"City of Threads",
"enUS",
},
[216649] = {
"Vx",
"City of Threads",
"enUS",
},
[173044] = {
"Stitching Assistant",
"The Necrotic Wake",
"enUS",
},
[40320] = {
"Valiona",
"Grim Batol",
"enUS",
},
[214348] = {
"Undersea Abomination",
"Tak-Rethan Abyss",
"enUS",
},
[90998] = {
"Blightshard Shaper",
"Neltharion's Lair",
},
[224962] = {
"Cursedforge Mender",
"The Stonevault",
"enUS",
},
[168058] = {
"Infused Quill-feather",
"Sanguine Depths",
},
[105704] = {
"Arcane Manifestation",
"Court of Stars",
},
[127315] = {
"Reanimation Totem",
"Atal'Dazar",
},
[132126] = {
"Gilded Priestess",
"Atal'Dazar",
},
[174197] = {
"Battlefield Ritualist",
"Theater of Pain",
"enUS",
},
[214350] = {
"Turned Speaker",
"The Stonevault",
"enUS",
},
[168443] = {
"Zolramus Necromancer",
"The Necrotic Wake",
},
[84989] = {
"Infested Icecaller",
"The Everbloom",
},
[196576] = {
"Spellbound Scepter",
"Algeth'ar Academy",
"enUS",
},
[170490] = {
"Atal'ai High Priest",
"De Other Side",
},
[168572] = {
"Fungi Stormer",
"Plaguefall",
},
[134174] = {
"Shadow-Borne Witch Doctor",
"Kings' Rest",
},
[225605] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[91000] = {
"Vileshard Hulk",
"Neltharion's Lair",
},
[186220] = {
"Brackenhide Shaper",
"Brackenhide Hollow",
"enUS",
},
[81985] = {
"Everbloom Cultivator",
"The Everbloom",
},
[122969] = {
"Zanchuli Witch-Doctor",
"Atal'Dazar",
},
[100527] = {
"Dreadfire Imp",
"Darkheart Thicket",
"enUS",
},
[191847] = {
"Nokhud Plainstomper",
"The Nokhud Offensive",
"enUS",
},
[163459] = {
"Forsworn Mender",
"Spires of Ascension",
},
[162309] = {
"Kul'tharok",
"Theater of Pain",
"enUS",
},
[104300] = {
"Shadow Mistress",
"Court of Stars",
},
[233152] = {
"Wandering Candle",
"Darkflame Cleft",
},
[131492] = {
"Devout Blood Priest",
"The Underrot",
},
[76104] = {
"Monstrous Corpse Spider",
"Shadowmoon Burial Grounds",
},
[135329] = {
"Matron Bryndle",
"Waycrest Manor",
},
[210264] = {
"Bee Wrangler",
"Cinderbrew Meadery",
"enUS",
},
[219983] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[122971] = {
"Dazar'ai Juggernaut",
"Atal'Dazar",
},
[123227] = {
"Keystone Vendor",
"Kalimdor",
},
[219984] = {
"Xeph'itik",
"City of Threads",
"enUS",
},
[228424] = {
"Darkfuse Mechadrone",
"Operation: Floodgate",
"enUS",
},
[162057] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[211289] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[207453] = {
"Fungal Rotspreader",
"Mycomancer Cavern",
"enUS",
},
[186226] = {
"Fetid Rotsinger",
"Brackenhide Hollow",
"enUS",
},
[135204] = {
"Spectral Hex Priest",
"Kings' Rest",
},
[122972] = {
"Dazar'ai Augur",
"Atal'Dazar",
},
[207198] = {
"Cursed Thunderer",
"The Rookery",
"enUS",
},
[129366] = {
"Bilge Rat Buccaneer",
"Siege of Boralus",
"enUS",
},
[170882] = {
"Bone Magus",
"Theater of Pain",
"enUS",
},
[139425] = {
"Crazed Incubator",
"Temple of Sethraliss",
},
[218324] = {
"Nakt",
"Ara-Kara, City of Echoes",
"enUS",
},
[207199] = {
"Cursed Rooktender",
"The Rookery",
"enUS",
},
[196202] = {
"Spectral Invoker",
"Algeth'ar Academy",
"enUS",
},
[212826] = {
"Guard Captain Suleyman",
"Priory of the Sacred Flame",
"enUS",
},
[122973] = {
"Dazar'ai Confessor",
"Atal'Dazar",
},
[100531] = {
"Bloodtainted Fury",
"Darkheart Thicket",
"enUS",
},
[213338] = {
"Forgebound Mender",
"The Stonevault",
"enUS",
},
[207456] = {
"Fungal Speartender",
"Mycomancer Cavern",
"enUS",
},
[186229] = {
"Wilted Oak",
"Brackenhide Hollow",
"enUS",
},
[129559] = {
"Cutwater Duelist",
"Freehold",
},
[186741] = {
"Arcane Elemental",
"The Azure Vault",
"enUS",
},
[175616] = {
"Zo'phex",
"Tazavesh, the Veiled Market",
"enUS",
},
[129879] = {
"Irontide Cleaver",
"Siege of Boralus",
"enUS",
},
[174210] = {
"Blighted Sludge-Spewer",
"Theater of Pain",
"enUS",
},
[100532] = {
"Bloodtainted Burster",
"Darkheart Thicket",
"enUS",
},
[210271] = {
"Brew Master Aldryr",
"Cinderbrew Meadery",
"enUS",
},
[179837] = {
"Tracker Zo'korss",
"Tazavesh, the Veiled Market",
"enUS",
},
[229069] = {
"Mechadrone Sniper",
"Operation: Floodgate",
"enUS",
},
[137511] = {
"Bilge Rat Cutthroat",
"Siege of Boralus",
"enUS",
},
[91006] = {
"Rockback Gnasher",
"Neltharion's Lair",
},
[40484] = {
"Erudax",
"Grim Batol",
"enUS",
},
[205158] = {
"Spurlok, Timesworn Sentinel",
"Dawn of the Infinite",
"enUS",
},
[145185] = {
"Gnomercy 4.U.",
"Operation: Mechagon",
"enUS",
},
[195696] = {
"Primalist Thunderbeast",
"The Nokhud Offensive",
"enUS",
},
[207205] = {
"Stormguard Gorren",
"The Rookery",
"enUS",
},
[171656] = {
"Venomous Sniper Captain",
"Plaguefall",
},
[138281] = {
"Faceless Corruptor",
"The Underrot",
},
[213216] = {
"Speaker Dorlita",
"The Stonevault",
"enUS",
},
[187897] = {
"Defier Draghar",
"Ruby Life Pools",
"enUS",
},
[129370] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[213217] = {
"Speaker Brokk",
"The Stonevault",
"enUS",
},
[207207] = {
"Voidstone Monstrosity",
"The Rookery",
"enUS",
},
[179842] = {
"Commerce Enforcer",
"Tazavesh, the Veiled Market",
"enUS",
},
[206696] = {
"Arathi Knight",
"Priory of the Sacred Flame",
"enUS",
},
[165137] = {
"Zolramus Gatekeeper",
"The Necrotic Wake",
"enUS",
},
[206697] = {
"Devout Priest",
"Priory of the Sacred Flame",
"enUS",
},
[184319] = {
"Refti Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[191736] = {
"Crawth",
"Algeth'ar Academy",
"enUS",
},
[130011] = {
"Irontide Buccaneer",
"Freehold",
},
[105715] = {
"Watchful Inquisitor",
"Court of Stars",
},
[212453] = {
"Ghastly Voidsoul",
"The Stonevault",
"enUS",
},
[144296] = {
"Spider Tank",
"Operation: Mechagon",
"enUS",
},
[179334] = {
"Portalmancer Zo'honn",
"Tazavesh, the Veiled Market",
"enUS",
},
[132532] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[164501] = {
"Mistcaller",
"Mists of Tirna Scithe",
"enUS",
},
[231380] = {
"Undercrawler",
"Operation: Floodgate",
"enUS",
},
[191739] = {
"Scalebane Lieutenant",
"The Azure Vault",
"enUS",
},
[224731] = {
"Web Marauder",
"City of Threads",
"enUS",
},
[168594] = {
"Chamber Sentinel",
"Sanguine Depths",
},
[144298] = {
"Defense Bot Mk III",
"Operation: Mechagon",
"enUS",
},
[137521] = {
"Irontide Powdershot",
"Siege of Boralus",
"enUS",
},
[162329] = {
"Xav the Unfallen",
"Theater of Pain",
"enUS",
},
[190206] = {
"Primalist Flamedancer",
"Ruby Life Pools",
"enUS",
},
[167956] = {
"Dark Acolyte",
"Sanguine Depths",
},
[184580] = {
"Olaf",
"Uldaman: Legacy of Tyr",
"enUS",
},
[129374] = {
"Scrimshaw Enforcer",
"Siege of Boralus",
"enUS",
},
[190207] = {
"Primalist Cinderweaver",
"Ruby Life Pools",
"enUS",
},
[169875] = {
"Shackled Soul",
"Theater of Pain",
"enUS",
},
[226396] = {
"Swampface",
"Operation: Floodgate",
"enUS",
},
[184581] = {
"Baelog",
"Uldaman: Legacy of Tyr",
"enUS",
},
[104247] = {
"Duskwatch Arcanist",
"Court of Stars",
},
[130909] = {
"Fetid Maggot",
"Zandalar",
},
[186116] = {
"Gutshot",
"Brackenhide Hollow",
"enUS",
},
[220003] = {
"Eye of the Queen",
"City of Threads",
"enUS",
},
[206065] = {
"Interval",
"Dawn of the Infinite",
"enUS",
},
[164506] = {
"Ancient Captain",
"Theater of Pain",
"enUS",
},
[214761] = {
"Nightfall Ritualist",
"The Dawnbreaker",
"enUS",
},
[206705] = {
"Arathi Footman",
"Priory of the Sacred Flame",
"enUS",
},
[231385] = {
"Darkfuse Inspector",
"Operation: Floodgate",
"enUS",
},
[45922] = {
"Empyrean Assassin",
"The Vortex Pinnacle",
"enUS",
},
[206066] = {
"Timestream Leech",
"Dawn of the Infinite",
"enUS",
},
[40935] = {
"Gilgoblin Hunter",
"Throne of the Tides",
"enUS",
},
[214762] = {
"Nightfall Commander",
"The Dawnbreaker",
"enUS",
},
[186246] = {
"Fleshripper Vulture",
"Brackenhide Hollow",
"enUS",
},
[177807] = {
"Customs Security",
"Tazavesh, the Veiled Market",
"enUS",
},
[92612] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[166299] = {
"Mistveil Tender",
"Mists of Tirna Scithe",
"enUS",
},
[177808] = {
"Armored Overseer",
"Tazavesh, the Veiled Market",
"enUS",
},
[186120] = {
"Treemouth",
"Brackenhide Hollow",
"enUS",
},
[190340] = {
"Refti Defender",
"Halls of Infusion",
"enUS",
},
[136249] = {
"Guardian Elemental",
"Shrine of the Storm",
},
[204918] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[223844] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[171799] = {
"Depths Warden",
"Sanguine Depths",
},
[167963] = {
"Headless Client",
"De Other Side",
},
[226402] = {
"Bront",
"Operation: Floodgate",
"enUS",
},
[215405] = {
"Anub'zekt",
"Ara-Kara, City of Echoes",
"enUS",
},
[206710] = {
"Lightspawn",
"Priory of the Sacred Flame",
"enUS",
},
[101437] = {
"Burning Geode",
"Neltharion's Lair",
},
[122984] = {
"Dazar'ai Colossus",
"Atal'Dazar",
},
[41096] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[166302] = {
"Corpse Harvester",
"The Necrotic Wake",
"enUS",
},
[167965] = {
"Lubricator",
"De Other Side",
},
[226404] = {
"Geezle Gigazap",
"Operation: Floodgate",
"enUS",
},
[195842] = {
"Ukhel Corruptor",
"The Nokhud Offensive",
"enUS",
},
[173720] = {
"Mistveil Gorgegullet",
"Mists of Tirna Scithe",
"enUS",
},
[163618] = {
"Zolramus Necromancer",
"The Necrotic Wake",
"enUS",
},
[194181] = {
"Vexamus",
"Algeth'ar Academy",
"enUS",
},
[186125] = {
"Tricktotem",
"Brackenhide Hollow",
"enUS",
},
[190345] = {
"Primalist Geomancer",
"Halls of Infusion",
"enUS",
},
[167967] = {
"Sentient Oil",
"De Other Side",
},
[137405] = {
"Gripping Terror",
"Siege of Boralus",
"enUS",
},
[206074] = {
"Pendule",
"Dawn of the Infinite",
"enUS",
},
[205691] = {
"Iridikron's Creation",
"Dawn of the Infinite",
"enUS",
},
[220141] = {
"Royal Jelly Purveyor",
"Cinderbrew Meadery",
"enUS",
},
[239834] = {
"Taener Duelmal",
"Priory of the Sacred Flame",
"enUS",
},
[163621] = {
"Goregrind",
"The Necrotic Wake",
"enUS",
},
[168992] = {
"Risen Cultist",
"De Other Side",
},
[134338] = {
"Tidesage Enforcer",
"Shrine of the Storm",
},
[45477] = {
"Gust Soldier",
"The Vortex Pinnacle",
},
[196102] = {
"Conjured Lasher",
"The Azure Vault",
"enUS",
},
[177816] = {
"Interrogation Specialist",
"Tazavesh, the Veiled Market",
"enUS",
},
[98243] = {
"Soul-Torn Champion",
"Black Rook Hold",
"enUS",
},
[190348] = {
"Primalist Ravager",
"Halls of Infusion",
"enUS",
},
[239836] = {
"Sergeant Shaynemail",
"Priory of the Sacred Flame",
"enUS",
},
[98691] = {
"Risen Scout",
"Black Rook Hold",
"enUS",
},
[135235] = {
"Spectral Beastmaster",
"Kings' Rest",
},
[165414] = {
"Depraved Obliterator",
"Halls of Atonement",
},
[151476] = {
"Blastatron X-80",
"Operation: Mechagon",
"enUS",
},
[194315] = {
"Stormcaller Solongo",
"The Nokhud Offensive",
"enUS",
},
[130661] = {
"Venture Co. Earthshaper",
"The MOTHERLODE!!",
"enUS",
},
[214264] = {
"Cursedforge Honor Guard",
"The Stonevault",
"enUS",
},
[168357] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
},
[175646] = {
"P.O.S.T. Master",
"Tazavesh, the Veiled Market",
"enUS",
},
[193293] = {
"Qalashi Warden",
"Neltharus",
"enUS",
},
[210812] = {
"Royal Wicklighter",
"Darkflame Cleft",
"enUS",
},
[163882] = {
"Decaying Flesh Giant",
"Plaguefall",
},
[195851] = {
"Ukhel Deathspeaker",
"The Nokhud Offensive",
"enUS",
},
[134599] = {
"Imbued Stormcaller",
"Temple of Sethraliss",
},
[194317] = {
"Stormcaller Boroo",
"The Nokhud Offensive",
"enUS",
},
[169893] = {
"Nefarious Darkspeaker",
"Theater of Pain",
"enUS",
},
[224240] = {
"Twilight Flamerender",
"Grim Batol",
"enUS",
},
[190609] = {
"Echo of Doragosa",
"Algeth'ar Academy",
"enUS",
},
[134600] = {
"Sandswept Marksman",
"Temple of Sethraliss",
},
[201223] = {
"Infinite Twilight Magus",
"Dawn of the Infinite",
"enUS",
},
[135240] = {
"Soul Essence",
"UNKNOWN",
"enUS",
},
[217208] = {
"Zekvir",
"Mycomancer Cavern",
"enUS",
},
[59545] = {
"The Golden Beetle",
"Temple of the Jade Serpent",
},
[135241] = {
"Bilge Rat Pillager",
"Siege of Boralus",
"enUS",
},
[133835] = {
"Feral Bloodswarmer",
"The Underrot",
},
[222964] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[190484] = {
"Kyrakka",
"Ruby Life Pools",
"enUS",
},
[100485] = {
"Soul-torn Vanguard",
"Black Rook Hold",
"enUS",
},
[195855] = {
"Risen Warrior",
"The Nokhud Offensive",
"enUS",
},
[133836] = {
"Reanimated Guardian",
"The Underrot",
},
[187160] = {
"Crystal Fury",
"The Azure Vault",
"enUS",
},
[213119] = {
"Void Speaker Eirich",
"The Stonevault",
"enUS",
},
[187033] = {
"Stinkbreath",
"Brackenhide Hollow",
"enUS",
},
[210818] = {
"Lowly Moleherd",
"Darkflame Cleft",
"enUS",
},
[192788] = {
"Qalashi Thaumaturge",
"Neltharus",
"enUS",
},
[59546] = {
"The Talking Fish",
"Temple of the Jade Serpent",
},
[102788] = {
"Felspite Dominator",
"Black Rook Hold",
"enUS",
},
[189464] = {
"Qalashi Irontorch",
"Neltharus",
"enUS",
},
[76446] = {
"Shadowmoon Dominator",
"Shadowmoon Burial Grounds",
},
[192789] = {
"Nokhud Longbow",
"The Nokhud Offensive",
"enUS",
},
[134990] = {
"Charged Dust Devil",
"Temple of Sethraliss",
},
[138187] = {
"Grotesque Horror",
"The Underrot",
},
[197905] = {
"Spellbound Scepter",
"Algeth'ar Academy",
},
[131666] = {
"Coven Thornshaper",
"Waycrest Manor",
},
[212739] = {
"Consuming Voidstone",
"The Rookery",
"enUS",
},
[163891] = {
"Rotmarrow Slime",
"Plaguefall",
},
[45928] = {
"Executor of the Caliph",
"The Vortex Pinnacle",
},
[144071] = {
"Irontide Waveshaper",
"Siege of Boralus",
"enUS",
},
[190362] = {
"Dazzling Dragonfly",
"Halls of Infusion",
"enUS",
},
[189467] = {
"Qalashi Bonesplitter",
"Neltharus",
"enUS",
},
[223994] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[213892] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[220158] = {
"Under-Lord Vik'tis",
"The Dread Pit",
"enUS",
},
[163126] = {
"Brittlebone Mage",
"The Necrotic Wake",
"enUS",
},
[193944] = {
"Qalashi Lavamancer",
"Neltharus",
"enUS",
},
[81819] = {
"Everbloom Naturalist",
"The Everbloom",
},
[213893] = {
"Nightfall Darkcaster",
"The Dawnbreaker",
"enUS",
},
[176395] = {
"Overloaded Mailemental",
"Tazavesh, the Veiled Market",
"enUS",
},
[176396] = {
"Defective Sorter",
"Tazavesh, the Veiled Market",
"enUS",
},
[176394] = {
"P.O.S.T. Worker",
"Tazavesh, the Veiled Market",
"enUS",
},
[179821] = {
"Commander Zo'far",
"Tazavesh, the Veiled Market",
"enUS",
},
[131670] = {
"Heartsbane Vinetwister",
"Waycrest Manor",
},
[214661] = {
"Goldie Baronbottom",
"Cinderbrew Meadery",
"enUS",
},
[207969] = {
"Horde Raider",
"Dawn of the Infinite",
"enUS",
},
[179841] = {
"Veteran Sparkcaster",
"Tazavesh, the Veiled Market",
"enUS",
},
[189470] = {
"Lava Flare",
"Neltharus",
"enUS",
},
[129600] = {
"Bilge Rat Brinescale",
"Freehold",
},
[163128] = {
"Zolramus Sorcerer",
"The Necrotic Wake",
"enUS",
},
[176555] = {
"Achillite",
"Tazavesh, the Veiled Market",
"enUS",
},
[213932] = {
"Sureki Militant",
"The Dawnbreaker",
"enUS",
},
[168627] = {
"Plaguebinder",
"Plaguefall",
},
[196200] = {
"Algeth'ar Echoknight",
"Algeth'ar Academy",
"enUS",
},
[40634] = {
"Naz'jar Tempest Witch",
"Throne of the Tides",
"enUS",
},
[209801] = {
"Quartermaster Koratite",
"The Rookery",
"enUS",
},
[230748] = {
"Darkfuse Bloodwarper",
"Operation: Floodgate",
"enUS",
},
[186658] = {
"Stonevault Geomancer",
"Uldaman: Legacy of Tyr",
"enUS",
},
[176556] = {
"Alcruux",
"Tazavesh, the Veiled Market",
"enUS",
},
[206351] = {
"Alliance Conjuror",
"Dawn of the Infinite",
"enUS",
},
[186738] = {
"Umbrelskul",
"The Azure Vault",
"enUS",
},
[89] = {
"Infernal",
"Theater of Pain",
"enUS",
},
[179840] = {
"Market Peacekeeper",
"Tazavesh, the Veiled Market",
"enUS",
},
[164920] = {
"Drust Soulcleaver",
"Mists of Tirna Scithe",
"enUS",
},
[185508] = {
"Claw Fighter",
"Brackenhide Hollow",
"enUS",
},
[216326] = {
"Ascended Neophyte",
"City of Threads",
"enUS",
},
[131545] = {
"Lady Waycrest",
"Waycrest Manor",
"enUS",
},
[205152] = {
"Lerai, Timesworn Maiden",
"Dawn of the Infinite",
"enUS",
},
[135365] = {
"Matron Alma",
"Waycrest Manor",
},
[125977] = {
"Reanimation Totem",
"Atal'Dazar",
},
[190368] = {
"Flamecaller Aymi",
"Halls of Infusion",
"enUS",
},
[164921] = {
"Drust Harvester",
"Mists of Tirna Scithe",
"enUS",
},
[223777] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[229212] = {
"Darkfuse Demolitionist",
"Operation: Floodgate",
"enUS",
},
[165529] = {
"Depraved Collector",
"Halls of Atonement",
},
[165919] = {
"Skeletal Marauder",
"The Necrotic Wake",
"enUS",
},
[153285] = {
"Training Dummy",
"Kalimdor",
},
[134418] = {
"Drowned Depthbringer",
"Shrine of the Storm",
},
[168886] = {
"Virulax Blightweaver",
"Plaguefall",
},
[134232] = {
"Hired Assassin",
"The MOTHERLODE!!",
"enUS",
},
[45930] = {
"Minister of Air",
"The Vortex Pinnacle",
},
[40167] = {
"Twilight Beguiler",
"Grim Batol",
"enUS",
},
[211341] = {
"Manifested Shadow",
"The Dawnbreaker",
"enUS",
},
[192796] = {
"Nokhud Hornsounder",
"The Nokhud Offensive",
"enUS",
},
[40943] = {
"Gilgoblin Aquamage",
"Throne of the Tides",
"enUS",
},
[226398] = {
"Big M.O.M.M.A.",
"Operation: Floodgate",
"enUS",
},
[113998] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[165946] = {
"Mordretha, the Endless Empress",
"Theater of Pain",
"enUS",
},
[214066] = {
"Cursedforge Stoneshaper",
"The Stonevault",
"enUS",
},
[192800] = {
"Nokhud Lancemaster",
"The Nokhud Offensive",
"enUS",
},
[130635] = {
"Stonefury",
"The MOTHERLODE!!",
"enUS",
},
[206698] = {
"Fanatical Mage",
"Priory of the Sacred Flame",
"enUS",
},
[226403] = {
"Keeza Quickfuse",
"Operation: Floodgate",
"enUS",
},
[186151] = {
"Balakar Khan",
"The Nokhud Offensive",
"enUS",
},
[186739] = {
"Azureblade",
"The Azure Vault",
"enUS",
},
[208438] = {
"Infinite Saboteur",
"Dawn of the Infinite",
"enUS",
},
[211087] = {
"Speaker Shadowcrown",
"The Dawnbreaker",
"enUS",
},
[199027] = {
"Magmas",
"Vault of the Incarnates",
"enUS",
},
[189719] = {
"Watcher Irideus",
"Halls of Infusion",
"enUS",
},
[131677] = {
"Heartsbane Runeweaver",
"Waycrest Manor",
},
[224219] = {
"Twilight Earthcaller",
"Grim Batol",
"enUS",
},
[229686] = {
"Venture Co. Surveyor",
"Operation: Floodgate",
"enUS",
},
[98792] = {
"Wyrmtongue Scavenger",
"Black Rook Hold",
"enUS",
},
[135258] = {
"Irontide Curseblade",
"Siege of Boralus",
"enUS",
},
[210539] = {
"Corridor Creeper",
"Darkflame Cleft",
},
[220423] = {
"Retired Lord Vul'azak",
"City of Threads",
"enUS",
},
[134364] = {
"Faithless Tender",
"Temple of Sethraliss",
},
[164414] = {
"Reanimated Mage",
"The Necrotic Wake",
"enUS",
},
[133852] = {
"Living Rot",
"The Underrot",
},
[128434] = {
"Feasting Skyscreamer",
"Atal'Dazar",
},
[190373] = {
"Primalist Galesinger",
"Halls of Infusion",
"enUS",
},
[189478] = {
"Forgemaster Gorek",
"Neltharus",
"enUS",
},
[211089] = {
"Anub'ikkaj",
"The Dawnbreaker",
"enUS",
},
[90997] = {
"Mightstone Breaker",
"Neltharion's Lair",
},
[200137] = {
"Depraved Mistweaver",
"Temple of the Jade Serpent",
},
[194895] = {
"Unstable Squall",
"The Nokhud Offensive",
"enUS",
},
[113537] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[84957] = {
"Putrid Pyromancer",
"The Everbloom",
},
[197535] = {
"High Channeler Ryvati",
"Ruby Life Pools",
"enUS",
},
[213008] = {
"Wriggling Darkspawn",
"Darkflame Cleft",
"enUS",
},
[216293] = {
"Trilling Attendant",
"Ara-Kara, City of Echoes",
"enUS",
},
[129553] = {
"Dinomancer Kish'o",
"Atal'Dazar",
"enUS",
},
[198047] = {
"Tempest Channeler",
"Ruby Life Pools",
"enUS",
},
[196043] = {
"Primalist Infuser",
"Halls of Infusion",
"enUS",
},
[40177] = {
"Forgemaster Throngus",
"Grim Batol",
"enUS",
},
[128435] = {
"Toxic Saurid",
"Atal'Dazar",
},
[190294] = {
"Nokhud Stormcaster",
"The Nokhud Offensive",
"enUS",
},
[91001] = {
"Tarspitter Lurker",
"Neltharion's Lair",
},
[184132] = {
"Earthen Warder",
"Uldaman: Legacy of Tyr",
"enUS",
},
[188067] = {
"Flashfrost Chillweaver",
"Ruby Life Pools",
"enUS",
},
[104278] = {
"Felbound Enforcer",
"Court of Stars",
},
[205337] = {
"Infinite Timebender",
"Dawn of the Infinite",
"enUS",
},
[153292] = {
"Training Dummy",
"Eastern Kingdoms",
},
[205408] = {
"Infinite Timeslicer",
"Dawn of the Infinite",
"enUS",
},
[165824] = {
"Nar'zudah",
"The Necrotic Wake",
"enUS",
},
[164929] = {
"Tirnenn Villager",
"Mists of Tirna Scithe",
"enUS",
},
[43873] = {
"Altairus",
"The Vortex Pinnacle",
},
[192333] = {
"Alpha Eagle",
"Algeth'ar Academy",
"enUS",
},
[184301] = {
"Cavern Seeker",
"Uldaman: Legacy of Tyr",
"enUS",
},
[137484] = {
"King A'akul",
"Kings' Rest",
},
[214673] = {
"Flavor Scientist",
"Cinderbrew Meadery",
"enUS",
},
[135007] = {
"Orb Guardian",
"Temple of Sethraliss",
},
[190377] = {
"Primalist Icecaller",
"Halls of Infusion",
"enUS",
},
[135263] = {
"Ashvane Spotter",
"Siege of Boralus",
"enUS",
},
[166275] = {
"Mistveil Shaper",
"Mists of Tirna Scithe",
"enUS",
},
[195876] = {
"Desecrated Ohuna",
"The Nokhud Offensive",
"enUS",
},
[200126] = {
"Fallen Waterspeaker",
"Temple of the Jade Serpent",
},
[134284] = {
"Fallen Deathspeaker",
"The Underrot",
},
[136186] = {
"Tidesage Spiritualist",
"Shrine of the Storm",
},
[168578] = {
"Fungalmancer",
"Plaguefall",
},
[205723] = {
"Time-Lost Aerobot",
"Dawn of the Infinite",
"enUS",
},
[210966] = {
"Sureki Webmage",
"The Dawnbreaker",
"enUS",
},
[199037] = {
"Primalist Shocktrooper",
"Halls of Infusion",
"enUS",
},
[195877] = {
"Risen Mystic",
"The Nokhud Offensive",
"enUS",
},
[98275] = {
"Risen Archer",
"Black Rook Hold",
"enUS",
},
[98706] = {
"Commander Shemdah'sohn",
"Black Rook Hold",
"enUS",
},
[131812] = {
"Heartsbane Soulcharmer",
"Waycrest Manor",
"enUS",
},
[208747] = {
"The Darkness",
"Darkflame Cleft",
"enUS",
},
[164804] = {
"Droman Oulfarran",
"Mists of Tirna Scithe",
"enUS",
},
[208745] = {
"The Candle King",
"Darkflame Cleft",
"enUS",
},
[195878] = {
"Ukhel Beastcaller",
"The Nokhud Offensive",
"enUS",
},
[216338] = {
"Hulking Bloodguard",
"Ara-Kara, City of Echoes",
"enUS",
},
[204206] = {
"Horde Farseer",
"Dawn of the Infinite",
"enUS",
},
[131685] = {
"Runic Disciple",
"Waycrest Manor",
},
[102287] = {
"Emberhusk Dominator",
"Neltharion's Lair",
},
[130435] = {
"Addled Thug",
"The MOTHERLODE!!",
"enUS",
},
[189901] = {
"Warlord Sargha",
"Neltharus",
"enUS",
},
[144295] = {
"Mechagon Mechanic",
"Operation: Mechagon",
"enUS",
},
[131585] = {
"Enthralled Guard",
"Waycrest Manor",
},
[216339] = {
"Sureki Unnaturaler",
"City of Threads",
"enUS",
},
[214421] = {
"Corrupted Thunderer",
"The Rookery",
"enUS",
},
[208743] = {
"Blazikon",
"Darkflame Cleft",
"enUS",
},
[220815] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[213806] = {
"Splotch",
"Throne of the Tides",
"enUS",
},
[190381] = {
"Rotburst Totem",
"Brackenhide Hollow",
"enUS",
},
[136353] = {
"Colossal Tentacle",
"Shrine of the Storm",
},
[59555] = {
"Haunting Sha",
"Temple of the Jade Serpent",
},
[216340] = {
"Sentry Stagshell",
"Ara-Kara, City of Echoes",
"enUS",
},
[132491] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[104270] = {
"Guardian Construct",
"Court of Stars",
},
[129602] = {
"Irontide Enforcer",
"Freehold",
},
[205727] = {
"Time-Lost Rocketeer",
"Dawn of the Infinite",
"enUS",
},
[167876] = {
"Inquisitor Sigar",
"Halls of Atonement",
},
[199717] = {
"Nokhud Defender",
"The Nokhud Offensive",
"enUS",
},
[138465] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[170690] = {
"Diseased Horror",
"Theater of Pain",
"enUS",
},
[134629] = {
"Scaled Krolusk Rider",
"Temple of Sethraliss",
},
[167493] = {
"Venomous Sniper",
"Plaguefall",
},
[164552] = {
"Rotmarrow Slime",
"Plaguefall",
},
[189232] = {
"Kokia Blazehoof",
"Ruby Life Pools",
"enUS",
},
[163458] = {
"Forsworn Castigator",
"Spires of Ascension",
},
[138338] = {
"Reanimated Guardian",
"The Underrot",
},
[102232] = {
"Rockbound Trapper",
"Neltharion's Lair",
},
[216342] = {
"Skittering Assistant",
"City of Threads",
"enUS",
},
[144293] = {
"Waste Processing Unit",
"Operation: Mechagon",
"enUS",
},
[139949] = {
"Plague Doctor",
"Temple of Sethraliss",
},
[131817] = {
"Cragmaw the Infested",
"The Underrot",
},
[220946] = {
"Venture Co. Honey Harvester",
"Cinderbrew Meadery",
},
[213913] = {
"Kobold Flametender",
"Darkflame Cleft",
"enUS",
},
[186420] = {
"Earthen Weaver",
"Uldaman: Legacy of Tyr",
"enUS",
},
[167111] = {
"Spinemaw Staghorn",
"Mists of Tirna Scithe",
"enUS",
},
[136549] = {
"Ashvane Cannoneer",
"Siege of Boralus",
"enUS",
},
[75459] = {
"Plagued Bat",
"Shadowmoon Burial Grounds",
},
[163503] = {
"Etherdiver",
"Spires of Ascension",
},
[131818] = {
"Marked Sister",
"Waycrest Manor",
},
[231496] = {
"Venture Co. Diver",
"Operation: Floodgate",
"enUS",
},
[220060] = {
"Taste Tester",
"Cinderbrew Meadery",
"enUS",
},
[224249] = {
"Twilight Lavabender",
"Grim Batol",
"enUS",
},
[190342] = {
"Containment Apparatus",
"Halls of Infusion",
"enUS",
},
[210269] = {
"Hired Muscle",
"Cinderbrew Meadery",
"enUS",
},
[95766] = {
"Crazed Razorbeak",
"Darkheart Thicket",
"enUS",
},
[189235] = {
"Overseer Lahar",
"Neltharus",
"enUS",
},
[131819] = {
"Coven Diviner",
"Waycrest Manor",
"enUS",
},
[216856] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[172265] = {
"Remnant of Fury",
"Sanguine Depths",
},
[136295] = {
"Sunken Denizen",
"Shrine of the Storm",
},
[131436] = {
"Chosen Blood Matron",
"The Underrot",
},
[133482] = {
"Crawler Mine",
"The MOTHERLODE!!",
"enUS",
},
[41139] = {
"Naz'jar Oracle",
"Throne of the Tides",
"enUS",
},
[137830] = {
"Pallid Gorger",
"Waycrest Manor",
},
[96664] = {
"Valarjar Runecarver",
"Halls of Valor",
},
[141283] = {
"Kul Tiran Halberd",
"Siege of Boralus",
},
[169927] = {
"Putrid Butcher",
"Theater of Pain",
"enUS",
},
[95769] = {
"Mindshattered Screecher",
"Darkheart Thicket",
"enUS",
},
[185528] = {
"Trickclaw Mystic",
"Brackenhide Hollow",
"enUS",
},
[185656] = {
"Filth Caller",
"Brackenhide Hollow",
"enUS",
},
[190404] = {
"Subterranean Proto-Dragon",
"Halls of Infusion",
},
[176705] = {
"Venza Goldfuse",
"Tazavesh, the Veiled Market",
"enUS",
},
[131821] = {
"Faceless Maiden",
"Waycrest Manor",
"enUS",
},
[141284] = {
"Kul Tiran Wavetender",
"Siege of Boralus",
},
[193457] = {
"Balara",
"The Nokhud Offensive",
"enUS",
},
[134251] = {
"Seneschal M'bara",
"Kings' Rest",
},
[185529] = {
"Bracken Warscourge",
"Brackenhide Hollow",
"enUS",
},
[81820] = {
"Everbloom Mender",
"The Everbloom",
},
[207202] = {
"Void Fragment",
"The Rookery",
"enUS",
},
[207459] = {
"Fungal Rotcaster",
"Mycomancer Cavern",
"enUS",
},
[189266] = {
"Qalashi Trainee",
"Neltharus",
"enUS",
},
[95834] = {
"Valarjar Mystic",
"Halls of Valor",
},
[129529] = {
"Blacktooth Scrapper",
"Freehold",
},
[223253] = {
"Bloodstained Webmage",
"Ara-Kara, City of Echoes",
"enUS",
},
[45935] = {
"Temple Adept",
"The Vortex Pinnacle",
},
[137516] = {
"Ashvane Invader",
"Siege of Boralus",
"enUS",
},
[189265] = {
"Qalashi Bonetender",
"Neltharus",
"enUS",
},
[211228] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[206064] = {
"Coalesced Moment",
"Dawn of the Infinite",
"enUS",
},
[190405] = {
"Infuser Sariya",
"Halls of Infusion",
"enUS",
},
[189340] = {
"Chargath, Bane of Scales",
"Neltharus",
"enUS",
},
[184023] = {
"Vicious Basilisk",
"Uldaman: Legacy of Tyr",
"enUS",
},
[190407] = {
"Aqua Rager",
"Halls of Infusion",
"enUS",
},
[208165] = {
"Alliance Knight",
"Dawn of the Infinite",
"enUS",
},
[135474] = {
"Thistle Acolyte",
"Waycrest Manor",
},
[95842] = {
"Valarjar Thundercaller",
"Halls of Valor",
},
[133870] = {
"Diseased Lasher",
"The Underrot",
},
[184125] = {
"Chrono-Lord Deios",
"Uldaman: Legacy of Tyr",
"enUS",
},
[95771] = {
"Dreadsoul Ruiner",
"Darkheart Thicket",
"enUS",
},
[141285] = {
"Kul Tiran Marksman",
"Siege of Boralus",
},
[220314] = {
"Bogpiper",
"Mycomancer Cavern",
"enUS",
},
[168942] = {
"Death Speaker",
"De Other Side",
},
[75979] = {
"Exhumed Spirit",
"Shadowmoon Burial Grounds",
},
[133432] = {
"Venture Co. Alchemist",
"The MOTHERLODE!!",
"enUS",
},
[133685] = {
"Befouled Spirit",
"The Underrot",
},
[213343] = {
"Forge Loader",
"The Stonevault",
"enUS",
},
[231312] = {
"Venture Co. Electrician",
"Operation: Floodgate",
"enUS",
},
[129208] = {
"Dread Captain Lockwood",
"Siege of Boralus",
"enUS",
},
[135239] = {
"Spectral Witch Doctor",
"Kings' Rest",
},
[98521] = {
"Lord Etheldrin Ravencrest",
"Black Rook Hold",
"enUS",
},
[187155] = {
"Rune Seal Keeper",
"The Azure Vault",
"enUS",
},
[170572] = {
"Atal'ai Hoodoo Hexxer",
"De Other Side",
},
[130404] = {
"Vermin Trapper",
"Freehold",
},
[98813] = {
"Bloodscent Felhound",
"Black Rook Hold",
"enUS",
},
[193462] = {
"Batak",
"The Nokhud Offensive",
"enUS",
},
[215968] = {
"Black Blood",
"Ara-Kara, City of Echoes",
"enUS",
},
[185534] = {
"Bonebolt Hunter",
"Brackenhide Hollow",
"enUS",
},
[139422] = {
"Scaled Krolusk Tamer",
"Temple of Sethraliss",
},
[224271] = {
"Twilight Warlock",
"Grim Batol",
"enUS",
},
[134157] = {
"Shadow-Borne Warrior",
"Kings' Rest",
},
[228540] = {
"Nightfall Shadowmage",
"The Dawnbreaker",
"enUS",
},
[221979] = {
"Void Bound Howler",
"The Stonevault",
"enUS",
},
[59552] = {
"The Crybaby Hozen",
"Temple of the Jade Serpent",
},
[126919] = {
"Irontide Stormcaller",
"Freehold",
},
[134144] = {
"Living Current",
"Shrine of the Storm",
},
[163157] = {
"Amarth",
"The Necrotic Wake",
"enUS",
},
[212389] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[223770] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[134331] = {
"King Rahu'ai",
"Kings' Rest",
},
[144294] = {
"Mechagon Tinkerer",
"Operation: Mechagon",
"enUS",
},
[206704] = {
"Ardent Paladin",
"Priory of the Sacred Flame",
"enUS",
},
[212827] = {
"High Priest Aemya",
"Priory of the Sacred Flame",
"enUS",
},
[165076] = {
"Gluttonous Tick",
"Sanguine Depths",
},
[134514] = {
"Abyssal Cultist",
"Shrine of the Storm",
},
[129788] = {
"Irontide Bonesaw",
"Freehold",
},
[207468] = {
"Gnarled Reviver",
"Mycomancer Cavern",
"enUS",
},
[197698] = {
"Thunderhead",
"Ruby Life Pools",
"enUS",
},
[184130] = {
"Earthen Custodian",
"Uldaman: Legacy of Tyr",
"enUS",
},
[131586] = {
"Banquet Steward",
"Waycrest Manor",
},
[84400] = {
"Flourishing Ancient",
"The Everbloom",
"enUS",
},
[131318] = {
"Elder Leaxa",
"The Underrot",
},
[229252] = {
"Darkfuse Hyena",
"Operation: Floodgate",
"enUS",
},
[98370] = {
"Ghostly Councilor",
"Black Rook Hold",
"enUS",
},
[223772] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[191164] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[212775] = {
"Faceless Seer",
"Throne of the Tides",
"enUS",
},
[229251] = {
"Venture Co. Architect",
"Operation: Floodgate",
"enUS",
},
[194316] = {
"Stormcaller Zarii",
"The Nokhud Offensive",
"enUS",
},
[168318] = {
"Forsworn Goliath",
"Spires of Ascension",
},
[196577] = {
"Spellbound Battleaxe",
"Algeth'ar Academy",
"enUS",
},
[84990] = {
"Addled Arcanomancer",
"The Everbloom",
},
[223773] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[164567] = {
"Ingra Maloch",
"Mists of Tirna Scithe",
"enUS",
},
[189247] = {
"Tamed Phoenix",
"Neltharus",
"enUS",
},
[128455] = {
"T'lonja",
"Atal'Dazar",
"enUS",
},
[144303] = {
"G.U.A.R.D.",
"Operation: Mechagon",
"enUS",
},
[137517] = {
"Ashvane Destroyer",
"Siege of Boralus",
"enUS",
},
[129214] = {
"Coin-Operated Crowd Pummeler",
"The MOTHERLODE!!",
"enUS",
},
[214439] = {
"Corrupted Oracle",
"The Rookery",
"enUS",
},
[187969] = {
"Flashfrost Earthshaper",
"Ruby Life Pools",
"enUS",
},
[213934] = {
"Nightfall Tactician",
"The Dawnbreaker",
"enUS",
},
[194894] = {
"Primalist Stormspeaker",
"The Nokhud Offensive",
"enUS",
},
[83846] = {
"Yalnu",
"The Everbloom",
"enUS",
},
[171772] = {
"Mistveil Defender",
"Mists of Tirna Scithe",
"enUS",
},
[47238] = {
"Whipping Wind",
"The Vortex Pinnacle",
},
[163086] = {
"Rancid Gasbag",
"Theater of Pain",
"enUS",
},
[160495] = {
"Maniacal Soulbinder",
"Theater of Pain",
"enUS",
},
[223775] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[101991] = {
"Nightmare Dweller",
"Darkheart Thicket",
"enUS",
},
[212778] = {
"Minion of Ghur'sha",
"Throne of the Tides",
"enUS",
},
[196044] = {
"Unruly Textbook",
"Algeth'ar Academy",
"enUS",
},
[220195] = {
"Sureki Silkbinder",
"City of Threads",
"enUS",
},
[134701] = {
"Blood Effigy",
"The Underrot",
},
[212403] = {
"Cursedheart Invader",
"The Stonevault",
"enUS",
},
[224732] = {
"Covert Webmancer",
"City of Threads",
"enUS",
},
[223776] = {
"Blazing Fiend",
"Darkflame Cleft",
"enUS",
},
[214697] = {
"Chef Chewie",
"Cinderbrew Meadery",
},
[208450] = {
"Wandering Candle",
"Darkflame Cleft",
},
[190401] = {
"Gusting Proto-Dragon",
"Halls of Infusion",
},
[220196] = {
"Herald of Ansurek",
"City of Threads",
"enUS",
},
[196115] = {
"Arcane Tender",
"The Azure Vault",
"enUS",
},
[136076] = {
"Agitated Nimbus",
"Temple of Sethraliss",
},
[230740] = {
"Shreddinator 3000",
"Operation: Floodgate",
"enUS",
},
[205363] = {
"Time-Lost Waveshaper",
"Dawn of the Infinite",
"enUS",
},
[134417] = {
"Deepsea Ritualist",
"Shrine of the Storm",
},
[129231] = {
"Rixxa Fluxflame",
"The MOTHERLODE!!",
"enUS",
},
[134137] = {
"Temple Attendant",
"Shrine of the Storm",
},
[220197] = {
"Royal Swarmguard",
"City of Threads",
"enUS",
},
[127106] = {
"Irontide Officer",
"Freehold",
},
[199000] = {
"Chrono-Lord Deios",
"Dawn of the Infinite",
"enUS",
},
[186121] = {
"Decatriarch Wratheye",
"Brackenhide Hollow",
"enUS",
},
[164463] = {
"Paceran the Virulent",
"Theater of Pain",
"enUS",
},
[174802] = {
"Venomous Sniper",
"Plaguefall",
},
[186644] = {
"Leymor",
"The Azure Vault",
"enUS",
},
[190403] = {
"Glacial Proto-Dragon",
"Halls of Infusion",
"enUS",
},
[151657] = {
"Bomb Tonk",
"Operation: Mechagon",
"enUS",
},
[44404] = {
"Naz'jar Frost Witch",
"Throne of the Tides",
"enUS",
},
[45919] = {
"Young Storm Dragon",
"The Vortex Pinnacle",
},
[197985] = {
"Flame Channeler",
"Ruby Life Pools",
"enUS",
},
[129367] = {
"Bilge Rat Tempest",
"Siege of Boralus",
"enUS",
},
[205151] = {
"Tyr's Vanguard",
"Dawn of the Infinite",
"enUS",
},
[177817] = {
"Support Officer",
"Tazavesh, the Veiled Market",
"enUS",
},
},
["aura_cooldown_reverse"] = false,
["health_selection_overlay_alpha"] = 0.2999999821186066,
["aura_stack_shadow_color"] = {
nil,
nil,
nil,
0,
},
["minor_height_scale"] = 0.9999999403953552,
["bossmod_cooldown_text_size"] = 10,
["cast_statusbar_spark_half"] = true,
["aura_padding"] = 2,
["indicator_worldboss"] = false,
["hook_data"] = {
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Initialization"] = "function (modTable)\n    \n    --ATTENTION: after enabling this mod, you may have to adjust the anchor point at the Buff Settings tab\n    \n    local sortByTime = false\n    local invertSort = false\n    \n    --which auras goes first, assign a value (any number), bigger value goes first\n    local priority = {\n        [\"Vampiric Touch\"] = 50,\n        [\"Shadow Word: Pain\"] = 22,\n        [\"Mind Flay\"] = 5,\n        [\"Pistol Shot\"] = 50,\n        [\"Marked for Death\"] = 99,\n    }\n    \n    -- Sort function - do not touch\n    Plater.db.profile.aura_sort = true\n    \n    \n    function Plater.AuraIconsSortFunction (aura1, aura2)\n        local p1 = priority[aura1.SpellId] or priority[aura1.SpellName] or 1\n        local p2 = priority[aura2.SpellId] or priority[aura2.SpellName] or 1\n        \n        if sortByTime and p1 == p2 then\n            if invertSort then\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) > (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            else\n                return (aura1.Duration == 0 and 99999999 or aura1.RemainingTime or 0) < (aura2.Duration == 0 and 99999999 or aura2.RemainingTime or 0)\n            end\n        else\n            if invertSort then\n                 return p1 < p2\n            else\n                return p1 > p2\n            end\n        end\n    end\n    \nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1745289831,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = "Interface\\AddOns\\Plater\\images\\icon_aura_reorder",
["Enabled"] = true,
["Revision"] = 367,
["semver"] = "",
["Author"] = "Ditador-Azralon",
["Desc"] = "Reorder buffs and debuffs following the settings set in the constructor.",
["Prio"] = 99,
["version"] = -1,
["PlaterCore"] = 1,
["Name"] = "Aura Reorder [Plater]",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["Enabled"] = true,
["Revision"] = 142,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "????????-Illidan",
["Options"] = {
},
["Desc"] = "Config aura borders",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --border thickness\n    local size = 1 \n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()\n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end\n    \n    for index, auraIcon in ipairs (unitFrame.BuffFrame2.PlaterBuffList) do\n        if (auraIcon:IsShown()) then\n            \n            if (not auraIcon.PixelPerfectBorder) then\n                auraIcon.PixelPerfectBorder = CreateFrame (\"frame\", nil, auraIcon, \"NamePlateFullBorderTemplate\")\n            end\n            \n            local r, g, b = auraIcon:GetBackdropBorderColor()\n            auraIcon:SetBackdropBorderColor (0, 0, 0, 0)\n            \n            auraIcon.PixelPerfectBorder:SetVertexColor (r, g, b)\n            auraIcon.PixelPerfectBorder:SetBorderSizes (size, size, size, size)\n            auraIcon.PixelPerfectBorder:UpdateSizes()            \n            \n            auraIcon.Icon:ClearAllPoints()\n            auraIcon.Icon:SetAllPoints()\n            \n            auraIcon.Border:Hide() --hide plater default border\n        end\n    end    \nend",
},
["Prio"] = 99,
["Time"] = 1743574592,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Advanced Debuff Border",
["Icon"] = 133006,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 94,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Cyclopes-Turalyon",
["Options"] = {
},
["Desc"] = "Add an icon to indicate an unit has Aggro on you. By default only show for units using a custom color from Npc Colors.",
["Hooks"] = {
["Leave Combat"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateIndicator (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end    \nend\n\n\n",
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.ThreatIcon) then\n        unitFrame.ThreatIcon:Hide()\n    end\nend\n\n\n",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateThreatState (unitFrame, unitId)\n    \nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    envTable.Anchor = {side = 11, x = -2, y = 0}\n    envTable.Texture = \"Interface\\\\AddOns\\\\Plater\\\\media\\\\exclamation2_64\"\n    \n    --it'll only use the icon if the nameplate has a color from the Npc Colors tab and \"Only Scripts\" disabled.\n    envTable.OnlyWhenUsingNpcColor = true --if false, it'll always use the icon\n    \n    --private\n    envTable.PlayerRole = \"NONE\" --automatically changed by the script\n    \n    function envTable.CreateIndicator (unitFrame)\n        if (not unitFrame.ThreatIcon) then\n            unitFrame.ThreatIcon = unitFrame.healthBar:CreateTexture (nil, \"overlay\")\n        end\n    end\n    \n    function envTable.UpdateIndicator (unitFrame)\n        envTable.CreateIndicator (unitFrame)\n        \n        unitFrame.ThreatIcon:SetTexture (envTable.Texture)\n        Plater.SetAnchor (unitFrame.ThreatIcon, envTable.Anchor)\n        unitFrame.ThreatIcon:SetSize (unitFrame.healthBar:GetHeight(), unitFrame.healthBar:GetHeight())\n    end\n    \n    function envTable.UpdateThreatState (unitFrame, unitId)\n        if (not unitFrame.ThreatIcon) then --if there's no icon created yet\n            return\n            \n        elseif (not Plater.IsInCombat()) then --not in combat\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (unitFrame.IsSelf) then --personal bar\n            unitFrame.ThreatIcon:Hide()\n            return\n            \n        elseif (envTable.OnlyWhenUsingNpcColor) then --must be using a npc color?\n            if (not unitFrame.UsingCustomColor) then\n                unitFrame.ThreatIcon:Hide()\n                return\n            end\n        end\n        \n        local isTanking, threatStatus, threatpct = UnitDetailedThreatSituation (\"player\", unitId)\n        \n        if (isTanking) then\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Hide()\n            else\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateAggroColor))\n            end\n        else\n            if (envTable.PlayerRole == \"TANK\") then\n                unitFrame.ThreatIcon:Show()\n                unitFrame.ThreatIcon:SetVertexColor (unpack (envTable.NameplateNoAggroColor))                \n            else\n                unitFrame.ThreatIcon:Hide()                \n            end\n        end\n    end\n    \n    function envTable.UpdatePlayerRole (unitFrame)\n        local profile = Plater.db.profile\n        local role = Plater:GetPlayerRole()\n        \n        if (role == \"TANK\") then\n            envTable.PlayerRole = \"TANK\"\n            envTable.NameplateAggroColor = profile.tank.colors.aggro\n            envTable.NameplateNoAggroColor = profile.tank.colors.noaggro\n            \n        else\n            envTable.PlayerRole = \"DAMAGER\"\n            envTable.NameplateAggroColor = profile.dps.colors.aggro\n            envTable.NameplateNoAggroColor = profile.dps.colors.noaggro\n            \n        end        \n    end\n    \n    envTable.UpdatePlayerRole (unitFrame)\n    \nend",
},
["Prio"] = 52,
["Time"] = 1744445808,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Name"] = "Aggro Indicator",
["Icon"] = 132344,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["Enabled"] = true,
["Revision"] = 131,
["Options"] = {
},
["LastHookEdited"] = "",
["Author"] = "Izimode-Azralon",
["OptionsValues"] = {
},
["Desc"] = "Adds a pixels perfect border around the cast bar.",
["Hooks"] = {
["Cast Start"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Destructor"] = "function (self, unitId, unitFrame, envTable)\n    if (unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder:Hide()\n    end    \nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable)\n    \n    envTable.UpdateBorder (unitFrame)\n    \nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --settings\n    \n    --hide the icon of the spell, may require /reload after changing\n    envTable.HideIcon = false\n    \n    --border settings\n    envTable.BorderThickness = 1.5\n    envTable.BorderColor = \"black\"\n    \n    --private\n    --create the border\n    if (not unitFrame.castBar.CastBarBorder) then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, unitFrame.castBar, \"NamePlateFullBorderTemplate\")\n    end    \n    \n    --update the border\n    function envTable.UpdateBorder (unitFrame)\n        local castBar = unitFrame.castBar\n        \n        local r, g, b, a = DetailsFramework:ParseColors (envTable.BorderColor)\n        castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        \n        local size = envTable.BorderThickness\n        castBar.CastBarBorder:SetBorderSizes (size, size, size, size)\n        castBar.CastBarBorder:UpdateSizes()        \n        \n        if (envTable.HideIcon) then\n            castBar.Icon:Hide()\n        end\n        \n        castBar.CastBarBorder:Show()\n    end\n    \nend\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1745771745,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["HooksTemp"] = {
},
["Name"] = "Cast Bar Border",
["Icon"] = 133004,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 94,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "?????-Illidan",
["Options"] = {
},
["Desc"] = "Format Buff Special icons like the regular aura icons.",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    \n    --    if false then return end\n    \n    for _, iconFrame in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n        \n        unitFrame.ExtraIconFrame.options.show_text = true\n        \n        local profile = Plater.db.profile\n        \n        Plater.SetAnchor (iconFrame.CountdownText, profile.aura_timer_text_anchor)\n        Plater:SetFontSize (iconFrame.CountdownText, profile.aura_timer_text_size)\n        Plater:SetFontFace (iconFrame.CountdownText, profile.aura_timer_text_font)\n        \n        Plater.SetFontOutlineAndShadow (iconFrame.CountdownText, profile.aura_timer_text_outline, profile.aura_timer_text_shadow_color, profile.aura_timer_text_shadow_color_offset[1], profile.aura_timer_text_shadow_color_offset[2])\n        \n        iconFrame.Cooldown:SetEdgeTexture (profile.aura_cooldown_edge_texture)\n        iconFrame.Cooldown:SetReverse (profile.aura_cooldown_reverse)\n        iconFrame.Cooldown:SetDrawSwipe (profile.aura_cooldown_show_swipe)        \n        \n    end\n    \nend",
},
["Prio"] = 99,
["Time"] = 1745289830,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["LastHookEdited"] = "",
["Name"] = "Buff Special Mod",
["Icon"] = 136139,
["PlaterCore"] = 1,
},
{
["Enabled"] = true,
["Revision"] = 50,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Author"] = "Ditador-Azralon",
["Options"] = {
},
["Desc"] = "Set the unit name to be above the target shading texture.",
["Hooks"] = {
["Target Changed"] = "function (self, unitId, unitFrame, envTable)\n    unitFrame.unitName:SetDrawLayer (\"overlay\", 7)\nend\n\n\n\n\n\n\n\n\n",
},
["Prio"] = 99,
["Time"] = 1745771533,
["PlaterCore"] = 1,
["LastHookEdited"] = "",
["Name"] = "Unit Name Over Target Shading",
["Icon"] = 237377,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
},
{
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable)\n    envTable.CheckAggro (unitFrame)\nend\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    function envTable.CheckAggro (unitFrame)\n        --if the player isn't in combat, ignore this check\n        if (not Plater.IsInCombat()) then\n            return\n        end\n        \n        --Disable in PVP\n        if (UnitPlayerControlled(unitFrame.unit))\n        then \n            return     \n        end\n        \n        --if this unit isn't in combat, ignore\n        if (not unitFrame.InCombat) then\n            return \n        end\n        \n        --player is a tank?\n        if (Plater.PlayerIsTank) then\n            --player isn't tanking this unit?\n            if (not unitFrame.namePlateThreatIsTanking) then\n                --check if a second tank is tanking it\n                if (Plater.ZoneInstanceType == \"raid\") then\n                    --return a list with the name of tanks in the raid\n                    local tankPlayersInTheRaid = Plater.GetTanks()\n                    \n                    --get the target name of this unit\n                    local unitTargetName = UnitName (unitFrame.targetUnitID)\n                    \n                    --check if the unit isn't targeting another tank in the raid and paint the color\n                    if (not tankPlayersInTheRaid [unitTargetName]) then\n                        Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                    else\n                        --another tank is tanking this unit\n                        --do nothing\n                    end\n                    \n                else\n                    Plater.SetNameplateColor (unitFrame, Plater.db.profile.tank.colors.noaggro)\n                end\n            end\n            \n        else\n            --player is a dps or healer\n            if (unitFrame.namePlateThreatIsTanking) then\n                Plater.SetNameplateColor (unitFrame, Plater.db.profile.dps.colors.aggro)\n            end\n            \n        end        \n    end\nend\n\n\n\n\n\n\n",
},
["Time"] = 1745770653,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/id_wRWfKp/2",
["Icon"] = "Interface\\AddOns\\Plater\\media\\checked_64",
["Enabled"] = true,
["Revision"] = 61,
["semver"] = "1.0.1",
["Author"] = "Kastfall-Azralon",
["Desc"] = "When a mob is attacking you, force show the threat color. For tanks, force threat color if the mob is not attacking you.",
["Prio"] = 58,
["version"] = 2,
["PlaterCore"] = 1,
["Name"] = "Force Threat Color",
["LastHookEdited"] = "",
["Options"] = {
},
},
{
["OptionsValues"] = {
["manualNameOverwrites"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["nameLength"] = 10,
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Created"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenNameplateName(unitId, unitFrame, modTable.config, envTable)\nend",
["Initialization"] = "function (modTable)\n    local cache = {}\n    local concat = table.concat\n    local utf8Enabled = string.utf8len and string.utf8sub and true\n    \n    local utf8len = function(str)\n        if utf8Enabled then\n            return str:utf8len()\n        end\n        \n        local count = 0\n        for _ in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n        end\n        \n        return count\n    end\n    \n    local utf8sub = function(str, from, to)\n        if utf8Enabled then\n            return str:utf8sub(from, to)\n        end\n        \n        local extracted = {}\n        local size = 0\n        local count = 0\n        for char in str:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n            count = count + 1\n            \n            if count >= from and count <= to then\n                size = size + 1\n                extracted[size] = char\n            end\n            \n            if count >= to then return concat(extracted) end\n        end\n        \n        return \"\"\n    end\n    \n    -- Left to right works in the following steps for \"The Best Warrior Linaori\":\n    -- T. Best Warrior Linaori\n    -- T.B. Warrior Linaori\n    -- T.B.W. Linaori\n    local reduceLeftToRight\n    reduceLeftToRight = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not rightPart or utf8len(rightPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return leftPart .. \" \" .. rightPart, \"\"\n        end\n        \n        local firstWord, remainingRightPart = rightPart:match(\"^([^ ]*)[ ](.*)$\")\n        if not firstWord then\n            firstWord = rightPart\n            remainingRightPart = \"\"\n        end\n        leftPart = leftPart .. utf8sub(firstWord, 1, 1) .. \".\"\n        \n        return reduceLeftToRight(leftPart, remainingRightPart, lastPartLength, nameLength)\n    end\n    \n    -- Right to left works in the following steps for \"The Best Warrior Linaori\":\n    -- The Best W. Linaori\n    -- The B.W. Linaori\n    -- T.B.W. Linaori\n    local reduceRightToLeft\n    reduceRightToLeft = function (leftPart, rightPart, lastPartLength, nameLength)\n        if not leftPart or utf8len(leftPart) == 0 then\n            return leftPart, rightPart\n        end\n        \n        -- 2 spaces added to the length after concat\n        if 2 + utf8len(leftPart) + utf8len(rightPart) + lastPartLength <= nameLength then\n            return \"\", leftPart .. \" \" .. rightPart\n        end\n        \n        local remainingLeftPart, lastWord = leftPart:match(\"^(.*)[ ]([^ ]*)$\")\n        \n        if not remainingLeftPart then\n            remainingLeftPart = \"\"\n            lastWord = leftPart\n        end\n        \n        rightPart = utf8sub(lastWord, 1, 1) .. \".\" .. rightPart\n        \n        return reduceRightToLeft(remainingLeftPart, rightPart, lastPartLength, nameLength)\n    end\n    \n    local cutOffName = function (wholeName, config)\n        if config.noSplitCutoff then\n            return utf8sub(wholeName, 1, config.nameLength)\n        end\n        \n        return wholeName\n    end\n    \n    local shorten = function (unitId, nameplateUnitName, config, nameLength)\n        -- let the player overwrite the name regardless of length based on the NPC name\n        local manualNameOverwrite = config.manualNameOverwrites[nameplateUnitName]\n        if manualNameOverwrite then\n            return manualNameOverwrite\n        end\n        \n        -- let the player overwrite the name regardless of length based on the NPC ID\n        local npcId = select(6, strsplit(\"-\", UnitGUID(unitId)))\n        local manualNpcIdOverwrite = config.manualNameOverwrites[npcId]\n        if manualNpcIdOverwrite then\n            return manualNpcIdOverwrite\n        end\n        \n        -- the original name is short enough already\n        if utf8len(nameplateUnitName) <= nameLength then\n            return nameplateUnitName\n        end\n        \n        -- Naming often implies \"<name>, <title>\" or \"<title> <name>\"\n        if nameplateUnitName:find(\",\") then\n            -- assumed that \",\" implies a title, and try to strip them of their title\n            local possibleName = nameplateUnitName:match(\"^(.*)[,][^,]*$\")\n            \n            if possibleName then\n                if utf8len(possibleName) <= nameLength then\n                    return possibleName\n                end\n                \n                -- in case of longer names: \"Linaori the best fury warrior ever, of the deeps\n                nameplateUnitName = possibleName\n            end\n        end\n        \n        -- Forsworn Squad-Leader -> Forsworn Squad Leader\n        -- Squad-Leader of the Forsworn -> Squad Leader of the Forsworn\n        if config.hyphenAsSpace then\n            local lastPart\n            \n            -- keep \"Forsworn Squad-Leader\" as is, while still replacing \"Squad-Leader of the Forsworn\"\n            if config.keepHyphenInLastName then\n                local _, spaces = nameplateUnitName:gsub(\" \", \"\")\n                if spaces > 0 then\n                    nameplateUnitName, lastPart = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n                end\n            end\n            \n            nameplateUnitName = nameplateUnitName:gsub(\"-\", \" \")\n            if lastPart then\n                nameplateUnitName = nameplateUnitName .. \" \" .. lastPart\n            end\n        end\n        \n        -- amount of times we can check if the name needs replacing\n        local _, occurrences = nameplateUnitName:gsub(\" \", \"\")\n        \n        -- no spaces left to split on, just return whatever can be made of it\n        if occurrences == 0 then\n            return cutOffName(nameplateUnitName, config)\n        end\n        \n        local nameToShorten, nameToKeep, nameToKeepLength\n        if config.keepRightSide then\n            -- we always want the last name if possible\n            -- example: Cleave Training Dummy -> Dummy\n            nameToShorten, nameToKeep = nameplateUnitName:match(\"^(.*)[ ]([^ ]*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        else\n            -- we always want the first name if possible\n            -- example: Cleave Training Dummy -> Cleave\n            nameToKeep, nameToShorten = nameplateUnitName:match(\"^([^ ]*)[ ](.*)$\")\n            nameToKeepLength = utf8len(nameToKeep)\n        end\n        \n        -- in case the name to keep is too long, just use that\n        if nameToKeepLength > nameLength or not config.abbreviate then\n            return cutOffName(nameToKeep, config)\n        end\n        \n        local shortenedName\n        if config.abbreviateLeftToRight then\n            shortenedName, _ = reduceLeftToRight(\"\", nameToShorten, nameToKeepLength, nameLength)\n        else\n            _, shortenedName = reduceRightToLeft(nameToShorten, \"\", nameToKeepLength, nameLength)\n        end\n        \n        if config.keepRightSide then\n            return shortenedName .. \" \" .. nameToKeep\n        else\n            return nameToKeep .. \" \" .. shortenedName\n        end\n    end\n    \n    local tryCache = function (unitId, nameplateUnitName, config, nameLength)\n        if cache[nameLength] == nil then\n            cache[nameLength] = {}\n        end\n        \n        if cache[nameLength][nameplateUnitName] == nil then\n            cache[nameLength][nameplateUnitName] = shorten(unitId, nameplateUnitName, config, nameLength)\n        end\n        \n        return cache[nameLength][nameplateUnitName]\n    end\n    \n    modTable.shortenNameplateName = function (unitId, unitFrame, config)\n        if not unitId or not unitFrame.namePlateUnitName then return end\n        \n        if config.ignorePlayers and unitFrame.isPlayer then return end\n        if config.ignoreFriendlyNpcNameplate and unitFrame.actorType == \"friendlynpc\" then return end\n        if config.ignoreObjectNameplate and unitFrame.isObject then return end\n        \n        local name = tryCache(unitId, unitFrame.namePlateUnitName, config, config.nameLength)\n        \n        if name == unitFrame.namePlateUnitName then return end\n        \n        unitFrame.namePlateUnitName = name\n        unitFrame.PlateFrame.namePlateUnitName = name\n        unitFrame.healthBar.unitName:SetText(name)\n        unitFrame.ActorNameSpecial:SetText(name)\n    end\n    \n    modTable.shortenCastBarName = function (unitId, unitFrame, config)\n        if not unitId then return end\n        \n        local castBar = unitFrame.castBar\n        if not castBar.unit then return end\n        local targetUnitId = castBar.unit .. \"target\"\n        \n        if not UnitExists(targetUnitId) then return end\n        \n        local isPlayer = UnitIsPlayer(targetUnitId)\n        if config.ignorePlayers and isPlayer then return end\n        if config.ignoreFriendlyNpcCastBar and not isPlayer and UnitIsFriend(\"player\", targetUnitId) then return end\n        \n        local targetName = castBar.FrameOverlay.TargetName\n        local oldName = targetName:GetText()\n        if not oldName then return end\n        \n        local newName = tryCache(unitId, oldName, config, config.castBarNameLength)\n        if oldName == newName then return end\n        \n        targetName:SetText(newName)\n    end\nend",
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.shortenCastBarName(unitId, unitFrame, modTable.config, envTable)\nend\n\n\n",
},
["Time"] = 1743574583,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/name-shortener-for-plater/18",
["Icon"] = 134331,
["Enabled"] = true,
["Revision"] = 1021,
["semver"] = "1.1.4",
["Author"] = "Linalori-Ragnaros",
["Desc"] = "Tries to make sense of long names",
["Prio"] = 99,
["Name"] = "Smart Name Shortener",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on nameplates before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 18,
["Name"] = "Nameplate name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "nameLength",
},
{
["Type"] = 2,
["Max"] = 99,
["Desc"] = "The length of the name can be on the cast bar before cutoff is applied",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 15,
["Name"] = "Cast bar name length",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "castBarNameLength",
},
{
["Type"] = 4,
["Key"] = "hyphenAsSpace",
["Value"] = true,
["Name"] = "Treat hyphens (-) as space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Also split names on hyphens instead of just the whole word",
},
{
["Type"] = 4,
["Key"] = "keepHyphenInLastName",
["Value"] = true,
["Name"] = "Keep hyphen in the last name",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When hyphens are treated as spaces, keep the last part of the name intact",
},
{
["Type"] = 4,
["Key"] = "noSplitCutoff",
["Value"] = true,
["Name"] = "Cutoff when no split can be done",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "When the smallest word is still longer than \"Name length\", cut it off to the name length. If unchecked, will return the full name",
},
{
["Type"] = 4,
["Key"] = "abbreviate",
["Value"] = true,
["Name"] = "Abbreviate names (W.O. Warcraft)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "If unchecked, nothing is shown instead",
},
{
["Type"] = 4,
["Key"] = "abbreviateLeftToRight",
["Value"] = false,
["Name"] = "Abbreviate left to right",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Where to start abbreviation. (ltr) \"T. Best Linaori\" vs (rtl) \"The B. Linaori\"",
},
{
["Type"] = 4,
["Key"] = "keepRightSide",
["Value"] = true,
["Name"] = "Keep right side",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Keep the right side instead of left side of the name. Right side: \"T.B. Warrior\". Left side: \"The B.L.\"",
},
{
["Type"] = 4,
["Key"] = "ignorePlayers",
["Value"] = false,
["Name"] = "Ignore Players",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore player characters",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcNameplate",
["Value"] = false,
["Name"] = "Ignore Friendly NPC nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the nameplate",
},
{
["Type"] = 4,
["Key"] = "ignoreObjectNameplate",
["Value"] = true,
["Name"] = "Ignore Object Nameplate",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore nameplates from objects",
},
{
["Type"] = 4,
["Key"] = "ignoreFriendlyNpcCastBar",
["Value"] = false,
["Name"] = "Ignore Friendly NPC cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Ignore friendly NPC on the cast bar",
},
{
["Type"] = 7,
["Key"] = "manualNameOverwrites",
["Value"] = {
{
"Mordretha, the Endless Empress",
"Mordretha",
},
},
["Name"] = "Manual name overwrites",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_list",
["Desc"] = "If a name matches the key, overwrite it with value and don't guess anything after",
},
},
["HooksTemp"] = {
},
["version"] = 18,
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)    \n    local inCombat = self.InCombat\n    local isTanking = self.namePlateThreatIsTanking\n    local isTapDenied = UnitIsTapDenied(unitId)\n    \n    if inCombat and not isTanking and not isTapDenied then\n        local exists = UnitExists(self.targetUnitID)\n        if exists then\n            local role = UnitGroupRolesAssigned(self.targetUnitID)\n            local isTank = (role == \"TANK\")\n            \n            if not isTank then\n                local guid = UnitGUID(self.targetUnitID)\n                if envTable.shallHighlight(self, guid) then\n                    Plater.SetNameplateColor(unitFrame, envTable.color)\n                end\n            end\n        end\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    envTable.color = \"#57f609\"\n    \n    envTable.npcs = {\n        [61056] = \"Greater Earth Elemental\",\n        [61146] = \"Black Ox Statue\",\n        [95072] = \"Earth Elemental\",\n        [103822] = \"Treant\"\n    }\n    \n    envTable.rules = {\n        [\"Pet\"] = true,\n        [\"Creature\"] = function(npcID)\n            return (envTable.npcs[npcID] ~= nil)\n        end\n    }\n    \n    envTable.getTypeAndID = function(guid)\n        local unitType, _, _, _, _, npcID = strsplit(\"-\", guid)\n        return unitType, tonumber(npcID or \"0\") or 0\n    end\n    \n    envTable.shallHighlight = function(self, guid)\n        local unitType, npcID = envTable.getTypeAndID(guid)\n        if unitType then\n            local value = envTable.rules[unitType]\n            if value then\n                if type(value) == \"boolean\" then\n                    return value\n                elseif type(value) == \"function\" then\n                    return value(npcID)\n                end\n            end -- value\n        end -- unitType\n    end\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
},
["Time"] = 1743605968,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
["Enabled"] = true,
["TANK"] = true,
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 627607,
["Enabled"] = true,
["Revision"] = 166,
["semver"] = "",
["Author"] = "Brewdux-Tarren Mill",
["Desc"] = "Recolors the nameplate, if you the unit is tanked by a pet.",
["Prio"] = 33,
["Name"] = "Pet Threat Highlighter",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
},
},
{
["OptionsValues"] = {
["borderThickness"] = 1,
["readyColor"] = {
0,
1,
0,
1,
},
["defaultBorderToggle"] = true,
["interruptIndicatorColor"] = {
0,
1,
0,
1,
},
},
["LastHookEdited"] = "Cast Update",
["UID"] = "0x661711831a72796",
["Hooks"] = {
["Cast Update"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if(unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\"  ) then\n        \n        if self.IsInterrupted then\n            Plater.SetCastBarColor(unitFrame, modTable.config[\"interruptedColor\"])\n            return\n        end\n        \n        local interruptCooldownStart, duration = nil\n        local interruptEndTime = nil\n        \n        if envTable.kickId ~= nil then\n            local cd = C_Spell.GetSpellCooldown(envTable.kickId)\n            interruptCooldownStart, duration = cd.startTime,  cd.duration\n            interruptEndTime =  interruptCooldownStart + duration\n            local   interruptRemainingCooldown = max ( interruptEndTime - GetTime(), 0)\n            local  castRemainingCooldown = max (unitFrame.castBar.spellEndTime - GetTime(), 0)\n            \n            if interruptCooldownStart  ~= 0 then\n                if ( interruptRemainingCooldown + modTable.config[\"reactionTime\"] - castRemainingCooldown ) < 0 then\n                    interruptCooldownStart  = -1\n                end\n            end\n        else\n            interruptCooldownStart = 1\n        end\n        \n        envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n    end\n    \nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.castBar.interruptIsUpIndicator then\n        unitFrame.castBar. interruptIsUpIndicator:Hide()\n    end\n    envTable.removeBorder()\nend\n\n\n",
["Enter Combat"] = "function (self, unitId, unitFrame, envTable, modTable)\n    envTable.spec = GetSpecialization()\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Only proceed if the unit is an enemy\n    if unitFrame.ActorType ~= \"friendlyplayer\" and unitFrame.ActorType ~= \"friendlynpc\" then\n        envTable.spec = GetSpecialization()\n        \n        -- Check if the class is not Warlock (class ID 9)\n        if envTable.class ~= 9 then\n            -- Assign kick ability based on class and specialization\n            envTable.kickId = modTable.kickIndex[envTable.class][envTable.spec]\n        else\n            -- Warlock logic for interrupt abilities\n            if envTable.spec == 1 or envTable.spec == 3 then -- Affliction or Destruction\n                if IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910 -- Spell Lock\n                else\n                    -- Check for Grimoire of Sacrifice\n                    local spellInfo = C_Spell.GetSpellInfo(108503) -- get SpellInfo for \"108503\" what is \"Grimoire of Sacrifice\"\n                    local spellName = spellInfo and spellInfo.name -- get \"localized\" name for \"Grimoire of Sacrifice\"\n                    if spellName then\n                        local auraData = C_UnitAuras.GetAuraDataBySpellName(\"player\", spellName)\n                        \n                        -- Confirm the player has the \"Grimoire of Sacrifice\" buff\n                        if auraData and auraData.isHelpful and auraData.sourceUnit == \"player\" then\n                            envTable.kickId = 132409 -- Spell Lock\n                        else\n                            envTable.kickId = nil\n                        end\n                    end\n                end\n                \n            elseif envTable.spec == 2 then -- Demonology\n                if IsSpellKnown(89766, true) then -- Felguard present\n                    envTable.kickId = 119914\n                elseif IsSpellKnown(19647, true) then -- Felhunter present\n                    envTable.kickId = 119910\n                else \n                    envTable.kickId = nil \n                end\n            end\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    modTable.kickIndex = {\n        [1] = {[1] = 6552, [2] = 6552, [3] = 6552}, -- Warrior\n        [2] = {[1] = 96231, [2] = 96231, [3] = 96231}, -- Paladin\n        [3] = {[1] = 147362, [2] = 147362, [3] = 187707}, -- Hunter\n        [4] = {[1] = 1766, [2] = 1766, [3] = 1766} ,-- Rogue\n        [5] = {[1] = nil, [2] = nil, [3] = 15487}, -- Priest\n        [6] = {[1] = 47528, [2] = 47528, [3] = 47528}, -- Death Knight\n        [7] = {[1] = 57994, [2] = 57994, [3] = 57994}, -- Shaman\n        [8] = {[1] = 2139, [2] = 2139, [3] = 2139}, -- Mage\n        [10] = {[1] = 116705, [2] = 116705, [3] = 116705}, -- Monk\n        [11] = {[1] = 78675, [2] = 106839, [3] = 106839, [4] = 106839}, -- Druid\n        [12] = {[1] = 183752, [2] = 183752}, -- Demon Hunter\n        [13] = {[1] = 351338, [2] = 351338, [3] = 351338} -- Evoker\n    }\n    \nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable, modTable)\n    self.ThrottleUpdate = 0.016\n    \n    local _, _, class = UnitClass(\"player\")\n    envTable.class = class\n    \n    local dummyFrame =  nil\n    if not dummyFrame then\n        dummyFrame = CreateFrame (\"frame\", nil, unitFrame.castBar)\n        dummyFrame:SetPoint(\"TOPLEFT\",0+modTable.config[\"borderThickness\"],0-modTable.config[\"borderThickness\"])\n        dummyFrame:SetPoint(\"BOTTOMRIGHT\",0-modTable.config[\"borderThickness\"],0+modTable.config[\"borderThickness\"])\n        dummyFrame:Show()\n    end\n    \n    function envTable.showBorder(r,g,b,a)\n        unitFrame.castBar.CastBarBorder:SetVertexColor (r, g, b, a)\n        unitFrame.castBar.CastBarBorder:Show()\n    end\n    \n    function envTable.removeBorder()\n        if modTable.config[\"defaultBorderToggle\"] then\n            local  r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n            envTable.showBorder(r,g,b,a)\n        else\n            unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n        end\n    end\n    \n    \n    if not unitFrame.castBar.CastBarBorder then\n        unitFrame.castBar.CastBarBorder = CreateFrame (\"frame\", nil, dummyFrame, \"NamePlateFullBorderTemplate\")\n        \n        unitFrame.castBar.CastBarBorder:SetBorderSizes(modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"], modTable.config[\"borderThickness\"])\n        unitFrame.castBar.CastBarBorder:UpdateSizes()\n    end\n    \n    if modTable.config[\"defaultBorderToggle\"] then\n        local r, g, b, a = Plater:ParseColors (modTable.config[\"defaultColor\"])\n        envTable.showBorder(r,g,b,a)\n    else\n        unitFrame.castBar.CastBarBorder:SetVertexColor (255, 255, 255, 0)\n    end\n    \n    function envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n        \n        if not unitFrame.castBar.interruptIsUpIndicator then\n            unitFrame.castBar.interruptIsUpIndicator = CreateFrame (\"frame\", nil, unitFrame.castBar)\n            unitFrame.castBar.interruptIsUpIndicator:SetWidth(1)\n            unitFrame.castBar.interruptIsUpIndicator:SetHeight(unitFrame.castBar:GetHeight() - (2*modTable.config[\"borderThickness\"]))\n            local t = unitFrame.castBar.interruptIsUpIndicator:CreateTexture(nil,\"OVERLAY\")\n            t:SetTexture(\"Interface\\\\AddOns\\\\Plater\\\\images\\\\regular_white.blp\")\n            t:SetAllPoints(unitFrame.castBar.interruptIsUpIndicator)\n            local r,g,b,a = Plater:ParseColors(modTable.config[\"interruptIndicatorColor\"])\n            t:SetVertexColor(r,g,b,a)\n            unitFrame.castBar.interruptIsUpIndicator.texture = t\n            \n        end\n        \n        local isUpIndicatorLocation = (interruptEndTime - unitFrame.castBar.spellStartTime) / unitFrame.castBar.maxValue\n        unitFrame.castBar.interruptIsUpIndicator:SetPoint(\"CENTER\", unitFrame.castBar.CastBarBorder, \"LEFT\", isUpIndicatorLocation *  unitFrame.castBar:GetWidth() , 0)\n        \n        if unitFrame.castBar.channeling then\n            isUpIndicatorLocation = 1 - isUpIndicatorLocation\n        end\n        \n        unitFrame.castBar. interruptIsUpIndicator:Show()\n        \n    end\n    \n    function envTable.updateBorder(interruptCooldownStart,  interruptEndTime)\n        \n        local r, g, b, a = nil\n        \n        if unitFrame.castBar.canInterrupt then\n            if  interruptCooldownStart > 0 then\n                envTable.removeBorder()\n            elseif  interruptCooldownStart < 0 then\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"willBeReadyColor\"])\n                envTable.showBorder(r,g,b,a)\n                \n                if modTable.config[\"castBarIndicatorToggle\"] then\n                    envTable.showIndicatorWhenInterruptUp(interruptEndTime)\n                end\n                \n            else\n                r, g, b, a = DetailsFramework:ParseColors (modTable.config[\"readyColor\"])\n                envTable.showBorder(r,g,b,a)\n                if unitFrame.castBar.interruptIsUpIndicator then\n                    unitFrame.castBar. interruptIsUpIndicator:Hide()\n                end\n            end\n        else\n            --if a spell would turn from interruptable to not interruptable\n            envTable.removeBorder()\n        end\n        \n    end\n    \nend",
},
["Time"] = 1745771853,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "",
["Icon"] = 608940,
["Enabled"] = false,
["Revision"] = 952,
["semver"] = "",
["Author"] = "Maeliin-Silvermoon",
["Desc"] = "Changes the color of the nameplate castbar border based on the current cooldown of the player's interrupt.",
["Prio"] = 50,
["Name"] = "Quazii Interrupt CD Indicator",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 6,
["Key"] = "qweqew",
["Value"] = 0,
["Name"] = "qwdqwd",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option7",
["Value"] = "IMPORTANT: UI Reload is needed after changing settings below",
["Name"] = "Option 7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "readyColor",
["Value"] = {
0,
1,
0,
1,
},
["Name"] = "Interrupt ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt is ready.",
},
{
["Type"] = 1,
["Key"] = "willBeReadyColor",
["Value"] = {
1,
0.35686275362968,
0,
1,
},
["Name"] = "Will be ready color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the cast bar border when your interrupt will be ready intime.",
},
{
["Type"] = 2,
["Max"] = 2,
["Desc"] = "Value of how many seconds the interrupt has to be off cooldown before the cast ends to indicate that it will be ready in time.",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.3,
["Key"] = "reactionTime",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Reaction time",
},
{
["Type"] = 2,
["Max"] = 5,
["Desc"] = "Set border thickness in pixel",
["Min"] = 0,
["Fraction"] = true,
["Value"] = 0.5,
["Key"] = "borderThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Border thickness",
},
{
["Type"] = 6,
["Key"] = "option6",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "defaultBorderToggle",
["Value"] = false,
["Name"] = "Enable default border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Check to enable a border around your cast bar by default. This border is shown always, even when your interrupt is on cd.",
},
{
["Type"] = 1,
["Key"] = "defaultColor",
["Value"] = {
0,
0,
0,
1,
},
["Name"] = "Default Border Color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The default border color",
},
{
["Type"] = 6,
["Key"] = "option12",
["Value"] = 0,
["Name"] = "blank space",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "castBarIndicatorToggle",
["Value"] = true,
["Name"] = "Exact indicator in cast bar",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Activate to have an indicator inside the cast bar that shows the exact moment when your interrupt will come up.",
},
{
["Type"] = 1,
["Key"] = "interruptIndicatorColor",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Indicator color",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the indicator inside the castbar for when the cast is going to be up.",
},
},
},
{
["OptionsValues"] = {
["debuff1"] = "442624",
["debuff2"] = "207771",
["borderWidth"] = 1,
["color1"] = {
0.7254902124404907,
0.6352941393852234,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if unitFrame.healthBar and unitFrame.healthBar.border then\n        unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n    end\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset color if no debuffs are found\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 7 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- If this is a higher priority debuff (higher index), use its color\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        highestPriorityColor = modTable.config[colorKey]\n                        foundDebuff = true\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Update the nameplate border color if we found a matching debuff\n    if foundDebuff and highestPriorityColor then\n        modTable.UpdateColor(unitFrame, highestPriorityColor)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetBorderSizes(modTable.config.borderWidth)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    else\n        -- Reset to default border color if no debuffs are found\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(0, 0, 0, 1)\n            unitFrame.healthBar.border:SetBorderSizes(1)\n            unitFrame.healthBar.border:UpdateSizes()\n        end\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate border color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame then return end\n        -- Unpack the color table into individual r,g,b,a values\n        local r, g, b, a = unpack(color)\n        if unitFrame.healthBar and unitFrame.healthBar.border then\n            unitFrame.healthBar.border:SetVertexColor(r, g, b, a)\n        end\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n       \n        -- Debuff-Color Pair 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff ID #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Border Color #1\",\n            desc = \"Choose the border color for debuff #1\",\n            value = {1, 0, 0, 1}\n        },\n        -- Debuff-Color Pair 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff ID #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Border Color #2\",\n            desc = \"Choose the border color for debuff #2\",\n            value = {0, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff ID #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Border Color #3\",\n            desc = \"Choose the border color for debuff #3\",\n            value = {0, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 4\n        {\n            type = \"text\",\n            key = \"debuff4\",\n            name = \"Debuff ID #4\",\n            desc = \"Enter the spell ID of the fourth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color4\",\n            name = \"Border Color #4\",\n            desc = \"Choose the border color for debuff #4\",\n            value = {1, 1, 0, 1}\n        },\n        -- Debuff-Color Pair 5\n        {\n            type = \"text\",\n            key = \"debuff5\",\n            name = \"Debuff ID #5\",\n            desc = \"Enter the spell ID of the fifth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color5\",\n            name = \"Border Color #5\",\n            desc = \"Choose the border color for debuff #5\",\n            value = {1, 0, 1, 1}\n        },\n        -- Debuff-Color Pair 6\n        {\n            type = \"text\",\n            key = \"debuff6\",\n            name = \"Debuff ID #6\",\n            desc = \"Enter the spell ID of the sixth debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color6\",\n            name = \"Border Color #6\",\n            desc = \"Choose the border color for debuff #6\",\n            value = {0, 1, 1, 1}\n        },\n        -- Debuff-Color Pair 7\n        {\n            type = \"text\",\n            key = \"debuff7\",\n            name = \"Debuff ID #7\",\n            desc = \"Enter the spell ID of the seventh debuff to track\",\n            value = \"\"\n        },\n        {\n            type = \"color\",\n            key = \"color7\",\n            name = \"Border Color #7\",\n            desc = \"Choose the border color for debuff #7\",\n            value = {0.5, 0, 1, 1}\n        }\n    }\nend",
},
["Time"] = 1743606002,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 2065559,
["Enabled"] = false,
["Revision"] = 411,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate border will change to your chosen color.",
["Prio"] = 33,
["Name"] = "Quazii Debuff Border Color",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 3,
["Name"] = "Debuff #1",
["Value"] = "000000",
["Key"] = "debuff1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #1",
},
{
["Type"] = 1,
["Name"] = "Color #1",
["Value"] = {
0.6666666865348816,
1,
0,
1,
},
["Key"] = "color1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #1",
},
{
["Type"] = 3,
["Name"] = "Debuff #2",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #2",
},
{
["Type"] = 1,
["Key"] = "color2",
["Value"] = {
1,
0.501960813999176,
0,
1,
},
["Name"] = "Color #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #2",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #3",
},
{
["Type"] = 1,
["Name"] = "Color #3",
["Value"] = {
0,
0.7019608020782471,
0.5254902243614197,
1,
},
["Key"] = "color3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #3",
},
{
["Type"] = 3,
["Name"] = "Debuff #4",
["Value"] = "000000",
["Key"] = "debuff4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #4",
},
{
["Type"] = 1,
["Key"] = "color4",
["Value"] = {
0.5882353186607361,
0.294117659330368,
0,
1,
},
["Name"] = "Color #4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #4",
},
{
["Type"] = 3,
["Key"] = "debuff5",
["Value"] = "000000",
["Name"] = "Debuff #5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #5",
},
{
["Type"] = 1,
["Name"] = "Color #5",
["Value"] = {
0.6901960968971252,
0.6901960968971252,
0.6901960968971252,
1,
},
["Key"] = "color5",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #5",
},
{
["Type"] = 3,
["Name"] = "Debuff #6",
["Value"] = "000000",
["Key"] = "debuff6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #6",
},
{
["Type"] = 1,
["Key"] = "color6",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color #6",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #6",
},
{
["Type"] = 3,
["Key"] = "debuff7",
["Value"] = "000000",
["Name"] = "Debuff #7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter ID of Debuff #7",
},
{
["Type"] = 1,
["Name"] = "Color #7",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color7",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color for Debuff #7",
},
{
["Type"] = 2,
["Max"] = 15,
["Desc"] = "Increase size of colored border here.",
["Min"] = 1,
["Key"] = "borderWidth",
["Value"] = 1,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Border Size",
},
},
},
{
["OptionsValues"] = {
["threshold2"] = 0,
["debuff3"] = "",
["debuff2"] = "",
["color1"] = {
0.6666666865348816,
1,
0,
1,
},
["color2"] = {
1,
1,
1,
1,
},
["low_time_color2"] = {
1,
1,
1,
1,
},
["low_time_color1"] = {
1,
0.501960813999176,
0,
1,
},
["debuff1"] = "442624",
["threshold1"] = 5,
["color3"] = {
1,
1,
1,
1,
},
["low_time_color3"] = {
1,
1,
1,
1,
},
},
["LastHookEdited"] = "",
["UID"] = "0x67dbf822de10633",
["Hooks"] = {
["Nameplate Removed"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Reset the nameplate color to default when removed\n    Plater.RefreshNameplateColor(unitFrame)\nend",
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    -- Initialize variables\n    local foundDebuff = false\n    local highestPriorityColor = nil\n    local highestPriorityIndex = 0\n    \n    -- Track found debuff information\n    local foundDebuffId = nil\n    local foundRemainingTime = nil\n    \n    -- Check each buff/debuff on the unit\n    for i = 1, #unitFrame.BuffFrame.PlaterBuffList do\n        local auraIconFrame = unitFrame.BuffFrame.PlaterBuffList[i]\n        \n        if auraIconFrame:IsShown() then\n            local currentSpellId = auraIconFrame.SpellId\n            \n            -- Check each configured debuff\n            for index = 1, 3 do\n                local debuffKey = \"debuff\" .. index\n                local colorKey = \"color\" .. index\n                local thresholdKey = \"threshold\" .. index\n                local lowTimeColorKey = \"low_time_color\" .. index\n                \n                local spellIdToCheck = tonumber(modTable.config[debuffKey])\n                \n                if spellIdToCheck and currentSpellId == spellIdToCheck then\n                    -- This debuff is active, store info\n                    local remainingTime = nil\n                    if auraIconFrame.ExpirationTime then\n                        remainingTime = auraIconFrame.ExpirationTime - GetTime()\n                    end\n                    \n                    -- If this is a higher priority debuff (higher index), use it\n                    if index > highestPriorityIndex then\n                        highestPriorityIndex = index\n                        foundDebuff = true\n                        foundDebuffId = index\n                        foundRemainingTime = remainingTime\n                    end\n                end\n            end\n        end\n    end\n    \n    -- Apply color based on found debuff and its remaining time\n    if foundDebuff then\n        local debuffIndex = foundDebuffId\n        local remainingTime = foundRemainingTime\n        local threshold = tonumber(modTable.config[\"threshold\" .. debuffIndex]) or 5\n        \n        -- Check if we should use the normal color or low time color\n        if remainingTime and remainingTime < threshold then\n            -- Low time color\n            local lowTimeColorKey = \"low_time_color\" .. debuffIndex\n            if modTable.config[lowTimeColorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[lowTimeColorKey])\n            end\n        else\n            -- Normal color\n            local colorKey = \"color\" .. debuffIndex\n            if modTable.config[colorKey] then\n                modTable.UpdateColor(unitFrame, modTable.config[colorKey])\n            end\n        end\n    else\n        -- Reset to default color if no debuffs are found\n        Plater.RefreshNameplateColor(unitFrame)\n    end\nend",
["Initialization"] = "function (modTable)\n    -- Initialize tracking variables\n    modTable.debuffStates = {}\n    \n    -- Function to update the nameplate color based on debuff ID\n    function modTable.UpdateColor(unitFrame, color)\n        if not unitFrame or unitFrame.IsNpcWithoutHealthbar or unitFrame.IsFriendlyPlayerWithoutHealthbar then return end\n        Plater.SetNameplateColor(unitFrame, color)\n    end\n    \n    -- Setup the options panel\n    modTable.options = {\n        -- Debuff 1\n        {\n            type = \"text\",\n            key = \"debuff1\",\n            name = \"Debuff #1\",\n            desc = \"Enter the spell ID of the first debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color1\",\n            name = \"Normal Color #1\",\n            desc = \"Color when debuff #1 is active\",\n            value = {1, 0, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold1\",\n            name = \"Time Threshold #1 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color1\",\n            name = \"Low Time Color #1\",\n            desc = \"Color when debuff #1 is about to expire\",\n            value = {1, 0.5, 0, 1},\n        },\n        \n        -- Debuff 2\n        {\n            type = \"text\",\n            key = \"debuff2\",\n            name = \"Debuff #2\",\n            desc = \"Enter the spell ID of the second debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color2\",\n            name = \"Normal Color #2\",\n            desc = \"Color when debuff #2 is active\",\n            value = {0, 1, 0, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold2\",\n            name = \"Time Threshold #2 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color2\",\n            name = \"Low Time Color #2\",\n            desc = \"Color when debuff #2 is about to expire\",\n            value = {0.5, 1, 0, 1},\n        },\n        \n        -- Debuff 3\n        {\n            type = \"text\",\n            key = \"debuff3\",\n            name = \"Debuff #3\",\n            desc = \"Enter the spell ID of the third debuff to track\",\n            value = \"\",\n        },\n        {\n            type = \"color\",\n            key = \"color3\",\n            name = \"Normal Color #3\",\n            desc = \"Color when debuff #3 is active\",\n            value = {0, 0, 1, 1},\n        },\n        {\n            type = \"range\",\n            key = \"threshold3\",\n            name = \"Time Threshold #3 (seconds)\",\n            desc = \"When debuff has less than this time remaining, use the low time color\",\n            min = 1,\n            max = 30,\n            step = 0.5,\n            value = 5,\n        },\n        {\n            type = \"color\",\n            key = \"low_time_color3\",\n            name = \"Low Time Color #3\",\n            desc = \"Color when debuff #3 is about to expire\",\n            value = {0.5, 0, 1, 1},\n        }\n    }\nend",
},
["Time"] = 1745771533,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["url"] = "",
["Icon"] = 4635182,
["Enabled"] = false,
["Revision"] = 354,
["semver"] = "",
["Author"] = "Blindmonkas-Tichondrius",
["Desc"] = "When a tracked debuff is active on a target, their nameplate will change to your chosen color. Also changes color when debuff duration is low.",
["Prio"] = 99,
["Name"] = "Quazii Debuff Nameplate Colors",
["PlaterCore"] = 1,
["version"] = -1,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 3,
["Key"] = "debuff1",
["Value"] = "000000",
["Name"] = "Debuff #1 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Key"] = "threshold1",
["Value"] = 5,
["Fraction"] = false,
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Low Time #1",
},
{
["Type"] = 1,
["Key"] = "low_time_color1",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #1",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Name"] = "Debuff #2 ID",
["Value"] = "000000",
["Key"] = "debuff2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Name"] = "Color for Debuff #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Fraction"] = false,
["Value"] = 5,
["Name"] = "Low Time #2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Key"] = "threshold2",
},
{
["Type"] = 1,
["Name"] = "Low Time Color #2",
["Value"] = {
1,
1,
1,
1,
},
["Key"] = "low_time_color2",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
{
["Type"] = 3,
["Key"] = "debuff3",
["Value"] = "000000",
["Name"] = "Debuff #3 ID",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_text",
["Desc"] = "Enter debuff ID of debuff you want to track",
},
{
["Type"] = 1,
["Key"] = "color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Color for Debuff #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Nameplate changes to this color when Debuff #1 is active",
},
{
["Type"] = 2,
["Max"] = 60,
["Desc"] = "Debuff durationremaining in seconds, to trigger color change",
["Min"] = 0,
["Name"] = "Low Time #3",
["Value"] = 5,
["Key"] = "threshold3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Fraction"] = false,
},
{
["Type"] = 1,
["Key"] = "low_time_color3",
["Value"] = {
1,
1,
1,
1,
},
["Name"] = "Low Time Color #3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "Color when debuff duration crosses the Low Time Threshold",
},
},
},
{
["Enabled"] = false,
["Revision"] = 147,
["OptionsValues"] = {
},
["HooksTemp"] = {
},
["Options"] = {
},
["Author"] = "Deafndk-Tichondrius",
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["affix"] = {
},
["encounter_ids"] = {
},
["race"] = {
},
},
["UID"] = "0x67e3cb5c6e405d5",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable)\n    envTable.SetNameplateColors()\nend",
["Constructor"] = "function (self, unitId, unitFrame, envTable)\n    \n    --[[ ==== HOW TO USE THIS QUAZII  MOD ====\n    \n    This mod changes nameplate and border colors based on combinations of debuffs on the target.\n    \n    === BASIC SETUP ===\n    1. Add your debuff combinations to the \"matchMultipleBuffs\" table below\n    2. Each combo needs \"auras\" array with spell IDs to detect\n    3. You can use idTip like I recommended in the video to identify the debuff ID to track \n    \n    === CUSTOMIZATION OPTIONS ===\n    For each debuff combination, you can set:\n    \n    - nameplateColor: Changes the color of the entire nameplate\n                      Remove this line to keep default nameplate color\n    \n    - borderColor: Changes ONLY the border color\n                   Remove this line to keep default border color\n    \n    - textColor: Changes ONLY the name text color\n                 Remove this line to keep default text color (white)\n    \n    You can use any combination of these options. For example:\n    \n    -- Change only nameplate color:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n    }\n    \n    -- Change only border color:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n    }\n    \n    -- Change only text color:\n    { \n        auras = {34914, 589},\n        textColor = \"yellow\",\n    }\n    \n    -- Change border and text to different colors:\n    { \n        auras = {34914, 589},\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    -- Change all three elements:\n    { \n        auras = {34914, 589},\n        nameplateColor = \"blue\",\n        borderColor = \"red\",\n        textColor = \"yellow\",\n    }\n    \n    === COLOR FORMATS ===\n    You can use any of these formats for colors:\n    \n    1. Plater color names: \"red\", \"blue\", \"violet\", etc.\n    2. Hex colors: \"#FF0000\" (red), \"#00FF00\" (green), etc.\n    3. RGB/RGBA tables: {1, 0, 0} (red), {0, 1, 0, 0.5} (semi-transparent green)\n    \n    === PRIORITY SYSTEM ===\n    The FIRST matching combination in the list is used! \n    Put more specific combinations (with more debuffs) at the TOP of the list.\n    \n    For example, if you want Moonfire + Sunfire + Solar Beam to be white, but Moonfire + Sunfire to be purple:\n    1. Put the Moonfire + Sunfire + Solar Beam combo FIRST\n    2. Put the Moonfire + Sunfire combo SECOND\n    \n    === EXAMPLES ===\n    Balance Example:\n    { \n        auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n        nameplateColor = \"#ff8000\",    -- Orange Color\n        borderColor = \"violet\",        -- Purple border\n    }\n    \n    --]]\n    \n    envTable.matchMultipleBuffs = {\n        { \n            auras = {164812, 164815, 81261}, -- Moonfire + Sunfire + Solar Beam\n            nameplateColor = \"#ff8000\",    -- Orange Color\n            borderColor = \"violet\",        -- Purple border\n        },\n        { \n            auras = {164812, 164815},         -- Moonfire + Sunfire\n            nameplateColor = \"#b9a2ff\",    -- Light Purple Color\n            borderColor = \"#ff8000\",          -- Orange border\n        },\n        -- Add more combinations below\n    }\n    \n    -- DO NOT TOUCH\n    local DF = _G [\"DetailsFramework\"]\n    \n    -- Function to match multiple debuffs and set colors\n    function envTable.matchMultiple(unitFrame)\n        for _, v in ipairs(envTable.matchMultipleBuffs) do\n            local match = true\n            for _, aura in ipairs(v.auras) do\n                if not Plater.NameplateHasAura (unitFrame, aura) then\n                    match = false\n                    break\n                end\n            end\n            \n            if match then\n                if v.nameplateColor then\n                    Plater.SetNameplateColor (unitFrame, v.nameplateColor)\n                end\n                if v.borderColor then\n                    Plater.SetBorderColor (unitFrame, v.borderColor)\n                end\n                if v.textColor then\n                    local nameString = unitFrame.healthBar.unitName\n                    DF:SetFontColor (nameString, v.textColor)\n                end\n                return\n            else\n                -- Reset colors to default if no matches\n                local npcColor = Plater.GetNpcColor (unitFrame)\n                if npcColor then\n                    Plater.SetNameplateColor (unitFrame, npcColor)\n                elseif unitFrame.ActorType == \"friendlyplayer\" or unitFrame.ActorType == \"enemyplayer\" then\n                    Plater.FindAndSetNameplateColor (unitFrame)\n                else\n                    Plater.RefreshNameplateColor (unitFrame)\n                end\n                \n                Plater.SetBorderColor (unitFrame)\n                \n                local nameString = unitFrame.healthBar.unitName\n                DF:SetFontColor (nameString, {1, 1, 1}) -- Reset name text to white\n            end\n        end\n    end\n    \n    -- Function to set Colors\n    function envTable.SetNameplateColors()\n        local raidMark = nil\n        if envTable.useRaidMarks and unitFrame.unit then\n            raidMark = Plater.GetRaidMark (unitFrame)\n        end\n        if (raidMark) then\n            Plater.SetNameplateColor (unitFrame, envTable.ColorByMark[raidMark])\n        else \n            envTable.matchMultiple(unitFrame) \n        end \n    end\n    \nend",
},
["Prio"] = 65,
["Time"] = 1745771468,
["PlaterCore"] = 1,
["Desc"] = "If multiple debuffs are on nameplate at the same time, nameplate changes to your specified color.",
["Name"] = "Quazii Debuffs Combo Color",
["Icon"] = 4728198,
["LastHookEdited"] = "",
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["Hooks"] = {
["Nameplate Updated"] = "function (self, unitId, unitFrame, envTable, modTable)\n    \n    local buffSpecialGlow = true\n    \n    -- functions --\n    local auraContainers = {unitFrame.BuffFrame.PlaterBuffList}\n    \n    if (Plater.db.profile.buffs_on_aura2) then\n        auraContainers [2] = unitFrame.BuffFrame2.PlaterBuffList\n    end\n    \n    for containerID = 1, #auraContainers do\n        local auraContainer = auraContainers [containerID]\n        for index, auraIcon in ipairs (auraContainer) do\n            if (auraIcon:IsShown() and auraIcon.CanStealOrPurge) then\n                local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                if modTable.doDesaturate and auraIcon.isBuff then\n                    if not modTable.isPurgeUsable(unitId, auraIcon.AuraType == \"enrage\", auraIcon.AuraType == \"magic\") then\n                        auraIcon.Icon:SetDesaturated(true)\n                        --desatColor = \"dimgrey\"\n                    else\n                        auraIcon.Icon:SetDesaturated(false)\n                    end\n                end\n                Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                    auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                    local offset = modTable.config.antsThickness\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                    auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                end\n                \n            else\n                Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n            end\n        end\n    end\n    \n    if buffSpecialGlow then\n        for _, auraIcon in ipairs (unitFrame.ExtraIconFrame.IconPool) do\n            if auraIcon:IsShown() then\n                if (auraIcon:IsShown() and auraIcon.canStealOrPurge) then\n                    local glowColorOverride = auraIcon.debuffType == \"\" and modTable.config.glowColorE or auraIcon.debuffType == \"Magic\" and modTable.config.glowColorM\n                    if modTable.doDesaturate and auraIcon.isBuff then\n                        if not modTable.isPurgeUsable(unitId, auraIcon.debuffType == \"\", auraIcon.debuffType == \"Magic\") then\n                            auraIcon.Texture:SetDesaturated(true)\n                        else\n                            auraIcon.Texture:SetDesaturated(false)\n                        end\n                    end\n                    Plater.StartGlow(auraIcon, glowColorOverride, modTable.options)\n                    if modTable.config.outerGlow and auraIcon.__PlaterGlowFrame then\n                        auraIcon.__PlaterGlowFrame:ClearAllPoints()\n                        local offset = modTable.config.antsThickness\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"topleft\", auraIcon, \"topleft\", -offset, offset)\n                        auraIcon.__PlaterGlowFrame:SetPoint(\"bottomright\", auraIcon, \"bottomright\", offset, -offset)\n                    end\n                else\n                    Plater.StopGlow(auraIcon, modTable.options.glowType, modTable.options.key)\n                end                \n            end\n        end\n    end\n    \nend",
["Initialization"] = "function (modTable)\n    -- settings:\n    \n    -- for the LibCustomGlow implementation:\n    modTable.options = {\n        glowType = \"pixel\",\n        color = modTable.config.glowColorE,--\"red\", -- all plater color types accepted, from lib: {r,g,b,a}, color of lines and opacity, from 0 to 1. Defaul value is {0.95, 0.95, 0.32, 1}\n        N = modTable.config.antsAmount, --8, -- number of lines. Defaul value is 8;\n        frequency = modTable.config.frequency, -- frequency, set to negative to inverse direction of rotation. Default value is 0.25;\n        length = modTable.config.antsLength, -- length of lines. Default value depends on region size and number of lines;\n        th = modTable.config.antsThickness, -- thickness of lines. Default value is 2;\n        xOffset = 0,\n        yOffset = 0, -- offset of glow relative to region border;\n        border = modTable.config.antsBorder, -- set to true to create border under lines;\n        key = \"StealPurgeAuraGlow\", -- key of glow, allows for multiple glows on one frame;\n    }\n    \n    \n    local GetSpellCooldown = GetSpellCooldown or function(spellID)\n        local spellCooldownInfo = C_Spell.GetSpellCooldown(spellID)\n        if spellCooldownInfo then\n            return spellCooldownInfo.startTime, spellCooldownInfo.duration, spellCooldownInfo.isEnabled, spellCooldownInfo.modRate\n        end\n    end\n    local IsSpellInRange = IsSpellInRange and function(id) return IsSpellInRange(GetSpellInfo(id)) end or function(id, unit)\n        local result = C_Spell.IsSpellInRange(id, unit)\n        if result == true then\n            return 1\n        elseif result == false then\n            return 0\n        end\n        return nil\n    end\n    local GetSpellInfo = GetSpellInfo or function(spellID)\n        if not spellID then\n            return nil;\n        end\n        \n        local spellInfo = C_Spell.GetSpellInfo(spellID);\n        if spellInfo then\n            return spellInfo.name, nil, spellInfo.iconID, spellInfo.castTime, spellInfo.minRange, spellInfo.maxRange, spellInfo.spellID, spellInfo.originalIconID;\n        end\n    end\n    \n    modTable.doDesaturate = modTable.config.outOfRange or modTable.config.desaturate\n    -- functions:\n    function modTable.isPurgeUsable(unit, isEnrage, isMagic)\n        local purgeCD, purgeDur, purgeStart, spellOutOfRange, purgeID\n        for purgeSpellId, purgeSpellData in pairs(modTable.purgeSpellIDs or {}) do\n            \n            if (isEnrage and purgeSpellData.soothe) or (isMagic and purgeSpellData.purge) then\n                if not purgeSpellData.override then\n                    if modTable.isSpellOrTalentKnown(purgeSpellId) then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end\n                    end\n                else\n                    -- workaround for spell overrides (on WL command ability, etc.) or pet spells\n                    if FindSpellOverrideByID(purgeSpellData.override) == purgeSpellId then\n                        local cdStart, cdDur =  GetSpellCooldown(purgeSpellId)\n                        local tmppurgeCD = (cdStart > 0 and  cdDur - (GetTime() - cdStart)) or 0\n                        if not purgeCD or  (tmppurgeCD < purgeCD) then\n                            purgeID = purgeSpellId\n                            purgeCD = tmppurgeCD\n                            purgeDur = cdDur\n                            purgeStart = cdStart\n                            spellOutOfRange = unit and (IsSpellInRange(GetSpellInfo(purgeSpellId), unit) == 0) and true or false\n                        end \n                    end\n                end\n            end\n        end\n        \n        \n        \n        \n        if not purgeCD then\n            return true\n        elseif ((spellOutOfRange == true) and modTable.config.outOfRange) then\n            return false\n        elseif not (C_Spell.IsSpellUsable(purgeID) and (purgeCD == 0)) and modTable.config.desaturate then\n            return false\n        elseif GetSpellCooldown(61304) >= purgeCD then --GCD check necessary...\n            return false\n        else\n            return true\n        end\n    end\n    \n    function modTable.updatePurgeId ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        if not modTable.interruptSpellIDs or modTable.knownSpecID ~= specId then\n            modTable.updatePurgeIDs()\n        end\n    end\n    \n    -- determine purge spell according to spec\n    function modTable.updatePurgeIDs ()\n        if not GetSpecializationInfo then return end --well, retail only.\n        local curSpec = GetSpecialization()\n        if not curSpec then return end\n        local specId = GetSpecializationInfo(curSpec)\n        modTable.knownSpecID = specId\n        local purgeIDs = {} -- contains: [spellID] = <is player ability>, false meaning pet or weird workarounds needed\n        if Plater.PlayerClass == \"ROGUE\" then\n            purgeIDs[5938] = {soothe = true, purge = false, override = nil} --Shiv\n        elseif Plater.PlayerClass == \"DEATHKNIGHT\" then\n            --\n        elseif Plater.PlayerClass == \"DEMONHUNTER\" then\n            purgeIDs[278326] = {soothe = false, purge = true, override = nil} -- Consume Magic\n        elseif Plater.PlayerClass == \"DRUID\" then\n            purgeIDs[2908] = {soothe = true, purge = false, override = nil} -- Soothe\n        elseif Plater.PlayerClass == \"HUNTER\" then\n            purgeIDs[19801] = {soothe = true, purge = true, override = nil} -- Tranquilizing Shot\n        elseif Plater.PlayerClass == \"MONK\" then\n            --\n        elseif Plater.PlayerClass == \"PALADIN\" then\n            --\n        elseif Plater.PlayerClass == \"SHAMAN\" then\n            purgeIDs[370] = {soothe = false, purge = true, override = nil} -- Purge\n            purgeIDs[378773] = {soothe = false, purge = true, override = nil} -- Greater Purge\n        elseif Plater.PlayerClass == \"WARRIOR\" then\n            --\n        elseif Plater.PlayerClass == \"MAGE\" then\n            purgeIDs[255361] = {soothe = false, purge = true, override = nil} -- Spellsteal\n        elseif Plater.PlayerClass == \"PRIEST\" then\n            purgeIDs[32375] = {soothe = false, purge = true, override = nil} -- Mass Dispel\n            purgeIDs[235101] = {soothe = false, purge = true, override = nil} -- Dispel Magic\n        elseif Plater.PlayerClass == \"WARLOCK\" then\n            purgeIDs[19505] = {soothe = false, purge = true, override = nil} -- Devour Magic (Pet)\n        elseif Plater.PlayerClass == \"EVOKER\" then\n            purgeIDs[372048] = {soothe = true, purge = false, override = nil} -- Oppressing Roar\n        end\n        purgeIDs[25046] = {soothe = false, purge = true, override = nil} -- Arcane Torrent\n        \n        modTable.purgeSpellIDs = purgeIDs\n    end\n    \n    function modTable.isTalentLearned(nodeID)\n        local talentConfig = C_ClassTalents.GetActiveConfigID()\n        local nodeInfo = talentConfig and nodeID and C_Traits.GetNodeInfo(talentConfig, nodeID)\n        return nodeInfo and nodeInfo.entryIDsWithCommittedRanks and nodeInfo.entryIDsWithCommittedRanks[1] and true or false\n    end\n    \n    function modTable.isSpellOrTalentKnown(spellId)\n        if IsSpellKnown(spellId) then\n            return true\n        elseif modTable.isTalentLearned(spellId) then\n            return true\n        end\n    end\n    \n    modTable.updatePurgeIDs()\n    \n    modTable.lastUpdateTime = time()\n    \nend",
["Nameplate Added"] = "function (self, unitId, unitFrame, envTable, modTable)\n    modTable.updatePurgeId ()\nend\n\n\n",
},
["Time"] = 1743605525,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["affix"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["spec"] = {
},
},
["url"] = "https://wago.io/turHC0a5k/13",
["Icon"] = "INTERFACE\\ICONS\\Ability_Creature_Cursed_04",
["Enabled"] = true,
["Revision"] = 540,
["semver"] = "1.0.12",
["Author"] = "Viash-Thrall",
["Desc"] = "Adds a glow to the aura if you can steal or purge the buff.",
["Prio"] = 99,
["Name"] = "Steal/Purge Aura Glow",
["PlaterCore"] = 1,
["version"] = 13,
["HooksTemp"] = {
},
["Options"] = {
{
["Type"] = 5,
["Key"] = "option3",
["Value"] = "@scriptname Options:",
["Name"] = "Option 3",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option4",
["Value"] = 0,
["Name"] = "Option 4",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option16",
["Value"] = "Ants options:",
["Name"] = "option16",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 1,
["Key"] = "glowColorE",
["Value"] = {
1,
0,
0,
1,
},
["Name"] = "Glow Color (Enrage)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "The color of the glow ants.",
},
{
["Type"] = 1,
["Key"] = "glowColorM",
["Value"] = {
0,
0,
1,
1,
},
["Name"] = "Glow Color (Magic)",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_color",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option13",
["Value"] = 0,
["Name"] = "Option 13",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 2,
["Max"] = 16,
["Desc"] = "Amount of ants in the glow effect.",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 6,
["Key"] = "antsAmount",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants Amount",
},
{
["Type"] = 2,
["Max"] = 1,
["Desc"] = "Ants move speed",
["Min"] = -1,
["Fraction"] = true,
["Value"] = 0.25,
["Key"] = "frequency",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Speed",
},
{
["Type"] = 2,
["Max"] = 12,
["Desc"] = "",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 4,
["Key"] = "antsLength",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants length",
},
{
["Type"] = 2,
["Max"] = 4,
["Desc"] = "",
["Min"] = 1,
["Fraction"] = false,
["Value"] = 2,
["Key"] = "antsThickness",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_number",
["Name"] = "Ants Thickness",
},
{
["Type"] = 6,
["Key"] = "option14",
["Value"] = 0,
["Name"] = "Option 14",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "antsBorder",
["Value"] = false,
["Name"] = "Ants Border",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "outerGlow",
["Value"] = false,
["Name"] = "Outer Glow",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
{
["Type"] = 6,
["Key"] = "option17",
["Value"] = 0,
["Name"] = "Option 17",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_blank",
["Desc"] = "",
},
{
["Type"] = 5,
["Key"] = "option15",
["Value"] = "Desaturation (Retail only)",
["Name"] = "Option 15",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_label",
["Desc"] = "",
},
{
["Type"] = 4,
["Key"] = "desaturate",
["Value"] = false,
["Name"] = "Desaturate if not usable",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
{
["Type"] = 4,
["Key"] = "outOfRange",
["Value"] = false,
["Name"] = "Desaturate when out of range",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "Retail only.",
},
},
},
{
["OptionsValues"] = {
},
["LastHookEdited"] = "",
["UID"] = "0x64123ca337069ce",
["Hooks"] = {
["Initialization"] = "function(modTable)\n    modTable.castingUnits = {}\n    modTable.castCounter = 0\n    modTable.unitKeys = {}  -- To store unique identifiers for each unitFrame\nend",
["Cast Start"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if not envTable.originalLevel then\n        envTable.originalLevel = unitFrame:GetFrameLevel()\n        envTable.originalAlpha = unitFrame:GetEffectiveAlpha()\n    end\n    \n    -- Create a unique identifier for this unitFrame if it doesn't exist\n    if not modTable.unitKeys[unitFrame] then\n        modTable.unitKeys[unitFrame] = #modTable.unitKeys + 1\n    end\n    \n    if not modTable.castingUnits[unitFrame] then\n        modTable.castCounter = modTable.castCounter + 1\n        envTable.castOrder = modTable.castCounter\n        \n        modTable.castingUnits[unitFrame] = envTable.castOrder\n    else\n        envTable.castOrder = modTable.castingUnits[unitFrame]\n    end\n    \n    -- Use original level as base and add a large offset for casting\n    -- Add unitKey to ensure uniqueness even for simultaneous casts\n    local castingOffset = 100\n    local frameLevel = envTable.originalLevel + castingOffset + (envTable.castOrder * 10) + modTable.unitKeys[unitFrame]\n    \n    if unitFrame.castBar and unitFrame.castBar.isSpecialCast then\n        frameLevel = frameLevel + 50\n    end\n    \n    unitFrame:SetFrameLevel(frameLevel)\n    \n    if modTable.config and modTable.config[\"fullOpacityOnCast\"] then\n        unitFrame:SetAlpha(1.0)\n    end\nend",
["Cast Stop"] = "function (self, unitId, unitFrame, envTable, modTable)\n    if envTable.originalLevel then\n        modTable.castingUnits[unitFrame] = nil\n        -- Don't remove from unitKeys to maintain consistent unique IDs\n        \n        unitFrame:SetFrameLevel(envTable.originalLevel)\n        unitFrame:SetAlpha(envTable.originalAlpha)\n        envTable.originalLevel = nil\n        envTable.originalAlpha = nil\n        envTable.castOrder = nil\n    end\nend",
},
["Time"] = 1745289826,
["LoadConditions"] = {
["talent"] = {
},
["group"] = {
},
["class"] = {
},
["map_ids"] = {
},
["role"] = {
},
["pvptalent"] = {
},
["spec"] = {
},
["race"] = {
},
["encounter_ids"] = {
},
["affix"] = {
},
},
["url"] = "https://wago.io/L7KPSDPMK/15",
["Icon"] = 4640492,
["Enabled"] = true,
["Revision"] = 557,
["semver"] = "1.0.14",
["Author"] = "Ryowarsu-Sanguino",
["Desc"] = "",
["Prio"] = 31,
["Name"] = "Casting on top",
["PlaterCore"] = 1,
["Options"] = {
{
["Type"] = 4,
["Key"] = "fullOpacityOnCast",
["Value"] = true,
["Name"] = "Force full opacity when casting",
["Icon"] = "Interface\\AddOns\\Plater\\images\\option_bool",
["Desc"] = "",
},
},
["HooksTemp"] = {
},
["version"] = 15,
},
},
["last_news_time"] = 1743878608,
["auras_experimental_update_classic_era"] = true,
["cast_statusbar_fadeout_time"] = 0.4899999797344208,
["auras_per_row_amount2"] = 2,
["plater_resources_align"] = "horizontal",
["aura_width"] = 16,
["plater_resources_scale"] = 0.8,
["ghost_auras"] = {
["auras"] = {
["WARLOCK"] = {
{
[172] = true,
[980] = true,
},
},
["PRIEST"] = {
[3] = {
[589] = true,
[34914] = true,
},
},
},
},
["cast_audiocues"] = {
[384524] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376683] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375727] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412129] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372222] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267354] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372223] = "nil",
[382233] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323137] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372735] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[266209] = "nil",
[269843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[283422] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388801] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340160] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260894] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[461796] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[387910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[226406] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183088] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[267551] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412200] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[197974] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[370764] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[201226] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[259940] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377204] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[468813] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427376] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[465754] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[332708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[275907] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432031] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[447395] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[395184] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372107] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257870] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[256627] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[447270] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[424958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[472452] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[439621] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451543] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376892] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367521] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[340300] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320729] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257426] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1214546] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[419351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473220] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200913] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[422414] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[429427] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[412215] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257397] = "nil",
[333294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375943] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[448619] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[317231] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449130] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[437719] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[391118] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369061] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421910] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323608] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377732] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[408141] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388060] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[459779] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369828] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[372225] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[169929] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217653] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375439] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385958] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[411012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396665] = "nil",
[386660] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377034] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382708] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[421277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200345] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[291865] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[188169] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385578] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451843] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[451496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[269029] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1215738] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333488] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[435012] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268202] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[255567] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[381525] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[428293] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382712] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374361] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265540] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[443500] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375351] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1214315] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[268260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[450854] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372311] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426893] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375348] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[330614] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226304] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321834] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[440218] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[253721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[378818] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[474087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[473114] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257756] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427342] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[453161] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375251] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369409] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[226296] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[465682] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426260] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427025] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[324323] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265019] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372201] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[323496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374839] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[387629] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[416139] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[373742] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[436592] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426645] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[87618] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[321968] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[393432] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[320822] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[387950] = "nil",
[377559] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[374563] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[209628] = "nil",
[448640] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[462216] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[169179] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[367484] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[425027] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[441119] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[431494] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200768] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[433662] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[293986] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[449090] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200784] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[265721] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[445457] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[388911] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432198] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[474018] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200291] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[156718] = "nil",
[388976] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[382277] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[199151] = "nil",
[188404] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[375327] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[88308] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[434824] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[396812] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[427359] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[1217496] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[385536] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[432520] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[426261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[200261] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[432967] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[383823] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[397889] = "Interface\\Addons\\SharedMedia_Causese\\sound\\CC.ogg",
[411994] = "nil",
[331718] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[372087] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[1217294] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[412505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[427869] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[391723] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[260793] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[193505] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[369573] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[272609] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257288] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[265372] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[183465] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[376170] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[333477] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[384868] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[262377] = "Interface\\AddOns\\WeakAuras\\Media\\Sounds\\RunAway.ogg",
[339706] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[257862] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[413529] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[377383] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[397931] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[164357] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
[426860] = "Interface\\Addons\\SharedMedia_Causese\\sound\\Front.ogg",
},
["cast_colors"] = {
[384524] = {
true,
"orangered",
"",
},
[376683] = {
true,
"orangered",
"",
},
[375727] = {
true,
"orangered",
"",
},
[411300] = {
false,
"blue",
},
[412129] = {
true,
"orangered",
"",
},
[265568] = {
false,
"white",
},
[372222] = {
true,
"orangered",
"",
},
[267354] = {
true,
"orchid",
"",
},
[427176] = {
false,
"orchid",
"",
},
[382233] = {
true,
"orangered",
"",
},
[323137] = {
true,
"orangered",
"",
},
[372735] = {
true,
"orchid",
"",
},
[266209] = {
true,
"white",
"",
},
[269843] = {
true,
"orangered",
"",
},
[283422] = {
true,
"orangered",
"",
},
[388801] = {
true,
"orchid",
"",
},
[340160] = {
true,
"orangered",
"",
},
[260894] = {
true,
"orangered",
"",
},
[461796] = {
true,
"orchid",
"",
},
[387910] = {
true,
"orchid",
"",
},
[226406] = {
true,
"orangered",
"",
},
[183088] = {
true,
"orangered",
"",
},
[267551] = {
true,
"orangered",
"",
},
[412200] = {
true,
"orchid",
"",
},
[197974] = {
true,
"orangered",
"",
},
[384597] = {
false,
"white",
},
[370764] = {
true,
"orchid",
"",
},
[201226] = {
true,
"orangered",
"",
},
[259940] = {
true,
"orangered",
},
[377204] = {
true,
"orangered",
"",
},
[468813] = {
true,
"orangered",
"",
},
[412012] = {
true,
"orchid",
"",
},
[427376] = {
true,
"orchid",
},
[372615] = {
false,
"orangered",
"",
},
[465754] = {
true,
"orangered",
"",
},
[332708] = {
true,
"orangered",
"",
},
[413607] = {
false,
"white",
"",
},
[432031] = {
true,
"orchid",
"",
},
[447395] = {
true,
"orangered",
"",
},
[395184] = {
false,
"orangered",
"",
},
[372107] = {
true,
"orangered",
"",
},
[257870] = {
true,
"orchid",
"",
},
[256627] = {
true,
"orangered",
"",
},
[447270] = {
true,
"orangered",
"",
},
[424958] = {
true,
"orangered",
"",
},
[472452] = {
true,
"orangered",
"",
},
[439621] = {
true,
"orangered",
"",
},
[451543] = {
true,
"orangered",
"",
},
[376892] = {
true,
"orangered",
"",
},
[367521] = {
true,
"orchid",
"",
},
[340300] = {
true,
"orangered",
"",
},
[200784] = {
true,
"orchid",
"",
},
[257426] = {
true,
"orangered",
"",
},
[1214546] = {
true,
"orangered",
"",
},
[419351] = {
true,
"orangered",
"",
},
[473220] = {
true,
"orangered",
"",
},
[434779] = {
true,
"orangered",
"",
},
[369563] = {
true,
"orangered",
"",
},
[425027] = {
true,
"orangered",
"",
},
[422541] = {
false,
"orchid",
"",
},
[448105] = {
true,
"orangered",
"",
},
[422414] = {
true,
"orangered",
"",
},
[427323] = {
true,
"orangered",
"",
},
[429427] = {
true,
"orchid",
"",
},
[412215] = {
true,
"orangered",
"",
},
[257397] = {
true,
"darkorange",
"",
},
[333294] = {
true,
"orangered",
"",
},
[375943] = {
true,
"orangered",
"",
},
[1214315] = {
true,
"orangered",
"",
},
[88308] = {
true,
"orangered",
"",
},
[269029] = {
true,
"orangered",
"",
},
[448619] = {
true,
"orangered",
"",
},
[451843] = {
true,
"orangered",
"",
},
[421910] = {
true,
"orangered",
"",
},
[317231] = {
true,
"orangered",
"",
},
[449130] = {
true,
"orangered",
"",
},
[437719] = {
true,
"orchid",
"",
},
[333488] = {
true,
"orangered",
"",
},
[257862] = {
true,
"orangered",
"",
},
[369061] = {
true,
"orangered",
"",
},
[396665] = {
true,
"orangered",
"",
},
[268202] = {
true,
"orchid",
"",
},
[323608] = {
true,
"orangered",
"",
},
[377732] = {
true,
"orchid",
"",
},
[408141] = {
true,
"orangered",
"",
},
[388060] = {
true,
"orangered",
"",
},
[459779] = {
true,
"orangered",
"",
},
[369573] = {
true,
"orangered",
"",
},
[262377] = {
true,
"orangered",
"",
},
[164357] = {
true,
"orangered",
"",
},
[1217653] = {
true,
"orangered",
"",
},
[375439] = {
true,
"orangered",
"",
},
[378818] = {
true,
"orchid",
"",
},
[411012] = {
true,
"orangered",
"",
},
[255567] = {
true,
"orangered",
"",
},
[386660] = {
true,
"orangered",
"",
},
[377034] = {
true,
"orangered",
"",
},
[382708] = {
true,
"orangered",
"",
},
[421277] = {
true,
"orangered",
"",
},
[200345] = {
true,
"orchid",
"",
},
[291865] = {
true,
"orangered",
"",
},
[188169] = {
true,
"orangered",
"",
},
[385578] = {
true,
"orangered",
"",
},
[381525] = {
true,
"orangered",
"",
},
[451496] = {
true,
"orangered",
"",
},
[253721] = {
true,
"orchid",
"",
},
[272609] = {
true,
"orangered",
"",
},
[320729] = {
true,
"orangered",
"",
},
[268260] = {
true,
"orangered",
"",
},
[375351] = {
true,
"orangered",
"",
},
[265019] = {
true,
"orangered",
"",
},
[169929] = {
true,
"orangered",
"",
},
[279118] = {
false,
"blue",
},
[382712] = {
true,
"orangered",
"",
},
[374361] = {
true,
"orangered",
"",
},
[265540] = {
true,
"orchid",
"",
},
[330614] = {
true,
"orangered",
"",
},
[427359] = {
true,
"orchid",
"",
},
[384868] = {
true,
"orangered",
"",
},
[466124] = {
false,
"orangered",
"",
},
[474087] = {
true,
"orangered",
"",
},
[465682] = {
true,
"orangered",
"",
},
[426893] = {
true,
"orangered",
"",
},
[411994] = {
true,
"darkorange",
"",
},
[428293] = {
true,
"orangered",
},
[443500] = {
true,
"orangered",
"",
},
[321834] = {
true,
"orangered",
"",
},
[440218] = {
true,
"orangered",
"",
},
[375348] = {
true,
"orangered",
"",
},
[384978] = {
true,
"orchid",
"",
},
[331718] = {
true,
"orangered",
"",
},
[397889] = {
true,
"mediumturquoise",
"",
},
[257756] = {
true,
"orchid",
"",
},
[427342] = {
true,
"orchid",
"",
},
[453161] = {
true,
"orangered",
"",
},
[253517] = {
false,
"white",
},
[324323] = {
true,
"orangered",
"",
},
[226296] = {
true,
"orangered",
"",
},
[388392] = {
false,
"darkorange",
"",
},
[426260] = {
true,
"orangered",
"",
},
[427025] = {
true,
"orangered",
"",
},
[373742] = {
true,
"orangered",
"",
},
[257899] = {
false,
"lightslategray",
},
[462216] = {
true,
"orangered",
"",
},
[323496] = {
true,
"orangered",
"",
},
[372201] = {
true,
"orangered",
"",
},
[367484] = {
true,
"orchid",
"",
},
[434824] = {
true,
"orangered",
"",
},
[375251] = {
true,
"orangered",
"",
},
[448640] = {
true,
"orangered",
"",
},
[426645] = {
true,
"orangered",
},
[87618] = {
true,
"orangered",
"",
},
[321968] = {
true,
"orangered",
"",
},
[375327] = {
true,
"orangered",
"",
},
[436592] = {
true,
"orangered",
"",
},
[387950] = {
true,
"orangered",
"",
},
[377559] = {
true,
"orangered",
"",
},
[382277] = {
true,
"orangered",
"",
},
[396812] = {
true,
"orchid",
"",
},
[393432] = {
true,
"orangered",
"",
},
[441119] = {
true,
"orangered",
"",
},
[169179] = {
true,
"orangered",
"",
},
[474018] = {
true,
"orangered",
"",
},
[209628] = {
true,
"blue",
"",
},
[416139] = {
true,
"orangered",
"",
},
[369465] = {
true,
"orchid",
"",
},
[431494] = {
true,
"orangered",
"",
},
[433662] = {
true,
"orchid",
"",
},
[200768] = {
true,
"orangered",
"",
},
[293986] = {
true,
"orangered",
"",
},
[426905] = {
false,
"white",
"",
},
[449090] = {
true,
"orangered",
"",
},
[397931] = {
true,
"mediumturquoise",
"",
},
[445457] = {
true,
"orangered",
"",
},
[388911] = {
true,
"orangered",
"",
},
[385958] = {
true,
"orangered",
"",
},
[432198] = {
true,
"orangered",
"",
},
[200291] = {
true,
"orchid",
"",
},
[156718] = {
true,
"darkorange",
"",
},
[388976] = {
true,
"orangered",
"",
},
[320822] = {
true,
"orchid",
"",
},
[372225] = {
true,
"orchid",
"",
},
[369828] = {
true,
"orchid",
"",
},
[188404] = {
true,
"orangered",
"",
},
[265721] = {
true,
"orangered",
"",
},
[427869] = {
true,
"orangered",
"",
},
[426261] = {
true,
"orangered",
"",
},
[88194] = {
false,
"white",
},
[1217496] = {
true,
"orangered",
"",
},
[385536] = {
true,
"orchid",
"",
},
[432520] = {
true,
"orchid",
"",
},
[473114] = {
true,
"orangered",
"",
},
[200261] = {
true,
"orangered",
"",
},
[432967] = {
true,
"orchid",
"",
},
[383823] = {
true,
"orchid",
"",
},
[391118] = {
true,
"orangered",
"",
},
[369409] = {
true,
"orangered",
"",
},
[275907] = {
true,
"orangered",
"",
},
[372087] = {
true,
"orangered",
"",
},
[1217294] = {
true,
"orangered",
"",
},
[412505] = {
true,
"orangered",
"",
},
[226304] = {
true,
"orangered",
"",
},
[391723] = {
true,
"orangered",
"",
},
[260793] = {
true,
"orangered",
"",
},
[193505] = {
true,
"orangered",
"",
},
[444608] = {
false,
"gray",
"",
},
[450854] = {
true,
"orangered",
"",
},
[257288] = {
true,
"orangered",
"",
},
[265372] = {
true,
"orangered",
"",
},
[183465] = {
true,
"orangered",
"",
},
[376170] = {
true,
"orangered",
"",
},
[372311] = {
true,
"orangered",
"",
},
[333477] = {
true,
"orangered",
"",
},
[435012] = {
true,
"orangered",
"",
},
[339706] = {
true,
"orangered",
"",
},
[1215738] = {
true,
"orangered",
"",
},
[413529] = {
true,
"orangered",
"",
},
[377383] = {
true,
"orangered",
"",
},
[426860] = {
true,
"orangered",
"",
},
[200913] = {
true,
"orangered",
"",
},
[199151] = {
true,
"blue",
"",
},
},
["pet_width_scale"] = 0.9999999403953552,
["ui_parent_cast_strata"] = "DIALOG",
["quick_hide"] = true,
["class_colors"] = {
["DEATHKNIGHT"] = {
["colorStr"] = "ffc31d3a",
},
["WARRIOR"] = {
["colorStr"] = "ffc69a6d",
},
["PALADIN"] = {
["colorStr"] = "fff48bb9",
},
["WARLOCK"] = {
["colorStr"] = "ff8687ed",
},
["DEMONHUNTER"] = {
["colorStr"] = "ffa22fc8",
},
["SHAMAN"] = {
["colorStr"] = "ff006fdd",
},
["DRUID"] = {
["colorStr"] = "ffff7c09",
},
["EVOKER"] = {
["colorStr"] = "ff33937e",
},
["ROGUE"] = {
["colorStr"] = "fffff467",
},
},
["script_auto_imported"] = {
["Aura - Is Cast Bar [P]"] = 1,
["Aura - Buff Alert"] = 15,
["Cast - Effect After Cast [P]"] = 2,
["Cast - Circular Swipe"] = 4,
["Aura - Debuff Alert"] = 12,
["Fixate On You"] = 12,
["Cast - Castbar is Timer [P]"] = 2,
["Cast - Shining Green [P]"] = 3,
["Cast - Ultra Important"] = 14,
["Cast - On Going Cast [P]"] = 2,
["Add - Health Markers [P]"] = 3,
["Cast - Small Alert"] = 12,
["Cast - Heroic Leap [P]"] = 3,
["Aura - Invalidate Unit"] = 1,
["Add - Important [P]"] = 4,
["Fixate"] = 11,
["Unit - Main Target"] = 11,
["Aura - Blink Time Left"] = 13,
["Cast - Stop Casting"] = 4,
["Add - Tag Number [P]"] = 2,
["Unit Power"] = 1,
["Fixate by Unit Buff [P]"] = 2,
["Cast - Special Ability [P]"] = 3,
["Cast - Tank Interrupt"] = 12,
["Countdown"] = 12,
["Cast - Spark Color [P]"] = 2,
["Cast - Heal Stun [P]"] = 2,
["Explosion Affix M+"] = 14,
["Cast - Tankbuster [P]"] = 1,
["Cast - Important Target [P]"] = 2,
["Cast - Important by Color [P]"] = 2,
["Unit - Important"] = 11,
["Cast - AoE Hit All [P]"] = 3,
["Cast - Quick Flash"] = 2,
["Cast - Alert + Timer [P]"] = 4,
["Color Change"] = 1,
["Auto Set Skull"] = 11,
["Aura is Shield [P]"] = 5,
["Add - Warning [P]"] = 5,
["Cast - Simple Interrupt [P]"] = 2,
["Aura While Casting [P]"] = 1,
["Cast - Big Alert"] = 14,
["Cast - Ongoing Cast [P]"] = 4,
["Cast - Shield Interrupt"] = 2,
["Cast - Heal Cut [P]"] = 3,
["Cast - Debuff [P]"] = 2,
["Spiteful Affix"] = 3,
["Cast - Very Important"] = 15,
["Add - Non Elite Trash [P]"] = 4,
["Relics 9.2 M Dungeons"] = 2,
["Aura Border Color"] = 1,
["Cast - Voidzone [P]"] = 2,
["Cast - AoE With Range [P]"] = 2,
["Cast - Frontal Cone"] = 17,
["Add - Explode on Die [P]"] = 1,
["Cast - Glowing [P]"] = 10,
["Unit - Health Markers"] = 12,
["Blink by Time Left"] = 1,
["Unit - Show Energy"] = 11,
},
["target_highlight_color"] = {
nil,
0.52156862745098,
},
["extra_icon_anchor"] = {
["y"] = -8,
["x"] = 2,
["side"] = 7,
},
["range_check_alpha"] = 1,
["click_space"] = {
115,
},
["extra_icon_auras"] = {
277242,
},
["castbar_target_font"] = "Quazii",
["semver"] = "1.0.2",
["bossmod_aura_glow_expiring"] = true,
["aura_frame2_anchor"] = {
["y"] = 0,
["x"] = 2.099990844726563,
["side"] = 6,
},
["extra_icon_show_enrage"] = true,
["cast_statusbar_texture"] = "Quazii",
["auto_toggle_friendly"] = {
["cities"] = false,
["world"] = false,
},
["aura_cooldown_edge_texture"] = "Interface\\AddOns\\Plater\\images\\transparent",
["show_healthbars_on_not_attackable"] = true,
["plater_resources_show_number"] = false,
["first_run3"] = true,
["extra_icon_show_purge"] = true,
["ui_parent_scale_tune"] = 1.559999942779541,
["ui_parent_buff_strata"] = "LOW",
["healthbar_framelevel"] = 0,
["aura_consolidate"] = true,
["health_statusbar_bgtexture"] = "Quazii",
["indicator_raidmark_anchor"] = {
["side"] = 9,
["x"] = 0,
},
["extra_icon_width"] = 16,
["tank"] = {
["colors"] = {
["aggro"] = {
0.501960813999176,
0.501960813999176,
},
["noaggro"] = {
[3] = 0.1960784494876862,
},
["pulling"] = {
nil,
0,
0.77647058823529,
},
},
},
["health_statusbar_texture"] = "Quazii",
["hook_auto_imported"] = {
["Color Automation"] = 1,
["Blockade Encounter"] = 1,
["Cast Bar Icon Config"] = 2,
["Hide Neutral Units"] = 1,
["Aura Reorder"] = 3,
["Targetting Alpha"] = 3,
["Dont Have Aura"] = 1,
["Players Targetting Amount"] = 4,
["Bwonsamdi Reaping"] = 1,
["Jaina Encounter"] = 6,
["Attacking Specific Unit"] = 2,
["Execute Range"] = 1,
["Extra Border"] = 2,
["Reorder Nameplate"] = 4,
["Target Color"] = 3,
["Combo Points"] = 6,
["Monk Statue"] = 2,
},
["castbar_target_show"] = true,
["cast_statusbar_color"] = {
nil,
0.85882352941176,
nil,
0.96000000089407,
},
["update_throttle"] = 0.3499999940395355,
["minor_width_scale"] = 0.9999999403953552,
["color_override"] = false,
["indicator_pet"] = false,
["aura_frame1_anchor"] = {
["y"] = 2,
["side"] = 1,
},
["tocversion"] = 110105,
["castbar_icon_show"] = false,
["indicator_extra_raidmark"] = false,
["aura_timer_text_font"] = "Quazii",
["extra_icon_timer_font"] = "Quazii",
["not_affecting_combat_alpha"] = 0.7999999523162842,
["indicator_elite"] = false,
["indicator_rare"] = false,
["extra_icon_stack_font"] = "Quazii",
["border_color"] = {
nil,
nil,
nil,
0.8352941870689392,
},
["aura_height"] = 12,
["resources"] = {
["scale"] = 0.79999995231628,
["y_offset"] = 1,
["y_offset_target"] = 9,
},
["use_health_animation"] = true,
["cast_statusbar_bgtexture"] = "PlaterBackground",
["plater_resources_personal_bar"] = false,
["target_indicator"] = "Double Arrows",
["cast_statusbar_spark_offset"] = -13,
["npc_colors"] = {
[0] = {
true,
false,
"fuchsia",
},
[190404] = {
true,
false,
"aqua",
},
[149740] = {
true,
false,
"fuchsia",
},
[231197] = {
true,
false,
"aqua",
},
[231325] = {
true,
false,
"orange",
},
[95842] = {
true,
false,
"fuchsia",
},
[211121] = {
true,
false,
"orange",
},
[216364] = {
true,
false,
"fuchsia",
},
[195265] = {
true,
false,
"fuchsia",
},
[173655] = {
true,
false,
"aqua",
},
[173016] = {
true,
false,
"fuchsia",
},
[129602] = {
true,
false,
"aqua",
},
[229537] = {
true,
false,
"orange",
},
[200126] = {
true,
false,
"fuchsia",
},
[120651] = {
true,
false,
"darkorange",
},
[212786] = {
true,
false,
"aqua",
},
[213937] = {
true,
false,
"aqua",
},
[197697] = {
true,
false,
"aqua",
},
[40633] = {
true,
false,
"aqua",
},
[135167] = {
false,
false,
"peru",
},
[214066] = {
true,
false,
"fuchsia",
},
[131587] = {
true,
false,
"fuchsia",
},
[126918] = {
false,
false,
"lightskyblue",
},
[196548] = {
true,
false,
"fuchsia",
},
[218671] = {
true,
false,
"fuchsia",
},
[231075] = {
true,
false,
"aqua",
},
[186191] = {
true,
false,
"fuchsia",
},
[206140] = {
true,
false,
"fuchsia",
},
[208698] = {
true,
false,
"fuchsia",
},
[221102] = {
true,
false,
"fuchsia",
},
[127111] = {
false,
false,
"fuchsia",
},
[168418] = {
true,
false,
"fuchsia",
},
[213942] = {
true,
false,
"fuchsia",
},
[199748] = {
true,
false,
"fuchsia",
},
[165222] = {
true,
false,
"fuchsia",
},
[199749] = {
true,
false,
"aqua",
},
[199877] = {
true,
false,
"fuchsia",
},
[168420] = {
true,
false,
"fuchsia",
},
[128455] = {
true,
false,
"aqua",
},
[134150] = {
false,
false,
"navajowhite",
},
[187602] = {
true,
false,
"dodgerblue",
},
[184022] = {
true,
false,
"fuchsia",
},
[128967] = {
false,
false,
"palegreen",
},
[210109] = {
true,
false,
"aqua",
},
[196043] = {
true,
false,
"fuchsia",
},
[199368] = {
true,
false,
"DEATHKNIGHT",
},
[134024] = {
true,
false,
"fuchsia",
},
[212412] = {
true,
false,
"fuchsia",
},
[83892] = {
true,
false,
"fuchsia",
},
[98406] = {
false,
false,
"transparent",
},
[137478] = {
false,
false,
"lightskyblue",
},
[132491] = {
false,
false,
"palegreen",
},
[196045] = {
true,
false,
"fuchsia",
},
[135049] = {
true,
false,
"fuchsia",
},
[211263] = {
true,
false,
"aqua",
},
[164461] = {
true,
false,
"fuchsia",
},
[83893] = {
true,
false,
"fuchsia",
},
[128969] = {
true,
false,
"fuchsia",
},
[99366] = {
true,
false,
"fuchsia",
},
[220599] = {
true,
false,
"fuchsia",
},
[207940] = {
true,
false,
"fuchsia",
},
[223541] = {
true,
false,
"aqua",
},
[217531] = {
true,
false,
"fuchsia",
},
[98280] = {
true,
false,
"fuchsia",
},
[225204] = {
true,
false,
"fuchsia",
},
[205384] = {
true,
false,
"fuchsia",
},
[212673] = {
true,
false,
"aqua",
},
[136076] = {
false,
false,
"lightcoral",
},
[134158] = {
false,
false,
"navajowhite",
},
[172265] = {
true,
false,
"fuchsia",
},
[217533] = {
true,
false,
"fuchsia",
},
[220730] = {
true,
false,
"aqua",
},
[165872] = {
true,
false,
"fuchsia",
},
[214209] = {
true,
false,
"fuchsia",
},
[131858] = {
false,
false,
"dodgerblue",
},
[129547] = {
false,
false,
"fuchsia",
},
[45912] = {
true,
false,
"fuchsia",
},
[127757] = {
false,
false,
"lightcoral",
},
[208456] = {
true,
false,
"fuchsia",
},
[189531] = {
true,
false,
"fuchsia",
},
[137486] = {
false,
false,
"lightskyblue",
},
[219454] = {
true,
false,
"fuchsia",
},
[137103] = {
false,
false,
"lightsalmon",
},
[207946] = {
true,
false,
"fuchsia",
},
[162039] = {
true,
false,
"fuchsia",
},
[75713] = {
true,
false,
"fuchsia",
},
[138255] = {
false,
false,
"maroon",
},
[162040] = {
true,
false,
"fuchsia",
},
[229686] = {
true,
false,
"fuchsia",
},
[181861] = {
true,
false,
"aqua",
},
[195928] = {
true,
false,
"fuchsia",
},
[97197] = {
true,
false,
"fuchsia",
},
[126928] = {
false,
false,
"navajowhite",
},
[203857] = {
true,
false,
"fuchsia",
},
[195929] = {
true,
false,
"fuchsia",
},
[221760] = {
true,
false,
"fuchsia",
},
[131864] = {
true,
false,
"fuchsia",
},
[231223] = {
true,
false,
"fuchsia",
},
[186339] = {
true,
false,
"fuchsia",
},
[223423] = {
true,
false,
"aqua",
},
[195930] = {
true,
false,
"fuchsia",
},
[104295] = {
true,
false,
"fuchsia",
},
[193373] = {
true,
false,
"fuchsia",
},
[228539] = {
true,
false,
"fuchsia",
},
[133912] = {
true,
false,
"fuchsia",
},
[136214] = {
false,
false,
"plum",
},
[136470] = {
true,
false,
"fuchsia",
},
[90997] = {
true,
false,
"aqua",
},
[173044] = {
true,
false,
"fuchsia",
},
[214348] = {
true,
false,
"fuchsia",
},
[90998] = {
true,
false,
"fuchsia",
},
[224962] = {
true,
false,
"fuchsia",
},
[168058] = {
true,
false,
"fuchsia",
},
[105704] = {
true,
false,
"fuchsia",
},
[127315] = {
false,
false,
"plum",
},
[132126] = {
false,
false,
"honeydew",
},
[174197] = {
true,
false,
"magenta",
},
[214350] = {
true,
false,
"fuchsia",
},
[168443] = {
true,
false,
"fuchsia",
},
[84989] = {
true,
false,
"fuchsia",
},
[196576] = {
true,
false,
"fuchsia",
},
[170490] = {
true,
false,
"fuchsia",
},
[168572] = {
true,
false,
"fuchsia",
},
[134174] = {
false,
false,
"honeydew",
},
[225605] = {
true,
false,
"fuchsia",
},
[91000] = {
true,
false,
"aqua",
},
[186220] = {
true,
false,
"fuchsia",
},
[81985] = {
true,
false,
"fuchsia",
},
[122969] = {
true,
false,
"fuchsia",
},
[100527] = {
true,
false,
"fuchsia",
},
[197985] = {
true,
false,
"fuchsia",
},
[163459] = {
true,
false,
"fuchsia",
},
[104300] = {
true,
false,
"fuchsia",
},
[233152] = {
true,
false,
"orange",
},
[131492] = {
true,
false,
"fuchsia",
},
[76104] = {
true,
false,
"fuchsia",
},
[135329] = {
false,
false,
"plum",
},
[210264] = {
true,
false,
"aqua",
},
[219983] = {
true,
false,
"aqua",
},
[122971] = {
true,
false,
"fuchsia",
},
[123227] = {
true,
false,
"fuchsia",
},
[219984] = {
true,
false,
"fuchsia",
},
[228424] = {
true,
false,
"fuchsia",
},
[162057] = {
true,
false,
"fuchsia",
},
[211289] = {
true,
false,
"orange",
},
[207453] = {
true,
false,
"fuchsia",
},
[186226] = {
true,
false,
"fuchsia",
},
[135204] = {
false,
false,
"honeydew",
},
[122972] = {
true,
false,
"fuchsia",
},
[205152] = {
true,
false,
"aqua",
},
[129366] = {
false,
false,
"goldenrod",
},
[170882] = {
true,
false,
"magenta",
},
[139425] = {
false,
false,
"honeydew",
},
[218324] = {
true,
false,
"aqua",
},
[207199] = {
true,
false,
"fuchsia",
},
[196202] = {
true,
false,
"fuchsia",
},
[212826] = {
true,
false,
"orange",
},
[122973] = {
true,
false,
"fuchsia",
},
[100531] = {
true,
false,
"aqua",
},
[210269] = {
true,
false,
"orange",
},
[207456] = {
true,
false,
"fuchsia",
},
[212827] = {
true,
false,
"fuchsia",
},
[129559] = {
false,
false,
"navajowhite",
},
[186741] = {
true,
false,
"fuchsia",
},
[207969] = {
true,
false,
"fuchsia",
},
[100532] = {
true,
false,
"fuchsia",
},
[207202] = {
true,
false,
"fuchsia",
},
[229069] = {
true,
false,
"fuchsia",
},
[137511] = {
false,
false,
"navajowhite",
},
[217561] = {
true,
false,
"fuchsia",
},
[91006] = {
true,
false,
"fuchsia",
},
[40484] = {
true,
false,
"aqua",
},
[205158] = {
true,
false,
"fuchsia",
},
[195696] = {
true,
false,
"magenta",
},
[213343] = {
true,
false,
"aqua",
},
[171656] = {
true,
false,
"fuchsia",
},
[138281] = {
true,
false,
"aqua",
},
[213216] = {
true,
false,
"aqua",
},
[187897] = {
true,
false,
"aqua",
},
[129370] = {
true,
false,
"fuchsia",
},
[213217] = {
true,
false,
"fuchsia",
},
[207207] = {
true,
false,
"fuchsia",
},
[206696] = {
true,
false,
"orange",
},
[165137] = {
true,
false,
"fuchsia",
},
[144294] = {
true,
false,
"fuchsia",
},
[137517] = {
false,
false,
"peru",
},
[130011] = {
true,
false,
"aqua",
},
[105715] = {
true,
false,
"fuchsia",
},
[212453] = {
true,
false,
"fuchsia",
},
[144296] = {
true,
false,
"aqua",
},
[132532] = {
false,
false,
"palegreen",
},
[164501] = {
false,
false,
"fuchsia",
},
[224219] = {
true,
false,
"fuchsia",
},
[191739] = {
true,
false,
"aqua",
},
[224731] = {
false,
false,
"fuchsia",
},
[168594] = {
true,
false,
"fuchsia",
},
[144298] = {
true,
false,
"orange",
},
[137521] = {
false,
false,
"cornflowerblue",
},
[224732] = {
true,
false,
"fuchsia",
},
[167956] = {
true,
false,
"fuchsia",
},
[184580] = {
true,
false,
"fuchsia",
},
[129374] = {
true,
false,
"aqua",
},
[190207] = {
true,
false,
"fuchsia",
},
[169875] = {
true,
false,
"magenta",
},
[184581] = {
true,
false,
"aqua",
},
[104247] = {
true,
false,
"fuchsia",
},
[130909] = {
true,
false,
"aqua",
},
[186116] = {
true,
false,
"fuchsia",
},
[220003] = {
true,
false,
"aqua",
},
[206065] = {
true,
false,
"fuchsia",
},
[165529] = {
true,
false,
"magenta",
},
[214761] = {
true,
false,
"fuchsia",
},
[98813] = {
true,
false,
"fuchsia",
},
[231385] = {
true,
false,
"aqua",
},
[45922] = {
true,
false,
"fuchsia",
},
[206066] = {
true,
false,
"fuchsia",
},
[214762] = {
true,
false,
"fuchsia",
},
[186246] = {
true,
false,
"fuchsia",
},
[92612] = {
true,
false,
"aqua",
},
[166299] = {
true,
false,
"fuchsia",
},
[190340] = {
true,
false,
"aqua",
},
[136249] = {
false,
false,
"plum",
},
[204918] = {
true,
false,
"fuchsia",
},
[223844] = {
true,
false,
"fuchsia",
},
[171799] = {
true,
false,
"fuchsia",
},
[167963] = {
true,
false,
"fuchsia",
},
[199037] = {
true,
false,
"fuchsia",
},
[206710] = {
true,
false,
"orange",
},
[101437] = {
false,
false,
"fuchsia",
},
[122984] = {
false,
false,
"peru",
},
[41096] = {
true,
false,
"fuchsia",
},
[166302] = {
true,
false,
"fuchsia",
},
[167965] = {
true,
false,
"fuchsia",
},
[226404] = {
true,
false,
"aqua",
},
[195842] = {
true,
false,
"fuchsia",
},
[163618] = {
true,
false,
"fuchsia",
},
[186125] = {
true,
false,
"fuchsia",
},
[190345] = {
true,
false,
"fuchsia",
},
[167967] = {
true,
false,
"fuchsia",
},
[137405] = {
true,
false,
"fuchsia",
},
[206074] = {
true,
false,
"fuchsia",
},
[205691] = {
true,
false,
"fuchsia",
},
[220141] = {
true,
false,
"fuchsia",
},
[239834] = {
true,
false,
"orange",
},
[163621] = {
true,
false,
"aqua",
},
[168992] = {
true,
false,
"fuchsia",
},
[134338] = {
false,
false,
"navajowhite",
},
[45477] = {
true,
false,
"aqua",
},
[196102] = {
true,
false,
"fuchsia",
},
[98243] = {
true,
false,
"aqua",
},
[190348] = {
true,
false,
"fuchsia",
},
[239836] = {
true,
false,
"orange",
},
[130404] = {
false,
false,
"peru",
},
[135235] = {
false,
false,
"goldenrod",
},
[165414] = {
true,
false,
"magenta",
},
[151476] = {
true,
false,
"aqua",
},
[194315] = {
true,
false,
"fuchsia",
},
[130661] = {
true,
false,
"fuchsia",
},
[214264] = {
true,
false,
"aqua",
},
[168357] = {
true,
false,
"fuchsia",
},
[193293] = {
true,
false,
"aqua",
},
[210812] = {
true,
false,
"fuchsia",
},
[163882] = {
true,
false,
"fuchsia",
},
[195851] = {
false,
false,
"white",
},
[134599] = {
false,
false,
"lightskyblue",
},
[194317] = {
true,
false,
"fuchsia",
},
[169893] = {
true,
false,
"aqua",
},
[224240] = {
true,
false,
"aqua",
},
[134600] = {
false,
false,
"peru",
},
[201223] = {
true,
false,
"fuchsia",
},
[135240] = {
true,
false,
"fuchsia",
},
[217208] = {
true,
false,
"fuchsia",
},
[59545] = {
true,
false,
"fuchsia",
},
[135241] = {
true,
false,
"fuchsia",
},
[133835] = {
true,
false,
"fuchsia",
},
[222964] = {
true,
false,
"fuchsia",
},
[100485] = {
true,
false,
"aqua",
},
[133836] = {
true,
false,
"fuchsia",
},
[187160] = {
true,
false,
"aqua",
},
[187033] = {
true,
false,
"aqua",
},
[210818] = {
true,
false,
"fuchsia",
},
[192788] = {
true,
false,
"fuchsia",
},
[59546] = {
true,
false,
"fuchsia",
},
[102788] = {
true,
false,
"fuchsia",
},
[189464] = {
true,
false,
"fuchsia",
},
[76446] = {
true,
false,
"dodgerblue",
},
[192789] = {
true,
false,
"aqua",
},
[134990] = {
false,
false,
"honeydew",
},
[138187] = {
true,
false,
"fuchsia",
},
[197905] = {
true,
false,
"fuchsia",
},
[131666] = {
true,
false,
"fuchsia",
},
[212739] = {
true,
false,
"orange",
},
[163891] = {
true,
false,
"fuchsia",
},
[45928] = {
true,
false,
"aqua",
},
[144071] = {
true,
false,
"fuchsia",
},
[190362] = {
true,
false,
"fuchsia",
},
[224249] = {
true,
false,
"aqua",
},
[223994] = {
true,
false,
"fuchsia",
},
[213892] = {
true,
false,
"fuchsia",
},
[220158] = {
true,
false,
"aqua",
},
[163126] = {
true,
false,
"fuchsia",
},
[193944] = {
true,
false,
"fuchsia",
},
[81819] = {
true,
false,
"fuchsia",
},
[213893] = {
true,
false,
"fuchsia",
},
[131670] = {
false,
false,
"palegreen",
},
[189470] = {
true,
false,
"fuchsia",
},
[163128] = {
true,
false,
"fuchsia",
},
[168627] = {
true,
false,
"fuchsia",
},
[186658] = {
true,
false,
"fuchsia",
},
[206351] = {
true,
false,
"fuchsia",
},
[164920] = {
true,
false,
"aqua",
},
[216326] = {
true,
false,
"fuchsia",
},
[131545] = {
true,
false,
"fuchsia",
},
[190368] = {
true,
false,
"fuchsia",
},
[164921] = {
true,
false,
"fuchsia",
},
[153285] = {
false,
false,
"no color",
},
[168886] = {
true,
false,
"fuchsia",
},
[134232] = {
true,
false,
"fuchsia",
},
[45930] = {
true,
false,
"fuchsia",
},
[211341] = {
true,
false,
"fuchsia",
},
[40943] = {
true,
false,
"fuchsia",
},
[192800] = {
true,
false,
"fuchsia",
},
[211087] = {
true,
false,
"fuchsia",
},
[131677] = {
false,
false,
"lightskyblue",
},
[135258] = {
false,
false,
"peru",
},
[220423] = {
true,
false,
"aqua",
},
[164414] = {
true,
false,
"fuchsia",
},
[133852] = {
false,
false,
"olivedrab",
},
[128434] = {
true,
false,
"fuchsia",
},
[190373] = {
true,
false,
"fuchsia",
},
[211089] = {
true,
false,
"aqua",
},
[113537] = {
true,
false,
"aqua",
},
[84957] = {
true,
false,
"fuchsia",
},
[197535] = {
true,
false,
"fuchsia",
},
[198047] = {
true,
false,
"fuchsia",
},
[128435] = {
false,
false,
"aqua",
},
[205151] = {
true,
false,
"aqua",
},
[205337] = {
true,
false,
"fuchsia",
},
[153292] = {
false,
false,
"fuchsia",
},
[129367] = {
true,
false,
"fuchsia",
},
[165824] = {
true,
false,
"fuchsia",
},
[164929] = {
true,
false,
"aqua",
},
[134364] = {
false,
false,
"honeydew",
},
[231839] = {
true,
false,
"orange",
},
[230748] = {
true,
false,
"fuchsia",
},
[206698] = {
true,
false,
"fuchsia",
},
[214673] = {
true,
false,
"fuchsia",
},
[135007] = {
false,
false,
"lightskyblue",
},
[229251] = {
true,
false,
"orange",
},
[135263] = {
false,
false,
"maroon",
},
[151657] = {
true,
false,
"fuchsia",
},
[195876] = {
true,
false,
"fuchsia",
},
[190403] = {
true,
false,
"aqua",
},
[190377] = {
true,
false,
"fuchsia",
},
[164506] = {
true,
false,
"fuchsia",
},
[129553] = {
true,
false,
"fuchsia",
},
[229252] = {
true,
false,
"fuchsia",
},
[210966] = {
true,
false,
"fuchsia",
},
[134157] = {
false,
false,
"peru",
},
[195877] = {
true,
false,
"fuchsia",
},
[208450] = {
true,
false,
"orange",
},
[137484] = {
false,
false,
"lightskyblue",
},
[131812] = {
true,
false,
"fuchsia",
},
[212793] = {
true,
false,
"fuchsia",
},
[164804] = {
true,
false,
"aqua",
},
[198927] = {
true,
false,
"aqua",
},
[134417] = {
false,
false,
"lightskyblue",
},
[216338] = {
true,
false,
"aqua",
},
[213806] = {
true,
false,
"fuchsia",
},
[131685] = {
true,
false,
"fuchsia",
},
[102287] = {
true,
false,
"aqua",
},
[205363] = {
true,
false,
"fuchsia",
},
[174210] = {
true,
false,
"magenta",
},
[45919] = {
true,
false,
"aqua",
},
[91001] = {
true,
false,
"aqua",
},
[216339] = {
true,
false,
"fuchsia",
},
[214421] = {
true,
false,
"orange",
},
[130635] = {
true,
false,
"fuchsia",
},
[220815] = {
true,
false,
"fuchsia",
},
[133007] = {
true,
false,
"aqua",
},
[95766] = {
true,
false,
"aqua",
},
[139422] = {
false,
false,
"lightskyblue",
},
[196044] = {
true,
false,
"fuchsia",
},
[223776] = {
true,
false,
"fuchsia",
},
[208438] = {
true,
false,
"aqua",
},
[104270] = {
true,
false,
"fuchsia",
},
[212403] = {
true,
false,
"fuchsia",
},
[136353] = {
false,
false,
"royalblue",
},
[167876] = {
true,
false,
"magenta",
},
[199717] = {
true,
false,
"fuchsia",
},
[138465] = {
true,
false,
"aqua",
},
[59552] = {
true,
false,
"fuchsia",
},
[134629] = {
false,
false,
"navajowhite",
},
[167493] = {
true,
false,
"fuchsia",
},
[170690] = {
true,
false,
"magenta",
},
[213934] = {
true,
false,
"aqua",
},
[200137] = {
true,
false,
"fuchsia",
},
[138338] = {
true,
false,
"fuchsia",
},
[165919] = {
true,
false,
"fuchsia",
},
[216342] = {
true,
false,
"fuchsia",
},
[197912] = {
true,
false,
"fuchsia",
},
[211228] = {
true,
false,
"fuchsia",
},
[131817] = {
true,
false,
"aqua",
},
[220946] = {
true,
false,
"orange",
},
[213913] = {
true,
false,
"fuchsia",
},
[186420] = {
true,
false,
"fuchsia",
},
[167111] = {
true,
false,
"fuchsia",
},
[136549] = {
true,
false,
"aqua",
},
[135365] = {
true,
false,
"fuchsia",
},
[163086] = {
true,
false,
"orange",
},
[131818] = {
false,
false,
"plum",
},
[213338] = {
true,
false,
"fuchsia",
},
[194894] = {
true,
false,
"fuchsia",
},
[184023] = {
true,
false,
"fuchsia",
},
[164552] = {
true,
false,
"fuchsia",
},
[125977] = {
false,
false,
"plum",
},
[98691] = {
false,
false,
"aqua",
},
[144303] = {
false,
false,
"fuchsia",
},
[131819] = {
true,
false,
"fuchsia",
},
[189235] = {
true,
false,
"fuchsia",
},
[47238] = {
true,
false,
"fuchsia",
},
[136295] = {
false,
false,
"peru",
},
[231380] = {
true,
false,
"fuchsia",
},
[133482] = {
true,
false,
"aqua",
},
[41139] = {
true,
false,
"fuchsia",
},
[137830] = {
true,
false,
"fuchsia",
},
[96664] = {
true,
false,
"fuchsia",
},
[169927] = {
true,
false,
"fuchsia",
},
[141283] = {
false,
false,
"navajowhite",
},
[189247] = {
true,
false,
"fuchsia",
},
[185528] = {
true,
false,
"fuchsia",
},
[185656] = {
true,
false,
"fuchsia",
},
[197698] = {
true,
false,
"aqua",
},
[223773] = {
true,
false,
"fuchsia",
},
[131821] = {
true,
false,
"fuchsia",
},
[84990] = {
true,
false,
"fuchsia",
},
[193457] = {
true,
false,
"aqua",
},
[134251] = {
false,
false,
"honeydew",
},
[185529] = {
true,
false,
"fuchsia",
},
[81820] = {
true,
false,
"fuchsia",
},
[194316] = {
true,
false,
"fuchsia",
},
[168318] = {
true,
false,
"fuchsia",
},
[196115] = {
true,
false,
"fuchsia",
},
[95834] = {
true,
false,
"fuchsia",
},
[129529] = {
false,
false,
"goldenrod",
},
[223253] = {
true,
false,
"fuchsia",
},
[45935] = {
true,
false,
"fuchsia",
},
[207459] = {
true,
false,
"fuchsia",
},
[168942] = {
true,
false,
"fuchsia",
},
[137516] = {
false,
false,
"lightsalmon",
},
[141285] = {
false,
false,
"lightgreen",
},
[134331] = {
false,
false,
"lightskyblue",
},
[189265] = {
true,
false,
"fuchsia",
},
[190342] = {
true,
false,
"fuchsia",
},
[134139] = {
false,
false,
"lightskyblue",
},
[208165] = {
true,
false,
"fuchsia",
},
[133685] = {
true,
false,
"fuchsia",
},
[98275] = {
true,
false,
"aqua",
},
[133870] = {
true,
false,
"fuchsia",
},
[204206] = {
true,
false,
"fuchsia",
},
[95771] = {
true,
false,
"fuchsia",
},
[228540] = {
true,
false,
"fuchsia",
},
[220314] = {
true,
false,
"fuchsia",
},
[131436] = {
true,
false,
"aqua",
},
[207198] = {
true,
false,
"fuchsia",
},
[139949] = {
false,
false,
"honeydew",
},
[187155] = {
true,
false,
"fuchsia",
},
[141284] = {
false,
false,
"lightskyblue",
},
[231312] = {
true,
false,
"fuchsia",
},
[133432] = {
true,
false,
"fuchsia",
},
[59555] = {
true,
false,
"fuchsia",
},
[98521] = {
true,
false,
"fuchsia",
},
[102232] = {
true,
false,
"fuchsia",
},
[170572] = {
true,
false,
"fuchsia",
},
[134701] = {
false,
false,
"maroon",
},
[207468] = {
true,
false,
"fuchsia",
},
[220060] = {
true,
false,
"fuchsia",
},
[163458] = {
true,
false,
"fuchsia",
},
[136186] = {
false,
false,
"honeydew",
},
[126919] = {
true,
false,
"fuchsia",
},
[168578] = {
true,
false,
"fuchsia",
},
[98706] = {
true,
false,
"aqua",
},
[75979] = {
true,
false,
"fuchsia",
},
[221979] = {
true,
false,
"fuchsia",
},
[196798] = {
true,
false,
"fuchsia",
},
[193462] = {
true,
false,
"fuchsia",
},
[144293] = {
true,
false,
"orange",
},
[163157] = {
true,
false,
"fuchsia",
},
[212389] = {
true,
false,
"fuchsia",
},
[223770] = {
true,
false,
"fuchsia",
},
[186229] = {
true,
false,
"aqua",
},
[131585] = {
false,
false,
"navajowhite",
},
[196671] = {
true,
false,
"aqua",
},
[189266] = {
true,
false,
"aqua",
},
[165076] = {
true,
false,
"magenta",
},
[134514] = {
false,
false,
"lightgreen",
},
[129788] = {
true,
false,
"fuchsia",
},
[135474] = {
true,
false,
"fuchsia",
},
[144295] = {
true,
false,
"fuchsia",
},
[184130] = {
true,
false,
"aqua",
},
[199603] = {
true,
false,
"fuchsia",
},
[208193] = {
true,
false,
"fuchsia",
},
[131318] = {
false,
false,
"fuchsia",
},
[190405] = {
true,
false,
"fuchsia",
},
[188067] = {
true,
false,
"fuchsia",
},
[223772] = {
true,
false,
"fuchsia",
},
[191164] = {
true,
false,
"fuchsia",
},
[212775] = {
true,
false,
"fuchsia",
},
[206697] = {
true,
false,
"fuchsia",
},
[189340] = {
true,
false,
"aqua",
},
[131586] = {
false,
false,
"peru",
},
[130435] = {
false,
false,
"magenta",
},
[135239] = {
false,
false,
"paleturquoise",
},
[104278] = {
true,
false,
"fuchsia",
},
[164567] = {
true,
false,
"fuchsia",
},
[184132] = {
true,
false,
"fuchsia",
},
[95769] = {
true,
false,
"fuchsia",
},
[134144] = {
false,
false,
"lightgreen",
},
[192333] = {
true,
false,
"fuchsia",
},
[163503] = {
true,
false,
"fuchsia",
},
[214439] = {
true,
false,
"fuchsia",
},
[206064] = {
true,
false,
"fuchsia",
},
[166275] = {
true,
false,
"fuchsia",
},
[190407] = {
true,
false,
"fuchsia",
},
[190294] = {
true,
false,
"fuchsia",
},
[216293] = {
true,
false,
"fuchsia",
},
[194895] = {
true,
false,
"fuchsia",
},
[231496] = {
true,
false,
"fuchsia",
},
[224271] = {
true,
false,
"fuchsia",
},
[223775] = {
true,
false,
"fuchsia",
},
[75459] = {
true,
false,
"fuchsia",
},
[190381] = {
true,
false,
"fuchsia",
},
[206704] = {
true,
false,
"orange",
},
[220195] = {
true,
false,
"fuchsia",
},
[205727] = {
true,
false,
"fuchsia",
},
[98792] = {
true,
false,
"aqua",
},
[98370] = {
true,
false,
"fuchsia",
},
[113998] = {
true,
false,
"aqua",
},
[214697] = {
true,
false,
"orange",
},
[134284] = {
true,
false,
"fuchsia",
},
[190401] = {
true,
false,
"aqua",
},
[220196] = {
true,
false,
"fuchsia",
},
[40167] = {
true,
false,
"fuchsia",
},
[184301] = {
true,
false,
"fuchsia",
},
[43873] = {
true,
false,
"aqua",
},
[223777] = {
true,
false,
"fuchsia",
},
[195927] = {
true,
false,
"fuchsia",
},
[195878] = {
true,
false,
"fuchsia",
},
[134137] = {
false,
false,
"dodgerblue",
},
[220197] = {
true,
false,
"aqua",
},
[127106] = {
false,
false,
"peru",
},
[230740] = {
true,
false,
"aqua",
},
[134418] = {
false,
false,
"dodgerblue",
},
[101991] = {
true,
false,
"fuchsia",
},
[174802] = {
true,
false,
"fuchsia",
},
[191847] = {
true,
false,
"fuchsia",
},
[213932] = {
true,
false,
"fuchsia",
},
[129600] = {
true,
false,
"fuchsia",
},
[44404] = {
true,
false,
"fuchsia",
},
[89] = {
true,
false,
"fuchsia",
},
[210539] = {
true,
false,
"orange",
},
[209801] = {
true,
false,
"aqua",
},
[40634] = {
true,
false,
"fuchsia",
},
[160495] = {
true,
false,
"magenta",
},
},
["aura_alpha"] = 0.84999996423721,
["color_override_colors"] = {
[3] = {
nil,
0.2784313,
0.2078431,
},
[4] = {
1,
0.83921568627451,
0,
},
[5] = {
0.29019607843137,
1,
0.19607843137255,
},
},
["extra_icon_timer_size"] = 10,
["aura_sort"] = true,
["plater_resources_anchor"] = {
["y"] = 40,
["x"] = 0,
["side"] = 8,
},
["target_shady_alpha"] = 0.59999996423721,
["castbar_target_outline"] = "NONE",
["cast_statusbar_bgcolor"] = {
0,
0,
0,
0.79781,
},
["bossmod_icons_anchor"] = {
["y"] = 30,
["x"] = 0,
["side"] = 8,
},
["cast_statusbar_spark_color"] = {
0.98823529411765,
[3] = 0.94117647058823,
},
["aura2_x_offset"] = 2.099990844726563,
["saved_cvars"] = {
["nameplateShowOnlyNames"] = "1",
["nameplateOverlapV"] = "1.1",
["ShowNamePlateLoseAggroFlash"] = "1",
["nameplateShowEnemyMinus"] = "1",
["NamePlateClassificationScale"] = "1",
["nameplateShowFriendlyTotems"] = "0",
["nameplatePersonalHideDelaySeconds"] = "0.2",
["nameplateShowFriendlyPets"] = "0",
["nameplatePersonalShowInCombat"] = "1",
["nameplateTargetRadialPosition"] = "1",
["nameplateMinAlpha"] = "0.90135484",
["nameplateResourceOnTarget"] = "0",
["nameplateShowAll"] = "1",
["nameplateMaxDistance"] = "100",
["nameplateShowFriendlyMinions"] = "0",
["nameplateSelfScale"] = "1.0",
["nameplateTargetBehindMaxDistance"] = "30",
["SoftTargetInteract"] = "3",
["nameplateShowEnemies"] = "1",
["NamePlateVerticalScale"] = "1",
["nameplateSelectedAlpha"] = "1",
["nameplateShowSelf"] = "0",
["nameplatePersonalShowAlways"] = "0",
["nameplateMotionSpeed"] = "0.05",
["nameplateGlobalScale"] = "1.0",
["nameplateShowEnemyMinions"] = "1",
["nameplateShowFriendlyNPCs"] = "0",
["nameplateSelectedScale"] = "1.15",
["nameplateShowFriends"] = "1",
["nameplateMotion"] = "1",
["nameplateMinScale"] = "1",
["nameplatePersonalShowWithTarget"] = "0",
["nameplateOtherTopInset"] = "0.085",
["nameplateSelfAlpha"] = "0.75",
["nameplateSelfBottomInset"] = "0.2",
["NamePlateHorizontalScale"] = "1",
["nameplateShowFriendlyGuardians"] = "0",
["nameplateOccludedAlphaMult"] = "1",
["nameplateSelfTopInset"] = "0.5",
["ShowClassColorInNameplate"] = "1",
["nameplateLargeTopInset"] = "0.085",
["nameplateMinAlphaDistance"] = "-158489.31924611",
},
["pet_height_scale"] = 0.9999999403953552,
["aura_x_offset"] = 0,
["login_counter"] = 23940,
["version"] = 3,
["aura_cooldown_show_swipe"] = false,
["aura_tracker"] = {
["debuff"] = {
224991,
277950,
},
["buff_tracked"] = {
["280001"] = true,
["328501"] = false,
[233210] = true,
[297133] = true,
["329181"] = false,
[163689] = true,
[227931] = true,
},
["debuff_tracked"] = {
["341408"] = true,
["324652"] = false,
["281242"] = true,
},
["debuff_banned"] = {
["331653"] = true,
["330911"] = true,
[458478] = false,
["327980"] = true,
[447513] = true,
["281242"] = true,
[376084] = true,
[391568] = false,
[449217] = true,
["299151"] = true,
[452545] = false,
[452229] = true,
["284678"] = true,
[273977] = false,
[206930] = false,
["340007"] = true,
},
["buff_banned"] = {
["206150"] = true,
["333553"] = true,
["61574"] = true,
["281242"] = true,
["61573"] = true,
},
},
["extra_icon_caster_font"] = "Quazii",
["blizzard_nameplate_font_size"] = 10,
["click_space_friendly"] = {
92,
1,
},
["target_highlight_alpha"] = 1,
["extra_icon_auras_mine"] = {
["277242"] = false,
["224991"] = true,
},
["blizzard_nameplate_font"] = "Quazii",
["aura_stack_font"] = "Quazii",
["patch_version"] = 39,
["no_spellname_length_limit"] = true,
["castbar_framelevel"] = 0,
["aura_timer_text_size"] = 10,
["extra_icon_show_timer"] = false,
["auto_toggle_combat"] = {
["blizz_healthbar_ic"] = true,
["blizz_healthbar_ooc"] = true,
},
["number_region_first_run"] = true,
["plater_resources_show"] = false,
["bossmod_aura_height"] = 32,
["aura_grow_direction"] = 3,
["plater_resources_grow_direction"] = "center",
["extra_icon_caster_name"] = false,
["target_highlight_height"] = 18,
["OptionsPanelDB"] = {
["PlaterOptionsPanelFrame"] = {
["scale"] = 1.200000047683716,
},
},
["news_frame"] = {
["PlaterNewsFrame"] = {
["scale"] = 1,
},
},
["aura_width2"] = 16,
["aura_height2"] = 12,
["dps"] = {
["colors"] = {
["aggro"] = {
nil,
0.0470588281750679,
},
["pulling"] = {
nil,
0.96078431372549,
0.95294117647059,
},
},
},
["health_statusbar_bgcolor"] = {
0.04313725605607033,
0.04313725605607033,
0.04313725605607033,
1,
},
["buff_frame_anchor_and_size_migrated"] = true,
["first_run2"] = true,
["castbar_target_anchor"] = {
["side"] = 11,
},
["aura2_grow_direction"] = 3,
["aura_timer_text_shadow_color"] = {
nil,
nil,
nil,
0,
},
["auras_per_row_amount"] = 4,
["plater_resources_padding"] = 2,
["cast_statusbar_spark_width"] = 25,
["extra_icon_height"] = 10,
},
},
}
PlaterLanguage = {
["language"] = "enUS",
["version"] = 1,
}
PlaterLogs = {
["_general_logs"] = {
"2025-07-27 16:28:53 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adamn",
"2025-07-27 15:39:39 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adamn",
"2025-07-27 15:00:01 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adamian",
"2025-07-27 10:27:35 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adamian",
"2025-07-27 10:24:53 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Aduum",
"2025-07-27 10:20:43 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Aduum",
"2025-07-27 10:10:44 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Drunkan",
"2025-07-27 09:34:49 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Dreg",
"2025-07-26 09:52:35 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Badam",
"2025-07-26 09:23:52 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adrid",
"2025-07-26 09:22:30 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Adrid",
"2025-07-25 23:40:40 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Kayne",
"2025-07-25 23:36:31 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Kayne",
"2025-07-25 23:34:59 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Drunkan",
"2025-07-25 23:12:51 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Abel",
"2025-07-25 23:11:19 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Amdam",
"2025-07-25 23:05:43 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Kaydan",
"2025-07-25 22:53:38 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Kaydan",
"2025-07-25 22:09:34 | INIT | Plater-v611-Retail | Framework v612 | 11.1.7 | enUS | Kaydan",
},
["_error_logs"] = {
},
}
PlaterBackup = {
}
